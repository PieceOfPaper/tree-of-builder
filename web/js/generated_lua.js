var lua_script = (function() {
  var tmp;
  var G = lua_newtable2(lua_core);
  for (var i in lua_libs) {
    G.str[i] = lua_newtable2(lua_libs[i]);
  }
  G.str['arg'] = lua_newtable();
  G.str['_G'] = G;
  G.str['module'] = function (name) {
    lua_createmodule(G, name, slice(arguments, 1));
  };
  G.str['require'] = function (name) {
    lua_require(G, name);
  };
  G.str['package'].str['seeall'] = function (module) {
    if (!module.metatable) {
      module.metatable = lua_newtable();
    }
    module.metatable.str['__index'] = G;
  };
  {
    G.str['GET_SKL_VALUE'] = (function (_skill, _startValue, _maxValue) {
      var tmp;
      var _maxLv_2 = 100;
      var _curLv_2 = lua_tableget(_skill, 'Level');
      var _rate_2 = lua_divide(_curLv_2, _maxLv_2);
      _rate_2 = lua_tablegetcall(G.str['math'], 'pow', [_rate_2, 0.7])[0];
      return [lua_add(_startValue, lua_multiply(_rate_2, (lua_subtract(_maxValue, _startValue))))];
      return [];
    })
    G.str['SCR_GET_SKL_ATK'] = (function (_skill) {
      var tmp;
      var _value_3 = lua_tableget(_skill, 'SklATKValue');
      var _propvalue_3 = lua_call(G.str['GetClassNumber'], ['SklRankUp', lua_tableget(_skill, 'ATKRankType'), 'IncreaseValue'])[0];
      _value_3 = lua_add(_value_3, lua_multiply(lua_tableget(_skill, 'SklATK_BM'), _propvalue_3));
      return [_value_3];
      return [];
    })
    G.str['SCR_GET_SKL_CastTime'] = (function (_skill) {
      var tmp;
      var _value_4 = lua_tableget(_skill, 'CastTimeValue');
      _value_4 = lua_add(_value_4, lua_tableget(_skill, 'CastTime_BM'));
      return [_value_4];
      return [];
    })
    G.str['SCR_GET_SKL_CoolDown'] = (function (_skill) {
      var tmp;
      var _value_5 = lua_tableget(_skill, 'CoolDownValue');
      var _propvalue_5 = lua_call(G.str['GetClassNumber'], ['SklRankUp', lua_tableget(_skill, 'CoolDownRankType'), 'IncreaseValue'])[0];
      _value_5 = lua_add(_value_5, lua_multiply(lua_tableget(_skill, 'CoolDown_BM'), _propvalue_5));
      return [_value_5];
      return [];
    })
    G.str['SCR_Get_SpendSP_BUNSIN'] = (function (_skill) {
      var tmp;
      var _value_6 = lua_call(G.str['SCR_Get_SpendSP'], [_skill])[0];
      var _pc_6 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_lt(_value_6, 1)) {
        _value_6 = 0;
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_6, "Bunshin_Debuff"])[0], "YES")) {
        var _Bunshin_8 = lua_call(G.str['GetSkill'], [_pc_6, 'Shinobi_Bunshin_no_jutsu'])[0];
        _value_6 = lua_add(_value_6, (lua_multiply(_value_6, (lua_multiply(lua_tableget(_Bunshin_8, 'Level'), 0.1)))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_6]);
      return [];
    })
    G.str['SCR_Get_SpendSP'] = (function (_skill) {
      var tmp;
      var _basicSP_9 = lua_tableget(_skill, 'BasicSP');
      var _decsp_9 = 0;
      var _bylvCorrect_9 = 0;
      if (lua_eq(_basicSP_9, 0)) {
        return [0];
      }
      var _pc_9 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _lv_9 = lua_tableget(_pc_9, 'Lv');
      _bylvCorrect_9 = lua_subtract(_lv_9, 300);
      if (lua_lt(_bylvCorrect_9, 0)) {
        _bylvCorrect_9 = lua_divide(lua_multiply(_bylvCorrect_9, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_9)) {
        _bylvCorrect_9 = lua_divide(lua_multiply(_bylvCorrect_9, 1.25), 1000);
      }
      var _value_9 = lua_multiply(_basicSP_9, (lua_add(1, _bylvCorrect_9)));
      var _abilAddSP_9 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_9, lua_tableget(_skill, 'ClassName'), "SP"])[0];
      _abilAddSP_9 = lua_divide(_abilAddSP_9, 100);
      _value_9 = lua_add(_value_9, (lua_multiply(_value_9, _abilAddSP_9)));
      var _zeminaSP_9 = lua_call(G.str['GetExProp'], [_pc_9, "ZEMINA_BUFF_SP"])[0];
      if (!lua_eq(_zeminaSP_9, 0)) {
        _decsp_9 = lua_multiply(_value_9, _zeminaSP_9);
      }
      _value_9 = lua_subtract(_value_9, _decsp_9);
      if (lua_lt(_value_9, 1)) {
        _value_9 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_9]);
      return [];
    })
    G.str['SCR_Get_SpendSP_Magic'] = (function (_skill) {
      var tmp;
      var _value_15 = lua_call(G.str['SCR_Get_SpendSP'], [_skill])[0];
      var _pc_15 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_15, 'Wizard_Wild_buff'])[0], 'YES')) {
        _value_15 = lua_multiply(lua_multiply(_value_15, 1.5), G.str['spRatio']);
        return lua_tablegetcall(G.str['math'], 'floor', [_value_15]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_15, 'MalleusMaleficarum_Debuff'])[0], 'YES')) {
        _value_15 = lua_multiply(_value_15, 2);
        return lua_tablegetcall(G.str['math'], 'floor', [_value_15]);
      }
      if (lua_lt(_value_15, 1)) {
        _value_15 = 0;
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_15, 'ShadowPool_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassName'), "Shadowmancer_ShadowPool"))) {
        _value_15 = 0;
      }
      if ((lua_eq(lua_tableget(_skill, 'ClassName'), "Oracle_TwistOfFate") && lua_eq(lua_call(G.str['GetZoneName'], [_pc_15])[0], "guild_agit_1"))) {
        return [0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_15]);
      return [];
    })
    G.str['SCR_Get_SpendSP_EnableCompanion_Warrior'] = (function (_skill) {
      var tmp;
      var _value_21 = lua_call(G.str['SCR_Get_SpendSP'], [_skill])[0];
      var _pc_21 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_lt(_value_21, 1)) {
        _value_21 = 0;
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_21, "AcrobaticMount_Buff"])[0], "YES")) {
        if ((lua_eq(lua_call(G.str['TryGetProp'], [_skill, "EnableCompanion"])[0], "YES") && lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ValueType"])[0], "Attack"))) {
          if (lua_eq(lua_call(G.str['IsServerSection'], [])[0], 1)) {
            var _acrobaticBuff_25 = lua_call(G.str['GetBuffByName'], [_pc_21, "AcrobaticMount_Buff"])[0];
            var _acrobaticBuffLevel_25 = lua_call(G.str['GetBuffArg'], [_acrobaticBuff_25])[0];
            var _acrobaticAddSPRate_25 = lua_multiply(_acrobaticBuffLevel_25, 0.05);
            _value_21 = lua_multiply(_value_21, (lua_add(1, _acrobaticAddSPRate_25)));
            lua_call(G.str['SetExProp'], [_acrobaticBuff_25, "ACROBATICMOUNT_SPENDSP"].concat(lua_tablegetcall(G.str['math'], 'floor', [_value_21])));
          } else {
            var _acrobaticBuff_26 = lua_call(G.str['GET_BUFF_BY_NAME_C'], ["AcrobaticMount_Buff"])[0];
            var _acrobaticBuffLevel_26 = lua_tableget(_acrobaticBuff_26, 'arg1');
            var _acrobaticAddSPRate_26 = lua_multiply(_acrobaticBuffLevel_26, 0.05);
            _value_21 = lua_multiply(_value_21, (lua_add(1, _acrobaticAddSPRate_26)));
          }
        }
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_21]);
      return [];
    })
    G.str['SCR_Get_SpendSP_FanaticIllusion'] = (function (_skill) {
      var tmp;
      var _basicSP_27 = 25;
      var _decsp_27 = 0;
      var _bylvCorrect_27 = 0;
      if (lua_eq(G.str['basicsp'], 0)) {
        return [0];
      }
      var _pc_27 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _lv_27 = lua_tableget(_pc_27, 'Lv');
      _bylvCorrect_27 = lua_subtract(_lv_27, 300);
      if (lua_lt(_bylvCorrect_27, 0)) {
        _bylvCorrect_27 = lua_divide(lua_multiply(_bylvCorrect_27, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_27)) {
        _bylvCorrect_27 = lua_divide(lua_multiply(_bylvCorrect_27, 1.25), 1000);
      }
      var _value_27 = lua_multiply(_basicSP_27, (lua_add(1, _bylvCorrect_27)));
      var _abilAddSP_27 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_27, lua_tableget(_skill, 'ClassName'), "SP"])[0];
      _abilAddSP_27 = lua_divide(_abilAddSP_27, 100);
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_27, 'Wizard_Wild_buff'])[0], 'YES')) {
        _value_27 = lua_multiply(lua_multiply(_value_27, 1.5), G.str['spRatio']);
        return lua_tablegetcall(G.str['math'], 'floor', [_value_27]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_27, 'MalleusMaleficarum_Debuff'])[0], 'YES')) {
        _value_27 = lua_multiply(_value_27, 2);
        return lua_tablegetcall(G.str['math'], 'floor', [_value_27]);
      }
      _value_27 = lua_add(_value_27, (lua_multiply(_value_27, _abilAddSP_27)));
      var _zeminaLv_27 = lua_call(G.str['GetExProp'], [_pc_27, "ZEMINA_BUFF_LV"])[0];
      if (lua_lt(0, _zeminaLv_27)) {
        _decsp_27 = lua_add(4, (lua_multiply(_zeminaLv_27, 4)));
      }
      _value_27 = lua_subtract(_value_27, _decsp_27);
      if (lua_lt(_value_27, 1)) {
        _value_27 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_27]);
      return [];
    })
    G.str['SCR_Get_SpendPoison'] = (function (_skill) {
      var tmp;
      var _lv_35 = lua_tableget(_skill, 'Level');
      var _lvUpSpendPoison_35 = lua_tableget(_skill, 'LvUpSpendPoison');
      var _basicsp_35 = lua_add(lua_tableget(_skill, 'BasicPoison'), lua_multiply(_lvUpSpendPoison_35, (lua_subtract(_lv_35, 1))));
      var _pc_35 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_35 = lua_call(G.str['GetAbility'], [_pc_35, "SavePoison"])[0];
      if (!lua_eq(_abil_35, null)) {
        _basicsp_35 = lua_subtract(_basicsp_35, (lua_multiply(_basicsp_35, (lua_multiply(lua_tableget(_abil_35, 'Level'), 0.01)))));
      }
      if (lua_eq(_basicsp_35, 0)) {
        return [0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_basicsp_35]);
      return [];
    })
    G.str['SCR_Skill_STA'] = (function (_skill) {
      var tmp;
      var _basicsta_38 = lua_tableget(_skill, 'BasicSta');
      if (lua_eq(_basicsta_38, 0)) {
        return [0];
      }
      var _pc_38 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_multiply(_basicsta_38, 1000)];
      return [];
    })
    G.str['SCR_Skill_SubweaponCancel_STA'] = (function (_skill) {
      var tmp;
      var _basicsta_40 = lua_tableget(_skill, 'BasicSta');
      if (lua_eq(_basicsta_40, 0)) {
        return [0];
      }
      var _pc_40 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _jolly_40 = lua_call(G.str['GetSkill'], [_pc_40, 'Corsair_JollyRoger'])[0];
      if ((!lua_eq(_jolly_40, null) && lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_40, 'JollyRoger_Buff'])[0], 'YES'))) {
        _basicsta_40 = lua_subtract(_basicsta_40, (lua_multiply(_basicsta_40, (lua_multiply(lua_tableget(_jolly_40, 'Level'), 0.05)))));
      }
      return [lua_multiply(_basicsta_40, 1000)];
      return [];
    })
    G.str['SCR_Skill_DoublePunch_STA'] = (function (_skill) {
      var tmp;
      var _basicsta_43 = lua_tableget(_skill, 'BasicSta');
      if (lua_eq(_basicsta_43, 0)) {
        return [0];
      }
      var _pc_43 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_43 = lua_call(G.str['GetAbility'], [_pc_43, 'Monk10'])[0];
      if ((!lua_eq(_abil_43, null) && lua_eq(lua_tableget(_abil_43, 'ActiveState'), 1))) {
        var _random_45 = lua_call(G.str['IMCRandom'], [1, 100])[0];
        if (lua_lte(51, _random_45)) {
          _basicsta_43 = lua_divide(_basicsta_43, 2);
        } else {
          return [lua_multiply(_basicsta_43, 1000)];
        }
      }
      return [lua_multiply(_basicsta_43, 1000)];
      return [];
    })
    G.str['SCR_GET_SKL_CAST'] = (function (_skill) {
      var tmp;
      var _pc_48 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCast_48 = lua_tableget(_skill, 'BasicCast');
      if (lua_eq(_basicCast_48, 0)) {
        return [0];
      }
      return [lua_divide(lua_multiply(_basicCast_48, (lua_subtract(100, lua_tableget(_pc_48, 'SPEED_BM')))), 100)];
      return [];
    })
    G.str['SCR_GET_BonusSkilDam'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'BonusDam')];
      return [];
    })
    G.str['SCR_GET_SKL_CAST_ABIL'] = (function (_skill) {
      var tmp;
      var _basicCast_51 = lua_tableget(_skill, 'BasicCast');
      return [_basicCast_51];
      return [];
    })
    G.str['SCR_GET_SKL_READY'] = (function (_skill) {
      var tmp;
      var _pc_52 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _stnTime_52 = lua_call(G.str['GetStanceReadyTime'], [_pc_52])[0];
      var _sklFix_52 = lua_tableget(_skill, 'ReadyFix');
      var _byItem_52 = lua_call(G.str['GetSumOfEquipItem'], [_pc_52, "ReadyFix"])[0];
      var _resultValue_52 = lua_add(lua_add(_stnTime_52, _sklFix_52), _byItem_52);
      _resultValue_52 = lua_multiply(_resultValue_52, lua_tableget(_skill, 'SkillASPD'));
      return lua_tablegetcall(G.str['math'], 'max', [0, _resultValue_52]);
      return [];
    })
    G.str['SCR_GET_SKL_READY_ARC'] = (function (_skill) {
      var tmp;
      var _pc_53 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _stnTime_53 = lua_call(G.str['GetStanceReadyTime'], [_pc_53])[0];
      var _sklFix_53 = lua_tableget(_skill, 'ReadyFix');
      var _resultValue_53 = lua_add(_stnTime_53, _sklFix_53);
      return lua_tablegetcall(G.str['math'], 'max', [0, _resultValue_53]);
      return [];
    })
    G.str['SCR_GET_SKL_HITCOUNT'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'SklHitCount')];
      return [];
    })
    G.str['SCR_GET_SKL_HITCOUNT_BOW'] = (function (_skill) {
      var tmp;
      var _pc_55 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _rItem_55 = lua_call(G.str['GetEquipItem'], [_pc_55, 'RH'])[0];
      var _weaponType_55 = lua_tableget(_rItem_55, 'ClassType');
      if (lua_eq(_weaponType_55, 'Bow')) {
        if (!lua_eq(lua_tableget(_rItem_55, 'ArrowCount'), 0)) {
          return [lua_tableget(_rItem_55, 'ArrowCount')];
        }
      }
      return [lua_tableget(_skill, 'SklHitCount')];
      return [];
    })
    G.str['SCR_GET_SKL_READY_RF'] = (function (_skill) {
      var tmp;
      var _pc_58 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _stnTime_58 = lua_call(G.str['GetStanceReadyTime'], [_pc_58])[0];
      var _sklFix_58 = lua_tableget(_skill, 'ReadyFix');
      var _resultValue_58 = lua_add(lua_add(_stnTime_58, _sklFix_58), lua_tableget(_pc_58, 'ASPD'));
      return lua_tablegetcall(G.str['math'], 'max', [0, _resultValue_58]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN'] = (function (_skill) {
      var tmp;
      var _pc_59 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_59 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_59 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_59, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_59 = lua_add(_basicCoolDown_59, _abilAddCoolDown_59);
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Cleric_Heal")) {
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_59])[0], 1)) {
          _basicCoolDown_59 = lua_add(_basicCoolDown_59, 28000);
        }
      }
      var _laimaCoolTime_59 = lua_call(G.str['GetExProp'], [_pc_59, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_59, 0)) {
        _basicCoolDown_59 = lua_multiply(_basicCoolDown_59, (lua_subtract(1, _laimaCoolTime_59)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_59, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_59 = lua_multiply(_basicCoolDown_59, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_59, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_59 = lua_multiply(_basicCoolDown_59, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_59, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_59 = lua_multiply(_basicCoolDown_59, 0.5);
        }
      }
      var _ret_59 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_59])[0], 1000);
      _ret_59 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_59])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_59]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_BUNSIN'] = (function (_skill) {
      var tmp;
      var _pc_67 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_67 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_67 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_67, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_67 = lua_add(_basicCoolDown_67, _abilAddCoolDown_67);
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Cleric_Heal")) {
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_67])[0], 1)) {
          _basicCoolDown_67 = lua_add(_basicCoolDown_67, 28000);
        }
      }
      var _laimaCoolTime_67 = lua_call(G.str['GetExProp'], [_pc_67, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_67, 0)) {
        _basicCoolDown_67 = lua_multiply(_basicCoolDown_67, (lua_subtract(1, _laimaCoolTime_67)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_67, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_67 = lua_multiply(_basicCoolDown_67, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_67, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_67 = lua_multiply(_basicCoolDown_67, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_67, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_67 = lua_multiply(_basicCoolDown_67, 0.5);
        }
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_67, "Bunshin_Debuff"])[0], "YES")) {
        var _bunsinCount_75 = lua_call(G.str['GET_BUNSIN_COUNT'], [_pc_67])[0];
        _basicCoolDown_67 = lua_add(_basicCoolDown_67, (lua_add(lua_multiply(_bunsinCount_75, 2000), (lua_multiply(_basicCoolDown_67, (lua_multiply(_bunsinCount_75, 0.1)))))));
      }
      var _ret_67 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_67])[0], 1000);
      _ret_67 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_67])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_67]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_PrimeAndLoad'] = (function (_skill) {
      var tmp;
      var _pc_76 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_76 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_76 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_76, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_76 = lua_add(_basicCoolDown_76, _abilAddCoolDown_76);
      var _abilMusketeer29_76 = lua_call(G.str['GetAbility'], [_pc_76, "Musketeer29"])[0];
      if ((!lua_eq(_abilMusketeer29_76, null) && lua_eq(lua_tableget(_abilMusketeer29_76, 'ActiveState'), 1))) {
        _basicCoolDown_76 = lua_subtract(_basicCoolDown_76, (lua_multiply(lua_tableget(_abilMusketeer29_76, 'Level'), 1000)));
      }
      var _laimaCoolTime_76 = lua_call(G.str['GetExProp'], [_pc_76, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_76, 0)) {
        _basicCoolDown_76 = lua_multiply(_basicCoolDown_76, (lua_subtract(1, _laimaCoolTime_76)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_76, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_76 = lua_multiply(_basicCoolDown_76, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_76, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_76 = lua_multiply(_basicCoolDown_76, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_76, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_76 = lua_multiply(_basicCoolDown_76, 0.5);
        }
      }
      var _ret_76 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_76])[0], 1000);
      _ret_76 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_76])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_76]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_CounterSpell'] = (function (_skill) {
      var tmp;
      var _pc_83 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_83 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_83 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_83, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_83 = lua_subtract(lua_add(_basicCoolDown_83, _abilAddCoolDown_83), (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Cleric_Heal")) {
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_83])[0], 1)) {
          _basicCoolDown_83 = lua_add(_basicCoolDown_83, 28000);
        }
      }
      var _laimaCoolTime_83 = lua_call(G.str['GetExProp'], [_pc_83, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_83, 0)) {
        _basicCoolDown_83 = lua_multiply(_basicCoolDown_83, (lua_subtract(1, _laimaCoolTime_83)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_83, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_83 = lua_multiply(_basicCoolDown_83, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_83, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_83 = lua_multiply(_basicCoolDown_83, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_83, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_83 = lua_multiply(_basicCoolDown_83, 0.5);
        }
      }
      var _ret_83 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_83])[0], 1000);
      _ret_83 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_83])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_83]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_ABIL'] = (function (_skill) {
      var tmp;
      var _basicCoolDown_91 = lua_tableget(_skill, 'BasicCoolDown');
      return [_basicCoolDown_91];
      return [];
    })
    G.str['SCR_GET_SKL_CoolDown_BackSlide'] = (function (_skill) {
      var tmp;
      var _pc_92 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_92 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_92 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_92, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_92 = lua_subtract((lua_add(_basicCoolDown_92, _abilAddCoolDown_92)), (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Cleric_Heal")) {
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_92])[0], 1)) {
          _basicCoolDown_92 = lua_add(_basicCoolDown_92, 28000);
        }
      }
      var _laimaCoolTime_92 = lua_call(G.str['GetExProp'], [_pc_92, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_92, 0)) {
        _basicCoolDown_92 = lua_multiply(_basicCoolDown_92, (lua_subtract(1, _laimaCoolTime_92)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_92, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_92 = lua_multiply(_basicCoolDown_92, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_92, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_92 = lua_multiply(_basicCoolDown_92, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_92, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_92 = lua_multiply(_basicCoolDown_92, 0.5);
        }
      }
      var _ret_92 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_92])[0], 1000);
      _ret_92 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_92])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_92]);
      return [];
    })
    G.str['SCR_GET_SKL_CoolDown_Prevent'] = (function (_skill) {
      var tmp;
      var _pc_100 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_100 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_100 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_100, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_100 = lua_subtract((lua_add(_basicCoolDown_100, _abilAddCoolDown_100)), (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Cleric_Heal")) {
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_100])[0], 1)) {
          _basicCoolDown_100 = lua_add(_basicCoolDown_100, 28000);
        }
      }
      var _laimaCoolTime_100 = lua_call(G.str['GetExProp'], [_pc_100, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_100, 0)) {
        _basicCoolDown_100 = lua_multiply(_basicCoolDown_100, (lua_subtract(1, _laimaCoolTime_100)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_100, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_100 = lua_multiply(_basicCoolDown_100, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_100, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_100 = lua_multiply(_basicCoolDown_100, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_100, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_100 = lua_multiply(_basicCoolDown_100, 0.5);
        }
      }
      var _ret_100 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_100])[0], 1000);
      _ret_100 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_100])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_100]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_MISTWIND'] = (function (_skill) {
      var tmp;
      var _basicCoolDown_108 = lua_tableget(_skill, 'BasicCoolDown');
      var _pc_108 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      _basicCoolDown_108 = lua_subtract(_basicCoolDown_108, lua_multiply(100, lua_tableget(_pc_108, 'INT')));
      if (lua_lt(0, lua_tableget(_pc_108, 'MistWind_BM'))) {
        return [lua_divide(lua_multiply(_basicCoolDown_108, (lua_subtract(100, lua_tableget(_pc_108, 'MistWind_BM')))), 100)];
      }
      if (lua_lt(_basicCoolDown_108, lua_tableget(_skill, 'MinCoolDown'))) {
        return [lua_tableget(_skill, 'MinCoolDown')];
      }
      return [_basicCoolDown_108];
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_Golden_Bell_Shield'] = (function (_skill) {
      var tmp;
      var _pc_111 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_111 = lua_tableget(_skill, 'BasicCoolDown');
      _basicCoolDown_111 = lua_subtract(_basicCoolDown_111, (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      if (lua_lt(_basicCoolDown_111, 0)) {
        _basicCoolDown_111 = 0;
      }
      var _abilAddCoolDown_111 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_111, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_111 = lua_add(_basicCoolDown_111, _abilAddCoolDown_111);
      var _laimaCoolTime_111 = lua_call(G.str['GetExProp'], [_pc_111, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_111, 0)) {
        _basicCoolDown_111 = lua_multiply(_basicCoolDown_111, (lua_subtract(1, _laimaCoolTime_111)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_111, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_111 = lua_multiply(_basicCoolDown_111, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_111, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_111 = lua_multiply(_basicCoolDown_111, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_111])[0], 1)) {
        _basicCoolDown_111 = lua_add(_basicCoolDown_111, 10000);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_111]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_VisibleTalent'] = (function (_skill) {
      var tmp;
      var _pc_117 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_117 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_117 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_117, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_117 = lua_subtract(lua_add(_basicCoolDown_117, _abilAddCoolDown_117), (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 1000)));
      var _laimaCoolTime_117 = lua_call(G.str['GetExProp'], [_pc_117, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_117, 0)) {
        _basicCoolDown_117 = lua_multiply(_basicCoolDown_117, (lua_subtract(1, _laimaCoolTime_117)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_117, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_117 = lua_multiply(_basicCoolDown_117, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_117, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_117 = lua_multiply(_basicCoolDown_117, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_117, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_117 = lua_multiply(_basicCoolDown_117, 0.5);
        }
      }
      var _ret_117 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_117])[0], 1000);
      _ret_117 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_117])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_117]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_Chronomancer_Stop'] = (function (_skill) {
      var tmp;
      var _pc_123 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_123 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_123 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_123, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_123 = lua_subtract(lua_add(_basicCoolDown_123, _abilAddCoolDown_123), (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 5000)));
      var _laimaCoolTime_123 = lua_call(G.str['GetExProp'], [_pc_123, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_123, 0)) {
        _basicCoolDown_123 = lua_multiply(_basicCoolDown_123, (lua_subtract(1, _laimaCoolTime_123)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_123, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_123 = lua_multiply(_basicCoolDown_123, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_123, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_123 = lua_multiply(_basicCoolDown_123, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_123, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_123 = lua_multiply(_basicCoolDown_123, 0.5);
        }
      }
      var _ret_123 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_123])[0], 1000);
      _ret_123 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_123])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_123]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_WIZARD'] = (function (_skill) {
      var tmp;
      var _pc_129 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_129 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_129 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_129, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_129 = lua_add(_basicCoolDown_129, _abilAddCoolDown_129);
      var _laimaCoolTime_129 = lua_call(G.str['GetExProp'], [_pc_129, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_129, 0)) {
        _basicCoolDown_129 = lua_multiply(_basicCoolDown_129, (lua_subtract(1, _laimaCoolTime_129)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_129, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_129 = lua_multiply(_basicCoolDown_129, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_129, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_129 = lua_multiply(_basicCoolDown_129, 0.9);
      }
      if (lua_lt(_basicCoolDown_129, lua_tableget(_skill, 'MinCoolDown'))) {
        return [lua_tableget(_skill, 'MinCoolDown')];
      }
      return [_basicCoolDown_129];
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_SummonFamiliar'] = (function (_skill) {
      var tmp;
      var _pc_134 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_134 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_134 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_134, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_134 = lua_add(_basicCoolDown_134, _abilAddCoolDown_134);
      var _laimaCoolTime_134 = lua_call(G.str['GetExProp'], [_pc_134, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_134, 0)) {
        _basicCoolDown_134 = lua_multiply(_basicCoolDown_134, (lua_subtract(1, _laimaCoolTime_134)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_134, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_134 = lua_multiply(_basicCoolDown_134, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_134, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_134 = lua_multiply(_basicCoolDown_134, 0.9);
      }
      if (lua_lt(_basicCoolDown_134, lua_tableget(_skill, 'MinCoolDown'))) {
        return [lua_tableget(_skill, 'MinCoolDown')];
      }
      _basicCoolDown_134 = lua_subtract(_basicCoolDown_134, (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      return [_basicCoolDown_134];
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_Bloodletting'] = (function (_skill) {
      var tmp;
      var _pc_139 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_139 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_139 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_139, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_139 = lua_add(_basicCoolDown_139, _abilAddCoolDown_139);
      var _laimaCoolTime_139 = lua_call(G.str['GetExProp'], [_pc_139, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_139, 0)) {
        _basicCoolDown_139 = lua_multiply(_basicCoolDown_139, (lua_subtract(1, _laimaCoolTime_139)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_139, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_139 = lua_multiply(_basicCoolDown_139, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_139, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_139 = lua_multiply(_basicCoolDown_139, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_139, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_139 = lua_multiply(_basicCoolDown_139, 0.5);
        }
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_139])[0], 1)) {
        _basicCoolDown_139 = lua_add(_basicCoolDown_139, 20000);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_139]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_HealingFactor'] = (function (_skill) {
      var tmp;
      var _pc_146 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_146 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_146 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_146, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_146 = lua_add(_basicCoolDown_146, _abilAddCoolDown_146);
      var _laimaCoolTime_146 = lua_call(G.str['GetExProp'], [_pc_146, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_146, 0)) {
        _basicCoolDown_146 = lua_multiply(_basicCoolDown_146, (lua_subtract(1, _laimaCoolTime_146)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_146, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_146 = lua_multiply(_basicCoolDown_146, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_146, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_146 = lua_multiply(_basicCoolDown_146, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_146, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_146 = lua_multiply(_basicCoolDown_146, 0.5);
        }
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_146])[0], 1)) {
        _basicCoolDown_146 = lua_add(_basicCoolDown_146, 20000);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_146]);
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_GravityPole'] = (function (_skill) {
      var tmp;
      var _pc_153 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_153 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_153 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_153, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_153 = lua_add(_basicCoolDown_153, _abilAddCoolDown_153);
      var _laimaCoolTime_153 = lua_call(G.str['GetExProp'], [_pc_153, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_153, 0)) {
        _basicCoolDown_153 = lua_multiply(_basicCoolDown_153, (lua_subtract(1, _laimaCoolTime_153)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_153, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_153 = lua_multiply(_basicCoolDown_153, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_153, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_153 = lua_multiply(_basicCoolDown_153, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_153])[0], 1)) {
        _basicCoolDown_153 = lua_add(_basicCoolDown_153, 15000);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_153]);
      return [];
    })
    G.str['SCR_Get_WaveLength'] = (function (_skill) {
      var tmp;
      var _pc_158 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      tmp = lua_call(G.str['GetOverWritedProp'], [_pc_158, _skill, "WaveLength"]); var _overWriteExist_158 = tmp[0]; var _overWritedValue_158 = tmp[1]; tmp = null;
      if (lua_eq(_overWriteExist_158, 1.0)) {
        return [_overWritedValue_158];
      }
      var _waveLength_158 = lua_tableget(_skill, 'SklWaveLength');
      if (lua_eq(lua_tableget(_skill, 'SplType'), "Square")) {
        _waveLength_158 = lua_add(lua_add(_waveLength_158, lua_tableget(_pc_158, 'SkillRange')), lua_call(G.str['TryGet'], [_pc_158, lua_concat(lua_tableget(_skill, 'AttackType'), "_Range")])[0]);
      }
      return [_waveLength_158];
      return [];
    })
    G.str['SCR_Get_Skl_SR'] = (function (_skill) {
      var tmp;
      var _sklSR_161 = lua_tableget(_skill, 'SklSR');
      var _pc_161 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _sumValue_161 = lua_call(G.str['GetSumValueByItem'], [_pc_161, _skill, "SR"])[0];
      return [lua_add(_sklSR_161, _sumValue_161)];
      return [];
    })
    G.str['SCR_SPLANGLE'] = (function (_skill) {
      var tmp;
      var _pc_162 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      tmp = lua_call(G.str['GetOverWritedProp'], [_pc_162, _skill, "SplAngle"]); var _overWriteExist_162 = tmp[0]; var _overWritedValue_162 = tmp[1]; tmp = null;
      if (lua_eq(_overWriteExist_162, 1.0)) {
        return [_overWritedValue_162];
      }
      var _splType_162 = lua_tableget(_skill, 'SplType');
      if (!lua_eq(_splType_162, "Fan")) {
        return [lua_tableget(_skill, 'SklSplAngle')];
      }
      return [lua_add(lua_tableget(_skill, 'SklSplAngle'), lua_tableget(_pc_162, 'SkillAngle'))];
      return [];
    })
    G.str['SCR_Get_SplRange'] = (function (_skill) {
      var tmp;
      var _pc_165 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      tmp = lua_call(G.str['GetOverWritedProp'], [_pc_165, _skill, "SplRange"]); var _overWriteExist_165 = tmp[0]; var _overWritedValue_165 = tmp[1]; tmp = null;
      if (lua_eq(_overWriteExist_165, 1.0)) {
        return [_overWritedValue_165];
      }
      var _splRange_165 = lua_tableget(_skill, 'SklSplRange');
      var _splType_165 = lua_tableget(_skill, 'SplType');
      if (lua_eq(_splType_165, "Fan")) {
        _splRange_165 = lua_add(lua_add(_splRange_165, lua_tableget(_pc_165, 'SkillRange')), lua_call(G.str['TryGet'], [_pc_165, lua_concat(lua_tableget(_skill, 'AttackType'), "_Range")])[0]);
      } else if (lua_eq(_splType_165, "Square")) {
        _splRange_165 = lua_add(_splRange_165, lua_tableget(_pc_165, 'SkillAngle'));
      }
      return [_splRange_165];
      return [];
    })
    G.str['SCR_Get_Skl_BackHit'] = (function (_skill) {
      var tmp;
      var _pc_169 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      tmp = lua_call(G.str['GetOverWritedProp'], [_pc_169, _skill, "BackHitRange"]); var _overWriteExist_169 = tmp[0]; var _overWritedValue_169 = tmp[1]; tmp = null;
      if (lua_eq(_overWriteExist_169, 1.0)) {
        return [_overWritedValue_169];
      }
      return [0];
      return [];
    })
    G.str['SCR_Get_SkillFactor'] = (function (_skill) {
      var tmp;
      var _sklFactor_171;
      var _skillOwner_171 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_tableget(_skillOwner_171, 'ClassName'), 'PC')) {
        var _atkType_172 = lua_tableget(_skill, 'AttackType');
        var _attribute_172 = lua_tableget(_skill, 'Attribute');
        var _atkTypebyItem_172 = lua_call(G.str['GetSumOfEquipItem'], [_skillOwner_171, _atkType_172])[0];
        var _attributebyItem_172 = lua_call(G.str['GetSumOfEquipItem'], [_skillOwner_171, _attribute_172])[0];
        _sklFactor_171 = lua_add(lua_add(lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel'))), _atkTypebyItem_172), _attributebyItem_172);
        return lua_tablegetcall(G.str['math'], 'floor', [_sklFactor_171]);
      } else {
        _sklFactor_171 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
        return lua_tablegetcall(G.str['math'], 'floor', [_sklFactor_171]);
      }
      return [];
    })
    G.str['SCR_Get_SkillFactor_Reinforce_Ability'] = (function (_skill) {
      var tmp;
      var _pc_174 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_174 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply(lua_tableget(_skill, 'SklFactorByLevel'), (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      var _reinfabil_174 = lua_tableget(_skill, 'ReinforceAbility');
      var _abil_174 = lua_call(G.str['GetAbility'], [_pc_174, _reinfabil_174])[0];
      if ((!lua_eq(_abil_174, null) && !lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ReinforceAbility"])[0], 'None'))) {
        var _abilLevel_175 = lua_call(G.str['TryGetProp'], [_abil_174, "Level"])[0];
        var _masterAddValue_175 = 0;
        if (lua_eq(_abilLevel_175, 100)) {
          _masterAddValue_175 = 0.1;
        }
        var _value_175 = lua_multiply(_value_174, (lua_add(1, (lua_add((lua_multiply(_abilLevel_175, 0.005)), _masterAddValue_175)))));
        return lua_tablegetcall(G.str['math'], 'floor', [_value_175]);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_174]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_Molich_4'] = (function (_skill) {
      var tmp;
      var _self_177 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _buff_177 = lua_call(G.str['GetBuffByName'], [_self_177, 'Melee_charging'])[0];
      var _buffOver_177 = 0;
      if (!lua_eq(_buff_177, null)) {
        _buffOver_177 = lua_call(G.str['GetOver'], [_buff_177])[0];
      }
      G.str['sklFactor'] = lua_add(lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel'))), _buffOver_177);
      return lua_tablegetcall(G.str['math'], 'floor', [G.str['sklFactor']]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_Molich_5'] = (function (_skill) {
      var tmp;
      var _self_179 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _buff_179 = lua_call(G.str['GetBuffByName'], [_self_179, 'Magic_charging'])[0];
      var _buffOver_179 = 0;
      if (!lua_eq(_buff_179, null)) {
        _buffOver_179 = lua_call(G.str['GetOver'], [_buff_179])[0];
      }
      G.str['sklFactor'] = lua_add(lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel'))), _buffOver_179);
      return lua_tablegetcall(G.str['math'], 'floor', [G.str['sklFactor']]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_PC_summon_Canceril'] = (function (_skill) {
      var tmp;
      var _self_181 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _parent_181 = lua_call(G.str['GetOwner'], [_self_181])[0];
      G.str['sklFactor'] = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      return lua_tablegetcall(G.str['math'], 'floor', [G.str['sklFactor']]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_pc_summon_Manticen'] = (function (_skill) {
      var tmp;
      var _self_182 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _parent_182 = lua_call(G.str['GetOwner'], [_self_182])[0];
      G.str['sklFactor'] = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      return lua_tablegetcall(G.str['math'], 'floor', [G.str['sklFactor']]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_pcskill_shogogoth'] = (function (_skill) {
      var tmp;
      var _self_183 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_183 = lua_call(G.str['GetOwner'], [_self_183])[0];
      var _value_183 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      var _abil_183 = lua_call(G.str['GetAbility'], [_pc_183, "Necromancer5"])[0];
      if (!lua_eq(_abil_183, null)) {
        _value_183 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_183, _value_183])[0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_183]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_pcskill_CorpseTower'] = (function (_skill) {
      var tmp;
      var _self_185 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_185 = lua_call(G.str['GetOwner'], [_self_185])[0];
      var _value_185 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      var _abil_185 = lua_call(G.str['GetAbility'], [_pc_185, "Necromancer6"])[0];
      if (!lua_eq(_abil_185, null)) {
        _value_185 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_185, _value_185])[0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_185]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_pcskill_skullsoldier'] = (function (_skill) {
      var tmp;
      var _self_187 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_187 = lua_call(G.str['GetTopOwner'], [_self_187])[0];
      var _value_187 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      var _abil_187 = lua_call(G.str['GetAbility'], [_pc_187, "Necromancer7"])[0];
      if (!lua_eq(_abil_187, null)) {
        _value_187 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_187, _value_187])[0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_187]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_pcskill_skullarcher'] = (function (_skill) {
      var tmp;
      var _self_189 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_189 = lua_call(G.str['GetTopOwner'], [_self_189])[0];
      var _value_189 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      var _abil_189 = lua_call(G.str['GetAbility'], [_pc_189, "Necromancer10"])[0];
      if (!lua_eq(_abil_189, null)) {
        _value_189 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_189, _value_189])[0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_189]);
      return [];
    })
    G.str['SCR_Get_SklAtkAdd'] = (function (_skill) {
      var tmp;
      var _sklAtkAdd_191;
      var _skillOwner_191 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_tableget(_skillOwner_191, 'ClassName'), 'PC')) {
        _sklAtkAdd_191 = lua_add(lua_tableget(_skill, 'SklAtkAdd'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklAtkAddByLevel')));
        return lua_tablegetcall(G.str['math'], 'floor', [_sklAtkAdd_191]);
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_Get_ReinforceAtk'] = (function (_skill) {
      var tmp;
      var _ReinforceAtkAdd_194 = 0;
      var _self_194 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_tableget(_self_194, 'ClassName'), 'PC')) {
        var _weapon_195 = lua_call(G.str['GetEquipItem'], [_self_194, 'RH'])[0];
        var _Transcend_195 = lua_tableget(_weapon_195, 'Transcend');
        _ReinforceAtkAdd_194 = lua_add(lua_tableget(_skill, 'ReinforceAtkAdd'), lua_multiply(_Transcend_195, lua_tableget(_skill, 'ReinforceAtkAddByLevel')));
        return [_ReinforceAtkAdd_194];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_Get_NormalAttack_Lv'] = (function (_skill) {
      var tmp;
      var _pc_197 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_197 = lua_tableget(_pc_197, 'Lv');
      return lua_tablegetcall(G.str['math'], 'floor', [_value_197]);
      return [];
    })
    G.str['SCR_ABIL_ADD_SKILLFACTOR'] = (function (_abil, _value) {
      var tmp;
      var _abilLevel_198 = lua_call(G.str['TryGetProp'], [_abil, "Level"])[0];
      var _masterAddValue_198 = 0;
      if (lua_eq(_abilLevel_198, 100)) {
        _masterAddValue_198 = 0.1;
      }
      var _value_198 = lua_multiply(_value, (lua_add(1, (lua_add((lua_multiply(_abilLevel_198, 0.005)), _masterAddValue_198)))));
      return [_value_198];
      return [];
    })
    G.str['SCR_REINFORCEABILITY_TOOLTIP'] = (function (_skill) {
      var tmp;
      var _pc_200 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _addAbilRate_200 = 1;
      var _reinforceAbilName_200 = lua_call(G.str['TryGetProp'], [_skill, "ReinforceAbility", "None"])[0];
      if (!lua_eq(_reinforceAbilName_200, "None")) {
        var _reinforceAbil_201 = lua_call(G.str['GetAbility'], [_pc_200, _reinforceAbilName_200])[0];
        if (!lua_eq(_reinforceAbil_201, null)) {
          var _abilLevel_202 = lua_call(G.str['TryGetProp'], [_reinforceAbil_201, "Level"])[0];
          var _masterAddValue_202 = 0;
          if (lua_eq(_abilLevel_202, 100)) {
            _masterAddValue_202 = 0.1;
          }
          _addAbilRate_200 = lua_add(1, (lua_add(lua_multiply(lua_tableget(_reinforceAbil_201, 'Level'), 0.005), _masterAddValue_202)));
        }
      }
      return [_addAbilRate_200];
      return [];
    })
    G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'] = (function (_abil) {
      var tmp;
      return [lua_multiply(lua_tableget(_abil, 'Level'), 1)];
      return [];
    })
    G.str['SCR_GET_Thrust_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_205 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_205 = lua_call(G.str['GetAbility'], [_pc_205, "Swordman2"])[0];
      var _value_205 = 0;
      if (!lua_eq(_abil_205, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_205]);
      }
      return [];
    })
    G.str['SCR_GET_Bash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_207 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_207 = lua_call(G.str['GetAbility'], [_pc_207, "Swordman1"])[0];
      var _value_207 = 0;
      if (!lua_eq(_abil_207, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_207]);
      }
      return [];
    })
    G.str['SCR_GET_PommelBeat_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_209 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_209 = lua_call(G.str['GetAbility'], [_pc_209, "Swordman25"])[0];
      var _value_209 = 0;
      if (!lua_eq(_abil_209, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_209]);
      }
      return [];
    })
    G.str['SCR_GET_PommelBeat_Ratio'] = (function (_skill) {
      var tmp;
      return [(lua_add(1, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 0.5)))];
      return [];
    })
    G.str['SCR_GET_DoubleSlash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_212 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_212 = lua_call(G.str['GetAbility'], [_pc_212, "Swordman27"])[0];
      var _value_212 = 0;
      if (!lua_eq(_abil_212, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_212]);
      }
      return [];
    })
    G.str['SCR_GET_RimBlow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_214 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_214 = lua_call(G.str['GetAbility'], [_pc_214, "Peltasta11"])[0];
      var _value_214 = 0;
      if (!lua_eq(_abil_214, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_214]);
      }
      return [];
    })
    G.str['SCR_GET_UmboBlow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_216 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_216 = lua_call(G.str['GetAbility'], [_pc_216, "Peltasta12"])[0];
      var _value_216 = 0;
      if (!lua_eq(_abil_216, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_216]);
      }
      return [];
    })
    G.str['SCR_GET_SR_LV_ShieldLob'] = (function (_skill) {
      var tmp;
      var _pc_218 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _Peltasta4_abil_218 = lua_call(G.str['GetAbility'], [_pc_218, 'Peltasta4'])[0];
      if ((!lua_eq(_Peltasta4_abil_218, null) && lua_eq(1, lua_tableget(_Peltasta4_abil_218, 'ActiveState')))) {
        return [lua_add(lua_add(lua_tableget(_pc_218, 'SR'), lua_tableget(_skill, 'SklSR')), lua_tableget(_Peltasta4_abil_218, 'Level'))];
      }
      return [lua_add(lua_tableget(_pc_218, 'SR'), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_GET_ShieldLob_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_220 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_220 = lua_call(G.str['GetAbility'], [_pc_220, "Peltasta14"])[0];
      var _value_220 = 0;
      if (!lua_eq(_abil_220, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_220]);
      }
      return [];
    })
    G.str['SCR_GET_SR_LV_PommelBeat'] = (function (_skill) {
      var tmp;
      var _pc_222 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_tableget(_skill, 'SklSR')];
      return [];
    })
    G.str['SCR_GET_ButterFly_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_223 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_223 = lua_call(G.str['GetAbility'], [_pc_223, "Peltasta22"])[0];
      var _value_223 = 0;
      if (!lua_eq(_abil_223, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_223]);
      }
      return [];
    })
    G.str['SCR_GET_UmboThrust_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_225 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_225 = lua_call(G.str['GetAbility'], [_pc_225, "Peltasta26"])[0];
      var _value_225 = 0;
      if (!lua_eq(_abil_225, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_225]);
      }
      return [];
    })
    G.str['SCR_GET_Langort_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_227 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_227 = lua_call(G.str['GetAbility'], [_pc_227, "Peltasta27"])[0];
      var _value_227 = 0;
      if (!lua_eq(_abil_227, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_227]);
      }
      return [];
    })
    G.str['SCR_GET_SR_LV_HEX'] = (function (_skill) {
      var tmp;
      var _value_229 = lua_tableget(_skill, 'Level');
      return [_value_229];
      return [];
    })
    G.str['SCR_GET_Moulinet_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_230 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_230 = lua_call(G.str['GetAbility'], [_pc_230, "Highlander14"])[0];
      var _value_230 = 0;
      if (!lua_eq(_abil_230, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_230]);
      }
      return [];
    })
    G.str['SCR_GET_CartarStroke_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_232 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_232 = lua_call(G.str['GetAbility'], [_pc_232, "Highlander11"])[0];
      var _value_232 = 0;
      if (!lua_eq(_abil_232, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_232]);
      }
      return [];
    })
    G.str['SCR_GET_CartarStroke_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_234 = 0.5;
      return [_value_234];
      return [];
    })
    G.str['SCR_GET_WagonWheel_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_235 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_235 = lua_call(G.str['GetAbility'], [_pc_235, "Highlander13"])[0];
      var _value_235 = 0;
      if (!lua_eq(_abil_235, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_235]);
      }
      return [];
    })
    G.str['SCR_GET_Crown_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_237 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_237 = lua_call(G.str['GetAbility'], [_pc_237, "Highlander12"])[0];
      var _value_237 = 0;
      if (!lua_eq(_abil_237, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_237]);
      }
      return [];
    })
    G.str['SCR_GET_ScullSwing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_239 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_239 = lua_call(G.str['GetAbility'], [_pc_239, "Highlander25"])[0];
      var _value_239 = 0;
      if (!lua_eq(_abil_239, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_239]);
      }
      return [];
    })
    G.str['SCR_GET_SkyLiner_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_241 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_241 = lua_call(G.str['GetAbility'], [_pc_241, "Highlander29"])[0];
      var _value_241 = 0;
      if (!lua_eq(_abil_241, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_241]);
      }
      return [];
    })
    G.str['SCR_GET_CrossCut_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_243 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_243 = lua_call(G.str['GetAbility'], [_pc_243, "Highlander30"])[0];
      var _value_243 = 0;
      if (!lua_eq(_abil_243, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_243]);
      }
      return [];
    })
    G.str['SCR_GET_VerticalSlash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_245 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_245 = lua_call(G.str['GetAbility'], [_pc_245, "Highlander31"])[0];
      var _value_245 = 0;
      if (!lua_eq(_abil_245, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_245]);
      }
      return [];
    })
    G.str['SCR_GET_Stabbing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_247 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_247 = lua_call(G.str['GetAbility'], [_pc_247, "Hoplite11"])[0];
      var _value_247 = 0;
      if (!lua_eq(_abil_247, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_247]);
      }
      return [];
    })
    G.str['SCR_GET_LongStride_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_249 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_249 = lua_call(G.str['GetAbility'], [_pc_249, "Hoplite12"])[0];
      var _value_249 = 0;
      if (!lua_eq(_abil_249, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_249]);
      }
      return [];
    })
    G.str['SCR_GET_SynchroThrusting_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_251 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_251 = lua_call(G.str['GetAbility'], [_pc_251, "Hoplite13"])[0];
      var _value_251 = 0;
      if (!lua_eq(_abil_251, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_251]);
      }
      return [];
    })
    G.str['SCR_GET_Pierce_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_253 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_253 = lua_call(G.str['GetAbility'], [_pc_253, "Hoplite14"])[0];
      var _value_253 = 0;
      if (!lua_eq(_abil_253, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_253]);
      }
      return [];
    })
    G.str['SCR_GET_ThrouwingSpear_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_255 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_255 = lua_call(G.str['GetAbility'], [_pc_255, "Hoplite23"])[0];
      var _value_255 = 0;
      if (!lua_eq(_abil_255, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_255]);
      }
      return [];
    })
    G.str['SCR_GET_SpearLunge_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_257 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_257 = lua_call(G.str['GetAbility'], [_pc_257, "Hoplite26"])[0];
      var _value_257 = 0;
      if (!lua_eq(_abil_257, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_257]);
      }
      return [];
    })
    G.str['SCR_GET_Embowel_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_259 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_259 = lua_call(G.str['GetAbility'], [_pc_259, "Barbarian17"])[0];
      var _value_259 = 0;
      if (!lua_eq(_abil_259, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_259]);
      }
      return [];
    })
    G.str['SCR_GET_StompingKick_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_261 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_261 = lua_call(G.str['GetAbility'], [_pc_261, "Barbarian20"])[0];
      var _value_261 = 0;
      if (!lua_eq(_abil_261, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_261]);
      }
      return [];
    })
    G.str['SCR_GET_Pouncing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_263 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_263 = lua_call(G.str['GetAbility'], [_pc_263, "Barbarian24"])[0];
      var _value_263 = 0;
      if (!lua_eq(_abil_263, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_263]);
      }
      return [];
    })
    G.str['SCR_GET_HelmChopper_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_265 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_265 = lua_call(G.str['GetAbility'], [_pc_265, "Barbarian25"])[0];
      var _value_265 = 0;
      if (!lua_eq(_abil_265, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_265]);
      }
      return [];
    })
    G.str['SCR_GET_Seism_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_267 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_267 = lua_call(G.str['GetAbility'], [_pc_267, "Barbarian26"])[0];
      var _value_267 = 0;
      if (!lua_eq(_abil_267, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_267]);
      }
      return [];
    })
    G.str['SCR_GET_Seism_Ratio2'] = (function (_skill) {
      var tmp;
      var _hitCount_269 = 3;
      return [_hitCount_269];
      return [];
    })
    G.str['SCR_GET_Cleave_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_270 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_270 = lua_call(G.str['GetAbility'], [_pc_270, "Barbarian27"])[0];
      var _value_270 = 0;
      if (!lua_eq(_abil_270, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_270]);
      }
      return [];
    })
    G.str['SCR_GET_ShieldCharge_Ratio'] = (function (_skill) {
      var tmp;
      var _value_272 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 6)));
      return [_value_272];
      return [];
    })
    G.str['SCR_GET_Montano_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_273 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_273 = lua_call(G.str['GetAbility'], [_pc_273, "Rodelero14"])[0];
      var _value_273 = 0;
      if (!lua_eq(_abil_273, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_273]);
      }
      return [];
    })
    G.str['SCR_GET_TargeSmash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_275 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_275 = lua_call(G.str['GetAbility'], [_pc_275, "Rodelero17"])[0];
      var _value_275 = 0;
      if (!lua_eq(_abil_275, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_275]);
      }
      return [];
    })
    G.str['SCR_GET_ShieldPush_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_277 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_277 = lua_call(G.str['GetAbility'], [_pc_277, "Rodelero20"])[0];
      var _value_277 = 0;
      if (!lua_eq(_abil_277, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_277]);
      }
      return [];
    })
    G.str['SCR_GET_ShieldShoving_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_279 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_279 = lua_call(G.str['GetAbility'], [_pc_279, "Rodelero26"])[0];
      var _value_279 = 0;
      if (!lua_eq(_abil_279, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_279]);
      }
      return [];
    })
    G.str['SCR_GET_ShieldShoving_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_281 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_281 = 1.5;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_281])[0], 1)) {
        _value_281 = 3;
      }
      return [_value_281];
      return [];
    })
    G.str['SCR_GET_ShieldBash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_283 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_283 = lua_call(G.str['GetAbility'], [_pc_283, "Rodelero27"])[0];
      var _value_283 = 0;
      if (!lua_eq(_abil_283, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_283]);
      }
      return [];
    })
    G.str['SCR_GET_Slithering_Ratio'] = (function (_skill) {
      var tmp;
      var _value_285 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_285];
      return [];
    })
    G.str['SCR_GET_Slithering_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_286 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_286];
      return [];
    })
    G.str['SCR_GET_Slithering_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_287 = lua_tableget(_skill, 'Level');
      return [_value_287];
      return [];
    })
    G.str['SCR_GET_ShootingStar_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_288 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_288 = lua_call(G.str['GetAbility'], [_pc_288, "Rodelero23"])[0];
      var _value_288 = 0;
      if (!lua_eq(_abil_288, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_288]);
      }
      return [];
    })
    G.str['SCR_GET_HighKick_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_290 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_290 = lua_call(G.str['GetAbility'], [_pc_290, "Rodelero28"])[0];
      var _value_290 = 0;
      if (!lua_eq(_abil_290, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_290]);
      }
      return [];
    })
    G.str['SCR_GET_Impaler_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_292 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_292 = lua_call(G.str['GetAbility'], [_pc_292, "Cataphract14"])[0];
      var _value_292 = 0;
      if (!lua_eq(_abil_292, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_292]);
      }
      return [];
    })
    G.str['SCR_GET_Impaler_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_294 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_294 = lua_add(8, lua_tableget(_skill, 'Level'));
      var _zone_294 = lua_call(G.str['GetZoneName'], [_pc_294])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_294])[0], 1) || lua_eq(_zone_294, 'pvp_Mine'))) {
        _value_294 = 6;
      }
      return [_value_294];
      return [];
    })
    G.str['SCR_GET_Rush_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_296 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_296 = lua_call(G.str['GetAbility'], [_pc_296, "Cataphract11"])[0];
      var _value_296 = 0;
      if (!lua_eq(_abil_296, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_296]);
      }
      return [];
    })
    G.str['SCR_GET_Rush_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_298 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_298 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _abil_298 = lua_call(G.str['GetAbility'], [_pc_298, "Cataphract1"])[0];
      if ((!lua_eq(_abil_298, null) && lua_eq(lua_tableget(_abil_298, 'ActiveState'), 1))) {
        _value_298 = lua_multiply(_value_298, 1.2);
      }
      return [_value_298];
      return [];
    })
    G.str['SCR_GET_EarthWave_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_300 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_300 = lua_call(G.str['GetAbility'], [_pc_300, "Cataphract17"])[0];
      var _value_300 = 0;
      if (!lua_eq(_abil_300, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_300]);
      }
      return [];
    })
    G.str['SCR_GET_DoomSpike_Ratio'] = (function (_skill) {
      var tmp;
      var _value_302 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_302];
      return [];
    })
    G.str['SCR_GET_SteedCharge_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_303 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_303 = lua_call(G.str['GetAbility'], [_pc_303, "Cataphract20"])[0];
      var _value_303 = 0;
      if (!lua_eq(_abil_303, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_303]);
      }
      return [];
    })
    G.str['SCR_GET_Keelhauling_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_305 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_305 = lua_call(G.str['GetAbility'], [_pc_305, "Corsair11"])[0];
      var _value_305 = 0;
      if (!lua_eq(_abil_305, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_305]);
      }
      return [];
    })
    G.str['SCR_GET_Keelhauling_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_307 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_307 = 2;
      return [_value_307];
      return [];
    })
    G.str['SCR_GET_DustDevil_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_308 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_308 = lua_call(G.str['GetAbility'], [_pc_308, "Corsair12"])[0];
      var _value_308 = 0;
      if (!lua_eq(_abil_308, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_308]);
      }
      return [];
    })
    G.str['SCR_GET_HexenDropper_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_310 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_310 = lua_call(G.str['GetAbility'], [_pc_310, "Corsair13"])[0];
      var _value_310 = 0;
      if (!lua_eq(_abil_310, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_310]);
      }
      return [];
    })
    G.str['SCR_GET_PistolShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_312 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_312 = lua_call(G.str['GetAbility'], [_pc_312, "Corsair16"])[0];
      var _value_312 = 0;
      if (!lua_eq(_abil_312, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_312]);
      }
      return [];
    })
    G.str['SCR_GET_Cyclone_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_314 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_314 = lua_call(G.str['GetAbility'], [_pc_314, "Doppelsoeldner11"])[0];
      var _value_314 = 0;
      if (!lua_eq(_abil_314, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_314]);
      }
      return [];
    })
    G.str['SCR_GET_Cyclone_Ratio2'] = (function (_skill) {
      var tmp;
      return [3.5];
      return [];
    })
    G.str['SCR_GET_Mordschlag_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_317 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_317 = lua_call(G.str['GetAbility'], [_pc_317, "Doppelsoeldner12"])[0];
      var _value_317 = 0;
      if (!lua_eq(_abil_317, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_317]);
      }
      return [];
    })
    G.str['SCR_GET_Punish_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_319 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_319 = lua_call(G.str['GetAbility'], [_pc_319, "Doppelsoeldner13"])[0];
      var _value_319 = 0;
      if (!lua_eq(_abil_319, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_319]);
      }
      return [];
    })
    G.str['SCR_GET_Zornhau_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_321 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_321 = lua_call(G.str['GetAbility'], [_pc_321, "Doppelsoeldner14"])[0];
      var _value_321 = 0;
      if (!lua_eq(_abil_321, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_321]);
      }
      return [];
    })
    G.str['SCR_GET_Zornhau_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_323 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_323 = lua_call(G.str['GetAbility'], [_pc_323, 'Doppelsoeldner22'])[0];
      var _hitCount_323 = 1;
      if (((!lua_eq(_abil_323, null) && lua_lte(6, lua_tableget(_skill, 'Level'))) && lua_eq(lua_tableget(_abil_323, 'ActiveState'), 1))) {
        _hitCount_323 = lua_add(1, lua_tableget(_abil_323, 'Level'));
      }
      return [_hitCount_323];
      return [];
    })
    G.str['SCR_GET_Redel_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_325 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_325 = lua_call(G.str['GetAbility'], [_pc_325, "Doppelsoeldner15"])[0];
      var _value_325 = 0;
      if (!lua_eq(_abil_325, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_325]);
      }
      return [];
    })
    G.str['SCR_GET_Redel_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_327 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_327 = lua_call(G.str['GetAbility'], [_pc_327, "Doppelsoeldner21"])[0];
      var _hitCount_327 = 5;
      if (((!lua_eq(_abil_327, null) && lua_lte(6, lua_tableget(_skill, 'Level'))) && lua_eq(lua_tableget(_abil_327, 'ActiveState'), 1))) {
        _hitCount_327 = 14;
      }
      return [_hitCount_327];
      return [];
    })
    G.str['SCR_GET_Zucken_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_329 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_329 = lua_call(G.str['GetAbility'], [_pc_329, "Doppelsoeldner16"])[0];
      var _value_329 = 0;
      if (!lua_eq(_abil_329, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_329]);
      }
      return [];
    })
    G.str['SCR_GET_Zucken_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_331 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_331 = lua_call(G.str['GetAbility'], [_pc_331, "Doppelsoeldner20"])[0];
      var _hitCount_331 = 4;
      if (((!lua_eq(_abil_331, null) && lua_lte(6, lua_tableget(_skill, 'Level'))) && lua_eq(lua_tableget(_abil_331, 'ActiveState'), 1))) {
        _hitCount_331 = lua_multiply(_hitCount_331, 2);
      }
      return [_hitCount_331];
      return [];
    })
    G.str['SCR_GET_AttaqueComposee_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_333 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_333 = lua_call(G.str['GetAbility'], [_pc_333, "Fencer2"])[0];
      var _value_333 = 0;
      if (!lua_eq(_abil_333, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_333]);
      }
      return [];
    })
    G.str['SCR_GET_Lunge_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_335 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_335 = lua_call(G.str['GetAbility'], [_pc_335, "Fencer3"])[0];
      var _value_335 = 0;
      if (!lua_eq(_abil_335, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_335]);
      }
      return [];
    })
    G.str['SCR_GET_Lunge_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_337 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_337 = lua_add(50, (lua_multiply(20, lua_tableget(_skill, 'Level'))));
      return [_value_337];
      return [];
    })
    G.str['SCR_GET_Lunge_BuffTime'] = (function (_skill) {
      var tmp;
      return [4];
      return [];
    })
    G.str['SCR_GET_SeptEtoiles_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_339 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_339 = lua_call(G.str['GetAbility'], [_pc_339, "Fencer4"])[0];
      var _value_339 = 0;
      if (!lua_eq(_abil_339, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_339]);
      }
      return [];
    })
    G.str['SCR_GET_AttaqueCoquille_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_341 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_341 = lua_call(G.str['GetAbility'], [_pc_341, "Fencer5"])[0];
      var _value_341 = 0;
      if (!lua_eq(_abil_341, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_341]);
      }
      return [];
    })
    G.str['SCR_GET_AttaqueCoquille_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_343 = lua_add(4, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_343];
      return [];
    })
    G.str['SCR_GET_Preparation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_344 = lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_344];
      return [];
    })
    G.str['SCR_GET_Preparation_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_345 = 3;
      return [_value_345];
      return [];
    })
    G.str['SCR_GET_EsquiveToucher_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_346 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_346 = lua_call(G.str['GetAbility'], [_pc_346, "Fencer6"])[0];
      var _value_346 = 0;
      if (!lua_eq(_abil_346, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_346]);
      }
      return [];
    })
    G.str['SCR_GET_EsquiveToucher_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_348 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_348 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_348];
      return [];
    })
    G.str['SCR_GET_Flanconnade_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_349 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_349 = lua_call(G.str['GetAbility'], [_pc_349, "Fencer7"])[0];
      var _value_349 = 0;
      if (!lua_eq(_abil_349, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_349]);
      }
      return [];
    })
    G.str['SCR_GET_Mijin_no_jutsu_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_351 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_351 = lua_call(G.str['GetAbility'], [_pc_351, "Shinobi3"])[0];
      var _value_351 = 0;
      if (!lua_eq(_abil_351, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_351]);
      }
      return [];
    })
    G.str['SCR_GET_Mijin_no_jutsu_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_353 = lua_subtract(7500, lua_multiply(lua_tableget(_skill, 'Level'), 500));
      return [_value_353];
      return [];
    })
    G.str['SCR_GET_Bunshin_no_jutsu_Ratio'] = (function (_skill) {
      var tmp;
      var _value_354 = 20;
      return [_value_354];
      return [];
    })
    G.str['SCR_GET_SummonGuildMember_Ratio'] = (function (_skill) {
      var tmp;
      var _value_355 = lua_multiply(1, lua_tableget(_skill, 'Level'));
      return [_value_355];
      return [];
    })
    G.str['SCR_GET_BattleOrders_Ratio'] = (function (_skill) {
      var tmp;
      var _value_356 = lua_multiply(lua_tableget(_skill, 'Level'), 1.5);
      var _addValue_356 = lua_multiply(lua_tableget(_skill, 'Level'), 1.5);
      _value_356 = lua_add(_value_356, _addValue_356);
      return [_value_356];
      return [];
    })
    G.str['SCR_GET_BattleOrders_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_357 = lua_multiply(lua_tableget(_skill, 'Level'), 1.5);
      _value_357 = lua_multiply(_value_357, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_357];
      return [];
    })
    G.str['SCR_GET_AdvancedOrders_Ratio'] = (function (_skill) {
      var tmp;
      var _value_358 = lua_tableget(_skill, 'Level');
      return [_value_358];
      return [];
    })
    G.str['SCR_GET_AdvancedOrders_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_359 = lua_tableget(_skill, 'Level');
      var _pc_359 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_359])[0], 1)) {
        _value_359 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      }
      return [_value_359];
      return [];
    })
    G.str['SCR_GET_BuildForge_Time'] = (function (_skill) {
      var tmp;
      var _value_361 = lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      var _pc_361 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_361])[0], 1)) {
        _value_361 = lua_multiply(_value_361, 0.5);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_361]);
      return [];
    })
    G.str['SCR_GET_BuildForge_Ratio'] = (function (_skill) {
      var tmp;
      var _value_363 = 73;
      _value_363 = lua_multiply(_value_363, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_363]);
      return [];
    })
    G.str['SCR_GET_FlyingColors_Ratio'] = (function (_skill) {
      var tmp;
      var _value_364 = lua_multiply(lua_tableget(_skill, 'Level'), 8);
      _value_364 = lua_multiply(_value_364, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_364];
      return [];
    })
    G.str['SCR_GET_FlyingColors_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_365 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_365];
      return [];
    })
    G.str['SCR_Get_SkillFactor_BuildForge'] = (function (_skill) {
      var tmp;
      var _self_366 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_366 = lua_call(G.str['GetOwner'], [_self_366])[0];
      var _value_366 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      var _abil_366 = lua_call(G.str['GetAbility'], [_pc_366, "Templar4"])[0];
      if (!lua_eq(_abil_366, null)) {
        _value_366 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_366, _value_366])[0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_366]);
      return [];
    })
    G.str['SCR_GET_BuildShieldCharger_Ratio'] = (function (_skill) {
      var tmp;
      var _value_368 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      _value_368 = lua_multiply(_value_368, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_368];
      return [];
    })
    G.str['SCR_GET_BuildShieldCharger_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_369 = 5;
      return [_value_369];
      return [];
    })
    G.str['SCR_GET_BuildShieldCharger_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_370 = 60;
      var _pc_370 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_370])[0], 1)) {
        _value_370 = 30;
      }
      return [_value_370];
      return [];
    })
    G.str['SCR_GET_ShareBuff_Ratio'] = (function (_skill) {
      var tmp;
      var _value_372 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_372];
      return [];
    })
    G.str['SCR_GET_ShareBuff_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_373 = lua_add(42, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_373];
      return [];
    })
    G.str['SCR_GET_ReduceCraftTime_Ratio'] = (function (_skill) {
      var tmp;
      var _value_374 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      return [_value_374];
      return [];
    })
    G.str['SCR_GET_Bunshin_no_jutsu_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_375 = lua_tableget(_skill, 'Level');
      if (lua_lte(3, _value_375)) {
        _value_375 = 3;
      }
      return [_value_375];
      return [];
    })
    G.str['SCR_GET_Mokuton_no_jutsu_Ratio'] = (function (_skill) {
      var tmp;
      var _value_377 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_377];
      return [];
    })
    G.str['SCR_GET_Katon_no_jutsu_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_378 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_378 = lua_call(G.str['GetAbility'], [_pc_378, "Shinobi2"])[0];
      var _value_378 = 0;
      if (!lua_eq(_abil_378, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_378]);
      }
      return [];
    })
    G.str['SCR_GET_Kunai_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_380 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_380 = lua_call(G.str['GetAbility'], [_pc_380, "Shinobi1"])[0];
      var _value_380 = 0;
      if (!lua_eq(_abil_380, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_380]);
      }
      return [];
    })
    G.str['SCR_GET_DeadlyCombo_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_382 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_382 = lua_call(G.str['GetAbility'], [_pc_382, "Squire11"])[0];
      var _value_382 = 0;
      if (!lua_eq(_abil_382, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_382]);
      }
      return [];
    })
    G.str['SCR_GET_Dragontooth_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_384 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_384 = lua_call(G.str['GetAbility'], [_pc_384, "Dragoon1"])[0];
      var _value_384 = 0;
      if (!lua_eq(_abil_384, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_384]);
      }
      return [];
    })
    G.str['SCR_GET_Serpentine_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_386 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_386 = lua_call(G.str['GetAbility'], [_pc_386, "Dragoon3"])[0];
      var _value_386 = 0;
      if (!lua_eq(_abil_386, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_386]);
      }
      return [];
    })
    G.str['SCR_GET_Gae_Bulg_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_388 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_388 = lua_call(G.str['GetAbility'], [_pc_388, "Dragoon5"])[0];
      var _value_388 = 0;
      if (!lua_eq(_abil_388, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_388]);
      }
      return [];
    })
    G.str['SCR_GET_Gae_Bulg_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_390 = 10;
      return [_value_390];
      return [];
    })
    G.str['SCR_GET_Dragon_Soar_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_391 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_391 = lua_call(G.str['GetAbility'], [_pc_391, "Dragoon8"])[0];
      var _value_391 = 0;
      if (!lua_eq(_abil_391, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_391]);
      }
      return [];
    })
    G.str['SCR_GET_Dragon_Soar_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_393 = 5;
      var _pc_393 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_393 = lua_call(G.str['GetAbility'], [_pc_393, "Dragoon16"])[0];
      if ((!lua_eq(_abil_393, null) && lua_eq(lua_tableget(_abil_393, 'ActiveState'), 1))) {
        _value_393 = lua_multiply(_value_393, 2);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_393]);
      return [];
    })
    G.str['SCR_GET_Zwerchhau_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_395 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_395 = lua_call(G.str['GetAbility'], [_pc_395, "Doppelsoeldner18"])[0];
      var _value_395 = 0;
      if (!lua_eq(_abil_395, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_395]);
      }
      return [];
    })
    G.str['SCR_GET_Zwerchhau_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_397 = 6.5;
      return [_value_397];
      return [];
    })
    G.str['SCR_GET_Sturzhau_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_398 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_398 = lua_call(G.str['GetAbility'], [_pc_398, "Doppelsoeldner19"])[0];
      var _value_398 = 0;
      if (!lua_eq(_abil_398, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_398]);
      }
      return [];
    })
    G.str['SCR_GET_Sturzhau_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_400 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_400];
      return [];
    })
    G.str['SCR_GET_BalestraFente_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_401 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_401 = lua_call(G.str['GetAbility'], [_pc_401, "Fencer8"])[0];
      var _value_401 = 0;
      if (!lua_eq(_abil_401, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_401]);
      }
      return [];
    })
    G.str['SCR_GET_AttaqueAuFer_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_403 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_403 = lua_call(G.str['GetAbility'], [_pc_403, "Fencer9"])[0];
      var _value_403 = 0;
      if (!lua_eq(_abil_403, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_403]);
      }
      return [];
    })
    G.str['SCR_GET_AttaqueAuFer_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_405 = 15;
      return [_value_405];
      return [];
    })
    G.str['SCR_GET_EpeeGarde_Ratio'] = (function (_skill) {
      var tmp;
      var _value_406 = 50;
      _value_406 = lua_multiply(_value_406, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_406]);
      return [];
    })
    G.str['SCR_GET_EpeeGarde_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_407 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_407];
      return [];
    })
    G.str['SCR_GET_Dethrone_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_408 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_408 = lua_call(G.str['GetAbility'], [_pc_408, "Dragoon11"])[0];
      var _value_408 = 0;
      if (!lua_eq(_abil_408, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_408]);
      }
      return [];
    })
    G.str['SCR_GET_Dethrone_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_410 = 5;
      return [_value_410];
      return [];
    })
    G.str['SCR_GET_Dethrone_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_411 = 10;
      return [_value_411];
      return [];
    })
    G.str['SCR_GET_DargonDive_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_412 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_412 = lua_call(G.str['GetAbility'], [_pc_412, "Dragoon13"])[0];
      var _value_412 = 0;
      if (!lua_eq(_abil_412, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_412]);
      }
      return [];
    })
    G.str['SCR_Get_DragoonHelmet_Ratio'] = (function (_skill) {
      var tmp;
      var _value_414 = 50;
      var _pc_414 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_414 = lua_call(G.str['GetAbility'], [_pc_414, "Dragoon20"])[0];
      if ((!lua_eq(_abil_414, null) && lua_eq(lua_tableget(_abil_414, 'ActiveState'), 1))) {
        _value_414 = 25;
      }
      return [_value_414];
      return [];
    })
    G.str['SCR_Get_DragoonHelmet_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_416 = 2;
      var _pc_416 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_416 = lua_call(G.str['GetAbility'], [_pc_416, "Dragoon20"])[0];
      if ((!lua_eq(_abil_416, null) && lua_eq(lua_tableget(_abil_416, 'ActiveState'), 1))) {
        _value_416 = lua_multiply(_value_416, 0.5);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_416]);
      return [];
    })
    G.str['SCR_GET_MortalSlash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_418 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_418 = lua_call(G.str['GetAbility'], [_pc_418, "Templar1"])[0];
      var _value_418 = 0;
      if (!lua_eq(_abil_418, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_418]);
      }
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_MortalSlash'] = (function (_skill) {
      var tmp;
      var _pc_420 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_420 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_420 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_420, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_420 = lua_add(_basicCoolDown_420, _abilAddCoolDown_420);
      var _owner_420 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsServerSection'], [_owner_420])[0], 1)) {
        tmp = lua_call(G.str['GetPartyMemberList'], [_owner_420, G.str['PARTY_NORMAL'], 0]); var _list_421 = tmp[0]; var _cnt_421 = tmp[1]; tmp = null;
        if (lua_lt(1, _cnt_421)) {
          var _abilCoolDownRatio_422 = 1;
          var var_423 = 1, stop_423 = lua_assertfloat(lua_subtract(_cnt_421, 1));
          for (; var_423 <= stop_423; var_423++) {
            var _i_423 = var_423;
            _abilCoolDownRatio_422 = lua_subtract(_abilCoolDownRatio_422, 0.1);
          }
          if (lua_lt(_abilCoolDownRatio_422, 0.6)) {
            _abilCoolDownRatio_422 = 0.6;
          }
          _basicCoolDown_420 = lua_multiply(_basicCoolDown_420, _abilCoolDownRatio_422);
        }
      } else {
        var _list_426 = lua_tablegetcall(lua_tableget(G.str['session'], 'party'), 'GetPartyMemberList', [G.str['PARTY_NORMAL']])[0];
        if (!lua_eq(_list_426, null)) {
          var _cnt_427 = lua_mcall(_list_426, 'Count', [])[0];
          if (lua_lt(1, _cnt_427)) {
            var _myObj_428 = lua_tablegetcall(lua_tableget(G.str['session'], 'party'), 'GetMyPartyObj', [G.str['PARTY_NORMAL']])[0];
            var _myMapID_428 = lua_mcall(_myObj_428, 'GetMapID', [])[0];
            var _myChannelInfo_428 = lua_tablegetcall(lua_tableget(G.str['session'], 'loginInfo'), 'GetChannel', [])[0];
            var _loginCount_428 = 0;
            var var_429 = 0, stop_429 = lua_assertfloat(lua_subtract(_cnt_427, 1));
            for (; var_429 <= stop_429; var_429++) {
              var _i_429 = var_429;
              var _partyMemberInfo_430 = lua_mcall(_list_426, 'Element', [_i_429])[0];
              if ((lua_eq(lua_mcall(_partyMemberInfo_430, 'GetMapID', [])[0], _myMapID_428) && lua_eq(lua_mcall(_partyMemberInfo_430, 'GetChannel', [])[0], _myChannelInfo_428))) {
                _loginCount_428 = lua_add(_loginCount_428, 1);
              }
            }
            var _abilCoolDownRatio_428 = 1;
            if (lua_lt(1, _loginCount_428)) {
              var var_433 = 1, stop_433 = lua_assertfloat(lua_subtract(_loginCount_428, 1));
              for (; var_433 <= stop_433; var_433++) {
                var _i_433 = var_433;
                _abilCoolDownRatio_428 = lua_subtract(_abilCoolDownRatio_428, 0.1);
              }
            }
            if (lua_lt(_abilCoolDownRatio_428, 0.6)) {
              _abilCoolDownRatio_428 = 0.6;
            }
            _basicCoolDown_420 = lua_multiply(_basicCoolDown_420, _abilCoolDownRatio_428);
          }
        }
      }
      var _laimaCoolTime_420 = lua_call(G.str['GetExProp'], [_pc_420, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_420, 0)) {
        _basicCoolDown_420 = lua_multiply(_basicCoolDown_420, (lua_subtract(1, _laimaCoolTime_420)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_420, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_420 = lua_multiply(_basicCoolDown_420, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_420, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_420 = lua_multiply(_basicCoolDown_420, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_420, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_420 = lua_multiply(_basicCoolDown_420, 0.5);
        }
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_420, "Bunshin_Debuff"])[0], "YES")) {
        var _bunshinBuff_441 = null;
        var _bunsinCount_441 = null;
        if (lua_eq(lua_call(G.str['IsServerObj'], [_pc_420])[0], 1)) {
          _bunshinBuff_441 = lua_call(G.str['GetBuffByName'], [_pc_420, "Bunshin_Debuff"])[0];
          _bunsinCount_441 = lua_call(G.str['GetBuffArg'], [_bunshinBuff_441])[0];
        } else {
          var _handle_443 = lua_tablegetcall(G.str['session'], 'GetMyHandle', [])[0];
          _bunshinBuff_441 = lua_tablegetcall(G.str['info'], 'GetBuff', [_handle_443, 3049])[0];
          _bunsinCount_441 = lua_tableget(_bunshinBuff_441, 'arg1');
        }
        _basicCoolDown_420 = lua_add(_basicCoolDown_420, (lua_add(lua_multiply(_bunsinCount_441, 2000), (lua_multiply(_basicCoolDown_420, (lua_multiply(_bunsinCount_441, 0.1)))))));
      }
      var _ret_420 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_420])[0], 1000);
      _ret_420 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_420])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_420]);
      return [];
    })
    G.str['SCR_GET_CassisCrista_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_444 = 240;
      return [_value_444];
      return [];
    })
    G.str['SCR_GET_CassisCrista_Ratio'] = (function (_skill) {
      var tmp;
      var _value_445 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_445];
      return [];
    })
    G.str['SCR_GET_FrenziedSlash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_446 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_446 = lua_call(G.str['GetAbility'], [_pc_446, "Murmillo2"])[0];
      var _value_446 = 0;
      if (!lua_eq(_abil_446, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_446]);
      }
      return [];
    })
    G.str['SCR_GET_FrenziedSlash_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_448 = lua_add(4, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_448];
      return [];
    })
    G.str['SCR_GET_EvadeThrust_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_449 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_449 = lua_call(G.str['GetAbility'], [_pc_449, "Murmillo3"])[0];
      var _value_449 = 0;
      if (!lua_eq(_abil_449, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_449]);
      }
      return [];
    })
    G.str['SCR_GET_Headbutt_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_451 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_451 = lua_call(G.str['GetAbility'], [_pc_451, "Murmillo5"])[0];
      var _value_451 = 0;
      if (!lua_eq(_abil_451, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_451]);
      }
      return [];
    })
    G.str['SCR_GET_Headbutt_Time'] = (function (_skill) {
      var tmp;
      var _value_453 = 3;
      return [_value_453];
      return [];
    })
    G.str['SCR_GET_Takedown_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_454 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_454 = lua_call(G.str['GetAbility'], [_pc_454, "Murmillo6"])[0];
      var _value_454 = 0;
      if (!lua_eq(_abil_454, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_454]);
      }
      return [];
    })
    G.str['SCR_GET_FrenziedShoot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_456 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_456 = lua_call(G.str['GetAbility'], [_pc_456, "Murmillo7"])[0];
      var _value_456 = 0;
      if (!lua_eq(_abil_456, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_456]);
      }
      return [];
    })
    G.str['SCR_GET_ScutumHit_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_458 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_458 = lua_call(G.str['GetAbility'], [_pc_458, "Murmillo9"])[0];
      var _value_458 = 0;
      if (!lua_eq(_abil_458, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_458]);
      }
      return [];
    })
    G.str['SCR_GET_ShieldTrain_Ratio'] = (function (_skill) {
      var tmp;
      var _value_460 = 10;
      return [_value_460];
      return [];
    })
    G.str['SCR_GET_SR_LV_ScutumHit'] = (function (_skill) {
      var tmp;
      var _pc_461 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _byAbil_461 = 0;
      var _abil_461 = lua_call(G.str['GetAbility'], [_pc_461, 'Murmillo16'])[0];
      if ((!lua_eq(_abil_461, null) && lua_eq(1, lua_tableget(_abil_461, 'ActiveState')))) {
        _byAbil_461 = lua_add(lua_tableget(_pc_461, 'SR'), lua_tableget(_skill, 'SklSR'));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_add(lua_tableget(_pc_461, 'SR'), lua_tableget(_skill, 'SklSR')), _byAbil_461)]);
      return [];
    })
    G.str['SCR_GET_Crush_Ratio'] = (function (_skill) {
      var tmp;
      var _value_463 = lua_tableget(_skill, 'Level');
      return [_value_463];
      return [];
    })
    G.str['SCR_GET_HeadStrike_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_464 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_464 = lua_call(G.str['GetAbility'], [_pc_464, "Lancer4"])[0];
      var _value_464 = 0;
      if (!lua_eq(_abil_464, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_464]);
      }
      return [];
    })
    G.str['SCR_GET_HeadStrike_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_466 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_466];
      return [];
    })
    G.str['SCR_GET_Joust_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_467 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_467 = lua_call(G.str['GetAbility'], [_pc_467, "Lancer6"])[0];
      var _value_467 = 0;
      if (!lua_eq(_abil_467, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_467]);
      }
      return [];
    })
    G.str['SCR_GET_Joust_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_469 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_469 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _zone_469 = lua_call(G.str['GetZoneName'], [_pc_469])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_469])[0], 1) || lua_eq(_zone_469, 'pvp_Mine'))) {
        _value_469 = lua_multiply(_value_469, 0.5);
      }
      return [_value_469];
      return [];
    })
    G.str['SCR_GET_SpillAttack_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_471 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_471 = lua_call(G.str['GetAbility'], [_pc_471, "Lancer7"])[0];
      var _value_471 = 0;
      if (!lua_eq(_abil_471, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_471]);
      }
      return [];
    })
    G.str['SCR_GET_Quintain_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_473 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_473 = lua_call(G.str['GetAbility'], [_pc_473, "Lancer8"])[0];
      var _value_473 = 0;
      if (!lua_eq(_abil_473, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_473]);
      }
      return [];
    })
    G.str['SCR_GET_Commence_Ratio'] = (function (_skill) {
      var tmp;
      var _value_475 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      _value_475 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_475, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_475];
      return [];
    })
    G.str['SCR_GET_Commence_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_476 = 300;
      return [_value_476];
      return [];
    })
    G.str['SCR_GET_Commence_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_477 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_477];
      return [];
    })
    G.str['SCR_GET_Capote_Ratio'] = (function (_skill) {
      var tmp;
      var _value_478 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_478];
      return [];
    })
    G.str['SCR_GET_Capote_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_479 = 20;
      _value_479 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_479, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_479];
      return [];
    })
    G.str['SCR_GET_Faena_Ratio'] = (function (_skill) {
      var tmp;
      var _value_480 = lua_add((lua_divide(lua_tableget(_skill, 'Level'), 2)), 2);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_480]);
      return [];
    })
    G.str['SCR_GET_Faena_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_481 = lua_add(lua_tableget(_skill, 'Level'), 2);
      return [_value_481];
      return [];
    })
    G.str['SCR_GET_Ole_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_482 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_482 = 20;
      var _abil_482 = lua_call(G.str['GetAbility'], [_pc_482, "Matador4"])[0];
      if ((!lua_eq(_abil_482, null) && lua_eq(lua_tableget(_abil_482, 'ActiveState'), 1))) {
        _value_482 = lua_add(_value_482, lua_tableget(_abil_482, 'Level'));
      }
      return [_value_482];
      return [];
    })
    G.str['SCR_GET_Ole_Ratio'] = (function (_skill) {
      var tmp;
      var _value_484 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 3)));
      _value_484 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_484, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_484]);
      return [];
    })
    G.str['SCR_GET_Ole_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_485 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_485]);
      return [];
    })
    G.str['SCR_GET_BackSlide_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_486 = lua_tableget(_skill, 'Level');
      return [_value_486];
      return [];
    })
    G.str['SCR_GET_Sprint_Ratio'] = (function (_skill) {
      var tmp;
      var _value_487 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_487];
      return [];
    })
    G.str['SCR_GET_ShadowPool_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_488 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_488];
      return [];
    })
    G.str['SCR_GET_ShadowFatter_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_489 = lua_add(3, lua_tableget(_skill, 'Level'));
      return [_value_489];
      return [];
    })
    G.str['SCR_GET_Hallucination_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_490 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_490];
      return [];
    })
    G.str['SCR_Get_Enervation_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_491 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_491];
      return [];
    })
    G.str['SCR_GET_EnchantEarth_Ratio'] = (function (_skill) {
      var tmp;
      var _value_492 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      _value_492 = lua_multiply(_value_492, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_492];
      return [];
    })
    G.str['SCR_GET_Multishot_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_493 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_493 = lua_call(G.str['GetAbility'], [_pc_493, "Archer11"])[0];
      var _value_493 = 0;
      if (!lua_eq(_abil_493, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_493]);
      }
      return [];
    })
    G.str['SCR_GET_Fulldraw_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_495 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_495 = lua_call(G.str['GetAbility'], [_pc_495, "Archer12"])[0];
      var _value_495 = 0;
      if (!lua_eq(_abil_495, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_495]);
      }
      return [];
    })
    G.str['SCR_GET_ObliqueShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_497 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_497 = lua_call(G.str['GetAbility'], [_pc_497, "Archer13"])[0];
      var _value_497 = 0;
      if (!lua_eq(_abil_497, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_497]);
      }
      return [];
    })
    G.str['SCR_GET_KnockbackShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_499 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_499 = lua_call(G.str['GetAbility'], [_pc_499, "Archer26"])[0];
      var _value_499 = 0;
      if (!lua_eq(_abil_499, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_499]);
      }
      return [];
    })
    G.str['SCR_GET_DuelShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_501 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_501 = lua_call(G.str['GetAbility'], [_pc_501, "Archer28"])[0];
      var _value_501 = 0;
      if (!lua_eq(_abil_501, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_501]);
      }
      return [];
    })
    G.str['SCR_GET_Barrage_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_503 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_503 = lua_call(G.str['GetAbility'], [_pc_503, "Ranger11"])[0];
      var _value_503 = 0;
      if (!lua_eq(_abil_503, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_503]);
      }
      return [];
    })
    G.str['SCR_GET_HighAnchoring_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_505 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_505 = lua_call(G.str['GetAbility'], [_pc_505, "Ranger12"])[0];
      var _value_505 = 0;
      if (!lua_eq(_abil_505, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_505]);
      }
      return [];
    })
    G.str['SCR_GET_BounceShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_507 = 50;
      return [_value_507];
      return [];
    })
    G.str['SCR_GET_SpiralArrow_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_508 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_508 = lua_call(G.str['GetAbility'], [_pc_508, "Ranger30"])[0];
      var _value_508 = 0;
      if (!lua_eq(_abil_508, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_508]);
      }
      return [];
    })
    G.str['SCR_GET_ArrowSprinkle_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_510 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_510 = lua_call(G.str['GetAbility'], [_pc_510, "Ranger23"])[0];
      var _value_510 = 0;
      if (!lua_eq(_abil_510, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_510]);
      }
      return [];
    })
    G.str['SCR_GET_CriticalShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_512 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_512 = lua_call(G.str['GetAbility'], [_pc_512, "Ranger25"])[0];
      var _value_512 = 0;
      if (!lua_eq(_abil_512, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_512]);
      }
      return [];
    })
    G.str['SCR_GET_TimeBombArrow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_514 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_514 = lua_call(G.str['GetAbility'], [_pc_514, "Ranger28"])[0];
      var _value_514 = 0;
      if (!lua_eq(_abil_514, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_514]);
      }
      return [];
    })
    G.str['SCR_GET_ScatterCaltrop_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_516 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_516 = lua_call(G.str['GetAbility'], [_pc_516, "QuarrelShooter11"])[0];
      var _value_516 = 0;
      if (!lua_eq(_abil_516, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_516]);
      }
      return [];
    })
    G.str['SCR_GET_StonePicking_Ratio'] = (function (_skill) {
      var tmp;
      var _value_518 = lua_tableget(_skill, 'Level');
      return [_value_518];
      return [];
    })
    G.str['SCR_GET_StoneShot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_519 = 50;
      return [_value_519];
      return [];
    })
    G.str['SCR_GET_StoneShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_520 = 50;
      return [_value_520];
      return [];
    })
    G.str['SCR_GET_RapidFire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_521 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_521 = lua_call(G.str['GetAbility'], [_pc_521, "QuarrelShooter13"])[0];
      var _value_521 = 0;
      if (!lua_eq(_abil_521, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_521]);
      }
      return [];
    })
    G.str['SCR_Get_RunningShot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_523 = lua_add(50, lua_multiply(30, lua_tableget(_skill, 'Level')));
      return [_value_523];
      return [];
    })
    G.str['SCR_GET_DestroyPavise_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_524 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_524 = lua_call(G.str['GetAbility'], [_pc_524, "QuarrelShooter20"])[0];
      var _value_524 = 0;
      if (!lua_eq(_abil_524, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_524]);
      }
      return [];
    })
    G.str['SCR_GET_BroomTrap_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_526 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_526 = lua_call(G.str['GetAbility'], [_pc_526, "Sapper11"])[0];
      var _value_526 = 0;
      if (!lua_eq(_abil_526, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_526]);
      }
      return [];
    })
    G.str['SCR_GET_StakeStockades_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_528 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_528 = lua_call(G.str['GetAbility'], [_pc_528, "Sapper29"])[0];
      var _value_528 = 0;
      if (!lua_eq(_abil_528, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_528]);
      }
      return [];
    })
    G.str['SCR_GET_StakeStockades_Time'] = (function (_skill) {
      var tmp;
      var _pc_530 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_530 = 15;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_530])[0], 1)) {
        _value_530 = 900;
      }
      return [_value_530];
      return [];
    })
    G.str['SCR_GET_Claymore_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_532 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_532 = lua_call(G.str['GetAbility'], [_pc_532, "Sapper12"])[0];
      var _value_532 = 0;
      if (!lua_eq(_abil_532, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_532]);
      }
      return [];
    })
    G.str['SCR_GET_Claymore_Ratio'] = (function (_skill) {
      var tmp;
      var _value_534 = 5;
      return [_value_534];
      return [];
    })
    G.str['SCR_GET_PunjiStake_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_535 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_535 = lua_call(G.str['GetAbility'], [_pc_535, "Sapper13"])[0];
      var _value_535 = 0;
      if (!lua_eq(_abil_535, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_535]);
      }
      return [];
    })
    G.str['SCR_GET_PunjiStake_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_537 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_537 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_537])[0], 1)) {
        _value_537 = 900;
      }
      return [_value_537];
      return [];
    })
    G.str['SCR_GET_DetonateTraps_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_539 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_539 = lua_call(G.str['GetAbility'], [_pc_539, "Sapper14"])[0];
      var _value_539 = 0;
      if (!lua_eq(_abil_539, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_539]);
      }
      return [];
    })
    G.str['SCR_GET_SpikeShooter_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_541 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_541 = lua_call(G.str['GetAbility'], [_pc_541, "Sapper26"])[0];
      var _value_541 = 0;
      if (!lua_eq(_abil_541, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_541]);
      }
      return [];
    })
    G.str['SCR_GET_HoverBomb_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_543 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_543 = lua_call(G.str['GetAbility'], [_pc_543, "Sapper27"])[0];
      var _value_543 = 0;
      if (!lua_eq(_abil_543, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_543]);
      }
      return [];
    })
    G.str['SCR_GET_Coursing_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_545 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_545 = lua_call(G.str['GetAbility'], [_pc_545, "Hunter9"])[0];
      var _value_545 = 0;
      if (!lua_eq(_abil_545, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_545]);
      }
      return [];
    })
    G.str['SCR_GET_Snatching_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_547 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_547 = lua_call(G.str['GetAbility'], [_pc_547, "Hunter10"])[0];
      var _value_547 = 0;
      if (!lua_eq(_abil_547, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_547]);
      }
      return [];
    })
    G.str['SCR_GET_RushDog_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_549 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_549 = lua_call(G.str['GetAbility'], [_pc_549, "Hunter11"])[0];
      var _value_549 = 0;
      if (!lua_eq(_abil_549, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_549]);
      }
      return [];
    })
    G.str['SCR_GET_Retrieve_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_551 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_551 = lua_call(G.str['GetAbility'], [_pc_551, "Hunter12"])[0];
      var _value_551 = 0;
      if (!lua_eq(_abil_551, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_551]);
      }
      return [];
    })
    G.str['SCR_GET_NeedleBlow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_553 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_553 = lua_call(G.str['GetAbility'], [_pc_553, "Wugushi11"])[0];
      var _value_553 = 0;
      if (!lua_eq(_abil_553, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_553]);
      }
      return [];
    })
    G.str['SCR_GET_NeedleBlow_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_555 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_555 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_555];
      return [];
    })
    G.str['SCR_GET_WugongGu_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_556 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_556 = lua_call(G.str['GetAbility'], [_pc_556, "Wugushi14"])[0];
      var _value_556 = 0;
      if (!lua_eq(_abil_556, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_556]);
      }
      return [];
    })
    G.str['SCR_GET_WugongGu_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_558 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_558 = 10;
      return [_value_558];
      return [];
    })
    G.str['SCR_GET_ThrowGuPot_Time'] = (function (_skill) {
      var tmp;
      var _value_559 = 15;
      return [_value_559];
      return [];
    })
    G.str['SCR_GET_ThrowGuPot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_560 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_560 = lua_call(G.str['GetAbility'], [_pc_560, "Wugushi17"])[0];
      var _value_560 = 0;
      if (!lua_eq(_abil_560, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_560]);
      }
      return [];
    })
    G.str['SCR_GET_FluFlu_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_562 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_562 = lua_call(G.str['GetAbility'], [_pc_562, "Scout11"])[0];
      var _value_562 = 0;
      if (!lua_eq(_abil_562, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_562]);
      }
      return [];
    })
    G.str['SCR_GET_JincanGu_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_564 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_564 = lua_tableget(_skill, 'Level');
      if (lua_lt(10, _value_564)) {
        _value_564 = 10;
      }
      return [_value_564];
      return [];
    })
    G.str['SCR_GET_FlareShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_566 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_566 = lua_call(G.str['GetAbility'], [_pc_566, "Scout14"])[0];
      var _value_566 = 0;
      if (!lua_eq(_abil_566, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_566]);
      }
      return [];
    })
    G.str['SCR_GET_FlareShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_568 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_568 = 25;
      return [_value_568];
      return [];
    })
    G.str['SCR_GET_SplitArrow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_569 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_569 = lua_call(G.str['GetAbility'], [_pc_569, "Scout17"])[0];
      var _value_569 = 0;
      if (!lua_eq(_abil_569, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_569]);
      }
      return [];
    })
    G.str['SCR_GET_Vendetta_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_571 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_571 = lua_call(G.str['GetAbility'], [_pc_571, "Rogue11"])[0];
      var _value_571 = 0;
      if (!lua_eq(_abil_571, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_571]);
      }
      return [];
    })
    G.str['SCR_GET_Backstab_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_573 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_573 = lua_call(G.str['GetAbility'], [_pc_573, "Rogue16"])[0];
      var _value_573 = 0;
      if (!lua_eq(_abil_573, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_573]);
      }
      return [];
    })
    G.str['SCR_GET_BroadHead_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_575 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_575 = lua_call(G.str['GetAbility'], [_pc_575, "Fletcher11"])[0];
      var _value_575 = 0;
      if (!lua_eq(_abil_575, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_575]);
      }
      return [];
    })
    G.str['SCR_GET_BodkinPoint_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_577 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_577 = lua_call(G.str['GetAbility'], [_pc_577, "Fletcher14"])[0];
      var _value_577 = 0;
      if (!lua_eq(_abil_577, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_577]);
      }
      return [];
    })
    G.str['SCR_GET_BarbedArrow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_579 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_579 = lua_call(G.str['GetAbility'], [_pc_579, "Fletcher17"])[0];
      var _value_579 = 0;
      if (!lua_eq(_abil_579, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_579]);
      }
      return [];
    })
    G.str['SCR_GET_CrossFire_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_581 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_581 = lua_call(G.str['GetAbility'], [_pc_581, "Fletcher20"])[0];
      var _value_581 = 0;
      if (!lua_eq(_abil_581, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_581]);
      }
      return [];
    })
    G.str['SCR_GET_MagicArrow_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_583 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_583 = lua_call(G.str['GetAbility'], [_pc_583, "Fletcher23"])[0];
      var _value_583 = 0;
      if (!lua_eq(_abil_583, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_583]);
      }
      return [];
    })
    G.str['SCR_GET_MagicArrow_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_585 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_585 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_585];
      return [];
    })
    G.str['SCR_GET_Singijeon_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_586 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_586 = lua_call(G.str['GetAbility'], [_pc_586, "Fletcher25"])[0];
      var _value_586 = 0;
      if (!lua_eq(_abil_586, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_586]);
      }
      return [];
    })
    G.str['SCR_GET_ConcentratedFire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_588 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_588 = lua_call(G.str['GetAbility'], [_pc_588, "Schwarzereiter11"])[0];
      var _value_588 = 0;
      if (!lua_eq(_abil_588, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_588]);
      }
      return [];
    })
    G.str['SCR_GET_ConcentratedFire_Ratio2'] = (function (_skill) {
      var tmp;
      return [10];
      return [];
    })
    G.str['SCR_GET_Caracole_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_591 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_591 = lua_call(G.str['GetAbility'], [_pc_591, "Schwarzereiter12"])[0];
      var _value_591 = 0;
      if (!lua_eq(_abil_591, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_591]);
      }
      return [];
    })
    G.str['SCR_Get_SkillFactor_Limacon'] = (function (_skill) {
      var tmp;
      var _pc_593 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _LimaconSkill_593 = lua_call(G.str['GetSkill'], [_pc_593, "Schwarzereiter_Limacon"])[0];
      var _value_593 = 0;
      if (!lua_eq(_LimaconSkill_593, null)) {
        _value_593 = lua_add(lua_tableget(_LimaconSkill_593, 'SklFactor'), lua_multiply(lua_tableget(_LimaconSkill_593, 'SklFactorByLevel'), (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_593]);
      return [];
    })
    G.str['SCR_GET_Limacon_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_595 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_595 = 12;
      var _lv_595 = lua_tableget(_pc_595, 'Lv');
      var _bylvCorrect_595 = lua_subtract(_lv_595, 300);
      if (lua_lt(_bylvCorrect_595, 0)) {
        _bylvCorrect_595 = lua_divide(lua_multiply(_bylvCorrect_595, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_595)) {
        _bylvCorrect_595 = lua_divide(lua_multiply(_bylvCorrect_595, 1.25), 1000);
      }
      _value_595 = lua_multiply(_value_595, (lua_add(1, _bylvCorrect_595)));
      var _abilSchwarzereiter18_595 = lua_call(G.str['GetAbility'], [_pc_595, 'Schwarzereiter18'])[0];
      if (!lua_eq(_abilSchwarzereiter18_595, null)) {
        _value_595 = lua_add(_value_595, 5);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_595]);
      return [];
    })
    G.str['SCR_GET_Limacon_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_599 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_599 = lua_add(30, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 5)));
      _value_599 = lua_multiply(_value_599, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_599];
      return [];
    })
    G.str['SCR_GET_Limacon_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_600 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      return [_value_600];
      return [];
    })
    G.str['SCR_GET_EvasiveAction_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_601 = 300;
      return [_value_601];
      return [];
    })
    G.str['SCR_GET_RetreatShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_602 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_602 = lua_call(G.str['GetAbility'], [_pc_602, "Schwarzereiter14"])[0];
      var _value_602 = 0;
      if (!lua_eq(_abil_602, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_602]);
      }
      return [];
    })
    G.str['SCR_GET_WildShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_604 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_604 = lua_call(G.str['GetAbility'], [_pc_604, "Schwarzereiter15"])[0];
      var _value_604 = 0;
      if (!lua_eq(_abil_604, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_604]);
      }
      return [];
    })
    G.str['SCR_GET_EvasiveAction_Ratio'] = (function (_skill) {
      var tmp;
      var _value_606 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_606];
      return [];
    })
    G.str['SCR_GET_EvasiveAction_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_607 = 5;
      return [_value_607];
      return [];
    })
    G.str['SCR_GET_Hovering_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_608 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_608 = lua_call(G.str['GetAbility'], [_pc_608, "Falconer5"])[0];
      var _value_608 = 0;
      if (!lua_eq(_abil_608, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_608]);
      }
      return [];
    })
    G.str['SCR_GET_Pheasant_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_610 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_610 = lua_call(G.str['GetAbility'], [_pc_610, "Falconer6"])[0];
      var _value_610 = 0;
      if (!lua_eq(_abil_610, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_610]);
      }
      return [];
    })
    G.str['SCR_GET_BlisteringThrash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_612 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_612 = lua_call(G.str['GetAbility'], [_pc_612, "Falconer8"])[0];
      var _value_612 = 0;
      if (!lua_eq(_abil_612, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_612]);
      }
      return [];
    })
    G.str['SCR_GET_CannonShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_614 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_614 = lua_call(G.str['GetAbility'], [_pc_614, "Cannoneer2"])[0];
      var _value_614 = 0;
      if (!lua_eq(_abil_614, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_614]);
      }
      return [];
    })
    G.str['SCR_GET_ShootDown_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_616 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_616 = lua_call(G.str['GetAbility'], [_pc_616, "Cannoneer3"])[0];
      var _value_616 = 0;
      if (!lua_eq(_abil_616, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_616]);
      }
      return [];
    })
    G.str['SCR_GET_SiegeBurst_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_618 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_618 = lua_call(G.str['GetAbility'], [_pc_618, "Cannoneer4"])[0];
      var _value_618 = 0;
      if (!lua_eq(_abil_618, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_618]);
      }
      return [];
    })
    G.str['SCR_GET_CannonBlast_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_620 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_620 = lua_call(G.str['GetAbility'], [_pc_620, "Cannoneer5"])[0];
      var _value_620 = 0;
      if (!lua_eq(_abil_620, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_620]);
      }
      return [];
    })
    G.str['SCR_GET_SmokeGrenade_Time'] = (function (_skill) {
      var tmp;
      var _value_622 = lua_add(7, lua_tableget(_skill, 'Level'));
      return [_value_622];
      return [];
    })
    G.str['SCR_GET_Bazooka_Ratio'] = (function (_skill) {
      var tmp;
      var _value_623 = 50;
      return [_value_623];
      return [];
    })
    G.str['SCR_GET_Bazooka_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_624 = 80;
      return [_value_624];
      return [];
    })
    G.str['SCR_GET_CoveringFire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_625 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_625 = lua_call(G.str['GetAbility'], [_pc_625, "Musketeer2"])[0];
      var _value_625 = 0;
      if (!lua_eq(_abil_625, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_625]);
      }
      return [];
    })
    G.str['SCR_GET_HeadShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_627 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_627 = lua_call(G.str['GetAbility'], [_pc_627, "Musketeer3"])[0];
      var _value_627 = 0;
      if (!lua_eq(_abil_627, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_627]);
      }
      return [];
    })
    G.str['SCR_GET_Snipe_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_629 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_629 = lua_call(G.str['GetAbility'], [_pc_629, "Musketeer4"])[0];
      var _value_629 = 0;
      if (!lua_eq(_abil_629, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_629]);
      }
      return [];
    })
    G.str['SCR_GET_PenetrationShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_631 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_631 = lua_call(G.str['GetAbility'], [_pc_631, "Musketeer5"])[0];
      var _value_631 = 0;
      if (!lua_eq(_abil_631, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_631]);
      }
      return [];
    })
    G.str['SCR_GET_ButtStroke_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_633 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_633 = lua_call(G.str['GetAbility'], [_pc_633, "Musketeer6"])[0];
      var _value_633 = 0;
      if (!lua_eq(_abil_633, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_633]);
      }
      return [];
    })
    G.str['SCR_GET_BayonetThrust_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_635 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_635 = lua_call(G.str['GetAbility'], [_pc_635, "Musketeer7"])[0];
      var _value_635 = 0;
      if (!lua_eq(_abil_635, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_635]);
      }
      return [];
    })
    G.str['SCR_GET_Combination_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_637 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_637 = lua_call(G.str['GetAbility'], [_pc_637, "Falconer9"])[0];
      var _value_637 = 0;
      if (!lua_eq(_abil_637, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_637]);
      }
      return [];
    })
    G.str['SCR_GET_FirstStrike_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_639 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_639];
      return [];
    })
    G.str['SCR_GET_CannonBarrage_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_640 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_640 = lua_call(G.str['GetAbility'], [_pc_640, "Cannoneer9"])[0];
      var _value_640 = 0;
      if (!lua_eq(_abil_640, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_640]);
      }
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_CannonBarrage'] = (function (_skill) {
      var tmp;
      var _pc_642 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _basicCoolDown_642 = lua_tableget(_skill, 'BasicCoolDown');
      var _abilAddCoolDown_642 = lua_call(G.str['GetAbilityAddSpendValue'], [_pc_642, lua_tableget(_skill, 'ClassName'), "CoolDown"])[0];
      _basicCoolDown_642 = lua_add(_basicCoolDown_642, _abilAddCoolDown_642);
      var _abilCannoneer20_642 = lua_call(G.str['GetAbility'], [_pc_642, 'Cannoneer20'])[0];
      if ((!lua_eq(_abilCannoneer20_642, null) && lua_eq(lua_tableget(_abilCannoneer20_642, 'ActiveState'), 1))) {
        var _abilCoolDownRate_643 = lua_subtract(1, (lua_multiply(lua_tableget(_abilCannoneer20_642, 'Level'), 0.1)));
        _basicCoolDown_642 = lua_multiply(_basicCoolDown_642, _abilCoolDownRate_643);
      }
      var _laimaCoolTime_642 = lua_call(G.str['GetExProp'], [_pc_642, "LAIMA_BUFF_COOLDOWN"])[0];
      if (!lua_eq(_laimaCoolTime_642, 0)) {
        _basicCoolDown_642 = lua_multiply(_basicCoolDown_642, (lua_subtract(1, _laimaCoolTime_642)));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_642, 'CarveLaima_Debuff'])[0], 'YES')) {
        _basicCoolDown_642 = lua_multiply(_basicCoolDown_642, 1.2);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_642, 'GM_Cooldown_Buff'])[0], 'YES')) {
        _basicCoolDown_642 = lua_multiply(_basicCoolDown_642, 0.9);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_642, 'SpeForceFom_Buff'])[0], 'YES')) {
        if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Centurion_SpecialForceFormation")) {
          _basicCoolDown_642 = lua_multiply(_basicCoolDown_642, 0.5);
        }
      }
      var _ret_642 = lua_divide(lua_tablegetcall(G.str['math'], 'floor', [_basicCoolDown_642])[0], 1000);
      _ret_642 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_ret_642])[0], 1000);
      return lua_tablegetcall(G.str['math'], 'floor', [_ret_642]);
      return [];
    })
    G.str['SCR_GET_Volleyfire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_649 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_649 = lua_call(G.str['GetAbility'], [_pc_649, "Musketeer11"])[0];
      var _value_649 = 0;
      if (!lua_eq(_abil_649, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_649]);
      }
      return [];
    })
    G.str['SCR_GET_Birdfall_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_651 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_651 = lua_call(G.str['GetAbility'], [_pc_651, "Musketeer18"])[0];
      var _value_651 = 0;
      if (!lua_eq(_abil_651, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_651]);
      }
      return [];
    })
    G.str['SCR_GET_Skarphuggning_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_653 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_653 = lua_call(G.str['GetAbility'], [_pc_653, "Hackapell1"])[0];
      var _value_653 = 0;
      if (!lua_eq(_abil_653, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_653]);
      }
      return [];
    })
    G.str['SCR_GET_HakkaPalle_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_655 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_655];
      return [];
    })
    G.str['SCR_GET_BombardmentOrders_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_656 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_656 = lua_call(G.str['GetAbility'], [_pc_656, "Hackapell2"])[0];
      var _value_656 = 0;
      if (!lua_eq(_abil_656, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_656]);
      }
      return [];
    })
    G.str['SCR_GET_BombardmentOrder_Time'] = (function (_skill) {
      var tmp;
      var _value_658 = lua_add(2, lua_multiply(lua_tableget(_skill, 'Level'), 0.3));
      return [_value_658];
      return [];
    })
    G.str['SCR_GET_HackapellCharge_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_659 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_659 = lua_call(G.str['GetAbility'], [_pc_659, "Hackapell3"])[0];
      var _value_659 = 0;
      if (!lua_eq(_abil_659, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_659]);
      }
      return [];
    })
    G.str['SCR_GET_HackapellCharge_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_661 = lua_add(15, lua_tableget(_skill, 'Level'));
      return [_value_661];
      return [];
    })
    G.str['SCR_GET_LegShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_662 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_662 = lua_call(G.str['GetAbility'], [_pc_662, "Hackapell4"])[0];
      var _value_662 = 0;
      if (!lua_eq(_abil_662, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_662]);
      }
      return [];
    })
    G.str['SCR_GET_LegShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_664 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_664 = 50;
      var _abil_664 = lua_call(G.str['GetAbility'], [_pc_664, "Hackapell5"])[0];
      if ((!lua_eq(_abil_664, null) && lua_eq(1, lua_tableget(_abil_664, 'ActiveState')))) {
        _value_664 = lua_add(_value_664, lua_tableget(_abil_664, 'Level'));
      }
      return [_value_664];
      return [];
    })
    G.str['SCR_GET_StormBolt_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_666 = lua_multiply(6, lua_tableget(_skill, 'Level'));
      return [_value_666];
      return [];
    })
    G.str['SCR_GET_Unload_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_667 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_667 = lua_call(G.str['GetAbility'], [_pc_667, "Mergen2"])[0];
      var _value_667 = 0;
      if (!lua_eq(_abil_667, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_667]);
      }
      return [];
    })
    G.str['SCR_GET_Unload_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_669 = 6;
      return [_value_669];
      return [];
    })
    G.str['SCR_GET_FocusFire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_670 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_670 = lua_call(G.str['GetAbility'], [_pc_670, "Mergen3"])[0];
      var _value_670 = 0;
      if (!lua_eq(_abil_670, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_670]);
      }
      return [];
    })
    G.str['SCR_GET_QuickFire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_672 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_672 = lua_call(G.str['GetAbility'], [_pc_672, "Mergen4"])[0];
      var _value_672 = 0;
      if (!lua_eq(_abil_672, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_672]);
      }
      return [];
    })
    G.str['SCR_GET_TrickShot_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_674 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_674 = lua_call(G.str['GetAbility'], [_pc_674, "Mergen5"])[0];
      var _value_674 = 0;
      if (!lua_eq(_abil_674, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_674]);
      }
      return [];
    })
    G.str['SCR_GET_ArrowRain_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_676 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_676 = lua_call(G.str['GetAbility'], [_pc_676, "Mergen6"])[0];
      var _value_676 = 0;
      if (!lua_eq(_abil_676, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_676]);
      }
      return [];
    })
    G.str['SCR_GET_ParthianShaft_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_678 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_678 = lua_call(G.str['GetAbility'], [_pc_678, "Mergen7"])[0];
      var _value_678 = 0;
      if (!lua_eq(_abil_678, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_678]);
      }
      return [];
    })
    G.str['SCR_GET_ParthianShaft_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_680 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_680];
      return [];
    })
    G.str['SCR_GET_EnergyBolt_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_681 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_681 = lua_call(G.str['GetAbility'], [_pc_681, "Wizard11"])[0];
      var _value_681 = 0;
      if (!lua_eq(_abil_681, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_681]);
      }
      return [];
    })
    G.str['SCR_GET_EarthQuake_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_683 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_683 = lua_call(G.str['GetAbility'], [_pc_683, "Wizard13"])[0];
      var _value_683 = 0;
      if (!lua_eq(_abil_683, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_683]);
      }
      return [];
    })
    G.str['SCR_GET_MagicMissile_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_685 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_685 = lua_call(G.str['GetAbility'], [_pc_685, "Wizard12"])[0];
      var _value_685 = 0;
      if (!lua_eq(_abil_685, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_685]);
      }
      return [];
    })
    G.str['SCR_GET_MagicMissile_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_687 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(0.5, (lua_divide(lua_tableget(_skill, 'Level'), 2)))])[0];
      return [_value_687];
      return [];
    })
    G.str['SCR_GET_FireBall_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_688 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_688 = lua_call(G.str['GetAbility'], [_pc_688, "Pyromancer29"])[0];
      var _value_688 = 5;
      if ((!lua_eq(_abil_688, null) && lua_eq(lua_tableget(_abil_688, 'ActiveState'), 1))) {
        _value_688 = lua_add(_value_688, lua_tableget(_abil_688, 'Level'));
      }
      return [_value_688];
      return [];
    })
    G.str['SCR_GET_FireWall_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_690 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_690 = lua_call(G.str['GetAbility'], [_pc_690, "Pyromancer12"])[0];
      var _value_690 = 0;
      if (!lua_eq(_abil_690, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_690]);
      }
      return [];
    })
    G.str['SCR_GET_Flare_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_692 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_692 = lua_call(G.str['GetAbility'], [_pc_692, "Pyromancer13"])[0];
      var _value_692 = 0;
      if (!lua_eq(_abil_692, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_692]);
      }
      return [];
    })
    G.str['SCR_GET_FlameGround_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_694 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_694 = lua_call(G.str['GetAbility'], [_pc_694, "Pyromancer26"])[0];
      var _value_694 = 0;
      if (!lua_eq(_abil_694, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_694]);
      }
      return [];
    })
    G.str['SCR_GET_FirePillar_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_696 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_696 = lua_call(G.str['GetAbility'], [_pc_696, "Pyromancer15"])[0];
      var _value_696 = 0;
      if (!lua_eq(_abil_696, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_696]);
      }
      return [];
    })
    G.str['SCR_GET_HellBreath_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_698 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_698 = lua_call(G.str['GetAbility'], [_pc_698, "Pyromancer14"])[0];
      var _value_698 = 0;
      if (!lua_eq(_abil_698, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_698]);
      }
      return [];
    })
    G.str['SCR_GET_IceBolt_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_700 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_700 = lua_call(G.str['GetAbility'], [_pc_700, "Cryomancer11"])[0];
      var _value_700 = 0;
      if (!lua_eq(_abil_700, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_700]);
      }
      return [];
    })
    G.str['SCR_GET_IciclePike_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_702 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_702 = lua_call(G.str['GetAbility'], [_pc_702, "Cryomancer12"])[0];
      var _value_702 = 0;
      if (!lua_eq(_abil_702, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_702]);
      }
      return [];
    })
    G.str['SCR_GET_IceBlast_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_704 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_704 = lua_call(G.str['GetAbility'], [_pc_704, "Cryomancer13"])[0];
      var _value_704 = 0;
      if (!lua_eq(_abil_704, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_704]);
      }
      return [];
    })
    G.str['SCR_GET_SnowRolling_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_706 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_706 = lua_call(G.str['GetAbility'], [_pc_706, "Cryomancer20"])[0];
      var _value_706 = 0;
      if (!lua_eq(_abil_706, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_706]);
      }
      return [];
    })
    G.str['SCR_GET_Telekinesis_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_708 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_708 = lua_call(G.str['GetAbility'], [_pc_708, "Psychokino11"])[0];
      var _value_708 = 0;
      if (!lua_eq(_abil_708, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_708]);
      }
      return [];
    })
    G.str['SCR_GET_MagneticForce_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_710 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_710 = lua_call(G.str['GetAbility'], [_pc_710, "Psychokino13"])[0];
      var _value_710 = 0;
      if (!lua_eq(_abil_710, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_710]);
      }
      return [];
    })
    G.str['SCR_GET_GravityPole_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_712 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_712 = lua_call(G.str['GetAbility'], [_pc_712, "Psychokino8"])[0];
      var _value_712 = 0;
      if (!lua_eq(_abil_712, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_712]);
      }
      return [];
    })
    G.str['SCR_GET_Meteor_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_714 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_714 = lua_call(G.str['GetAbility'], [_pc_714, "Elementalist11"])[0];
      var _value_714 = 0;
      if (!lua_eq(_abil_714, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_714]);
      }
      return [];
    })
    G.str['SCR_GET_Prominence_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_716 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_716 = lua_call(G.str['GetAbility'], [_pc_716, "Elementalist26"])[0];
      var _value_716 = 4;
      if ((!lua_eq(_abil_716, null) && lua_eq(lua_tableget(_abil_716, 'ActiveState'), 1))) {
        _value_716 = lua_add(_value_716, lua_tableget(_abil_716, 'Level'));
      }
      return [_value_716];
      return [];
    })
    G.str['SCR_GET_Hail_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_718 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_718 = lua_call(G.str['GetAbility'], [_pc_718, "Elementalist17"])[0];
      var _value_718 = 0;
      if (!lua_eq(_abil_718, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_718]);
      }
      return [];
    })
    G.str['SCR_GET_Electrocute_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_720 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_720 = lua_call(G.str['GetAbility'], [_pc_720, "Elementalist20"])[0];
      var _value_720 = 0;
      if (!lua_eq(_abil_720, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_720]);
      }
      return [];
    })
    G.str['SCR_GET_FrostCloud_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_722 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_722 = lua_call(G.str['GetAbility'], [_pc_722, "Elementalist23"])[0];
      var _value_722 = 0;
      if (!lua_eq(_abil_722, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_722]);
      }
      return [];
    })
    G.str['SCR_GET_FrostCloud_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(12, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_FreezingSphere_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_725 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_725 = lua_call(G.str['GetAbility'], [_pc_725, "Elementalist24"])[0];
      var _value_725 = 0;
      if (!lua_eq(_abil_725, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_725]);
      }
      return [];
    })
    G.str['SCR_Get_SkillFactor_pcskill_summon_Familiar'] = (function (_skill) {
      var tmp;
      var _sklLevel_727 = 1;
      var _self_727 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _parent_727 = lua_call(G.str['GetOwner'], [_self_727])[0];
      if (!lua_eq(_parent_727, null)) {
        var _skl_728 = lua_call(G.str['GetSkill'], [_parent_727, 'Sorcerer_SummonFamiliar'])[0];
        if (!lua_eq(_skl_728, null)) {
          _sklLevel_727 = lua_tableget(_skl_728, 'Level');
        }
      }
      var _value_727 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply(lua_tableget(_skill, 'SklFactorByLevel'), (lua_subtract(_sklLevel_727, 1))));
      var _abil_727 = lua_call(G.str['GetAbility'], [_parent_727, "Sorcerer11"])[0];
      if (!lua_eq(_abil_727, null)) {
        _value_727 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_727, _value_727])[0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_727]);
      return [];
    })
    G.str['SCR_GET_SummonFamiliar_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_731 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_731 = lua_call(G.str['GetAbility'], [_pc_731, "Sorcerer11"])[0];
      var _value_731 = 0;
      if (!lua_eq(_abil_731, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_731]);
      }
      return [];
    })
    G.str['SCR_GET_Evocation_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_733 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_733 = lua_call(G.str['GetAbility'], [_pc_733, "Sorcerer12"])[0];
      var _value_733 = 0;
      if (!lua_eq(_abil_733, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_733]);
      }
      return [];
    })
    G.str['SCR_GET_Evocation_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_735 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_735 = lua_add(5, lua_multiply(5, lua_tableget(_skill, 'Level')));
      return [_value_735];
      return [];
    })
    G.str['SCR_GET_Desmodus_Ratio'] = (function (_skill) {
      var tmp;
      var _value_736 = lua_multiply(lua_tableget(_skill, 'Level'), 4);
      return [_value_736];
      return [];
    })
    G.str['SCR_GET_Desmodus_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_737 = lua_multiply(lua_tableget(_skill, 'Level'), 6);
      return [_value_737];
      return [];
    })
    G.str['SCR_GET_GatherCorpse_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_738 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_738 = lua_call(G.str['GetAbility'], [_pc_738, "Necromancer11"])[0];
      var _value_738 = 0;
      if (!lua_eq(_abil_738, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_738]);
      }
      return [];
    })
    G.str['SCR_GET_GatherCorpse_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_740 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_740 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_740];
      return [];
    })
    G.str['SCR_GET_FleshCannon_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_741 = lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_741];
      return [];
    })
    G.str['SCR_GET_FleshHoop_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_742 = lua_tableget(_skill, 'Level');
      return [_value_742];
      return [];
    })
    G.str['SCR_GET_RevengedSevenfold_Time'] = (function (_skill) {
      var tmp;
      var _value_743 = 60;
      var _pc_743 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_743])[0], 1)) {
        _value_743 = 7;
      }
      return [_value_743];
      return [];
    })
    G.str['SCR_GET_RevengedSevenfold_Ratio'] = (function (_skill) {
      var tmp;
      var _value_745 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_745];
      return [];
    })
    G.str['SCR_GET_Ayin_sof_Time'] = (function (_skill) {
      var tmp;
      var _value_746 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 4));
      var _pc_746 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_746])[0], 1)) {
        _value_746 = lua_multiply(_value_746, 0.5);
      }
      return [_value_746];
      return [];
    })
    G.str['SCR_GET_Ayin_sof_Ratio'] = (function (_skill) {
      var tmp;
      var _value_748 = 30;
      _value_748 = lua_multiply(_value_748, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_748];
      return [];
    })
    G.str['SCR_GET_Ayin_sof_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_749 = 15;
      var _pc_749 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_749 = lua_call(G.str['GetAbility'], [_pc_749, "Kabbalist6"])[0];
      if ((!lua_eq(_abil_749, null) && lua_eq(1, lua_tableget(_abil_749, 'ActiveState')))) {
        _value_749 = lua_add(_value_749, lua_tableget(_abil_749, 'Level'));
      }
      return [_value_749];
      return [];
    })
    G.str['SCR_GET_Ayin_sof_Ratio3'] = (function (_skill) {
      var tmp;
      return [lua_multiply(3000, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Gematria_Ratio'] = (function (_skill) {
      var tmp;
      var _value_752 = 10;
      var _pc_752 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilKabbalist14_752 = lua_call(G.str['GetAbility'], [_pc_752, "Kabbalist14"])[0];
      if ((!lua_eq(_abilKabbalist14_752, null) && lua_eq(lua_tableget(_abilKabbalist14_752, 'ActiveState'), 1))) {
        _value_752 = lua_add(_value_752, lua_tableget(_abilKabbalist14_752, 'Level'));
      }
      return [_value_752];
      return [];
    })
    G.str['SCR_GET_Notarikon_Ratio'] = (function (_skill) {
      var tmp;
      var _value_754 = 10;
      var _pc_754 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilKabbalist14_754 = lua_call(G.str['GetAbility'], [_pc_754, "Kabbalist14"])[0];
      if ((!lua_eq(_abilKabbalist14_754, null) && lua_eq(lua_tableget(_abilKabbalist14_754, 'ActiveState'), 1))) {
        _value_754 = lua_add(_value_754, lua_tableget(_abilKabbalist14_754, 'Level'));
      }
      return [_value_754];
      return [];
    })
    G.str['SCR_GET_Multiple_Hit_Chance_Ratio'] = (function (_skill) {
      var tmp;
      var _value_756 = lua_multiply(lua_tableget(_skill, 'Level'), 8);
      return [_value_756];
      return [];
    })
    G.str['SCR_GET_Reduce_Level_Ratio'] = (function (_skill) {
      var tmp;
      var _value_757 = lua_tableget(_skill, 'Level');
      return [_value_757];
      return [];
    })
    G.str['SCR_GET_Reduce_Level_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_758 = lua_add(10, lua_tableget(_skill, 'Level'));
      return [_value_758];
      return [];
    })
    G.str['SCR_GET_Clone_Time'] = (function (_skill) {
      var tmp;
      var _value_759 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_759];
      return [];
    })
    G.str['SCR_GET_PoleofAgony_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_760 = lua_add(7, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_760];
      return [];
    })
    G.str['SCR_GET_PoleofAgony_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_761 = 14;
      var _pc_761 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_761])[0], 1)) {
        _value_761 = 7;
      }
      return [_value_761];
      return [];
    })
    G.str['SCR_GET_Ngadhundi_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_763 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_763];
      return [];
    })
    G.str['SCR_GET_Invocation_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_764 = 40;
      return [_value_764];
      return [];
    })
    G.str['SCR_Get_Pass_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_765 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_765];
      return [];
    })
    G.str['SCR_GET_Combustion_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_766 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_766 = lua_call(G.str['GetAbility'], [_pc_766, "Alchemist11"])[0];
      var _value_766 = 0;
      if (!lua_eq(_abil_766, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_766]);
      }
      return [];
    })
    G.str['SCR_GET_BloodBath_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_768 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_768 = lua_call(G.str['GetAbility'], [_pc_768, "Featherfoot3"])[0];
      var _value_768 = 0;
      if (!lua_eq(_abil_768, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_768]);
      }
      return [];
    })
    G.str['SCR_GET_BloodBath_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_770 = 10;
      return [_value_770];
      return [];
    })
    G.str['SCR_GET_BloodSucking_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_771 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_771 = lua_call(G.str['GetAbility'], [_pc_771, "Featherfoot4"])[0];
      var _value_771 = 0;
      if (!lua_eq(_abil_771, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_771]);
      }
      return [];
    })
    G.str['SCR_GET_BloodSucking_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_773 = 50;
      return [_value_773];
      return [];
    })
    G.str['SCR_GET_BloodSucking_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_774 = lua_add(40, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_774];
      return [];
    })
    G.str['SCR_GET_BonePointing_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_775 = 35;
      return [_value_775];
      return [];
    })
    G.str['SCR_GET_Kurdaitcha_Ratio'] = (function (_skill) {
      var tmp;
      var _value_776 = 10;
      return [_value_776];
      return [];
    })
    G.str['SCR_GET_Kurdaitcha_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_777 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_777 = 15;
      var _abil_777 = lua_call(G.str['GetAbility'], [_pc_777, 'Featherfoot14'])[0];
      if ((!lua_eq(_abil_777, null) && lua_eq(1, lua_tableget(_abil_777, 'ActiveState')))) {
        _value_777 = lua_multiply(_value_777, (lua_add(1, lua_multiply(lua_tableget(_abil_777, 'Level'), 0.01))));
      }
      return [_value_777];
      return [];
    })
    G.str['SCR_GET_HeadShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_779 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_779 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_779])[0], 1)) {
        _value_779 = lua_add((lua_multiply(5, lua_tableget(_skill, 'Level'))), (lua_multiply(lua_tableget(_pc_779, 'HR'), 0.1)));
      }
      return [_value_779];
      return [];
    })
    G.str['SCR_GET_HealingFactor_Time'] = (function (_skill) {
      var tmp;
      var _value_781 = 60;
      var _pc_781 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_781])[0], 1)) {
        _value_781 = 20;
      }
      return [_value_781];
      return [];
    })
    G.str['SCR_GET_HealingFactor_Ratio'] = (function (_skill) {
      var tmp;
      var _value_783 = lua_add(102, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 12.5));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_783]);
      return [];
    })
    G.str['SCR_GET_Bloodletting_Time'] = (function (_skill) {
      var tmp;
      var _value_784 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      var _pc_784 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_784])[0], 1)) {
        _value_784 = lua_divide(_value_784, 3);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_784]);
      return [];
    })
    G.str['SCR_GET_Bloodletting_Ratio'] = (function (_skill) {
      var tmp;
      var _value_786 = lua_subtract(6, lua_tableget(_skill, 'Level'));
      if (lua_lte(_value_786, 0)) {
        _value_786 = 1;
      }
      return [_value_786];
      return [];
    })
    G.str['SCR_GET_Fumigate_Ratio'] = (function (_skill) {
      var tmp;
      var _value_788 = lua_add(2, lua_tableget(_skill, 'Level'));
      return [_value_788];
      return [];
    })
    G.str['SCR_GET_Pandemic_Ratio'] = (function (_skill) {
      var tmp;
      var _value_789 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_789];
      return [];
    })
    G.str['SCR_GET_BeakMask_Time'] = (function (_skill) {
      var tmp;
      var _value_790 = 60;
      var _pc_790 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_790])[0], 1) || lua_eq(lua_call(G.str['IsPVPField'], [_pc_790])[0], 1))) {
        _value_790 = lua_divide(_value_790, 3);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_790]);
      return [];
    })
    G.str['SCR_Get_Modafinil_Ratio'] = (function (_skill) {
      var tmp;
      var _value_792 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      _value_792 = lua_multiply(_value_792, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      var _pc_792 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _casterMNA_792 = lua_call(G.str['TryGetProp'], [_pc_792, "MNA"])[0];
      var _baseLv_792 = lua_call(G.str['TryGetProp'], [_pc_792, "Lv"])[0];
      var _addRate_792 = lua_divide(_casterMNA_792, _baseLv_792);
      if (lua_lte(_addRate_792, 0)) {
        _addRate_792 = 0;
      } else if (lua_lte(1, _addRate_792)) {
        _addRate_792 = 1;
      }
      _value_792 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_792, (lua_add(1, _addRate_792)))])[0];
      return [_value_792];
      return [];
    })
    G.str['SCR_Get_Modafinil_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_795 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 4));
      var _pc_795 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_795])[0], 1) || lua_eq(lua_call(G.str['IsPVPField'], [_pc_795])[0], 1))) {
        _value_795 = lua_divide(_value_795, 3);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_795]);
      return [];
    })
    G.str['SCR_GET_Disenchant_Ratio'] = (function (_skill) {
      var tmp;
      var _value_797 = lua_tablegetcall(G.str['math'], 'min', [lua_multiply(lua_tableget(_skill, 'Level'), 10), 100])[0];
      return [_value_797];
      return [];
    })
    G.str['SCR_GET_Disenchant_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_798 = lua_add(2, lua_tableget(_skill, 'Level'));
      return [_value_798];
      return [];
    })
    G.str['SCR_Get_SkillFactor_BonePointing2'] = (function (_skill) {
      var tmp;
      var _value_799 = lua_tableget(_skill, 'SklFactor');
      var _owl_799 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_799 = lua_call(G.str['GetOwner'], [_owl_799])[0];
      if (!lua_eq(_pc_799, null)) {
        var _bonePointingSkl_800 = lua_call(G.str['GetSkill'], [_pc_799, "Featherfoot_BonePointing"])[0];
        _value_799 = lua_tableget(_bonePointingSkl_800, 'SkillFactor');
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_799]);
      return [];
    })
    G.str['SCR_GET_BonePointing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_801 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_801 = lua_call(G.str['GetAbility'], [_pc_801, "Featherfoot5"])[0];
      var _value_801 = 0;
      if (!lua_eq(_abil_801, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_801]);
      }
      return [];
    })
    G.str['SCR_GET_Ngadhundi_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_803 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_803 = lua_call(G.str['GetAbility'], [_pc_803, "Featherfoot7"])[0];
      var _value_803 = 0;
      if (!lua_eq(_abil_803, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_803]);
      }
      return [];
    })
    G.str['SCR_GET_PoleofAgony_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_805 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_805 = lua_call(G.str['GetAbility'], [_pc_805, "Warlock2"])[0];
      var _value_805 = 0;
      if (!lua_eq(_abil_805, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_805]);
      }
      return [];
    })
    G.str['SCR_GET_Invocation_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_807 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_807 = lua_call(G.str['GetAbility'], [_pc_807, "Warlock4"])[0];
      var _value_807 = 0;
      if (!lua_eq(_abil_807, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_807]);
      }
      return [];
    })
    G.str['SCR_GET_DarkTheurge_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_809 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_809 = lua_call(G.str['GetAbility'], [_pc_809, "Warlock7"])[0];
      var _value_809 = 0;
      if (!lua_eq(_abil_809, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_809]);
      }
      return [];
    })
    G.str['SCR_GET_DarkTheurge_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_811 = 1;
      var _pc_811 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_811 = lua_call(G.str['GetAbility'], [_pc_811, "Warlock18"])[0];
      if ((!lua_eq(_abil_811, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abil_811, "ActiveState"])[0], 1))) {
        _value_811 = lua_multiply(_value_811, 2);
      }
      return [_value_811];
      return [];
    })
    G.str['SCR_GET_Mastema_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_813 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_813 = lua_call(G.str['GetAbility'], [_pc_813, "Warlock9"])[0];
      var _value_813 = 0;
      if (!lua_eq(_abil_813, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_813]);
      }
      return [];
    })
    G.str['SCR_GET_Drain_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_815 = lua_multiply(lua_tableget(_skill, 'Level'), 4.5);
      return [_value_815];
      return [];
    })
    G.str['SCR_GET_Drain_Ratio'] = (function (_skill) {
      var tmp;
      var _value_816 = lua_tableget(_skill, 'Level');
      return [_value_816];
      return [];
    })
    G.str['SCR_GET_Drain_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_817 = 0.7;
      return [_value_817];
      return [];
    })
    G.str['SCR_GET_Hagalaz_Ratio'] = (function (_skill) {
      var tmp;
      var _value_818 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_818];
      return [];
    })
    G.str['SCR_GET_Tiwaz_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_819 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_819 = lua_call(G.str['GetAbility'], [_pc_819, "RuneCaster5"])[0];
      var _value_819 = 0;
      if (!lua_eq(_abil_819, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_819]);
      }
      return [];
    })
    G.str['SCR_GET_FleshStrike_Ratio'] = (function (_skill) {
      var tmp;
      var _value_821 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_821];
      return [];
    })
    G.str['SCR_GET_FleshStrike_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_822 = 100;
      return [_value_822];
      return [];
    })
    G.str['SCR_GET_AlchemisticMissile_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_823 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_823 = lua_call(G.str['GetAbility'], [_pc_823, "Alchemist9"])[0];
      var _value_823 = 0;
      if (!lua_eq(_abil_823, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_823]);
      }
      return [];
    })
    G.str['SCR_GET_KundelaSlash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_825 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_825 = lua_call(G.str['GetAbility'], [_pc_825, "Featherfoot11"])[0];
      var _value_825 = 0;
      if (!lua_eq(_abil_825, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_825]);
      }
      return [];
    })
    G.str['SCR_GET_EnchantedPowder_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_827 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_827 = lua_call(G.str['GetAbility'], [_pc_827, "Enchanter1"])[0];
      var _value_827 = 0;
      if (!lua_eq(_abil_827, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_827]);
      }
      return [];
    })
    G.str['SCR_GET_EnchantedPowder_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_829 = lua_add(6, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_829];
      return [];
    })
    G.str['SCR_GET_Rewards_Ratio'] = (function (_skill) {
      var tmp;
      var _value_830 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_830];
      return [];
    })
    G.str['SCR_GET_Rewards_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_831 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_831];
      return [];
    })
    G.str['SCR_GET_Agility_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_832 = lua_multiply(lua_tableget(_skill, 'Level'), 0.1);
      return [_value_832];
      return [];
    })
    G.str['SCR_GET_Agility_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_833 = 300;
      return [_value_833];
      return [];
    })
    G.str['SCR_GET_Enchantment_Ratio'] = (function (_skill) {
      var tmp;
      var _value_834 = lua_add(4, lua_tableget(_skill, 'Level'));
      return [_value_834];
      return [];
    })
    G.str['SCR_GET_EnchantLightning_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_835 = 300;
      return [_value_835];
      return [];
    })
    G.str['SCR_GET_EnchantLightning_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_836 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_836 = lua_add(lua_add(160, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 60))), (lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), (lua_power((lua_multiply(lua_tableget(_pc_836, 'DEX'), 0.8)), 0.9)))));
      _value_836 = lua_multiply(_value_836, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_836]);
      return [];
    })
    G.str['SCR_GET_Empowering_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_837 = lua_add(lua_multiply(lua_tableget(_skill, 'Level'), 10), 20);
      return [_value_837];
      return [];
    })
    G.str['SCR_GET_Empowering_Ratio'] = (function (_skill) {
      var tmp;
      var _value_838 = lua_tableget(_skill, 'Level');
      return [_value_838];
      return [];
    })
    G.str['SCR_GET_Empowering_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_839 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_839];
      return [];
    })
    G.str['SCR_GET_Portal_Ratio'] = (function (_skill) {
      var tmp;
      var _value_840 = 3;
      var _pc_840 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_840 = lua_call(G.str['GetAbility'], [_pc_840, "Sage1"])[0];
      if ((!lua_eq(_abil_840, null) && lua_eq(1, lua_tableget(_abil_840, 'ActiveState')))) {
        _value_840 = lua_add(_value_840, lua_tableget(_abil_840, 'Level'));
      }
      return [_value_840];
      return [];
    })
    G.str['SCR_GET_Portal_Time'] = (function (_skill) {
      var tmp;
      var _value_842 = lua_subtract(30, (lua_subtract(lua_tableget(_skill, 'Level'), 1)));
      return [_value_842];
      return [];
    })
    G.str['SCR_GET_MicroDimension_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_843 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_843 = lua_call(G.str['GetAbility'], [_pc_843, "Sage2"])[0];
      var _value_843 = 0;
      if (!lua_eq(_abil_843, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_843]);
      }
      return [];
    })
    G.str['SCR_GET_UltimateDimension_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_845 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_845 = lua_call(G.str['GetAbility'], [_pc_845, "Sage3"])[0];
      var _value_845 = 0;
      if (!lua_eq(_abil_845, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_845]);
      }
      return [];
    })
    G.str['SCR_GET_HoleOfDarkness_Ratio'] = (function (_skill) {
      var tmp;
      var _value_847 = 10;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_847]);
      return [];
    })
    G.str['SCR_GET_HoleOfDarkness_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_848 = 20;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_848]);
      return [];
    })
    G.str['SCR_GET_Gevura_Ratio'] = (function (_skill) {
      var tmp;
      var _value_849 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      return [_value_849];
      return [];
    })
    G.str['SCR_GET_Maze_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_850 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_850 = lua_call(G.str['GetAbility'], [_pc_850, "Sage6"])[0];
      var _value_850 = 0;
      if (!lua_eq(_abil_850, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_850]);
      }
      return [];
    })
    G.str['SCR_GET_Maze_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_852 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_852];
      return [];
    })
    G.str['SCR_GET_Blink_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_853 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_853];
      return [];
    })
    G.str['SCR_GET_MissileHole_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_854 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 0.5)));
      return [_value_854];
      return [];
    })
    G.str['SCR_GET_MissileHole_Ratio'] = (function (_skill) {
      var tmp;
      var _value_855 = lua_add(4, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 3));
      var _pc_855 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_855]);
      return [];
    })
    G.str['SCR_GET_Heal_Time'] = (function (_skill) {
      var tmp;
      var _pc_856 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_856 = 40;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_856])[0], 1)) {
        _value_856 = 10;
      }
      return [_value_856];
      return [];
    })
    G.str['SCR_GET_Cure_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_858 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_858 = lua_call(G.str['GetAbility'], [_pc_858, "Cleric11"])[0];
      var _value_858 = 0;
      if (!lua_eq(_abil_858, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_858]);
      }
      return [];
    })
    G.str['SCR_GET_DivineMight_Ratio'] = (function (_skill) {
      var tmp;
      var _value_860 = lua_tableget(_skill, 'Level');
      var _pc_860 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_860 = lua_call(G.str['GetAbility'], [_pc_860, "Oracle20"])[0];
      if ((!lua_eq(_abil_860, null) && lua_eq(lua_tableget(_abil_860, 'ActiveState'), 1))) {
        _value_860 = lua_add(_value_860, lua_tableget(_abil_860, 'Level'));
      }
      return [_value_860];
      return [];
    })
    G.str['SCR_GET_Zaibas_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_862 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_862 = lua_call(G.str['GetAbility'], [_pc_862, "Kriwi11"])[0];
      var _value_862 = 0;
      if (!lua_eq(_abil_862, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_862]);
      }
      return [];
    })
    G.str['SCR_GET_Aspersion_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_864 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_864 = lua_call(G.str['GetAbility'], [_pc_864, "Priest11"])[0];
      var _value_864 = 0;
      if (!lua_eq(_abil_864, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_864]);
      }
      return [];
    })
    G.str['SCR_GET_Exorcise_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_866 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_866 = lua_multiply((lua_add(lua_tableget(_pc_866, 'MNA'), lua_tableget(_pc_866, 'INT'))), lua_tableget(_skill, 'Level'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_866]);
      return [];
    })
    G.str['SCR_GET_Exorcise_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_867 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_867 = lua_call(G.str['GetAbility'], [_pc_867, "Priest20"])[0];
      var _value_867 = 0;
      if (!lua_eq(_abil_867, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_867]);
      }
      return [];
    })
    G.str['SCR_GET_Effigy_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_869 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_869 = lua_call(G.str['GetAbility'], [_pc_869, "Bokor11"])[0];
      var _value_869 = 0;
      if (!lua_eq(_abil_869, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_869]);
      }
      return [];
    })
    G.str['SCR_GET_Damballa_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_871 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_871 = lua_call(G.str['GetAbility'], [_pc_871, "Bokor12"])[0];
      var _value_871 = 0;
      if (!lua_eq(_abil_871, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_871]);
      }
      return [];
    })
    G.str['SCR_GET_Damballa_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_873 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_873 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_873];
      return [];
    })
    G.str['SCR_GET_BwaKayiman_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_874 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_874 = lua_call(G.str['GetAbility'], [_pc_874, "Bokor18"])[0];
      var _value_874 = 0;
      if (!lua_eq(_abil_874, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_874]);
      }
      return [];
    })
    G.str['SCR_GET_Carve_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_876 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_876 = lua_call(G.str['GetAbility'], [_pc_876, "Dievdirbys11"])[0];
      var _value_876 = 0;
      if (!lua_eq(_abil_876, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_876]);
      }
      return [];
    })
    G.str['SCR_Get_SkillFactor_CarveOwl2'] = (function (_skill) {
      var tmp;
      var _value_878 = lua_tableget(_skill, 'SklFactor');
      var _owl_878 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pc_878 = lua_call(G.str['GetOwner'], [_owl_878])[0];
      if (!lua_eq(_pc_878, null)) {
        var _carveOwlSkl_879 = lua_call(G.str['GetSkill'], [_pc_878, "Dievdirbys_CarveOwl"])[0];
        if (!lua_eq(_carveOwlSkl_879, null)) {
          _value_878 = lua_tableget(_carveOwlSkl_879, 'SkillFactor');
        }
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_878]);
      return [];
    })
    G.str['SCR_GET_OwlStatue_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_881 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_881 = lua_call(G.str['GetAbility'], [_pc_881, "Dievdirbys12"])[0];
      var _value_881 = 0;
      if (!lua_eq(_abil_881, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_881]);
      }
      return [];
    })
    G.str['SCR_GET_AstralBodyExplosion_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_883 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_883 = lua_call(G.str['GetAbility'], [_pc_883, "Sadhu11"])[0];
      var _value_883 = 0;
      if (!lua_eq(_abil_883, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_883]);
      }
      return [];
    })
    G.str['SCR_GET_Possession_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_885 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_885 = lua_call(G.str['GetAbility'], [_pc_885, "Sadhu12"])[0];
      var _value_885 = 0;
      if (!lua_eq(_abil_885, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_885]);
      }
      return [];
    })
    G.str['SCR_GET_Possession_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_887 = lua_add(lua_multiply(lua_tableget(_skill, 'Level'), 1), 4);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_887]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_EctoplasmAttack'] = (function (_skill) {
      var tmp;
      var _pc_888 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _OutofBodySkill_888 = lua_call(G.str['GetSkill'], [_pc_888, "Sadhu_OutofBody"])[0];
      var _value_888 = 0;
      if (!lua_eq(_OutofBodySkill_888, null)) {
        _value_888 = lua_tableget(_OutofBodySkill_888, 'SkillFactor');
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_888]);
      return [];
    })
    G.str['SCR_Get_Levitation_ratio'] = (function (_skill) {
      var tmp;
      var _value_890 = 30;
      return [_value_890];
      return [];
    })
    G.str['SCR_Get_BloodCurse_ratio'] = (function (_skill) {
      var tmp;
      var _pc_891 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_891 = 60;
      var _abil_891 = lua_call(G.str['GetAbility'], [_pc_891, 'Featherfoot12'])[0];
      if ((!lua_eq(_abil_891, null) && lua_eq(1, lua_tableget(_abil_891, 'ActiveState')))) {
        _value_891 = 80;
      }
      return [_value_891];
      return [];
    })
    G.str['SCR_Get_BloodCurse_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_893 = lua_add(7, lua_multiply(0.5, lua_tableget(_skill, 'Level')));
      var _pc_893 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_893 = lua_call(G.str['GetAbility'], [_pc_893, 'Featherfoot12'])[0];
      if ((!lua_eq(_abil_893, null) && lua_eq(1, lua_tableget(_abil_893, 'ActiveState')))) {
        _value_893 = lua_add(_value_893, lua_multiply(lua_tableget(_abil_893, 'Level'), 7));
      }
      return [_value_893];
      return [];
    })
    G.str['SCR_GET_Smite_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_895 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_895 = lua_call(G.str['GetAbility'], [_pc_895, "Paladin14"])[0];
      var _value_895 = 0;
      if (!lua_eq(_abil_895, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_895]);
      }
      return [];
    })
    G.str['SCR_GET_Demolition_Ratio'] = (function (_skill) {
      var tmp;
      var _value_897 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_897];
      return [];
    })
    G.str['SCR_GET_Conviction_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_898 = 20;
      return [_value_898];
      return [];
    })
    G.str['SCR_GET_Conviction_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_899 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_899 = lua_call(G.str['GetAbility'], [_pc_899, "Paladin17"])[0];
      var _value_899 = 0;
      if (!lua_eq(_abil_899, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_899]);
      }
      return [];
    })
    G.str['SCR_GET_Conviction_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_901 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_901 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_901];
      return [];
    })
    G.str['SCR_GET_CorpseTower_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_902 = 30;
      return [_value_902];
      return [];
    })
    G.str['SCR_GET_DoublePunch_Ratio'] = (function (_skill) {
      var tmp;
      var _value_903 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      return [_value_903];
      return [];
    })
    G.str['SCR_Get_SkillFactor_DoublePunch'] = (function (_skill) {
      var tmp;
      var _pc_904 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _DoublePunchSkill_904 = lua_call(G.str['GetSkill'], [_pc_904, "Monk_DoublePunch"])[0];
      var _value_904 = 0;
      if (!lua_eq(_DoublePunchSkill_904, null)) {
        _value_904 = lua_tableget(_DoublePunchSkill_904, 'SkillFactor');
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_904]);
      return [];
    })
    G.str['SCR_GET_PalmStrike_Ratio'] = (function (_skill) {
      var tmp;
      var _value_906 = lua_multiply(0.5, lua_tableget(_skill, 'Level'));
      return [_value_906];
      return [];
    })
    G.str['SCR_GET_HandKnife_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_907 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_907 = lua_call(G.str['GetAbility'], [_pc_907, "Monk18"])[0];
      var _value_907 = 0;
      if (!lua_eq(_abil_907, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_907]);
      }
      return [];
    })
    G.str['SCR_GET_Bunshin_no_jutsu_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_909 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_909];
      return [];
    })
    G.str['SCR_GET_Aspergillum_Time'] = (function (_skill) {
      var tmp;
      var _value_910 = lua_multiply(lua_tableget(_skill, 'Level'), 60);
      return [_value_910];
      return [];
    })
    G.str['SCR_GET_Methadone_Time'] = (function (_skill) {
      var tmp;
      var _value_911 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_911];
      return [];
    })
    G.str['SCR_GET_IronMaiden_Time'] = (function (_skill) {
      var tmp;
      var _value_912 = lua_add(4, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_912];
      return [];
    })
    G.str['SCR_GET_Judgment_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_913 = lua_add(15, lua_tableget(_skill, 'Level'));
      return [_value_913];
      return [];
    })
    G.str['SCR_GET_LastRites_Time'] = (function (_skill) {
      var tmp;
      var _value_914 = lua_add(150, lua_multiply(lua_tableget(_skill, 'Level'), 30));
      return [_value_914];
      return [];
    })
    G.str['SCR_GET_LastRites_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_915 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_915 = lua_call(G.str['TryGetProp'], [_pc_915, "Lv"])[0];
      var _pcMNA_915 = lua_call(G.str['TryGetProp'], [_pc_915, "MNA"])[0];
      var _pcLevelRate_915 = lua_add((lua_divide(_pcLevel_915, 6.5)), 15);
      var _baseDamageValue_915 = lua_add(200, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), _pcLevelRate_915));
      var _pcMnaRate_915 = lua_add((lua_multiply(lua_divide(_pcMNA_915, (lua_add(_pcMNA_915, _pcLevel_915))), 2)), 0.15);
      var _value_915 = lua_multiply(_baseDamageValue_915, _pcMnaRate_915);
      _value_915 = lua_multiply(_value_915, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_915]);
      return [];
    })
    G.str['SCR_GET_MagnusExorcismus_Time'] = (function (_skill) {
      var tmp;
      var _value_916 = 9;
      return [_value_916];
      return [];
    })
    G.str['SCR_GET_BuildCappella_Ratio'] = (function (_skill) {
      var tmp;
      var _value_917 = 30;
      return [_value_917];
      return [];
    })
    G.str['SCR_GET_BuildCappella_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_918 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      _value_918 = lua_multiply(_value_918, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_918];
      return [];
    })
    G.str['SCR_GET_Binatio_Ratio'] = (function (_skill) {
      var tmp;
      var _value_919 = lua_add(55, lua_multiply(lua_tableget(_skill, 'Level'), 15));
      _value_919 = lua_multiply(_value_919, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_919]);
      return [];
    })
    G.str['SCR_GET_Binatio_Time'] = (function (_skill) {
      var tmp;
      var _value_920 = 30;
      return [_value_920];
      return [];
    })
    G.str['SCR_GET_ParaclitusTime_Time'] = (function (_skill) {
      var tmp;
      var _value_921 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_921];
      return [];
    })
    G.str['SCR_GET_1InchPunch_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_922 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_922 = lua_call(G.str['GetAbility'], [_pc_922, "Monk21"])[0];
      var _value_922 = 0;
      if (!lua_eq(_abil_922, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_922]);
      }
      return [];
    })
    G.str['SCR_GET_EnergyBlast_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_924 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_924 = lua_call(G.str['GetAbility'], [_pc_924, "Monk23"])[0];
      var _value_924 = 0;
      if (!lua_eq(_abil_924, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_924]);
      }
      return [];
    })
    G.str['SCR_GET_EnergyBlast_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_926 = lua_add(35, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_926];
      return [];
    })
    G.str['SCR_GET_God_Finger_Flicking_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_927 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_927 = lua_call(G.str['GetAbility'], [_pc_927, "Monk24"])[0];
      var _value_927 = 0;
      if (!lua_eq(_abil_927, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_927]);
      }
      return [];
    })
    G.str['SCR_GET_Indulgentia_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_929 = lua_add(64, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 8.5));
      _value_929 = lua_multiply(_value_929, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_929];
      return [];
    })
    G.str['SCR_GET_IncreaseMagicDEF_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_930 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_930 = 300;
      var _abil_930 = lua_call(G.str['GetAbility'], [_pc_930, "Pardoner6"])[0];
      var _ActiveState_930 = lua_call(G.str['TryGetProp'], [_abil_930, "ActiveState"])[0];
      if ((!lua_eq(_abil_930, null) && lua_eq(_ActiveState_930, 1))) {
        var _abilLevel_931 = lua_call(G.str['TryGetProp'], [_abil_930, "Level"])[0];
        var _abilValue_931 = lua_multiply(_abilLevel_931, 20);
        _value_930 = lua_add(_value_930, _abilValue_931);
      }
      return [_value_930];
      return [];
    })
    G.str['SCR_GET_IncreaseMagicDEF_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_932 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_932 = lua_multiply(lua_tableget(_skill, 'Level'), 1.5);
      var _pcStat_932 = lua_call(G.str['TryGetProp'], [_pc_932, "MNA", 1])[0];
      var _pcLevel_932 = lua_call(G.str['TryGetProp'], [_pc_932, "Lv", 1])[0];
      var _casterMnaRate_932 = lua_add((lua_multiply(lua_divide(_pcStat_932, (lua_add(_pcStat_932, _pcLevel_932))), 2)), 0.15);
      _value_932 = lua_multiply(_value_932, _casterMnaRate_932);
      _value_932 = lua_multiply(_value_932, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_932];
      return [];
    })
    G.str['SCR_GET_IncreaseMagicDEF_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_933 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_933 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_933];
      return [];
    })
    G.str['SCR_GET_Incineration_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_934 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_934 = lua_call(G.str['GetAbility'], [_pc_934, "PlagueDoctor2"])[0];
      var _value_934 = 0;
      if (!lua_eq(_abil_934, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_934]);
      }
      return [];
    })
    G.str['SCR_GET_Incineration_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_936 = 10;
      return [_value_936];
      return [];
    })
    G.str['SCR_GET_Nachash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_937 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_937 = lua_call(G.str['GetAbility'], [_pc_937, "Kabbalist3"])[0];
      var _value_937 = 0;
      if (!lua_eq(_abil_937, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_937]);
      }
      return [];
    })
    G.str['SCR_GET_Merkabah_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_939 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_939 = lua_call(G.str['GetAbility'], [_pc_939, "Kabbalist8"])[0];
      var _value_939 = 0;
      if (!lua_eq(_abil_939, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_939]);
      }
      return [];
    })
    G.str['SCR_GET_Merkabah_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_941 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_941];
      return [];
    })
    G.str['SCR_GET_MagnusExorcismus_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_942 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_942 = lua_call(G.str['GetAbility'], [_pc_942, "Chaplain3"])[0];
      var _value_942 = 0;
      if (!lua_eq(_abil_942, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_942]);
      }
      return [];
    })
    G.str['SCR_GET_PlagueVapours_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_944 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_944 = lua_call(G.str['GetAbility'], [_pc_944, "PlagueDoctor9"])[0];
      var _value_944 = 0;
      if (!lua_eq(_abil_944, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_944]);
      }
      return [];
    })
    G.str['SCR_GET_PlagueVapours_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_946 = 15;
      return [_value_946];
      return [];
    })
    G.str['SCR_GET_IronMaiden_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_947 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_947 = lua_call(G.str['GetAbility'], [_pc_947, "Inquisitor2"])[0];
      var _value_947 = 0;
      if (!lua_eq(_abil_947, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_947]);
      }
      return [];
    })
    G.str['SCR_GET_HereticsFork_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_949 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_949 = lua_call(G.str['GetAbility'], [_pc_949, "Inquisitor3"])[0];
      var _value_949 = 0;
      if (!lua_eq(_abil_949, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_949]);
      }
      return [];
    })
    G.str['SCR_GET_IronBoots_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_951 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_951 = lua_call(G.str['GetAbility'], [_pc_951, "Inquisitor4"])[0];
      var _value_951 = 0;
      if (!lua_eq(_abil_951, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_951]);
      }
      return [];
    })
    G.str['SCR_GET_PearofAnguish_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_953 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_953 = lua_call(G.str['GetAbility'], [_pc_953, "Inquisitor6"])[0];
      var _value_953 = 0;
      if (!lua_eq(_abil_953, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_953]);
      }
      return [];
    })
    G.str['SCR_GET_PearofAnguish_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_955 = 5;
      return [_value_955];
      return [];
    })
    G.str['SCR_GET_BreakingWheel_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_956 = 10;
      var _pc_956 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_956 = lua_call(G.str['GetAbility'], [_pc_956, "Inquisitor20"])[0];
      if ((!lua_eq(_abil_956, null) && lua_eq(lua_tableget(_abil_956, 'ActiveState'), 1))) {
        _value_956 = lua_add(_value_956, lua_tableget(_abil_956, 'Level'));
      }
      return [_value_956];
      return [];
    })
    G.str['SCR_GET_MalleusMaleficarum_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_958 = lua_add(7, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_958];
      return [];
    })
    G.str['SCR_GET_MalleusMaleficarum_Ratio'] = (function (_skill) {
      var tmp;
      var _value_959 = lua_add(6, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 6));
      return [_value_959];
      return [];
    })
    G.str['SCR_GET_GodSmash_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_960 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_960 = lua_call(G.str['GetAbility'], [_pc_960, "Inquisitor10"])[0];
      var _value_960 = 0;
      if (!lua_eq(_abil_960, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_960]);
      }
      return [];
    })
    G.str['SCR_GET_Entrenchment_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_962 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_962 = lua_call(G.str['GetAbility'], [_pc_962, "Daoshi2"])[0];
      var _value_962 = 0;
      if (!lua_eq(_abil_962, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_962]);
      }
      return [];
    })
    G.str['SCR_GET_Hurling_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_964 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_964 = lua_call(G.str['GetAbility'], [_pc_964, "Daoshi3"])[0];
      var _value_964 = 0;
      if (!lua_eq(_abil_964, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_964]);
      }
      return [];
    })
    G.str['SCR_GET_StormCalling_Ratio'] = (function (_skill) {
      var tmp;
      var _value_966 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_966]);
      return [];
    })
    G.str['SCR_GET_PhantomEradication_Ratio'] = (function (_skill) {
      var tmp;
      var _value_967 = 6;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_967]);
      return [];
    })
    G.str['SCR_GET_BegoneDemon_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_968 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_968 = lua_call(G.str['GetAbility'], [_pc_968, "Daoshi9"])[0];
      var _value_968 = 0;
      if (!lua_eq(_abil_968, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_968]);
      }
      return [];
    })
    G.str['SCR_GET_DarkSight_Time'] = (function (_skill) {
      var tmp;
      var _value_970 = lua_multiply(lua_tableget(_skill, 'Level'), 60);
      var _pc_970 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_970])[0], 1)) {
        _value_970 = 30;
      }
      return [_value_970];
      return [];
    })
    G.str['SCR_GET_DarkSight_Ratio'] = (function (_skill) {
      var tmp;
      var _value_972 = lua_multiply(40, (lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 0.1))));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_972]);
      return [];
    })
    G.str['SCR_GET_Hurling_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_973 = lua_tableget(_skill, 'Level');
      return [_value_973];
      return [];
    })
    G.str['SCR_GET_HiddenPotential_Ratio'] = (function (_skill) {
      var tmp;
      var _value_974 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      var _pc_974 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_974 = lua_call(G.str['GetAbility'], [_pc_974, "Daoshi5"])[0];
      if ((!lua_eq(_abil_974, null) && lua_eq(1, lua_tableget(_abil_974, 'ActiveState')))) {
        _value_974 = lua_add(_value_974, lua_tableget(_abil_974, 'Level'));
      }
      return [_value_974];
      return [];
    })
    G.str['SCR_GET_HiddenPotential_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_976 = lua_multiply(50, lua_tableget(_skill, 'Level'));
      return [_value_976];
      return [];
    })
    G.str['SCR_GET_HiddenPotential_Time'] = (function (_skill) {
      var tmp;
      var _value_977 = 60;
      var _pc_977 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_977 = lua_call(G.str['GetAbility'], [_pc_977, "Daoshi6"])[0];
      if ((!lua_eq(_abil_977, null) && lua_eq(1, lua_tableget(_abil_977, 'ActiveState')))) {
        _value_977 = lua_add(_value_977, lua_multiply(lua_tableget(_abil_977, 'Level'), 5));
      }
      return [_value_977];
      return [];
    })
    G.str['SCR_GET_StormCalling_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_979 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      return [_value_979];
      return [];
    })
    G.str['SCR_GET_StormCalling_Time'] = (function (_skill) {
      var tmp;
      var _value_980 = lua_add(3, lua_tableget(_skill, 'Level'));
      return [_value_980];
      return [];
    })
    G.str['SCR_GET_TriDisaster_Time'] = (function (_skill) {
      var tmp;
      var _value_981 = lua_multiply(18, lua_tableget(_skill, 'Level'));
      return [_value_981];
      return [];
    })
    G.str['SCR_GET_TriDisaster_Ratio'] = (function (_skill) {
      var tmp;
      var _value_982 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      _value_982 = lua_multiply(_value_982, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_982]);
      return [];
    })
    G.str['SCR_GET_CreepingDeath_Ratio'] = (function (_skill) {
      var tmp;
      var _value_983 = lua_multiply(lua_tableget(_skill, 'Level'), 4);
      return [_value_983];
      return [];
    })
    G.str['SCR_GET_CreepingDeath_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_984 = 624;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_984]);
      return [];
    })
    G.str['SCR_GET_ShapeShifting_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_985 = lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return [_value_985];
      return [];
    })
    G.str['SCR_GET_Transform_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_986 = lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return [_value_986];
      return [];
    })
    G.str['SCR_GET_Lycanthropy_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_987 = 100;
      return [_value_987];
      return [];
    })
    G.str['SCR_GET_Lycanthropy_Ratio'] = (function (_skill) {
      var tmp;
      var _value_988 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_988];
      return [];
    })
    G.str['SCR_GET_Lycanthropy_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_989 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      var _pc_989 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilDruid20_989 = lua_call(G.str['GetAbility'], [_pc_989, "Druid20"])[0];
      if ((!lua_eq(_abilDruid20_989, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilDruid20_989, 'ActiveState'])[0], 1))) {
        _value_989 = lua_add(_value_989, 10);
      }
      return [_value_989];
      return [];
    })
    G.str['SCR_Get_SkillFactor_Muleta'] = (function (_skill) {
      var tmp;
      var _pc_991 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _MuletaSkill_991 = lua_call(G.str['GetSkill'], [_pc_991, "Matador_Muleta"])[0];
      var _value_991 = 0;
      if (!lua_eq(_MuletaSkill_991, null)) {
        _value_991 = lua_add(lua_tableget(_MuletaSkill_991, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_MuletaSkill_991, 'Level'), 1)), lua_tableget(_MuletaSkill_991, 'SklFactorByLevel')));
        var _abil_992 = lua_call(G.str['GetAbility'], [_pc_991, "Matador1"])[0];
        if (!lua_eq(_abil_992, null)) {
          _value_991 = lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR'], [_abil_992, _value_991])[0];
        }
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_991]);
      return [];
    })
    G.str['SCR_Get_Muleta_CastTime'] = (function (_skill) {
      var tmp;
      var _value_994 = 1;
      var _pc_994 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilMatador7_994 = lua_call(G.str['GetAbility'], [_pc_994, "Matador7"])[0];
      if ((!lua_eq(_abilMatador7_994, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilMatador7_994, 'ActiveState'])[0], 1))) {
        _value_994 = lua_add(_value_994, (lua_multiply(lua_tableget(_abilMatador7_994, 'Level'), 0.5)));
      }
      return [_value_994];
      return [];
    })
    G.str['SCR_Get_Muleta_Ratio'] = (function (_skill) {
      var tmp;
      var _value_996 = lua_add(914, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 50.3));
      var _pc_996 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_996 = lua_call(G.str['GetAbility'], [_pc_996, "Matador1"])[0];
      if (!lua_eq(_abil_996, null)) {
        _value_996 = lua_multiply(_value_996, (lua_add(1, (lua_multiply(lua_tableget(_abil_996, 'Level'), 0.005)))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_996]);
      return [];
    })
    G.str['SCR_Get_Muleta_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_998 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_998];
      return [];
    })
    G.str['SCR_Get_SkillFactor_DoubleGun'] = (function (_skill) {
      var tmp;
      var _pc_999 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _DoubleGunSkill_999 = lua_call(G.str['GetSkill'], [_pc_999, "Bulletmarker_DoubleGunStance"])[0];
      var _value_999 = 0;
      if (!lua_eq(_DoubleGunSkill_999, null)) {
        _value_999 = lua_add(lua_tableget(_DoubleGunSkill_999, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_DoubleGunSkill_999, 'Level'), 1)), lua_tableget(_DoubleGunSkill_999, 'SklFactorByLevel')));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_999]);
      return [];
    })
    G.str['SCR_GET_DoubleGunStance_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1001 = lua_add(100, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return [_value_1001];
      return [];
    })
    G.str['SCR_GET_EmperorsBane_Time'] = (function (_skill) {
      var tmp;
      var _value_1002 = 4;
      return [_value_1002];
      return [];
    })
    G.str['SCR_GET_EmperorsBane_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1003 = 8;
      return [_value_1003];
      return [];
    })
    G.str['SCR_GET_Gohei_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1004 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1004 = lua_call(G.str['GetAbility'], [_pc_1004, "Miko1"])[0];
      var _value_1004 = 0;
      if (!lua_eq(_abil_1004, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_1004]);
      }
      return [];
    })
    G.str['SCR_GET_Hamaya_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1006 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1006 = lua_call(G.str['GetAbility'], [_pc_1006, "Miko3"])[0];
      var _value_1006 = 0;
      if (!lua_eq(_abil_1006, null)) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_1006]);
      }
      return [];
    })
    G.str['SCR_GET_Hamaya_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1008 = 8;
      return [_value_1008];
      return [];
    })
    G.str['SCR_GET_HoukiBroom_Time'] = (function (_skill) {
      var tmp;
      var _value_1009 = 5;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1009]);
      return [];
    })
    G.str['SCR_GET_HoukiBroom_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1010 = lua_add(5, lua_tableget(_skill, 'Level'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1010]);
      return [];
    })
    G.str['SCR_GET_KaguraDance_Time'] = (function (_skill) {
      var tmp;
      var _value_1011 = lua_add(5, lua_multiply(5, lua_tableget(_skill, 'Level')));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1011]);
      return [];
    })
    G.str['SCR_GET_KaguraDance_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1012 = lua_add(70, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      var _pc_1012 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1012 = lua_call(G.str['GetAbility'], [_pc_1012, "Miko5"])[0];
      if ((!lua_eq(_abil_1012, null) && lua_eq(lua_tableget(_abil_1012, 'ActiveState'), 1))) {
        _value_1012 = lua_multiply(_value_1012, 1.1);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1012]);
      return [];
    })
    G.str['SCR_GET_Omikuji_Time'] = (function (_skill) {
      var tmp;
      var _value_1014 = 10;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1014]);
      return [];
    })
    G.str['SCR_GET_Omikuji_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1015 = lua_multiply(20, lua_tableget(_skill, 'Level'));
      _value_1015 = lua_multiply(_value_1015, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1015]);
      return [];
    })
    G.str['SCR_GET_Omikuji_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1016 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      _value_1016 = lua_multiply(_value_1016, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1016]);
      return [];
    })
    G.str['SCR_GET_Omikuji_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1017 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      _value_1017 = lua_multiply(_value_1017, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1017]);
      return [];
    })
    G.str['SCR_GET_Invulnerable_Time'] = (function (_skill) {
      var tmp;
      var _value_1018 = lua_add(20, lua_tableget(_skill, 'Level'));
      return [_value_1018];
      return [];
    })
    G.str['SCR_GET_Immolation_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1019 = lua_multiply(lua_tableget(_skill, 'Level'), 0.001);
      return [_value_1019];
      return [];
    })
    G.str['SCR_GET_Fanaticism_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1020 = lua_add(10, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 5)));
      return [_value_1020];
      return [];
    })
    G.str['SCR_GET_BlindFaith_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1021 = lua_add(20, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 20)));
      return [_value_1021];
      return [];
    })
    G.str['SCR_GET_FanaticIllusion_Time'] = (function (_skill) {
      var tmp;
      var _value_1022 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1022];
      return [];
    })
    G.str['SCR_GET_Fanaticism_Time'] = (function (_skill) {
      var tmp;
      var _value_1023 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1023];
      return [];
    })
    G.str['SCR_GET_KaguraDance_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1024 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1024]);
      return [];
    })
    G.str['SCR_Get_BodkinPoint_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1025 = lua_add(112, lua_multiply(lua_tableget(_skill, 'Level'), 8));
      return [_value_1025];
      return [];
    })
    G.str['SCR_GET_SR_LV_BodkinPoint'] = (function (_skill) {
      var tmp;
      var _pc_1026 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_add(1, lua_tableget(_pc_1026, 'SR')), (lua_multiply(lua_tableget(_skill, 'Level'), 0.2)))]);
      return [];
    })
    G.str['SCR_GET_SR_LV_Skarphuggning'] = (function (_skill) {
      var tmp;
      var _pc_1027 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1027 = lua_call(G.str['GetAbility'], [_pc_1027, "Hackapell10"])[0];
      var _value_1027 = lua_add(lua_tableget(_pc_1027, 'SR'), lua_tableget(_skill, 'SklSR'));
      if ((!lua_eq(_abil_1027, null) && lua_eq(lua_tableget(_abil_1027, 'ActiveState'), 1))) {
        _value_1027 = lua_add(_value_1027, lua_tableget(_abil_1027, 'Level'));
      }
      return [_value_1027];
      return [];
    })
    G.str['SCR_GET_Kasiwade_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1029 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1029];
      return [];
    })
    G.str['SCR_GET_SR_LV_Stabbing'] = (function (_skill) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_Get_BodkinPoint_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_Get_DeployPavise_Time'] = (function (_skill) {
      var tmp;
      var _pc_1032 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1032 = 30;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1032])[0], 1)) {
        _value_1032 = 900;
      }
      var _abil_1032 = lua_call(G.str['GetAbility'], [_pc_1032, 'QuarrelShooter24'])[0];
      if ((!lua_eq(_abil_1032, null) && lua_eq(lua_tableget(_abil_1032, 'ActiveState'), 1))) {
        _value_1032 = lua_multiply(_value_1032, 0.5);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1032]);
      return [];
    })
    G.str['SCR_Get_DeployPavise_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1035 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      var _pc_1035 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1035])[0], 1)) {
        _value_1035 = 15;
      } else {
        var _abil_1037 = lua_call(G.str['GetAbility'], [_pc_1035, 'QuarrelShooter24'])[0];
        if ((!lua_eq(_abil_1037, null) && lua_eq(lua_tableget(_abil_1037, 'ActiveState'), 1))) {
          _value_1035 = lua_tablegetcall(G.str['math'], 'ceil', [lua_multiply(_value_1035, 0.5)])[0];
        }
      }
      return [_value_1035];
      return [];
    })
    G.str['SCR_Get_DeployPavise_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1039 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1039 = lua_call(G.str['GetAbility'], [_pc_1039, 'QuarrelShooter9'])[0];
      var _value_1039 = 40;
      if ((!lua_eq(_abil_1039, null) && lua_eq(lua_tableget(_abil_1039, 'ActiveState'), 1))) {
        _value_1039 = lua_add(_value_1039, lua_multiply(lua_tableget(_abil_1039, 'Level'), 1));
      }
      return [_value_1039];
      return [];
    })
    G.str['SCR_Get_BounceShot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1041 = 6;
      return [_value_1041];
      return [];
    })
    G.str['SCR_Get_SmokeBomb_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))];
      return [];
    })
    G.str['SCR_Get_ArrowSprinkle_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(0, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_SteadyAim_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1044 = lua_tableget(_skill, 'Level');
      _value_1044 = lua_multiply(_value_1044, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1044];
      return [];
    })
    G.str['SCR_Get_SteadyAim_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1045 = lua_multiply(lua_tableget(_skill, 'Level'), 1.5);
      _value_1045 = lua_multiply(_value_1045, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1045];
      return [];
    })
    G.str['SCR_Get_Retrieve_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(4, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_Retrieve_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(6, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_Get_Hounding_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1048 = lua_multiply(lua_tableget(_skill, 'Level'), 100);
      return [_value_1048];
      return [];
    })
    G.str['SCR_Get_Snatching_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_multiply(2, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_StoneCurse_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(3, lua_multiply(2, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_Get_StoneCurse_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1051 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1051 = 5;
      var _abil_1051 = lua_call(G.str['GetAbility'], [_pc_1051, 'Elementalist2'])[0];
      if ((!lua_eq(_abil_1051, null) && lua_eq(1, lua_tableget(_abil_1051, 'ActiveState')))) {
        _value_1051 = lua_add(_value_1051, lua_tableget(_abil_1051, 'Level'));
      }
      return [_value_1051];
      return [];
    })
    G.str['SCR_Get_SummonFamiliar_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_Get_SummonSalamion_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_1054 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 10))];
      return [];
    })
    G.str['SCR_Get_SummonSalamion_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1055 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_tableget(_pc_1055, 'Lv')];
      return [];
    })
    G.str['SCR_Get_SummonSalamion_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1056 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 3)));
      return [_value_1056];
      return [];
    })
    G.str['SCR_Get_SummonServant_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1057 = lua_tableget(_skill, 'Level');
      if (lua_lt(5, _value_1057)) {
        _value_1057 = 5;
      }
      return [_value_1057];
      return [];
    })
    G.str['SCR_Get_Hail_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1059 = 10;
      return [_value_1059];
      return [];
    })
    G.str['SCR_Get_Rain_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1060 = lua_add(8, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1060];
      return [];
    })
    G.str['SCR_Get_Rain_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1061 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1061 = 0;
      var _abil_1061 = lua_call(G.str['GetAbility'], [_pc_1061, 'Elementalist9'])[0];
      if ((!lua_eq(_abil_1061, null) && lua_eq(1, lua_tableget(_abil_1061, 'ActiveState')))) {
        _value_1061 = lua_add(_value_1061, lua_multiply(lua_tableget(_abil_1061, 'Level'), 5));
      }
      return [_value_1061];
      return [];
    })
    G.str['SCR_GET_SafetyZone_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1063 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1063 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      var _abil_1063 = lua_call(G.str['GetAbility'], [_pc_1063, 'Cleric18'])[0];
      if ((!lua_eq(_abil_1063, null) && lua_eq(1, lua_tableget(_abil_1063, 'ActiveState')))) {
        _value_1063 = lua_add(_value_1063, lua_multiply(lua_tableget(_abil_1063, 'Level'), 1));
      }
      return [_value_1063];
      return [];
    })
    G.str['SCR_GET_Briquetting_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1065 = lua_add(4.5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_1065];
      return [];
    })
    G.str['SCR_GET_ItemAwakening_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_Arrest_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1067 = lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_1067];
      return [];
    })
    G.str['SCR_Get_Quicken_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1068 = lua_add(15, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return [_value_1068];
      return [];
    })
    G.str['SCR_GET_Quicken_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 6))];
      return [];
    })
    G.str['SCR_GET_Samsara_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_Stop_Time'] = (function (_skill) {
      var tmp;
      var _pc_1071 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1071 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _zone_1071 = lua_call(G.str['GetZoneName'], [_pc_1071])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1071])[0], 1) || lua_eq(_zone_1071, 'pvp_Mine'))) {
        _value_1071 = lua_multiply(_value_1071, 0.5);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1071]);
      return [];
    })
    G.str['SCR_Get_Bodkin_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1073 = lua_multiply(lua_tableget(_skill, 'Level'), 1);
      return [_value_1073];
      return [];
    })
    G.str['SCR_Get_Haste_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1074 = lua_add(40, lua_multiply(lua_tableget(_skill, 'Level'), 8));
      var _pc_1074 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1074])[0], 1)) {
        _value_1074 = lua_divide(_value_1074, 3);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1074]);
      return [];
    })
    G.str['SCR_Get_CreateShoggoth_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1076 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1076]);
      return [];
    })
    G.str['SCR_Get_CreateShoggoth_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1077 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1077]);
      return [];
    })
    G.str['SCR_Get_CreateShoggoth_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1078 = 100;
      var _masterValue_1078 = 0;
      var _pc_1078 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1078 = lua_call(G.str['GetAbility'], [_pc_1078, "Necromancer5"])[0];
      if (!lua_eq(_abil_1078, null)) {
        if (lua_eq(lua_tableget(_abil_1078, 'Level'), 100)) {
          _masterValue_1078 = 10;
        }
        _value_1078 = lua_add(lua_add(_value_1078, lua_multiply(lua_tableget(_abil_1078, 'Level'), 0.5)), _masterValue_1078);
      }
      return [_value_1078];
      return [];
    })
    G.str['SCR_Get_CreateShoggoth_Parts'] = (function (_skill) {
      var tmp;
      var _pc_1081 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1081 = 30;
      return [_value_1081];
      return [];
    })
    G.str['SCR_Get_FleshCannon_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1082 = 15;
      return [_value_1082];
      return [];
    })
    G.str['SCR_Get_FleshHoop_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1083 = 5;
      return [_value_1083];
      return [];
    })
    G.str['SCR_GET_DirtyWall_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1084 = lua_add(14, lua_tableget(_skill, 'Level'));
      return [_value_1084];
      return [];
    })
    G.str['SCR_GET_DirtyWall_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1085 = lua_add(2, lua_tableget(_skill, 'Level'));
      return [_value_1085];
      return [];
    })
    G.str['SCR_GET_DirtyWall_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1086 = 30;
      return [_value_1086];
      return [];
    })
    G.str['SCR_GET_DirtyPole_Time'] = (function (_skill) {
      var tmp;
      var _value_1087 = lua_add(14, lua_tableget(_skill, 'Level'));
      return [_value_1087];
      return [];
    })
    G.str['SCR_GET_DirtyPole_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1088 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      var _pc_1088 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1088])[0], 1)) {
        _value_1088 = 900;
      }
      return [_value_1088];
      return [];
    })
    G.str['SCR_GET_DirtyPole_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1090 = 5;
      return [_value_1090];
      return [];
    })
    G.str['SCR_GET_Disinter_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1091 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1091 = 70;
      return [_value_1091];
      return [];
    })
    G.str['SCR_Get_Cloaking_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Cloaking_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1093 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      _value_1093 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1093, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1093];
      return [];
    })
    G.str['SCR_GET_DoubleAttack_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1094 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      _value_1094 = lua_multiply(_value_1094, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1094];
      return [];
    })
    G.str['SCR_GET_DoubleAttack_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1095 = 40;
      return [_value_1095];
      return [];
    })
    G.str['SCR_GET_FreeStep_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1096 = lua_multiply(lua_tableget(_skill, 'Level'), 4);
      _value_1096 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1096, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1096];
      return [];
    })
    G.str['SCR_Get_SwellBody_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_ShrinkBody_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_SwellBody_Ratio'] = (function (_skill) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))]);
      return [];
    })
    G.str['SCR_Get_ShrinkBody_Ratio'] = (function (_skill) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))]);
      return [];
    })
    G.str['SCR_Get_Praise_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(60, lua_multiply(10, (lua_subtract(lua_tableget(_skill, 'Level'), 1))))];
      return [];
    })
    G.str['SCR_Get_Praise_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1102 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1102 = lua_add(25, lua_multiply(5, (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      return [_value_1102];
      return [];
    })
    G.str['SCR_Get_Praise_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1103 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1103 = lua_multiply(0.3, lua_tableget(_skill, 'Level'));
      return [_value_1103];
      return [];
    })
    G.str['SCR_Get_Pointing_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 6))];
      return [];
    })
    G.str['SCR_Get_Growling_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1105 = lua_multiply(lua_tableget(_skill, 'Level'), 1.5);
      return [_value_1105];
      return [];
    })
    G.str['SCR_Get_Growling_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1106 = lua_add(3, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 1));
      return [_value_1106];
      return [];
    })
    G.str['SCR_Get_Camouflage_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1107 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1107]);
      return [];
    })
    G.str['SCR_Get_Camouflage_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1108 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _spdrate_1108 = lua_subtract(1, (lua_multiply(lua_tableget(_skill, 'Level'), 0.1)));
      var _value_1108 = lua_tablegetcall(G.str['math'], 'max', [lua_multiply(30, _spdrate_1108), lua_multiply(lua_tableget(_pc_1108, 'MSPD'), _spdrate_1108)])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1108]);
      return [];
    })
    G.str['SCR_Get_FluFlu_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1109 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1109 = 5;
      var _Scout6_abil_1109 = lua_call(G.str['GetAbility'], [_pc_1109, 'Scout6'])[0];
      if ((!lua_eq(_Scout6_abil_1109, null) && lua_eq(1, lua_tableget(_Scout6_abil_1109, 'ActiveState')))) {
        _value_1109 = lua_add(_value_1109, (lua_multiply(lua_tableget(_Scout6_abil_1109, 'Level'), 1)));
      }
      return [_value_1109];
      return [];
    })
    G.str['SCR_Get_Beprepared_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1111 = lua_multiply(lua_multiply(5, lua_tableget(_skill, 'Level')), 1);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1111]);
      return [];
    })
    G.str['SCR_Get_Fluflu_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1112 = lua_add(8, lua_multiply(lua_tableget(_skill, 'Level'), 0.2));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1112]);
      return [];
    })
    G.str['SCR_Get_StoneShot_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1113 = 4;
      var _pc_1113 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _zone_1113 = lua_call(G.str['GetZoneName'], [_pc_1113])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1113])[0], 1) || lua_eq(_zone_1113, 'pvp_Mine'))) {
        _value_1113 = lua_divide(_value_1113, 2);
      }
      return [_value_1113];
      return [];
    })
    G.str['SCR_GET_SnowRolling_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1115 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1115]);
      return [];
    })
    G.str['SCR_GET_Barrier_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1116 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_1116];
      return [];
    })
    G.str['SCR_GET_Sanctuary_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1117 = lua_multiply(3, lua_tableget(_skill, 'Level'));
      _value_1117 = lua_multiply(_value_1117, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1117];
      return [];
    })
    G.str['SCR_GET_Sanctuary_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1118 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _MDEF_1118 = lua_call(G.str['SCR_CALC_BASIC_MDEF'], [_pc_1118])[0];
      var _mdefRate_1118 = lua_multiply(_MDEF_1118, (lua_multiply(0.1, lua_tableget(_skill, 'Level'))));
      return lua_tablegetcall(G.str['math'], 'floor', [_mdefRate_1118]);
      return [];
    })
    G.str['SCR_GET_Sanctuary_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1119 = 30;
      var _pc_1119 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _level_1119 = lua_tableget(_pc_1119, 'Lv');
      var _bylvCorrect_1119 = lua_subtract(_level_1119, 300);
      if (lua_lt(_bylvCorrect_1119, 0)) {
        _bylvCorrect_1119 = lua_divide(lua_multiply(_bylvCorrect_1119, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_1119)) {
        _bylvCorrect_1119 = lua_divide(lua_multiply(_bylvCorrect_1119, 1.25), 1000);
      }
      _value_1119 = lua_multiply(_value_1119, (lua_add(1, _bylvCorrect_1119)));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1119]);
      return [];
    })
    G.str['SCR_Get_Undistance_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1122 = lua_add(55, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1122];
      return [];
    })
    G.str['SCR_Get_Undistance_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1123 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_1123];
      return [];
    })
    G.str['SCR_Get_DetonateTraps_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1124 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1124 = 4;
      var _abil_1124 = lua_call(G.str['GetAbility'], [_pc_1124, "Sapper4"])[0];
      if ((!lua_eq(_abil_1124, null) && lua_eq(1, lua_tableget(_abil_1124, 'ActiveState')))) {
        _value_1124 = lua_add(_value_1124, lua_tableget(_abil_1124, 'Level'));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1124]);
      return [];
    })
    G.str['SCR_Get_Detoxify_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1126 = 3;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1126]);
      return [];
    })
    G.str['SCR_GET_Daino_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1127 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1127];
      return [];
    })
    G.str['SCR_Get_Coursing_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1128 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1128]);
      return [];
    })
    G.str['SCR_Get_Coursing_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1129 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_1129];
      return [];
    })
    G.str['SCR_Get_Scan_Time'] = (function (_skill) {
      var tmp;
      var _value_1130 = lua_add(8, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1130]);
      return [];
    })
    G.str['SCR_Get_Surespell_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(45, lua_multiply(lua_tableget(_skill, 'Level'), 18))];
      return [];
    })
    G.str['SCR_Get_Surespell_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1132 = lua_subtract(lua_tableget(_skill, 'Level'), 1);
      return [_value_1132];
      return [];
    })
    G.str['SCR_Get_Quickcast_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1133 = 300;
      return [_value_1133];
      return [];
    })
    G.str['SCR_Get_Quickcast_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1134 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      if (lua_lt(90, _value_1134)) {
        _value_1134 = 90;
      }
      return [_value_1134];
      return [];
    })
    G.str['SCR_GET_ScatterCaltrop_Time'] = (function (_skill) {
      var tmp;
      var _pc_1136 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1136 = 20;
      var _abil_1136 = lua_call(G.str['GetAbility'], [_pc_1136, "QuarrelShooter2"])[0];
      if ((!lua_eq(_abil_1136, null) && lua_eq(1, lua_tableget(_abil_1136, 'ActiveState')))) {
        _value_1136 = lua_add(_value_1136, lua_tableget(_abil_1136, 'Level'));
      }
      return [_value_1136];
      return [];
    })
    G.str['SCR_Get_ScatterCaltrop_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1138 = lua_tableget(_skill, 'Level');
      if (lua_lt(15, _value_1138)) {
        _value_1138 = 15;
      }
      return [_value_1138];
      return [];
    })
    G.str['SCR_Get_EnergyBolt_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1140 = lua_add(150, lua_multiply(lua_tableget(_skill, 'Level'), 12));
      return [_value_1140];
      return [];
    })
    G.str['SCR_GET_SR_LV_HighAnchoring'] = (function (_skill) {
      var tmp;
      var _pc_1141 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_add(lua_tableget(_pc_1141, 'SR'), lua_tableget(_skill, 'SklSR')), lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_Get_Telekinesis_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1142 = lua_add(110, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_1142];
      return [];
    })
    G.str['SCR_GET_Telekinesis_ThrowDist'] = (function (_skill) {
      var tmp;
      return [lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 5))];
      return [];
    })
    G.str['SCR_GET_PsychicPressure_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(lua_tableget(_skill, 'Level'), 4)];
      return [];
    })
    G.str['SCR_GET_PsychicPressure_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1145 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1145 = lua_call(G.str['GetAbility'], [_pc_1145, 'Psychokino10'])[0];
      if ((!lua_eq(_abil_1145, null) && lua_eq(lua_tableget(_abil_1145, 'ActiveState'), 1))) {
        return [2];
      }
      return [1];
      return [];
    })
    G.str['SCR_GET_PsychicPressure_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1147 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1147 = 42;
      var _bylvCorrect_1147 = lua_subtract(lua_tableget(_pc_1147, 'Lv'), 300);
      if (lua_lt(_bylvCorrect_1147, 0)) {
        _bylvCorrect_1147 = lua_divide(lua_multiply(_bylvCorrect_1147, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_1147)) {
        _bylvCorrect_1147 = lua_divide(lua_multiply(_bylvCorrect_1147, 1.25), 1000);
      }
      _value_1147 = lua_multiply(_value_1147, (lua_add(1, _bylvCorrect_1147)));
      var _abil_1147 = lua_call(G.str['GetAbility'], [_pc_1147, 'Psychokino10'])[0];
      if ((!lua_eq(_abil_1147, null) && lua_eq(lua_tableget(_abil_1147, 'ActiveState'), 1))) {
        _value_1147 = lua_multiply(_value_1147, 1.2);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1147]);
      return [];
    })
    G.str['SCR_GET_GravityPole_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1151 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1151])[0], 1)) {
        return [lua_multiply(lua_tableget(_skill, 'Level'), 1)];
      }
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_GravityPole_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1153 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1153 = 47;
      var _bylvCorrect_1153 = lua_subtract(lua_tableget(_pc_1153, 'Lv'), 300);
      if (lua_lt(_bylvCorrect_1153, 0)) {
        _bylvCorrect_1153 = lua_divide(lua_multiply(_bylvCorrect_1153, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_1153)) {
        _bylvCorrect_1153 = lua_divide(lua_multiply(_bylvCorrect_1153, 1.25), 1000);
      }
      _value_1153 = lua_multiply(_value_1153, (lua_add(1, _bylvCorrect_1153)));
      var _abil_1153 = lua_call(G.str['GetAbility'], [_pc_1153, 'Psychokino20'])[0];
      if ((!lua_eq(_abil_1153, null) && lua_eq(lua_tableget(_abil_1153, 'ActiveState'), 1))) {
        _value_1153 = lua_multiply(_value_1153, 1.2);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1153]);
      return [];
    })
    G.str['SCR_GET_Telekinesis_ThrowCount'] = (function (_skill) {
      var tmp;
      var _pc_1157 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1157 = lua_call(G.str['GetAbility'], [_pc_1157, 'Psychokino1'])[0];
      if ((!lua_eq(_abil_1157, null) && lua_eq(1, lua_tableget(_abil_1157, 'ActiveState')))) {
        return [lua_add(lua_tablegetcall(G.str['math'], 'ceil', [lua_multiply(0.5, lua_tableget(_skill, 'Level'))])[0], lua_tableget(_abil_1157, 'Level'))];
      }
      return lua_tablegetcall(G.str['math'], 'ceil', [lua_multiply(0.5, lua_tableget(_skill, 'Level'))]);
      return [];
    })
    G.str['SCR_GET_Telekinesis_Holdtime'] = (function (_skill) {
      var tmp;
      var _pc_1159 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1159 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _zone_1159 = lua_call(G.str['GetZoneName'], [_pc_1159])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1159])[0], 1) || lua_eq(_zone_1159, 'pvp_Mine'))) {
        _value_1159 = lua_multiply(_value_1159, 0.5);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1159]);
      return [];
    })
    G.str['SCR_Get_MagicMissile_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1161 = lua_add(160, lua_multiply(lua_tableget(_skill, 'Level'), 15));
      return [_value_1161];
      return [];
    })
    G.str['SCR_Get_FireBall_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1162 = lua_add(180, lua_multiply(lua_tableget(_skill, 'Level'), 14));
      return [_value_1162];
      return [];
    })
    G.str['SCR_GET_SR_LV_FireBall'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_SR_LV_WoodCarve'] = (function (_skill) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_GET_EnchantFire_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1165 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1165 = lua_add(lua_add(30, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 5))), (lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), (lua_power((lua_multiply((lua_add(lua_tableget(_pc_1165, 'INT'), lua_tableget(_pc_1165, 'MNA'))), 0.6)), 0.9)))));
      var _Pyromancer16_abil_1165 = lua_call(G.str['GetAbility'], [_pc_1165, 'Pyromancer16'])[0];
      if (!lua_eq(_Pyromancer16_abil_1165, null)) {
        _value_1165 = lua_add(_value_1165, lua_tableget(_Pyromancer16_abil_1165, 'Level'));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1165]);
      return [];
    })
    G.str['SCR_GET_EnchantFire_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1167 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1167 = lua_multiply(lua_tableget(_pc_1167, 'MINMATK'), 0.1);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1167]);
      return [];
    })
    G.str['SCR_Get_FireBall_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 5))];
      return [];
    })
    G.str['SCR_GET_HellBreath_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1169 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1169 = 20;
      var _bylvCorrect_1169 = lua_subtract(lua_tableget(_pc_1169, 'Lv'), 300);
      if (lua_lt(_bylvCorrect_1169, 0)) {
        _bylvCorrect_1169 = lua_divide(lua_multiply(_bylvCorrect_1169, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_1169)) {
        _bylvCorrect_1169 = lua_divide(lua_multiply(_bylvCorrect_1169, 1.25), 1000);
      }
      _value_1169 = lua_multiply(_value_1169, (lua_add(1, _bylvCorrect_1169)));
      var _abil_1169 = lua_call(G.str['GetAbility'], [_pc_1169, 'Pyromancer4'])[0];
      if ((!lua_eq(_abil_1169, null) && lua_eq(lua_tableget(_abil_1169, 'ActiveState'), 1))) {
        _value_1169 = lua_multiply(_value_1169, 1.3);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1169]);
      return [];
    })
    G.str['SCR_GET_Rapidfire_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1173 = lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 0.2));
      return [_value_1173];
      return [];
    })
    G.str['SCR_GET_EnchantFire_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_Get_FirePillar_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1175 = lua_add(26, lua_multiply(lua_tableget(_skill, 'Level'), 4));
      return [_value_1175];
      return [];
    })
    G.str['SCR_GET_FirePillar_Time'] = (function (_skill) {
      var tmp;
      return [lua_add(6, lua_multiply(lua_tableget(_skill, 'Level'), 0.04))];
      return [];
    })
    G.str['SCR_GET_FirePillar_HitCount'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_FireWall_Ratio'] = (function (_skill) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))]);
      return [];
    })
    G.str['SCR_GET_FireWall_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(2, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_IceWall_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_ElementalEssence_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1181 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_1181];
      return [];
    })
    G.str['SCR_GET_Blessing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1182 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcMNA_1182 = lua_call(G.str['TryGetProp'], [_pc_1182, "MNA"])[0];
      var _pcLevel_1182 = lua_call(G.str['TryGetProp'], [_pc_1182, "Lv"])[0];
      var _pcLevelRate_1182 = lua_add((lua_divide(_pcLevel_1182, 7)), 10);
      var _baseDamageValue_1182 = lua_add(180, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), _pcLevelRate_1182));
      var _pcMnaRate_1182 = lua_add((lua_multiply(lua_divide(_pcMNA_1182, (lua_add(_pcMNA_1182, _pcLevel_1182))), 2)), 0.15);
      var _value_1182 = lua_multiply(_baseDamageValue_1182, _pcMnaRate_1182);
      _value_1182 = lua_multiply(_value_1182, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1182]);
      return [];
    })
    G.str['SCR_GET_Blessing_AddCount'] = (function (_skill) {
      var tmp;
      var _pc_1183 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1183 = 2;
      var _Priest6_abil_1183 = lua_call(G.str['GetAbility'], [_pc_1183, 'Priest6'])[0];
      if ((!lua_eq(_Priest6_abil_1183, null) && lua_eq(1, lua_tableget(_Priest6_abil_1183, 'ActiveState')))) {
        _value_1183 = lua_add(_value_1183, lua_tableget(_Priest6_abil_1183, 'Level'));
      }
      return [_value_1183];
      return [];
    })
    G.str['SCR_GET_Carve_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_1185 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1185 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      var _Dievdirbys1_abil_1185 = lua_call(G.str['GetAbility'], [_pc_1185, 'Dievdirbys1'])[0];
      if ((!lua_eq(_Dievdirbys1_abil_1185, null) && lua_eq(1, lua_tableget(_Dievdirbys1_abil_1185, 'ActiveState')))) {
        _value_1185 = lua_add(_value_1185, lua_tableget(_Dievdirbys1_abil_1185, 'Level'));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1185]);
      return [];
    })
    G.str['SCR_GET_Sacrament_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(200, lua_multiply(lua_tableget(_skill, 'Level'), 20))];
      return [];
    })
    G.str['SCR_GET_Sacrament_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1188 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_1188 = lua_call(G.str['TryGetProp'], [_pc_1188, "Lv"])[0];
      var _pcMNA_1188 = lua_call(G.str['TryGetProp'], [_pc_1188, "MNA"])[0];
      var _pcLevelRate_1188 = lua_add((lua_divide(_pcLevel_1188, 7)), 10);
      var _baseDamageValue_1188 = lua_add(180, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), _pcLevelRate_1188));
      var _pcMnaRate_1188 = lua_add((lua_multiply(lua_divide(_pcMNA_1188, (lua_add(_pcMNA_1188, _pcLevel_1188))), 2)), 0.15);
      var _value_1188 = lua_multiply(_baseDamageValue_1188, _pcMnaRate_1188);
      _value_1188 = lua_multiply(_value_1188, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1188]);
      return [];
    })
    G.str['SCR_GET_Revive_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1189 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1189 = 90;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1189])[0], 1)) {
        _value_1189 = 30;
      }
      var _Priest21_abil_1189 = lua_call(G.str['GetAbility'], [_pc_1189, 'Priest21'])[0];
      if (((!lua_eq(_Priest21_abil_1189, null) && lua_eq(1, lua_tableget(_Priest21_abil_1189, 'ActiveState'))) && lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1189])[0], 0))) {
        _value_1189 = lua_add(_value_1189, lua_multiply(lua_tableget(_Priest21_abil_1189, 'Level'), 7));
      }
      return [_value_1189];
      return [];
    })
    G.str['SCR_GET_Revive_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1192 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_1192];
      return [];
    })
    G.str['SCR_GET_Revive_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_Exorcise_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1194 = 10;
      var _pc_1194 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1194 = lua_call(G.str['GetAbility'], [_pc_1194, 'Priest23'])[0];
      if ((!lua_eq(_abil_1194, null) && lua_eq(lua_tableget(_abil_1194, 'ActiveState'), 1))) {
        _value_1194 = lua_add(_value_1194, lua_tableget(_abil_1194, 'Level'));
      }
      return [_value_1194];
      return [];
    })
    G.str['SCR_GET_MassHeal_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1196 = lua_add(1058, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 211));
      _value_1196 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1196, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1196];
      return [];
    })
    G.str['SCR_GET_MassHeal_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1197 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1197 = lua_add(lua_add(lua_add(100, lua_tableget(_pc_1197, 'INT')), lua_tableget(_pc_1197, 'MNA')), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 35));
      return [_value_1197];
      return [];
    })
    G.str['SCR_GET_StoneSkin_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1198 = lua_multiply(lua_tableget(_skill, 'Level'), 0.4);
      _value_1198 = lua_multiply(_value_1198, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1198];
      return [];
    })
    G.str['SCR_GET_MeteorSwarm_Count'] = (function (_skill) {
      var tmp;
      var _meteorCount_1199 = lua_add(1, lua_divide((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 2));
      if (lua_lt(10, _meteorCount_1199)) {
        _meteorCount_1199 = 10;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_meteorCount_1199]);
      return [];
    })
    G.str['SCR_GET_Burrow_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1201 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      return [_value_1201];
      return [];
    })
    G.str['SCR_Get_HellFire_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1202 = lua_add(57, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_1202];
      return [];
    })
    G.str['SCR_GET_Wizard_Wild_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Wizard_Wild_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_subtract(60, lua_multiply(lua_tableget(_skill, 'Level'), 10))];
      return [];
    })
    G.str['SCR_GET_SwiftStep_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_GET_SwiftStep_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1206 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1206 = lua_subtract(10, lua_tableget(_skill, 'Level'));
      if (lua_lte(_value_1206, 0)) {
        _value_1206 = 1;
      }
      return [_value_1206];
      return [];
    })
    G.str['SCR_GET_SwiftStep_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1208 = lua_multiply(3, lua_tableget(_skill, 'Level'));
      _value_1208 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1208, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1208];
      return [];
    })
    G.str['SCR_GET_SwiftStep_Ratio3'] = (function (_skill) {
      var tmp;
      var _mspdadd_1209 = 15;
      return [_mspdadd_1209];
      return [];
    })
    G.str['SCR_GET_Concentration_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1210 = lua_multiply(2, lua_tableget(_skill, 'Level'));
      _value_1210 = lua_multiply(_value_1210, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1210];
      return [];
    })
    G.str['SCR_GET_Concentration_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1211 = 300;
      return [_value_1211];
      return [];
    })
    G.str['SCR_Get_Fulldraw_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_1212 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(5, lua_multiply(1, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_Get_Lethargy_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1213 = 20;
      var _pc_1213 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _Wizard6_abil_1213 = lua_call(G.str['GetAbility'], [_pc_1213, 'Wizard6'])[0];
      if ((!lua_eq(_Wizard6_abil_1213, null) && lua_eq(1, lua_tableget(_Wizard6_abil_1213, 'ActiveState')))) {
        _value_1213 = lua_add(_value_1213, lua_multiply(lua_tableget(_Wizard6_abil_1213, 'Level'), 2));
      }
      return [_value_1213];
      return [];
    })
    G.str['SCR_GET_SpiralArrow_Ratio'] = (function (_skill) {
      var tmp;
      return [6];
      return [];
    })
    G.str['SCR_GET_Lethargy_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1216 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1216 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      var _abil_1216 = lua_call(G.str['GetAbility'], [_pc_1216, "Wizard27"])[0];
      if ((!lua_eq(_abil_1216, null) && lua_eq(lua_tableget(_abil_1216, 'ActiveState'), 1))) {
        _value_1216 = lua_multiply(_value_1216, (lua_add(1, (lua_multiply(lua_tableget(_abil_1216, 'Level'), 0.005)))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1216]);
      return [];
    })
    G.str['SCR_GET_Lethargy_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1218 = lua_tableget(_skill, 'Level');
      return [_value_1218];
      return [];
    })
    G.str['SCR_GET_Lethargy_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1219 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_1219];
      return [];
    })
    G.str['SCR_GET_KneelingShot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1220 = 15;
      _value_1220 = lua_multiply(_value_1220, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1220];
      return [];
    })
    G.str['SCR_GET_KneelingShot_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1221 = 250;
      return [_value_1221];
      return [];
    })
    G.str['SCR_GET_KneelingShot_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1222 = lua_multiply(lua_tableget(_skill, 'Level'), 30);
      return [_value_1222];
      return [];
    })
    G.str['SCR_GET_BlockAndShoot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1223 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      _value_1223 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1223, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1223];
      return [];
    })
    G.str['SCR_GET_ObliqueShot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1224 = 50;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1224]);
      return [];
    })
    G.str['SCR_GET_Carve_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1225 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1225];
      return [];
    })
    G.str['SCR_GET_CarveZemina_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1226 = lua_add(15, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1226];
      return [];
    })
    G.str['SCR_GET_OwlStatue_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1227 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1227 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1227];
      return [];
    })
    G.str['SCR_GET_OwlStatue_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1228 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1228 = 50;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1228])[0], 1)) {
        _value_1228 = 25;
      }
      return [_value_1228];
      return [];
    })
    G.str['SCR_GET_SR_LV_Crown'] = (function (_skill) {
      var tmp;
      var _pc_1230 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_tableget(_pc_1230, 'SR')];
      return [];
    })
    G.str['SCR_GET_CrossGuard_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1231 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1231 = lua_multiply(lua_tableget(_pc_1231, 'DEF'), (lua_multiply(0.005, lua_tableget(_skill, 'Level'))));
      var _Highlander22_abil_1231 = lua_call(G.str['GetAbility'], [_pc_1231, "Highlander22"])[0];
      var _Highlander23_abil_1231 = lua_call(G.str['GetAbility'], [_pc_1231, "Highlander23"])[0];
      if (!lua_eq(_Highlander23_abil_1231, null)) {
        _value_1231 = lua_multiply(_value_1231, 1.44);
      } else if ((lua_eq(_Highlander23_abil_1231, null) && !lua_eq(_Highlander22_abil_1231, null))) {
        _value_1231 = lua_multiply(_value_1231, 1.38);
      }
      var _Highlander15_abil_1231 = lua_call(G.str['GetAbility'], [_pc_1231, 'Highlander15'])[0];
      if ((!lua_eq(_Highlander15_abil_1231, null) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1231 = lua_add(_value_1231, lua_tableget(_Highlander15_abil_1231, 'Level'));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1231]);
      return [];
    })
    G.str['SCR_GET_CrossGuard_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1235 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      _value_1235 = lua_multiply(_value_1235, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1235]);
      return [];
    })
    G.str['SCR_GET_CorpseTower_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1236 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1236]);
      return [];
    })
    G.str['SCR_GET_CorpseTower_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1237 = 7;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1237]);
      return [];
    })
    G.str['SCR_GET_CorpseTower_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1238 = lua_add(100, (lua_multiply(lua_tableget(_skill, 'Level'), 4)));
      return [_value_1238];
      return [];
    })
    G.str['SCR_GET_RaiseDead_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1239 = lua_tableget(_skill, 'Level');
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1239]);
      return [];
    })
    G.str['SCR_GET_RaiseDead_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1240 = 5;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1240]);
      return [];
    })
    G.str['SCR_GET_RaiseDead_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1241 = lua_add(100, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return [_value_1241];
      return [];
    })
    G.str['SCR_GET_RaiseSkullarcher_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1242 = lua_tableget(_skill, 'Level');
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1242]);
      return [];
    })
    G.str['SCR_GET_RaiseSkullarcher_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1243 = 5;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1243]);
      return [];
    })
    G.str['SCR_GET_RaiseSkullarcher_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1244 = lua_add(100, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return [_value_1244];
      return [];
    })
    G.str['SCR_GET_RaiseSkullWizard_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1245 = 5;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1245]);
      return [];
    })
    G.str['SCR_GET_RaiseSkullWizard_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1246 = lua_add(100, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return [_value_1246];
      return [];
    })
    G.str['SCR_GET_Trot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1247 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 1)));
      return [_value_1247];
      return [];
    })
    G.str['SCR_Get_IceBolt_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1248 = lua_add(180, lua_multiply(lua_tableget(_skill, 'Level'), 13));
      return [_value_1248];
      return [];
    })
    G.str['SCR_GET_ReflectShield_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1249 = 300;
      return [_value_1249];
      return [];
    })
    G.str['SCR_GET_ReflectShield_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1250 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 3)));
      _value_1250 = lua_multiply(_value_1250, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1250];
      return [];
    })
    G.str['SCR_GET_Exchange_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Exchange_Ratio'] = (function (_skill) {
      var tmp;
      return [25];
      return [];
    })
    G.str['SCR_GET_IceWall_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(100, lua_multiply(30, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_GET_IceWall_Bufftime'] = (function (_skill) {
      var tmp;
      var _lv_1254 = lua_subtract(5.5, lua_multiply(0.5, lua_tableget(_skill, 'Level')));
      return lua_tablegetcall(G.str['math'], 'max', [3, _lv_1254]);
      return [];
    })
    G.str['SCR_Get_IceTremor_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1255 = lua_add(233, lua_multiply(lua_tableget(_skill, 'Level'), 31));
      return [_value_1255];
      return [];
    })
    G.str['SCR_GET_SR_LV_IceTremor'] = (function (_skill) {
      var tmp;
      var _pc_1256 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_multiply(lua_tableget(_skill, 'Level'), 1)];
      return [];
    })
    G.str['SCR_GET_SR_LV_Fleche'] = (function (_skill) {
      var tmp;
      var _pc_1257 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [3];
      return [];
    })
    G.str['SCR_GET_SubzeroShield_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1258 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1258 = 3;
      var _abil_1258 = lua_call(G.str['GetAbility'], [_pc_1258, "Cryomancer7"])[0];
      if ((!lua_eq(_abil_1258, null) && lua_eq(1, lua_tableget(_abil_1258, 'ActiveState')))) {
        _value_1258 = lua_add(_value_1258, lua_multiply(lua_tableget(_abil_1258, 'Level'), 0.5));
      }
      return [_value_1258];
      return [];
    })
    G.str['SCR_GET_SubzeroShield_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1260 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1260 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      var _abilCryomancer9_1260 = lua_call(G.str['GetAbility'], [_pc_1260, "Cryomancer9"])[0];
      if ((!lua_eq(_abilCryomancer9_1260, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilCryomancer9_1260, "ActiveState"])[0], 1))) {
        _value_1260 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1260, (lua_add(1, lua_multiply(lua_tableget(_abilCryomancer9_1260, 'Level'), 0.05))))])[0];
      }
      return [_value_1260];
      return [];
    })
    G.str['SCR_GET_Roasting_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1262 = lua_multiply(lua_tableget(_skill, 'Level'), 1);
      return [_value_1262];
      return [];
    })
    G.str['SCR_GET_SubzeroShield_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1263 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_1263];
      return [];
    })
    G.str['SCR_GET_IceWall_Time'] = (function (_skill) {
      var tmp;
      var _pc_1264 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1264 = 15;
      var _abil_1264 = lua_call(G.str['GetAbility'], [_pc_1264, 'Cryomancer22'])[0];
      if ((!lua_eq(_abil_1264, null) && lua_eq(lua_tableget(_abil_1264, 'ActiveState'), 1))) {
        _value_1264 = lua_add(_value_1264, 10);
      }
      return [_value_1264];
      return [];
    })
    G.str['SCR_GET_SR_LV_Gust'] = (function (_skill) {
      var tmp;
      var _pc_1266 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_tableget(_pc_1266, 'SR'), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_skill, 'Level'), 5)])[0])];
      return [];
    })
    G.str['SCR_GET_Gust_Distance'] = (function (_skill) {
      var tmp;
      return [200];
      return [];
    })
    G.str['SCR_GET_Gust_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1268 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_1268];
      return [];
    })
    G.str['SCR_GET_Gust_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1269 = lua_add(4, lua_multiply(lua_tableget(_skill, 'Level'), 0.1));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1269]);
      return [];
    })
    G.str['SCR_Get_IciclePike_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1270 = lua_add(238, lua_multiply(lua_tableget(_skill, 'Level'), 12));
      return [_value_1270];
      return [];
    })
    G.str['SCR_Get_Effigy_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1271 = lua_add(209, lua_multiply(lua_tableget(_skill, 'Level'), 17));
      return [_value_1271];
      return [];
    })
    G.str['SCR_Get_StabDoll_Dist'] = (function (_skill) {
      var tmp;
      return [(lua_add(50, lua_multiply(10, lua_tableget(_skill, 'Level'))))];
      return [];
    })
    G.str['SCR_GET_Effigy_Bonus'] = (function (_skill) {
      var tmp;
      var _min_1273 = lua_add(160, lua_multiply(7, (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      var _max_1273 = lua_add(230, lua_multiply(9, (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      return lua_call(G.str['IMCRandom'], [_min_1273, _max_1273]);
      return [];
    })
    G.str['SCR_GET_Effigy_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1274 = lua_add(1.60, lua_multiply(0.07, (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      return [_value_1274];
      return [];
    })
    G.str['SCR_GET_Effigy_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1275 = lua_add(2.3, lua_multiply(0.09, (lua_subtract(lua_tableget(_skill, 'Level'), 1))));
      return [_value_1275];
      return [];
    })
    G.str['SCR_GET_SR_LV_Damballa'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'Level'), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_GET_SR_LV_TwistOfFate'] = (function (_skill) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_GET_Barrier_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1278 = lua_multiply(lua_tableget(_skill, 'Level'), 4);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1278]);
      return [];
    })
    G.str['SCR_GET_Restoration_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1279 = lua_add(107, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 6.2));
      _value_1279 = lua_multiply(_value_1279, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1279];
      return [];
    })
    G.str['SCR_GET_ResistElements_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1280 = 45;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1280]);
      return [];
    })
    G.str['SCR_GET_ResistElements_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1281 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      _value_1281 = lua_multiply(_value_1281, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1281];
      return [];
    })
    G.str['SCR_GET_ResistElements_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1282 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1282 = lua_tableget(_skill, 'Level');
      var _abil_1282 = lua_call(G.str['GetAbility'], [_pc_1282, "Paladin1"])[0];
      if ((!lua_eq(_abil_1282, null) && lua_eq(1, lua_tableget(_abil_1282, 'ActiveState')))) {
        _value_1282 = lua_add(_value_1282, lua_multiply(lua_tableget(_abil_1282, 'Level'), 0.8));
      }
      return [_value_1282];
      return [];
    })
    G.str['SCR_GET_ResistElements_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1284 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1284 = lua_multiply(lua_tableget(_skill, 'Level'), 2.5);
      return [_value_1284];
      return [];
    })
    G.str['SCR_GET_TurnUndead_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(3, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_IronSkin_Time'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_Get_IronSkin_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1287 = lua_multiply(lua_tableget(_skill, 'Level'), 0.5);
      return [_value_1287];
      return [];
    })
    G.str['SCR_Get_Golden_Bell_Shield_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1288 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_1288];
      return [];
    })
    G.str['SCR_Get_Golden_Bell_Shield_Time'] = (function (_skill) {
      var tmp;
      return [lua_add(3, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_1InchPunch_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_EnergyBlast_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1291 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1291 = lua_multiply(lua_tableget(_pc_1291, 'MSP'), (lua_subtract(0.06, (lua_multiply(lua_tableget(_skill, 'Level'), 0.002)))));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1291]);
      return [];
    })
    G.str['SCR_GET_God_Finger_Flicking_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1292 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1292];
      return [];
    })
    G.str['SCR_GET_God_Finger_Flicking_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1293 = 100;
      return [_value_1293];
      return [];
    })
    G.str['SCR_GET_DiscernEvil_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1294 = lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1294];
      return [];
    })
    G.str['SCR_GET_Indulgentia_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1295 = lua_add(3, lua_tableget(_skill, 'Level'));
      return [_value_1295];
      return [];
    })
    G.str['SCR_Get_Oblation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1296 = lua_multiply(100, lua_tableget(_skill, 'Level'));
      return [_value_1296];
      return [];
    })
    G.str['SCR_Get_SpellShop_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1297 = lua_multiply(6, lua_tableget(_skill, 'Level'));
      var _pc_1297 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1297 = lua_call(G.str['GetAbility'], [_pc_1297, "Pardoner4"])[0];
      if ((!lua_eq(_abil_1297, null) && lua_eq(1, lua_tableget(_abil_1297, 'ActiveState')))) {
        _value_1297 = lua_add(_value_1297, (lua_multiply(lua_tableget(_abil_1297, 'Level'), 2)));
      }
      return [_value_1297];
      return [];
    })
    G.str['SCR_COMMON_MNA_FACTOR'] = (function (_baseValue, _skillLevel, _levelFactor, _mnaFactor) {
      var tmp;
      var _value_1299 = lua_add(_baseValue, lua_multiply((lua_subtract(_skillLevel, 1)), _levelFactor));
      _value_1299 = lua_multiply(_value_1299, _mnaFactor);
      return [_value_1299];
      return [];
    })
    G.str['SCR_GET_SpellShop_Sacrament_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1300 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_1300 = lua_call(G.str['TryGetProp'], [_pc_1300, "Lv"])[0];
      var _pcMNA_1300 = lua_call(G.str['TryGetProp'], [_pc_1300, "MNA"])[0];
      var _levelRate_1300 = lua_add((lua_divide(_pcLevel_1300, 7)), 10);
      var _mnaRate_1300 = lua_add((lua_multiply(lua_divide(_pcMNA_1300, (lua_add(_pcMNA_1300, _pcLevel_1300))), 2)), 0.15);
      var _value_1300 = lua_call(G.str['SCR_COMMON_MNA_FACTOR'], [180, 10, _levelRate_1300, _mnaRate_1300])[0];
      _value_1300 = lua_multiply(_value_1300, 0.3);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1300]);
      return [];
    })
    G.str['SCR_GET_SpellShop_Blessing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1301 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_1301 = lua_call(G.str['TryGetProp'], [_pc_1301, "Lv"])[0];
      var _pcMNA_1301 = lua_call(G.str['TryGetProp'], [_pc_1301, "MNA"])[0];
      var _levelRate_1301 = lua_add((lua_divide(_pcLevel_1301, 7)), 10);
      var _mnaRate_1301 = lua_add((lua_multiply(lua_divide(_pcMNA_1301, (lua_add(_pcMNA_1301, _pcLevel_1301))), 2)), 0.15);
      var _value_1301 = lua_call(G.str['SCR_COMMON_MNA_FACTOR'], [180, 10, _levelRate_1301, _mnaRate_1301])[0];
      _value_1301 = lua_multiply(_value_1301, 0.3);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1301]);
      return [];
    })
    G.str['SCR_GET_SpellShop_IncreaseMagicDEF_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1302 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_1302 = lua_call(G.str['TryGetProp'], [_pc_1302, "Lv"])[0];
      var _pcMNA_1302 = lua_call(G.str['TryGetProp'], [_pc_1302, "MNA"])[0];
      var _levelRate_1302 = 1.5;
      var _mnaRate_1302 = lua_add((lua_multiply(lua_divide(_pcMNA_1302, (lua_add(_pcMNA_1302, _pcLevel_1302))), 2)), 0.15);
      var _value_1302 = lua_call(G.str['SCR_COMMON_MNA_FACTOR'], [1.5, 10, _levelRate_1302, _mnaRate_1302])[0];
      _value_1302 = lua_multiply(_value_1302, 0.3);
      return [_value_1302];
      return [];
    })
    G.str['SCR_GET_SpellShop_Aspersion_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1303 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_1303 = lua_call(G.str['TryGetProp'], [_pc_1303, "Lv"])[0];
      var _pcMNA_1303 = lua_call(G.str['TryGetProp'], [_pc_1303, "MNA"])[0];
      var _levelRate_1303 = 1;
      var _mnaRate_1303 = lua_add((lua_multiply(lua_divide(_pcMNA_1303, (lua_add(_pcMNA_1303, _pcLevel_1303))), 2)), 0.15);
      var _value_1303 = lua_call(G.str['SCR_COMMON_MNA_FACTOR'], [1, 15, _levelRate_1303, _mnaRate_1303])[0];
      _value_1303 = lua_multiply(_value_1303, 0.3);
      return [_value_1303];
      return [];
    })
    G.str['SCR_GET_Telepath_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1304 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_1304];
      return [];
    })
    G.str['SCR_GET_Conversion_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1305 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_1305];
      return [];
    })
    G.str['SCR_GET_Carnivory_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1306 = lua_add(1, (lua_divide((lua_multiply(lua_tableget(_skill, 'Level'), 1)), 2)));
      return lua_tablegetcall(G.str['math'], 'ceil', [_value_1306]);
      return [];
    })
    G.str['SCR_GET_Carnivory_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1307 = (lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1307]);
      return [];
    })
    G.str['SCR_GET_Carnivory_Time'] = (function (_skill) {
      var tmp;
      var _value_1308 = 15;
      return [_value_1308];
      return [];
    })
    G.str['SCR_GET_StereaTrofh_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1309 = lua_multiply(lua_tableget(_skill, 'Level'), 7);
      _value_1309 = lua_multiply(_value_1309, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1309];
      return [];
    })
    G.str['SCR_GET_Chortasmata_Time'] = (function (_skill) {
      var tmp;
      var _value_1310 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 0.6));
      return [_value_1310];
      return [];
    })
    G.str['SCR_GET_Chortasmata_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1311 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 0.6));
      return [_value_1311];
      return [];
    })
    G.str['SCR_GET_Chortasmata_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1312 = lua_add(41, (lua_multiply(7.6, (lua_subtract(lua_tableget(_skill, 'Level'), 1)))));
      return [_value_1312];
      return [];
    })
    G.str['SCR_GET_ArcaneEnergy_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1313 = lua_multiply(0.4, lua_tableget(_skill, 'Level'));
      return [_value_1313];
      return [];
    })
    G.str['SCR_GET_ArcaneEnergy_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1314 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 4));
      return [_value_1314];
      return [];
    })
    G.str['SCR_GET_ArcaneEnergy_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1315 = lua_tableget(_skill, 'Level');
      var _pc_1315 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _Oracle7_abil_1315 = lua_call(G.str['GetAbility'], [_pc_1315, "Oracle7"])[0];
      if ((!lua_eq(_Oracle7_abil_1315, null) && lua_eq(1, lua_tableget(_Oracle7_abil_1315, 'ActiveState')))) {
        _value_1315 = lua_add(_value_1315, lua_tableget(_Oracle7_abil_1315, 'Level'));
      }
      return [_value_1315];
      return [];
    })
    G.str['SCR_GET_CallOfDeities_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1317 = lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1317];
      return [];
    })
    G.str['SCR_GET_Change_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1318 = lua_tableget(_skill, 'Level');
      return [_value_1318];
      return [];
    })
    G.str['SCR_GET_Forecast_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1319 = 300;
      var _pc_1319 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _Oracle3_abil_1319 = lua_call(G.str['GetAbility'], [_pc_1319, "Oracle3"])[0];
      if ((!lua_eq(_Oracle3_abil_1319, null) && lua_eq(1, lua_tableget(_Oracle3_abil_1319, 'ActiveState')))) {
        _value_1319 = lua_add(_value_1319, lua_multiply(lua_tableget(_Oracle3_abil_1319, 'Level'), 60));
      }
      return [_value_1319];
      return [];
    })
    G.str['SCR_GET_BeadyEyed_Time'] = (function (_skill) {
      var tmp;
      var _value_1321 = lua_add(100, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return [_value_1321];
      return [];
    })
    G.str['SCR_GET_CounterSpell_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1322 = 25;
      var _pc_1322 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1322 = lua_call(G.str['GetAbility'], [_pc_1322, "Oracle16"])[0];
      if ((!lua_eq(_abil_1322, null) && lua_eq(lua_tableget(_abil_1322, 'ActiveState'), 1))) {
        _value_1322 = lua_add(_value_1322, lua_tableget(_abil_1322, 'Level'));
      }
      return [_value_1322];
      return [];
    })
    G.str['SCR_GET_CounterSpell_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1324 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      _value_1324 = lua_multiply(_value_1324, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1324]);
      return [];
    })
    G.str['SCR_GET_DeathVerdict_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1325 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      _value_1325 = lua_multiply(_value_1325, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1325];
      return [];
    })
    G.str['SCR_GET_DeathVerdict_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1326 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_1326];
      return [];
    })
    G.str['SCR_GET_DeathVerdict_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1327 = 25;
      var _pc_1327 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1327 = lua_call(G.str['GetAbility'], [_pc_1327, "Oracle18"])[0];
      if ((!lua_eq(_abil_1327, null) && lua_eq(lua_tableget(_abil_1327, 'ActiveState'), 1))) {
        _value_1327 = 15;
      }
      return [_value_1327];
      return [];
    })
    G.str['SCR_GET_Prophecy_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_Foretell_Time'] = (function (_skill) {
      var tmp;
      var _value_1330 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_1330];
      return [];
    })
    G.str['SCR_GET_Foretell_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1331 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_1331];
      return [];
    })
    G.str['SCR_GET_TwistOfFate_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1332 = 30;
      return [_value_1332];
      return [];
    })
    G.str['SCR_GET_TwistOfFate_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1333 = lua_subtract((lua_multiply(lua_tableget(_skill, 'Level'), 8)), 7);
      return [_value_1333];
      return [];
    })
    G.str['SCR_GET_TwistOfFate_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1334 = lua_multiply(lua_tableget(_skill, 'Level'), 8);
      return [_value_1334];
      return [];
    })
    G.str['SCR_GET_HengeStone_Time'] = (function (_skill) {
      var tmp;
      var _value_1335 = 20;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1335]);
      return [];
    })
    G.str['SCR_GET_ManaShield_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_ManaShield_Ratio'] = (function (_skill) {
      var tmp;
      return [120];
      return [];
    })
    G.str['SCR_GET_Sleep_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1338 = lua_tableget(_skill, 'Level');
      var _pc_1338 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _zone_1338 = lua_call(G.str['GetZoneName'], [_pc_1338])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1338])[0], 1) || lua_eq(_zone_1338, 'pvp_Mine'))) {
        _value_1338 = 1;
      }
      return [_value_1338];
      return [];
    })
    G.str['SCR_GET_Sleep_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1340 = lua_add(2, lua_tableget(_skill, 'Level'));
      return [_value_1340];
      return [];
    })
    G.str['SCR_GET_SR_LV_Bash'] = (function (_skill) {
      var tmp;
      var _pc_1341 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1341 = lua_call(G.str['GetAbility'], [_pc_1341, 'Penetration'])[0];
      if (((!lua_eq(_abil_1341, null) && lua_eq(lua_tableget(_skill, 'ClassName'), "Swordman_Bash")) && lua_eq(1, lua_tableget(_abil_1341, 'ActiveState')))) {
        return [lua_add(lua_add(lua_tableget(_pc_1341, 'SR'), lua_tableget(_skill, 'SklSR')), lua_tableget(_abil_1341, 'Level'))];
      }
      return [lua_add(lua_tableget(_pc_1341, 'SR'), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_GET_Crown_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, (lua_multiply(0.5, lua_tableget(_skill, 'Level'))))];
      return [];
    })
    G.str['SCR_GET_SynchroThrusting_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1344 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _equipWeapon_1344 = lua_call(G.str['GetEquipItem'], [_pc_1344, 'LH'])[0];
      if ((!lua_eq(_equipWeapon_1344, null) && lua_eq(lua_call(G.str['IS_NO_EQUIPITEM'], [_equipWeapon_1344])[0], 0))) {
        G.str['leftHandAttribute'] = lua_tableget(_equipWeapon_1344, 'Attribute');
      }
      var _def_1344 = lua_tableget(_equipWeapon_1344, 'DEF');
      var _value_1344 = _def_1344;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1344]);
      return [];
    })
    G.str['SCR_GET_SR_LV_SynchroThrusting'] = (function (_skill) {
      var tmp;
      var _pc_1346 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_tableget(_pc_1346, 'SR'), lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Finestra_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(30, (lua_multiply(3, lua_tableget(_skill, 'Level'))))];
      return [];
    })
    G.str['SCR_GET_Warcry_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1348 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1348];
      return [];
    })
    G.str['SCR_GET_Warcry_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1349 = lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0];
      return [_value_1349];
      return [];
    })
    G.str['SCR_GET_SR_LV_Pull'] = (function (_skill) {
      var tmp;
      var _pc_1350 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_tableget(_skill, 'SklSR')];
      return [];
    })
    G.str['SCR_GET_Gungho_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_GET_Gungho_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1352 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      _value_1352 = lua_multiply(_value_1352, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1352];
      return [];
    })
    G.str['SCR_GET_Gungho_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1353 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1353 = lua_add(lua_add(5, (lua_subtract(lua_tableget(_skill, 'Level'), 1))), (lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), (lua_power((lua_multiply(lua_tableget(_pc_1353, 'STR'), 0.3)), 0.5)))));
      var _Swordman13_abil_1353 = lua_call(G.str['GetAbility'], [_pc_1353, "Swordman13"])[0];
      if ((!lua_eq(_Swordman13_abil_1353, null) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1353 = lua_multiply(_value_1353, (lua_add(1, lua_multiply(lua_tableget(_Swordman13_abil_1353, 'Level'), 0.01))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1353]);
      return [];
    })
    G.str['SCR_GET_Bear_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_GET_Bear_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1356 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      _value_1356 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1356, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1356];
      return [];
    })
    G.str['SCR_GET_Guardian_Bufftime'] = (function (_skill) {
      var tmp;
      return [30];
      return [];
    })
    G.str['SCR_GET_Guardian_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1358 = lua_multiply(8, lua_tableget(_skill, 'Level'));
      _value_1358 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1358, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1358];
      return [];
    })
    G.str['SCR_GET_Guardian_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1359 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1359]);
      return [];
    })
    G.str['SCR_GET_Concentrate_Bufftime'] = (function (_skill) {
      var tmp;
      return [45];
      return [];
    })
    G.str['SCR_GET_Concentrate_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'Level'), 2)];
      return [];
    })
    G.str['SCR_GET_Concentrate_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1362 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _statBonus_1362 = 0;
      var _byAbilRate_1362 = 0;
      _statBonus_1362 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(lua_multiply(lua_tableget(_pc_1362, 'STR'), 0.1), lua_multiply(lua_tableget(_pc_1362, 'DEX'), 0.2))), lua_tableget(_skill, 'Level'))])[0];
      var _Swordman14_abil_1362 = lua_call(G.str['GetAbility'], [_pc_1362, "Swordman14"])[0];
      if ((!lua_eq(_Swordman14_abil_1362, null) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _byAbilRate_1362 = lua_multiply(lua_tableget(_Swordman14_abil_1362, 'Level'), 0.01);
      }
      G.str['value'] = lua_add(lua_add(5, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 1.5)), _statBonus_1362);
      G.str['value'] = lua_add(G.str['value'], (lua_multiply(G.str['value'], _byAbilRate_1362)));
      return lua_tablegetcall(G.str['math'], 'floor', [G.str['value']]);
      return [];
    })
    G.str['SCR_GET_ShieldPush_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1364 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1364 = lua_tableget(_skill, 'Level');
      return [_value_1364];
      return [];
    })
    G.str['SCR_GET_Restrain_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1365 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1365 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_1365];
      return [];
    })
    G.str['SCR_GET_Restrain_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1366 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1366 = lua_multiply(lua_tableget(_skill, 'Level'), 6);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1366]);
      return [];
    })
    G.str['SCR_GET_Restrain_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1367 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1367 = lua_add(lua_add(50, (lua_multiply(lua_tableget(_skill, 'Level'), 5))), (lua_multiply(lua_multiply(lua_tableget(_pc_1367, 'MHP'), 0.01), lua_tableget(_skill, 'Level'))));
      var _Swordman24_abil_1367 = lua_call(G.str['GetAbility'], [_pc_1367, "Swordman24"])[0];
      if (!lua_eq(_Swordman24_abil_1367, null)) {
        _value_1367 = lua_multiply(_value_1367, 1.44);
      }
      var _abil_1367 = lua_call(G.str['GetAbility'], [_pc_1367, "Swordman15"])[0];
      if (!lua_eq(_abil_1367, null)) {
        _value_1367 = lua_add(_value_1367, lua_multiply(lua_tableget(_abil_1367, 'Level'), 10));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1367]);
      return [];
    })
    G.str['SCR_GET_Frenzy_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1370 = lua_add(150, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1370]);
      return [];
    })
    G.str['SCR_GET_Frenzy_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Aggressor_Ratio'] = (function (_skill) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 5))]);
      return [];
    })
    G.str['SCR_GET_Aggressor_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Frenzy_Buff_Ratio2'] = (function (_skill, _pc) {
      var tmp;
      if (!lua_eq(null, _pc)) {
        var _abil_1375 = lua_call(G.str['GetAbility'], [_pc, 'Barbarian22'])[0];
        if ((!lua_eq(null, _abil_1375) && lua_eq(1, lua_tableget(_abil_1375, 'ActiveState')))) {
          return [lua_tableget(_skill, 'Level')];
        }
      }
      return [lua_multiply(lua_tableget(_skill, 'Level'), 2)];
      return [];
    })
    G.str['SCR_GET_Frenzy_Buff_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1377 = 2;
      _value_1377 = lua_multiply(_value_1377, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1377];
      return [];
    })
    G.str['SCR_GET_BackMasking_Ratio'] = (function (_skill, _pc) {
      var tmp;
      return [lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 10))];
      return [];
    })
    G.str['SCR_GET_Savagery_Bufftime'] = (function (_skill) {
      var tmp;
      return [40];
      return [];
    })
    G.str['SCR_GET_Parrying_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(50, lua_multiply(10, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_GET_Parrying_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(9, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_Zhendu_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_Get_Zhendu_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1383 = 0;
      var _pc_1383 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (!lua_eq(_pc_1383, null)) {
        var _minPATK_1384 = lua_call(G.str['TryGetProp'], [_pc_1383, "MINPATK"])[0];
        var _maxPATK_1384 = lua_call(G.str['TryGetProp'], [_pc_1383, "MAXPATK"])[0];
        _value_1383 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_divide((lua_add(_minPATK_1384, _maxPATK_1384)), 2)), 0.1)])[0];
      }
      return [_value_1383];
      return [];
    })
    G.str['SCR_Get_Zhendu_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1385 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _skillLv_1385 = lua_tableget(_skill, 'Level');
      var _value_1385 = lua_add(40, lua_multiply((lua_subtract(_skillLv_1385, 1)), 7));
      if (!lua_eq(_pc_1385, null)) {
        var _STR_1386 = lua_call(G.str['TryGetProp'], [_pc_1385, "STR"])[0];
        _value_1385 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_value_1385, (lua_multiply((lua_divide(_skillLv_1385, 4)), (lua_power((lua_multiply(_STR_1386, 0.6)), 0.9)))))])[0];
      }
      return [_value_1385];
      return [];
    })
    G.str['SCR_GET_JollyRoger_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1387 = 35;
      return [_value_1387];
      return [];
    })
    G.str['SCR_GET_JollyRoger_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1388 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 3)));
      return [_value_1388];
      return [];
    })
    G.str['SCR_GET_SubweaponCancel_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1389 = 5;
      return [_value_1389];
      return [];
    })
    G.str['SCR_GET_Looting_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(9, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_WeaponTouchUp_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_WeaponTouchUp_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1392 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1392 = lua_add(lua_add(2500, lua_multiply(lua_tableget(_skill, 'Level'), 250)), lua_tableget(_pc_1392, 'INT'));
      var _Squire3_1392 = lua_call(G.str['GetAbility'], [_pc_1392, 'Squire3'])[0];
      if (((!lua_eq(_Squire3_1392, null) && lua_eq(1, lua_tableget(_Squire3_1392, 'ActiveState'))) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1392 = lua_add(_value_1392, lua_multiply(lua_tableget(_Squire3_1392, 'Level'), 20));
      }
      return [_value_1392];
      return [];
    })
    G.str['SCR_GET_ArmorTouchUp_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_ArmorTouchUp_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1395 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1395 = lua_add(lua_add(500, lua_multiply(lua_tableget(_skill, 'Level'), 50)), lua_tableget(_pc_1395, 'INT'));
      var _Squire4_1395 = lua_call(G.str['GetAbility'], [_pc_1395, 'Squire4'])[0];
      if (((!lua_eq(_Squire4_1395, null) && lua_eq(1, lua_tableget(_Squire4_1395, 'ActiveState'))) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1395 = lua_add(_value_1395, lua_multiply(lua_tableget(_Squire4_1395, 'Level'), 5));
      }
      return [_value_1395];
      return [];
    })
    G.str['SCR_GET_Repair_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_UnlockChest_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_Conscript_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1399 = lua_add(3, lua_tableget(_skill, 'Level'));
      if (lua_lt(8, _value_1399)) {
        _value_1399 = 8;
      }
      return [_value_1399];
      return [];
    })
    G.str['SCR_GET_Tercio_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1401 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_multiply(lua_tableget(_skill, 'Level'), 10)];
      return [];
    })
    G.str['SCR_GET_Phalanx_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1402 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_multiply(lua_tableget(_skill, 'Level'), 10)];
      return [];
    })
    G.str['SCR_GET_Wingedformation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1403 = lua_add(50, (lua_multiply(3, lua_tableget(_skill, 'Level'))));
      return [_value_1403];
      return [];
    })
    G.str['SCR_GET_Wedgeformation_Ratio'] = (function (_skill) {
      var tmp;
      return [4];
      return [];
    })
    G.str['SCR_GET_Wedgeformation_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1405 = lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1405];
      return [];
    })
    G.str['SCR_GET_Testudo_Ratio'] = (function (_skill) {
      var tmp;
      return [50];
      return [];
    })
    G.str['SCR_GET_Testudo_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'Level'), 30)];
      return [];
    })
    G.str['SCR_GET_DeedsOfValor_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 3))];
      return [];
    })
    G.str['SCR_GET_DeedsOfValor_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 2))];
      return [];
    })
    G.str['SCR_GET_DeedsOfValor_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 1))];
      return [];
    })
    G.str['SCR_GET_DeedsOfValor_Ratio3'] = (function (_skill) {
      var tmp;
      return [5];
      return [];
    })
    G.str['SCR_GET_PainBarrier_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1412 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1412];
      return [];
    })
    G.str['SCR_GET_Double_pay_earn_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1413 = lua_multiply(lua_tableget(_skill, 'Level'), 30);
      return [_value_1413];
      return [];
    })
    G.str['SCR_GET_Camp_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))];
      return [];
    })
    G.str['SCR_GET_Camp_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'Level'), 5)];
      return [];
    })
    G.str['SCR_GET_SR_LV_TEST'] = (function (_skill) {
      var tmp;
      var _pc_1416 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_tableget(_skill, 'SklSR')];
      return [];
    })
    G.str['SCR_Peltasta_SwashBuckling'] = (function (_self) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_Get_SwashBuckling_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1418 = lua_add(19, lua_multiply(lua_tableget(_skill, 'Level'), 38));
      return [_value_1418];
      return [];
    })
    G.str['SCR_GET_SR_LV_SwashBuckling'] = (function (_skill) {
      var tmp;
      var _pc_1419 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(6, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_SwashBuckling_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(9, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_SwashBuckling_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1421 = 35;
      return [_value_1421];
      return [];
    })
    G.str['SCR_GET_SwashBuckling_Bufftime'] = (function (_skill) {
      var tmp;
      var _buffTime_1422 = 10;
      var _pc_1422 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (!lua_eq(_pc_1422, null)) {
        var _abilPeltasta32_1423 = lua_call(G.str['GetAbility'], [_pc_1422, "Peltasta32"])[0];
        if ((!lua_eq(_abilPeltasta32_1423, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilPeltasta32_1423, "ActiveState"])[0], 1))) {
          _buffTime_1422 = lua_add(_buffTime_1422, lua_call(G.str['TryGetProp'], [_abilPeltasta32_1423, "Level"])[0]);
        }
      }
      return [_buffTime_1422];
      return [];
    })
    G.str['SCR_Get_CrescentWing_SkillFactor'] = (function (_skill) {
      var tmp;
      var _pc_1425 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _byItem_1425 = lua_call(G.str['GetSumOfEquipItem'], [_pc_1425, 'Slash'])[0];
      var _value_1425 = lua_add(lua_add(185, lua_multiply(lua_tableget(_skill, 'Level'), 49)), _byItem_1425);
      return [_value_1425];
      return [];
    })
    G.str['SCR_GET_SR_LV_CrescentWing'] = (function (_skill) {
      var tmp;
      var _pc_1426 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_tableget(_pc_1426, 'SR'), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_GET_Provoke_Ratio'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_GET_Provoke_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(12, (lua_multiply(lua_tableget(_skill, 'Level'), 3)))];
      return [];
    })
    G.str['SCR_Get_EarthTremor_SkillFactor'] = (function (_skill) {
      var tmp;
      var _pc_1429 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _byItem_1429 = lua_call(G.str['GetSumOfEquipItem'], [_pc_1429, 'Strike'])[0];
      var _value_1429 = lua_add(lua_add(202, lua_multiply(lua_tableget(_skill, 'Level'), 49)), _byItem_1429);
      return [_value_1429];
      return [];
    })
    G.str['SCR_Get_EarthTremor_SklAtkAdd'] = (function (_skill) {
      var tmp;
      var _value_1430 = 0;
      return [_value_1430];
      return [];
    })
    G.str['SCR_GET_SR_LV_EarthTremor'] = (function (_skill) {
      var tmp;
      var _pc_1431 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_tableget(_pc_1431, 'SR'), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_GET_Earthtremor_Bufftime'] = (function (_skill) {
      var tmp;
      return [3];
      return [];
    })
    G.str['SCR_GET_Earthtremor_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 5))];
      return [];
    })
    G.str['SCR_Get_Moulinet_SkillFactor'] = (function (_skill) {
      var tmp;
      var _pc_1434 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _byItem_1434 = lua_call(G.str['GetSumOfEquipItem'], [_pc_1434, 'Slash'])[0];
      var _value_1434 = lua_add(lua_add(77, lua_multiply(lua_tableget(_skill, 'Level'), 3)), _byItem_1434);
      return [_value_1434];
      return [];
    })
    G.str['SCR_Get_Moulinet_SklAtkAdd'] = (function (_skill) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_GET_SR_LV_Moulinet'] = (function (_skill) {
      var tmp;
      var _pc_1436 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1436 = lua_add(lua_divide(lua_tableget(_pc_1436, 'SR'), 2), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_skill, 'Level'), 5)])[0]);
      if (lua_lt(_value_1436, 1)) {
        _value_1436 = 1;
      }
      return [_value_1436];
      return [];
    })
    G.str['SCR_Get_Cyclone_SkillFactor'] = (function (_skill) {
      var tmp;
      var _pc_1438 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _byItem_1438 = lua_call(G.str['GetSumOfEquipItem'], [_pc_1438, 'Slash'])[0];
      var _value_1438 = lua_add(lua_add(63, lua_multiply(lua_tableget(_skill, 'Level'), 23)), _byItem_1438);
      return [_value_1438];
      return [];
    })
    G.str['SCR_Get_Cyclone_SklAtkAdd'] = (function (_skill) {
      var tmp;
      var _value_1439 = 0;
      return [_value_1439];
      return [];
    })
    G.str['SCR_GET_SR_LV_WhirlWind'] = (function (_skill) {
      var tmp;
      var _pc_1440 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_tableget(_pc_1440, 'SR'), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_Get_BroadHead_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1441 = lua_add(92, lua_multiply(lua_tableget(_skill, 'Level'), 8));
      return [_value_1441];
      return [];
    })
    G.str['SCR_Get_BroadHead_Ratio'] = (function (_skill) {
      var tmp;
      var _caster_1442 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _evgDmg_1442 = lua_divide((lua_add(lua_tableget(_caster_1442, 'MINPATK'), lua_tableget(_caster_1442, 'MAXPATK'))), 2);
      var _addDmg_1442 = lua_add(4, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 3));
      if (lua_lt(5, lua_tableget(_skill, 'Level'))) {
        _addDmg_1442 = lua_add(lua_add(4, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 5)), lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 5)), 6.3));
      }
      var _value_1442 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_multiply(_evgDmg_1442, 0.3), _addDmg_1442)])[0];
      return [_value_1442];
      return [];
    })
    G.str['SCR_Get_BroadHead_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))];
      return [];
    })
    G.str['SCR_Get_CrossFire_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(75, lua_multiply(lua_tableget(_skill, 'Level'), 5))];
      return [];
    })
    G.str['SCR_Get_Multishot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1446 = 10;
      return [_value_1446];
      return [];
    })
    G.str['SCR_Get_BarbedArrow_SkillFactor'] = (function (_skill) {
      var tmp;
      var _value_1447 = lua_add(140, lua_multiply(lua_tableget(_skill, 'Level'), 25));
      return [_value_1447];
      return [];
    })
    G.str['SCR_GET_SR_LV_MultiShot'] = (function (_skill) {
      var tmp;
      var _pc_1448 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_add(lua_tableget(_pc_1448, 'SR'), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_skill, 'Level'), 5)])[0]), lua_tableget(_skill, 'SklSR'))];
      return [];
    })
    G.str['SCR_Get_BuildRoost_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1449 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1449 = 100;
      var _Falconer1_abil_1449 = lua_call(G.str['GetAbility'], [_pc_1449, "Falconer1"])[0];
      if ((!lua_eq(_Falconer1_abil_1449, null) && lua_eq(1, lua_tableget(_Falconer1_abil_1449, 'ActiveState')))) {
        _value_1449 = lua_add(_value_1449, lua_multiply(lua_tableget(_Falconer1_abil_1449, 'Level'), 20));
      }
      return [_value_1449];
      return [];
    })
    G.str['SCR_Get_BuildRoost_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1451 = 20;
      return [_value_1451];
      return [];
    })
    G.str['SCR_Get_Hovering_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1452 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1452 = 10;
      var _abil_1452 = lua_call(G.str['GetAbility'], [_pc_1452, "Falconer3"])[0];
      if ((!lua_eq(_abil_1452, null) && lua_eq(1, lua_tableget(_abil_1452, 'ActiveState')))) {
        _value_1452 = lua_add(_value_1452, lua_multiply(lua_tableget(_abil_1452, 'Level'), 3));
      }
      return [_value_1452];
      return [];
    })
    G.str['SCR_Get_Circling_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1454 = lua_add(10, lua_tableget(_skill, 'Level'));
      return [_value_1454];
      return [];
    })
    G.str['SCR_Get_HangingShot_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(14, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Aiming_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1456 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return [_value_1456];
      return [];
    })
    G.str['SCR_GET_FirstStrike_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1457 = lua_add(20, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 10));
      return [_value_1457];
      return [];
    })
    G.str['SCR_GET_FirstStrike_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1458 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _lv_1458 = lua_tableget(_pc_1458, 'Lv');
      var _bylvCorrect_1458 = lua_subtract(_lv_1458, 300);
      var _spendSP_1458 = 90;
      if (lua_lt(_bylvCorrect_1458, 0)) {
        _bylvCorrect_1458 = lua_divide(lua_multiply(_bylvCorrect_1458, 2.75), 1000);
      } else if (lua_lte(0, _bylvCorrect_1458)) {
        _bylvCorrect_1458 = lua_divide(lua_multiply(_bylvCorrect_1458, 1.25), 1000);
      }
      var _spendSP_1458 = lua_multiply(_spendSP_1458, (lua_add(1, _bylvCorrect_1458)));
      return lua_tablegetcall(G.str['math'], 'floor', [_spendSP_1458]);
      return [];
    })
    G.str['SHOOTMOVE_CYCLONE'] = (function (_skill) {
      var tmp;
      var _pc_1461 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _ablLevel_1461 = lua_call(G.str['GET_ABIL_LEVEL'], [_pc_1461, "DustDevil"])[0];
      if (lua_lt(0, _ablLevel_1461)) {
        return [0];
      }
      return [0];
      return [];
    })
    G.str['SCR_GET_AcrobaticMount_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1463 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return [_value_1463];
      return [];
    })
    G.str['SCR_GET_AcrobaticMount_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1464 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1464];
      return [];
    })
    G.str['SCR_GET_RimBlow_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 30))];
      return [];
    })
    G.str['SCR_GET_UmboBlow_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 30))];
      return [];
    })
    G.str['SCR_GET_DreadWorm_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 50))];
      return [];
    })
    G.str['SCR_GET_Rage_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_divide((lua_add(12000, lua_multiply(4000, lua_tableget(_skill, 'Level')))), 1000)];
      return [];
    })
    G.str['SCR_GET_Conviction_AttackRatio'] = (function (_skill) {
      var tmp;
      return [lua_add(25, lua_multiply(lua_tableget(_skill, 'Level'), 25))];
      return [];
    })
    G.str['SCR_GET_Conviction_DefenceRatio'] = (function (_skill) {
      var tmp;
      return [lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 15))];
      return [];
    })
    G.str['SCR_GET_Soaring_Bufftime'] = (function (_skill) {
      var tmp;
      return [20];
      return [];
    })
    G.str['SCR_GET_EnergyBolt_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(25, lua_multiply(lua_multiply(lua_tableget(_skill, 'Level'), lua_tableget(_skill, 'SklFactor')), 50))];
      return [];
    })
    G.str['SCR_GET_EnergyBolt_HitSplRange'] = (function (_skill) {
      var tmp;
      return [30];
      return [];
    })
    G.str['SCR_GET_EnergyBolt_Splash'] = (function (_skill) {
      var tmp;
      var _lv_1474 = lua_tableget(_skill, 'Level');
      var _splCnt_1474 = lua_add(lua_add(lua_tablegetcall(G.str['math'], 'min', [3, _lv_1474])[0], lua_tableget(_skill, 'Splash_BM')), 1);
      return [_splCnt_1474];
      return [];
    })
    G.str['SCR_GET_Fog_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(4, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Heal_Bufftime'] = (function (_skill) {
      var tmp;
      var _cnt_1476 = lua_tableget(_skill, 'Level');
      if (lua_lt(10, lua_tableget(_skill, 'Level'))) {
        _cnt_1476 = 10;
      }
      return [_cnt_1476];
      return [];
    })
    G.str['SCR_GET_Heal_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1478 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcINT_1478 = lua_call(G.str['TryGetProp'], [_pc_1478, "INT"])[0];
      if (lua_eq(_pcINT_1478, null)) {
        _pcINT_1478 = 1;
      }
      var _pcMNA_1478 = lua_call(G.str['TryGetProp'], [_pc_1478, "MNA"])[0];
      if (lua_eq(_pcMNA_1478, null)) {
        _pcMNA_1478 = 1;
      }
      var _value_1478 = lua_multiply((lua_add(_pcINT_1478, _pcMNA_1478)), 2);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1478]);
      return [];
    })
    G.str['SCR_GET_Heal_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1481 = lua_add(588, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 103));
      _value_1481 = lua_multiply(_value_1481, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1481]);
      return [];
    })
    G.str['SCR_GET_Heal_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1482 = lua_tableget(_skill, 'Level');
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1482]);
      return [];
    })
    G.str['SCR_GET_Cure_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1483 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1483 = 0.4;
      var _abil_1483 = lua_call(G.str['GetAbility'], [_pc_1483, "Cleric1"])[0];
      if ((!lua_eq(_abil_1483, null) && lua_eq(lua_tableget(_abil_1483, 'ActiveState'), 1))) {
        _value_1483 = 0.2;
      }
      return [_value_1483];
      return [];
    })
    G.str['SCR_GET_Cure_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1485 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(8, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Bless_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(45, lua_multiply(10, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_GET_Bless_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(12, lua_multiply(5, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_GET_Bless_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1488 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 0.3));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1488]);
      return [];
    })
    G.str['SCR_GET_SafetyZone_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_DeprotectedZone_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1490 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _buffTime_1490 = lua_add(lua_multiply(lua_tableget(_skill, 'Level'), 2), 4);
      var _Cleric5_abil_1490 = lua_call(G.str['GetAbility'], [_pc_1490, "Cleric5"])[0];
      if ((!lua_eq(_Cleric5_abil_1490, null) && lua_eq(1, lua_tableget(_Cleric5_abil_1490, 'ActiveState')))) {
        _buffTime_1490 = lua_add(_buffTime_1490, lua_tableget(_Cleric5_abil_1490, 'Level'));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_buffTime_1490]);
      return [];
    })
    G.str['SCR_GET_DeprotectedZone_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1492 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1492 = lua_add(lua_add(2.8, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 0.7)), lua_tableget(_pc_1492, 'MNA'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1492]);
      return [];
    })
    G.str['SCR_GET_DeprotectedZone_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1493 = lua_add(1, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 0.5));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1493]);
      return [];
    })
    G.str['SCR_GET_Fade_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1494 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1494]);
      return [];
    })
    G.str['SCR_GET_PatronSaint_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1495 = 60;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1495]);
      return [];
    })
    G.str['SCR_GET_PatronSaint_Raito'] = (function (_skill) {
      var tmp;
      var _value_1496 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      _value_1496 = lua_multiply(_value_1496, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1496];
      return [];
    })
    G.str['SCR_GET_Daino_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1497 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1497];
      return [];
    })
    G.str['SCR_GET_Mackangdal_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1498 = lua_add(10, lua_tableget(_skill, 'Level'));
      var _pc_1498 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1498])[0], 1)) {
        _value_1498 = lua_multiply(_value_1498, 0.7);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1498]);
      return [];
    })
    G.str['SCR_GET_Hexing_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1500 = lua_add(lua_multiply(lua_tableget(_skill, 'Level'), 1), 14);
      return [_value_1500];
      return [];
    })
    G.str['SCR_GET_SpecialForceFormation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1501 = lua_add(35, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1501];
      return [];
    })
    G.str['SCR_GET_SpecialForceFormation_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1502 = lua_add(55, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1502];
      return [];
    })
    G.str['SCR_GET_Zombify_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1503 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1503];
      return [];
    })
    G.str['SCR_GET_Zombify_ratio'] = (function (_skill) {
      var tmp;
      var _pc_1504 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1504 = lua_add(4, lua_tableget(_skill, 'Level'));
      return [_value_1504];
      return [];
    })
    G.str['SCR_GET_CrossGuard_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1505 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_pc_1505, 'STR'), 0.1)]);
      return [];
    })
    G.str['SCR_GET_Finestra_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1506 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1506 = lua_multiply(3, lua_tableget(_skill, 'Level'));
      _value_1506 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1506, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1506]);
      return [];
    })
    G.str['SCR_GET_Finestra_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1507 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1507 = lua_multiply(15, lua_tableget(_skill, 'Level'));
      var _abil_1507 = lua_call(G.str['GetAbility'], [_pc_1507, 'Hoplite9'])[0];
      if (((!lua_eq(_abil_1507, null) && lua_eq(1, lua_tableget(_abil_1507, 'ActiveState'))) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1507 = lua_multiply(_value_1507, 2);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1507]);
      return [];
    })
    G.str['SCR_GET_Finestra_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1509 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1509 = lua_add(25, (lua_multiply(15, lua_tableget(_skill, 'Level'))));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1509]);
      return [];
    })
    G.str['SCR_GET_SharpSpear_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1510 = 300;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1510]);
      return [];
    })
    G.str['SCR_GET_SharpSpear_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1511 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1511 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 1)));
      _value_1511 = lua_multiply(_value_1511, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1511];
      return [];
    })
    G.str['SCR_GET_HighGuard_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1512 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      _value_1512 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1512, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1512]);
      return [];
    })
    G.str['SCR_GET_HighGuard_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1513 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1513 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1513]);
      return [];
    })
    G.str['SCR_GET_HighGuard_AtkDown'] = (function (_skill) {
      var tmp;
      var _pc_1514 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1514 = lua_tableget(_skill, 'Level');
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1514]);
      return [];
    })
    G.str['SCR_GET_HolyEnchant_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(60, lua_multiply(0.5, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_GET_HolyEnchant_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(20, lua_multiply(2, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_GET_Haste_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1517 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 0.2));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1517]);
      return [];
    })
    G.str['SCR_GET_Cure_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1518 = lua_add(5, lua_tableget(_skill, 'Level'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1518]);
      return [];
    })
    G.str['SCR_GET_Aukuras_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1519 = 30;
      var _pc_1519 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _Kriwi18_abil_1519 = lua_call(G.str['GetAbility'], [_pc_1519, "Kriwi18"])[0];
      if ((!lua_eq(_Kriwi18_abil_1519, null) && lua_eq(lua_tableget(_Kriwi18_abil_1519, 'ActiveState'), 1))) {
        _value_1519 = 20;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1519]);
      return [];
    })
    G.str['SCR_GET_Aukuras_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1521 = lua_add(39, (lua_multiply(19, (lua_subtract(lua_tableget(_skill, 'Level'), 1)))));
      var _pc_1521 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilKriwi14_1521 = lua_call(G.str['GetAbility'], [_pc_1521, 'Kriwi14'])[0];
      if ((!lua_eq(_abilKriwi14_1521, null) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1521 = lua_multiply(_value_1521, (lua_add(1, lua_multiply(lua_tableget(_abilKriwi14_1521, 'Level'), 0.01))));
      }
      var _abilKriwi18_1521 = lua_call(G.str['GetAbility'], [_pc_1521, "Kriwi18"])[0];
      if ((!lua_eq(_abilKriwi18_1521, null) && lua_eq(lua_tableget(_abilKriwi18_1521, 'ActiveState'), 1))) {
        _value_1521 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1521]);
      return [];
    })
    G.str['SCR_GET_Aukuras_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1524 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1524 = lua_add(100, (lua_multiply(lua_tableget(_skill, 'Level'), 45)));
      _value_1524 = lua_multiply(_value_1524, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1524]);
      return [];
    })
    G.str['SCR_GET_DivineStigma_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1525 = lua_tableget(_skill, 'Level');
      return [_value_1525];
      return [];
    })
    G.str['SCR_GET_DivineStigma_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1526 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1526];
      return [];
    })
    G.str['SCR_GET_DivineStigma_Time'] = (function (_skill) {
      var tmp;
      var _pc_1527 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1527 = 60;
      var _abil_1527 = lua_call(G.str['GetAbility'], [_pc_1527, "Kriwi9"])[0];
      if ((!lua_eq(_abil_1527, null) && lua_eq(lua_tableget(_abil_1527, 'ActiveState'), 1))) {
        _value_1527 = lua_add(_value_1527, (lua_multiply(lua_tableget(_abil_1527, 'Level'), 6)));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1527]);
      return [];
    })
    G.str['SCR_GET_Limitation_Bufftime'] = (function (_skill) {
      var tmp;
      return [180];
      return [];
    })
    G.str['SCR_GET_Limitation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1530 = lua_add(10, lua_multiply(0.9, lua_tableget(_skill, 'Level')));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1530]);
      return [];
    })
    G.str['SCR_Get_Melstis_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1531 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1531 = 5;
      return [_value_1531];
      return [];
    })
    G.str['SCR_Get_Melstis_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1532 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1532 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      return [_value_1532];
      return [];
    })
    G.str['SCR_Get_Zalciai_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1533 = lua_tableget(_skill, 'Level');
      _value_1533 = lua_multiply(_value_1533, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1533];
      return [];
    })
    G.str['SCR_Get_Zalciai_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1534 = lua_tableget(_skill, 'Level');
      return [_value_1534];
      return [];
    })
    G.str['SCR_GET_Zaibas_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(4, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_Get_Aspersion_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1536 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _pcLevel_1536 = lua_call(G.str['TryGetProp'], [_pc_1536, "Lv"])[0];
      var _pcMNA_1536 = lua_call(G.str['TryGetProp'], [_pc_1536, "MNA"])[0];
      var _mnaRate_1536 = lua_add((lua_multiply(lua_divide(_pcMNA_1536, (lua_add(_pcMNA_1536, _pcLevel_1536))), 2)), 0.15);
      var _skillValue_1536 = lua_tableget(_skill, 'Level');
      var _value_1536 = lua_multiply(_skillValue_1536, _mnaRate_1536);
      _value_1536 = lua_multiply(_value_1536, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1536];
      return [];
    })
    G.str['SCR_Get_Resurrection_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1537 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_1537];
      return [];
    })
    G.str['SCR_Get_Resurrection_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1538 = 1;
      var _pc_1538 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1538 = lua_call(G.str['GetAbility'], [_pc_1538, "Priest9"])[0];
      if ((!lua_eq(_abil_1538, null) && lua_eq(lua_tableget(_abil_1538, 'ActiveState'), 1))) {
        _value_1538 = lua_add(_value_1538, lua_tableget(_abil_1538, 'Level'));
      }
      return [_value_1538];
      return [];
    })
    G.str['SCR_Get_Resurrection_Time'] = (function (_skill) {
      var tmp;
      var _value_1540 = lua_tablegetcall(G.str['math'], 'max', [1, lua_subtract(7, lua_tableget(_skill, 'Level'))])[0];
      return [_value_1540];
      return [];
    })
    G.str['SCR_Get_Monstrance_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1541 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1541 = 20;
      var _abil_1541 = lua_call(G.str['GetAbility'], [_pc_1541, "Priest22"])[0];
      var _ActiveState_1541 = lua_call(G.str['TryGetProp'], [_abil_1541, "ActiveState"])[0];
      if ((!lua_eq(_abil_1541, null) && lua_eq(_ActiveState_1541, 1))) {
        _value_1541 = lua_add(_value_1541, (lua_multiply(lua_tableget(_abil_1541, 'Level'), 60)));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1541]);
      return [];
    })
    G.str['SCR_Get_Monstrance_Debufftime'] = (function (_skill) {
      var tmp;
      var _pc_1543 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1543 = 30;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1543]);
      return [];
    })
    G.str['SCR_Get_Monstrance_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1544 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      _value_1544 = lua_multiply(_value_1544, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1544];
      return [];
    })
    G.str['SCR_Get_Aspersion_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_Get_OutofBody_Ratio'] = (function (_skill) {
      var tmp;
      return [180];
      return [];
    })
    G.str['SCR_Get_OutofBody_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1547 = lua_tableget(_skill, 'Level');
      return [_value_1547];
      return [];
    })
    G.str['SCR_Get_OutofBody_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1548 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1548 = lua_call(G.str['GetAbility'], [_pc_1548, "Sadhu14"])[0];
      var _value_1548 = 0;
      if ((!lua_eq(_abil_1548, null) && lua_eq(1, lua_tableget(_abil_1548, 'ActiveState')))) {
        return lua_call(G.str['SCR_ABIL_ADD_SKILLFACTOR_TOOLTIP'], [_abil_1548]);
      }
      return [];
    })
    G.str['SCR_Get_SkillFactor_OutofBodySkill'] = (function (_skill) {
      var tmp;
      var _pc_1550 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _OutofBodySkill_1550 = lua_call(G.str['GetSkill'], [_pc_1550, "Sadhu_OutofBody"])[0];
      var _value_1550 = 0;
      if (!lua_eq(_OutofBodySkill_1550, null)) {
        _value_1550 = lua_tableget(_OutofBodySkill_1550, 'SkillFactor');
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1550]);
      return [];
    })
    G.str['SCR_GET_Prakriti_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1552 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 0.3));
      return [_value_1552];
      return [];
    })
    G.str['SCR_GET_TransmitPrana_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1553 = 30;
      return [_value_1553];
      return [];
    })
    G.str['SCR_GET_TransmitPrana_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1554 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 3)));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1554]);
      return [];
    })
    G.str['SCR_GET_TransmitPrana_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1555 = lua_multiply(lua_tableget(_skill, 'Level'), 15);
      return [_value_1555];
      return [];
    })
    G.str['SCR_GET_TransmitPrana_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1556 = lua_subtract(50, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return [_value_1556];
      return [];
    })
    G.str['SCR_Get_VashitaSiddhi_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'Level'), 5)];
      return [];
    })
    G.str['SCR_Get_VashitaSiddhi_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1558 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1558 = lua_add(35, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _abil_1558 = lua_call(G.str['GetAbility'], [_pc_1558, "Sadhu7"])[0];
      if ((!lua_eq(_abil_1558, null) && lua_eq(lua_tableget(_abil_1558, 'ActiveState'), 1))) {
        _value_1558 = lua_multiply(_value_1558, 1.2);
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1558]);
      return [];
    })
    G.str['SCR_Get_Physicallink_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(60, lua_multiply(lua_tableget(_skill, 'Level'), 10))];
      return [];
    })
    G.str['SCR_GET_Isa_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_multiply(10, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Isa_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(10, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Algiz_Bufftime'] = (function (_skill) {
      var tmp;
      var _buffTime_1563 = lua_multiply(30, lua_call(G.str['TryGetProp'], [_skill, "Level"])[0]);
      var _pc_1563 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilRuneCaster6_1563 = lua_call(G.str['GetAbility'], [_pc_1563, "RuneCaster6"])[0];
      if ((!lua_eq(_abilRuneCaster6_1563, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRuneCaster6_1563, "ActiveState"])[0], 1))) {
        var _abilAddBuffTime_1564 = lua_subtract(10, lua_multiply(lua_call(G.str['TryGetProp'], [_abilRuneCaster6_1563, "Level"])[0], 2));
        if (lua_lte(_abilAddBuffTime_1564, 0)) {
          _abilAddBuffTime_1564 = 0;
        }
        _buffTime_1563 = lua_subtract(_buffTime_1563, _abilAddBuffTime_1564);
      }
      return [_buffTime_1563];
      return [];
    })
    G.str['SCR_GET_Thurisaz_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_multiply(30, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Thurisaz_Ratio'] = (function (_skill) {
      var tmp;
      return [20];
      return [];
    })
    G.str['SCR_GET_Thurisaz_Ratio2'] = (function (_skill) {
      var tmp;
      return [20];
      return [];
    })
    G.str['SCR_Get_Bewitch_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(2, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_Get_Physicallink_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(lua_tableget(_skill, 'Level'), 3)];
      return [];
    })
    G.str['SCR_GET_ShieldBash_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_Get_JointPenalty_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 5))];
      return [];
    })
    G.str['SCR_Get_JointPenalty_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1573 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1573]);
      return [];
    })
    G.str['SCR_Get_JointPenalty_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1574 = lua_add(6.5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1574]);
      return [];
    })
    G.str['SCR_Get_HangmansKnot_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 0.2))];
      return [];
    })
    G.str['SCR_Get_UmbilicalCord_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1576 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1576 = 0;
      if (!lua_eq(_pc_1576, null)) {
        _value_1576 = lua_tableget(_pc_1576, 'DEF');
      }
      return [_value_1576];
      return [];
    })
    G.str['SCR_Get_UmbilicalCord_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1578 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1578 = 0;
      if (!lua_eq(_pc_1578, null)) {
        _value_1578 = lua_tableget(_pc_1578, 'RHP');
      }
      return [_value_1578];
      return [];
    })
    G.str['SCR_Get_SpiritShock_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1580 = lua_add(3, (lua_multiply(lua_tableget(_skill, 'Level'), 0.5)));
      return [_value_1580];
      return [];
    })
    G.str['SCR_Get_ElectricShock_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1581 = lua_add(3, (lua_multiply(lua_tableget(_skill, 'Level'), 0.5)));
      return [_value_1581];
      return [];
    })
    G.str['SCR_GET_Scud_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 10))];
      return [];
    })
    G.str['SCR_Get_Slow_Ratio'] = (function (_skill) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_add(8, lua_multiply(lua_tableget(_skill, 'Level'), 1.5))]);
      return [];
    })
    G.str['SCR_Get_Slow_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(14, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))];
      return [];
    })
    G.str['SCR_GET_MagnumOpus_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1585 = lua_add(2, lua_tableget(_skill, 'Level'));
      if (lua_lt(10, _value_1585)) {
        _value_1585 = 10;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1585]);
      return [];
    })
    G.str['SCR_Get_RunningShot_Bufftime'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_GET_CoverTraps_Ratio'] = (function (_skill) {
      var tmp;
      return [2];
      return [];
    })
    G.str['SCR_GET_SpikeShooter_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(2, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_SpikeShooter_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 7))];
      return [];
    })
    G.str['SCR_GET_HoverBomb_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_SneakHit_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_SneakHit_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1593 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1593 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 4));
      var _Rogue1_abil_1593 = lua_call(G.str['GetAbility'], [_pc_1593, 'Rogue1'])[0];
      if ((!lua_eq(_Rogue1_abil_1593, null) && lua_eq(1, lua_tableget(_Rogue1_abil_1593, 'ActiveState')))) {
        _value_1593 = lua_add(_value_1593, lua_multiply(2, lua_tableget(_Rogue1_abil_1593, 'Level')));
      }
      return [_value_1593];
      return [];
    })
    G.str['SCR_GET_Feint_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(3, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_Feint_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(2, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_Feint_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Spoliation_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_Evasion_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1599 = lua_multiply(50, lua_tableget(_skill, 'Level'));
      return [_value_1599];
      return [];
    })
    G.str['SCR_GET_Evasion_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_Vendetta_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1601 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1601 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1601]);
      return [];
    })
    G.str['SCR_GET_ZombieCapsule_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1602 = lua_tableget(_skill, 'Level');
      return [_value_1602];
      return [];
    })
    G.str['SCR_GET_Vendetta_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Lachrymator_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(7, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_Backstab_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_Get_Slow_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(14, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))];
      return [];
    })
    G.str['SCR_GET_Fog_IceRatio'] = (function (_skill) {
      var tmp;
      return [lua_add(13, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_SplitArrow_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'SkillFactor'), 2)];
      return [];
    })
    G.str['SCR_GET_FireBall_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 35))];
      return [];
    })
    G.str['SCR_GET_FireBall_HitSplRange'] = (function (_skill) {
      var tmp;
      return [50];
      return [];
    })
    G.str['SCR_GET_MitigatePenalty_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(2, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_MitigatePenalty_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_multiply(0.4, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_MitigatePenalty_BuffTime'] = (function (_skill) {
      var tmp;
      return [lua_multiply(15, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_FirePillar_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1614 = lua_add(7, lua_tableget(_skill, 'Level'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1614]);
      return [];
    })
    G.str['SCR_GET_Kako_Count'] = (function (_skill) {
      var tmp;
      return [2];
      return [];
    })
    G.str['SCR_GET_Kako_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(8, lua_multiply(2, lua_tableget(_skill, 'Level')))];
      return [];
    })
    G.str['SCR_Get_FrostCloud_Bufftime'] = (function (_skill) {
      var tmp;
      return [10];
      return [];
    })
    G.str['SCR_Get_FlameGround_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 1))];
      return [];
    })
    G.str['SCR_GET_Holy_Baptism_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1619 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 0.4));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1619]);
      return [];
    })
    G.str['SCR_Get_Raise_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1620 = lua_tableget(_skill, 'Level');
      return [_value_1620];
      return [];
    })
    G.str['SCR_Get_Raise_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1621 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1621 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _zone_1621 = lua_call(G.str['GetZoneName'], [_pc_1621])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1621])[0], 1) || lua_eq(_zone_1621, 'pvp_Mine'))) {
        _value_1621 = lua_multiply(_value_1621, 0.5);
      }
      return [_value_1621];
      return [];
    })
    G.str['SCR_GET_Holy_Baptism_Bufftime'] = (function (_skill) {
      var tmp;
      return [30];
      return [];
    })
    G.str['SCR_GET_REFRIGER_SPLASH'] = (function (_skill) {
      var tmp;
      var _splCnt_1624 = 10;
      return [_splCnt_1624];
      return [];
    })
    G.str['SCR_GET_GUST_SPLASH'] = (function (_skill) {
      var tmp;
      var _splCnt_1625 = lua_tablegetcall(G.str['math'], 'ceil', [lua_divide(lua_tableget(_skill, 'Level'), 2)])[0];
      return [_splCnt_1625];
      return [];
    })
    G.str['SCR_GET_SPLASH_ICESHATTERING'] = (function (_skill) {
      var tmp;
      var _splCnt_1626 = 10;
      return [_splCnt_1626];
      return [];
    })
    G.str['SCR_GET_ICEBOLT_HITSPLRANGE'] = (function (_skill) {
      var tmp;
      return [20];
      return [];
    })
    G.str['SCR_GET_IceBolt_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(40, lua_multiply(lua_tableget(_skill, 'Level'), 40))];
      return [];
    })
    G.str['SCR_GET_IcePillar_Bonus'] = (function (_skill) {
      var tmp;
      var _value_1629 = lua_add(10, lua_multiply(0.9, lua_tableget(_skill, 'Level')));
      return [1];
      return [];
    })
    G.str['SCR_Get_Swap_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1630 = lua_tableget(_skill, 'Level');
      return [_value_1630];
      return [];
    })
    G.str['SCR_Get_Teleportation_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(100, lua_multiply(lua_tableget(_skill, 'Level'), 10))];
      return [];
    })
    G.str['SCR_GET_IcePillar_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1632 = lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      return [_value_1632];
      return [];
    })
    G.str['SCR_Get_SwellLeftArm_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1633 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1633 = lua_add(lua_add(70, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 12)), lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), lua_power((lua_multiply((lua_add(lua_tableget(_pc_1633, 'INT'), lua_tableget(_pc_1633, 'MNA'))), 0.6)), 0.9)));
      var _Thaumaturge11_abil_1633 = lua_call(G.str['GetAbility'], [_pc_1633, "Thaumaturge11"])[0];
      if ((!lua_eq(_Thaumaturge11_abil_1633, null) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1633 = lua_multiply(_value_1633, (lua_add(1, lua_multiply(lua_tableget(_Thaumaturge11_abil_1633, 'Level'), 0.01))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1633]);
      return [];
    })
    G.str['SCR_Get_SwellRightArm_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1635 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1635 = lua_add(lua_add(90, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 20)), lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), lua_power((lua_multiply((lua_add(lua_tableget(_pc_1635, 'INT'), lua_tableget(_pc_1635, 'MNA'))), 0.7)), 0.9)));
      var _Thaumaturge14_abil_1635 = lua_call(G.str['GetAbility'], [_pc_1635, "Thaumaturge14"])[0];
      if (((!lua_eq(_Thaumaturge14_abil_1635, null) && lua_eq(1, lua_tableget(_Thaumaturge14_abil_1635, 'ActiveState'))) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1635 = lua_multiply(_value_1635, (lua_add(1, (lua_multiply(lua_tableget(_Thaumaturge14_abil_1635, 'Level'), 0.01)))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1635]);
      return [];
    })
    G.str['SCR_Get_SwellRightArm_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1637 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1637 = lua_add(lua_add(45, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 10)), lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), lua_power((lua_multiply((lua_add(lua_tableget(_pc_1637, 'INT'), lua_tableget(_pc_1637, 'MNA'))), 0.6)), 0.9)));
      var _Thaumaturge14_abil_1637 = lua_call(G.str['GetAbility'], [_pc_1637, "Thaumaturge14"])[0];
      if (!lua_eq(_Thaumaturge14_abil_1637, null)) {
        _value_1637 = lua_multiply(_value_1637, (lua_add(1, lua_multiply(lua_tableget(_Thaumaturge14_abil_1637, 'Level'), 0.01))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1637]);
      return [];
    })
    G.str['SCR_Get_SwellBrain_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1639 = lua_multiply(lua_tableget(_skill, 'Level'), 100);
      _value_1639 = lua_multiply(_value_1639, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1639]);
      return [];
    })
    G.str['SCR_Get_SwellBrain_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1640 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1640 = lua_add(lua_add(60, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 10)), lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 3)), lua_power((lua_multiply(lua_tableget(_pc_1640, 'MNA'), 0.7)), 0.9)));
      var _abil_1640 = lua_call(G.str['GetAbility'], [_pc_1640, 'Thaumaturge15'])[0];
      if ((!lua_eq(_abil_1640, null) && lua_lte(3, lua_tableget(_skill, 'Level')))) {
        _value_1640 = lua_multiply(_value_1640, (lua_add(1, lua_multiply(lua_tableget(_abil_1640, 'Level'), 0.01))));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1640]);
      return [];
    })
    G.str['SCR_Get_SpiritualChain_Bufftime'] = (function (_skill) {
      var tmp;
      var _pc_1642 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1642 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      var _abil_1642 = lua_call(G.str['GetAbility'], [_pc_1642, 'Linker4'])[0];
      if ((!lua_eq(_abil_1642, null) && lua_eq(1, lua_tableget(_abil_1642, 'ActiveState')))) {
        _value_1642 = lua_add(_value_1642, lua_tableget(_abil_1642, 'Level'));
      }
      return [_value_1642];
      return [];
    })
    G.str['SCR_Get_UmbilicalCord_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1644 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1644];
      return [];
    })
    G.str['SCR_Get_SwellLeftArm_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1645 = 300;
      return [_value_1645];
      return [];
    })
    G.str['SCR_Get_SwellRightArm_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1646 = 300;
      return [_value_1646];
      return [];
    })
    G.str['SCR_Get_SwellBrain_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1647 = 300;
      return [_value_1647];
      return [];
    })
    G.str['SCR_Get_Transpose_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1648 = lua_add(50, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return [_value_1648];
      return [];
    })
    G.str['SCR_Get_Summoning_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1649 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1649];
      return [];
    })
    G.str['SCR_Get_Electrocute_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1650 = lua_add(1, (lua_add(2, lua_multiply(lua_tableget(_skill, 'Level'), 0.5))));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1650]);
      return [];
    })
    G.str['SCR_GET_IceTremor_Bonus'] = (function (_skill) {
      var tmp;
      return lua_call(G.str['set_LI'], [lua_tableget(_skill, 'Level'), 10, 90]);
      return [];
    })
    G.str['SCR_GET_TEST3_Bonus'] = (function (_skill) {
      var tmp;
      var _lv_1652 = lua_tableget(_skill, 'Level');
      if (lua_lte(1, _lv_1652)) {
        return [lua_add(lua_tableget(_skill, 'BonusDam'), 100)];
      }
      return [lua_tableget(_skill, 'BonusDam')];
      return [];
    })
    G.str['SCR_GET_KDOWNPOWER'] = (function (_skill) {
      var tmp;
      var _pc_1654 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_tableget(_skill, 'KDownValue')];
      return [];
    })
    G.str['SCR_GET_KDOWNPOWER_Thrust'] = (function (_skill) {
      var tmp;
      var _pc_1655 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1655 = lua_call(G.str['GetAbility'], [_pc_1655, "DeepStraight"])[0];
      if (lua_eq(_abil_1655, null)) {
        return [lua_tableget(_skill, 'KDownValue')];
      } else {
        return [lua_add(lua_tableget(_skill, 'KDownValue'), (lua_multiply(lua_tableget(_abil_1655, 'Level'), 50)))];
      }
      return [];
    })
    G.str['SCR_GET_KDOWNPOWER_WagonWheel'] = (function (_skill) {
      var tmp;
      return [lua_add(lua_tableget(_skill, 'KDownValue'), lua_multiply(lua_tableget(_skill, 'Level'), 25))];
      return [];
    })
    G.str['SCR_GET_KDOWNPOWER_CartarStroke'] = (function (_skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_GET_KDOWNPOWER_RimBlow'] = (function (_skill) {
      var tmp;
      var _pc_1660 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1660 = lua_call(G.str['GetAbility'], [_pc_1660, "Peltasta35"])[0];
      if ((!lua_eq(_abil_1660, null) && lua_eq(lua_tableget(_abil_1660, 'ActiveState'), 1))) {
        return [0];
      }
      return [lua_tableget(_skill, 'KDownValue')];
      return [];
    })
    G.str['SCR_GET_KDOWNPOWER_Fulldraw'] = (function (_skill) {
      var tmp;
      var _pc_1662 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1662 = lua_call(G.str['GetAbility'], [_pc_1662, "Overwhelming"])[0];
      if ((!lua_eq(_abil_1662, null) && lua_eq(1, lua_tableget(_abil_1662, 'ActiveState')))) {
        return [lua_add(lua_tableget(_skill, 'KDownValue'), (lua_multiply(lua_tableget(_abil_1662, 'Level'), 50)))];
      } else {
        return [lua_tableget(_skill, 'KDownValue')];
      }
      return [];
    })
    G.str['SCR_NORMAL_PUNISH'] = (function (_self, _from, _skill, _splash, _ret) {
      var tmp;
      if (lua_eq(lua_call(G.str['OnKnockDown'], [_self])[0], "YES")) {
        lua_call(G.str['SCR_NORMAL_ATTACK'], [_self, _from, _skill, _splash, _ret]);
      } else {
        lua_call(G.str['NO_HIT_RESULT'], [_ret]);
      }
      return [];
    })
    G.str['SCR_NORMAL_SYNCHROTHRUSTING'] = (function (_self, _from, _skill, _splash, _ret) {
      var tmp;
      var _rhDamage_1668 = lua_call(G.str['SCR_LIB_ATKCALC_RH'], [_from, _skill])[0];
      var _rightHandAttribute_1668 = "Melee";
      var _rhEquipWeapon_1668 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
      if ((!lua_eq(_rhEquipWeapon_1668, null) && lua_eq(lua_call(G.str['IS_NO_EQUIPITEM'], [_rhEquipWeapon_1668])[0], 0))) {
        _rightHandAttribute_1668 = lua_tableget(_rhEquipWeapon_1668, 'Attribute');
      }
      var _ariesDamage_1668 = _rhDamage_1668;
      var _leftHandAttribute_1668 = "Melee";
      var _lhEquipWeapon_1668 = lua_call(G.str['GetEquipItem'], [_from, 'LH'])[0];
      if ((!lua_eq(_lhEquipWeapon_1668, null) && lua_eq(lua_call(G.str['IS_NO_EQUIPITEM'], [_lhEquipWeapon_1668])[0], 0))) {
        _leftHandAttribute_1668 = lua_tableget(_lhEquipWeapon_1668, 'Attribute');
      }
      var _byItem_1668 = 0;
      var _byItemList_1668 = lua_newtable(["DEF", "ADD_DEF"]);
      var var_1671 = 1, stop_1671 = lua_assertfloat(lua_len(_byItemList_1668));
      for (; var_1671 <= stop_1671; var_1671++) {
        var _i_1671 = var_1671;
        var _byItemTemp_1672 = lua_call(G.str['GetSumOfEquipItem'], [_from, lua_tableget(_byItemList_1668, _i_1671)])[0];
        if (lua_eq(_byItemTemp_1672, null)) {
          _byItemTemp_1672 = 0;
        }
        _byItem_1668 = lua_add(_byItem_1668, _byItemTemp_1672);
      }
      var _exceptDEF_1668 = lua_add(_byItem_1668, lua_tableget(_from, 'DEF_BM'));
      var _atkRate_1668 = 1;
      var _strikeDamage_1668 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_tableget(_from, 'DEF'), _exceptDEF_1668)), _atkRate_1668)])[0];
      var _abil_1668 = lua_call(G.str['GetAbility'], [_from, 'Hoplite7'])[0];
      if (!lua_eq(_abil_1668, null)) {
        _strikeDamage_1668 = lua_multiply(_strikeDamage_1668, (lua_subtract(1, lua_multiply(lua_tableget(_abil_1668, 'Level'), 0.1))));
        _ariesDamage_1668 = lua_multiply(_ariesDamage_1668, (lua_add(1, lua_multiply(lua_tableget(_abil_1668, 'Level'), 0.1))));
      }
      var _key_1668 = lua_call(G.str['GetSkillSyncKey'], [_from, _ret])[0];
      lua_call(G.str['StartSyncPacket'], [_from, _key_1668]);
      lua_call(G.str['RunScript'], ['SCR_SYNCHROTHRUSTING_TAKEDAMAGE', _self, _from, _skill, _ariesDamage_1668, _strikeDamage_1668, _rightHandAttribute_1668, _leftHandAttribute_1668]);
      lua_call(G.str['EndSyncPacket'], [_from, _key_1668, 0]);
      lua_call(G.str['NO_HIT_RESULT'], [_ret]);
      return [];
    })
    G.str['SCR_SYNCHROTHRUSTING_TAKEDAMAGE'] = (function (_self, _from, _skill, _ariesDamage, _strikeDamage, _rightHandAttribute, _leftHandAttribute) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_from, _self, lua_tableget(_skill, 'ClassName'), _ariesDamage, _rightHandAttribute, "Aries", "Melee", G.str['HIT_BASIC'], 0]);
      lua_call(G.str['sleep'], [200]);
      lua_call(G.str['TakeDamage'], [_from, _self, lua_tableget(_skill, 'ClassName'), _strikeDamage, _leftHandAttribute, "Strike", "Melee", G.str['HIT_BASIC'], 0]);
      return [];
    })
    G.str['SCR_SKILL_FoldingFan'] = (function (_self, _from, _skill, _splash, _ret) {
      var tmp;
      lua_call(G.str['NO_HIT_RESULT'], [_ret]);
      var _angle_1676 = lua_call(G.str['GetSkillDirByAngle'], [_from])[0];
      lua_call(G.str['AddBuff'], [_from, _self, 'FoldingFan_Buff', 1, 0, 1300, 1]);
      lua_call(G.str['KnockBack'], [_self, _from, 200, _angle_1676, 30, 0.9]);
      return [];
    })
    G.str['SCR_SKILL_BubbleStick'] = (function (_self, _from, _skill, _splash, _ret) {
      var tmp;
      lua_call(G.str['NO_HIT_RESULT'], [_ret]);
      return [];
    })
    G.str['SCR_NOHIT_ATTACK'] = (function (_self, _from, _skill, _splash, _ret) {
      var tmp;
      lua_call(G.str['NO_HIT_RESULT'], [_ret]);
      lua_call(G.str['SCR_SKILL_SPECIAL_CALC'], [_self, _from, _ret, _skill]);
      return [];
    })
    G.str['SCR_GET_SR_LV_TurnUndead'] = (function (_skill) {
      var tmp;
      var _pc_1679 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1679 = lua_add(8, lua_tableget(_skill, 'Level'));
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_1679, "Engkrateia_Buff"])[0], "YES")) {
        _value_1679 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1679, 1.5)])[0];
      }
      if (lua_lt(_value_1679, 1)) {
        _value_1679 = 1;
      }
      return [_value_1679];
      return [];
    })
    G.str['SCR_GET_SR_LV'] = (function (_skill) {
      var tmp;
      var _pc_1682 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1682 = lua_add(lua_tableget(_pc_1682, 'SR'), lua_tableget(_skill, 'SklSR'));
      if (lua_lt(_value_1682, 1)) {
        _value_1682 = 1;
      }
      return [_value_1682];
      return [];
    })
    G.str['SCR_GET_SR_LV_OUTLAW2'] = (function (_skill) {
      var tmp;
      var _pc_1684 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1684 = lua_call(G.str['GetAbility'], [_pc_1684, "Outlaw2"])[0];
      if ((!lua_eq(_abil_1684, null) && lua_eq(lua_tableget(_abil_1684, 'ActiveState'), 1))) {
        lua_tableset(_skill, 'SklSR', 17);
      }
      var _value_1684 = lua_add(lua_tableget(_pc_1684, 'SR'), lua_tableget(_skill, 'SklSR'));
      if (lua_lt(_value_1684, 1)) {
        _value_1684 = 1;
      }
      return [_value_1684];
      return [];
    })
    G.str['SCR_GET_SR_LV_RestInPeace'] = (function (_skill) {
      var tmp;
      var _pc_1687 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1687 = lua_add(lua_tableget(_pc_1687, 'SR'), lua_tableget(_skill, 'SklSR'));
      if (lua_lt(_value_1687, 1)) {
        _value_1687 = 1;
      }
      var _abil_1687 = lua_call(G.str['GetAbility'], [_pc_1687, "Bulletmarker13"])[0];
      if ((!lua_eq(_abil_1687, null) && lua_eq(lua_tableget(_abil_1687, 'ActiveState'), 1))) {
        _value_1687 = lua_add(_value_1687, 5);
      }
      return [_value_1687];
      return [];
    })
    G.str['SCR_GET_SR_LV_Bazooka_Buff'] = (function (_skill) {
      var tmp;
      var _pc_1690 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _skillSR_1690 = lua_tableget(_skill, 'SklSR');
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_1690, 'Bazooka_Buff'])[0], 'YES')) {
        _skillSR_1690 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_skillSR_1690, 2)])[0];
      }
      var _value_1690 = lua_add(lua_tableget(_pc_1690, 'SR'), _skillSR_1690);
      if (lua_lt(_value_1690, 1)) {
        _value_1690 = 1;
      }
      return [_value_1690];
      return [];
    })
    G.str['SCR_GET_SR_LV_MagicMissile'] = (function (_skill) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_GET_SR_LV_Doppelsoeldner'] = (function (_skill) {
      var tmp;
      var _pc_1694 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _skillSR_1694 = lua_tableget(_skill, 'SklSR');
      var _abil_1694 = lua_call(G.str['GetAbility'], [_pc_1694, 'Doppelsoeldner24'])[0];
      if ((!lua_eq(_abil_1694, null) && lua_eq(lua_tableget(_abil_1694, 'ActiveState'), 1))) {
        _skillSR_1694 = lua_add(_skillSR_1694, lua_tableget(_abil_1694, 'Level'));
      }
      var _value_1694 = lua_add(lua_tableget(_pc_1694, 'SR'), _skillSR_1694);
      if (lua_lt(_value_1694, 1)) {
        _value_1694 = 1;
      }
      return [_value_1694];
      return [];
    })
    G.str['SCR_Get_SkillASPD'] = (function (_skill) {
      var tmp;
      var _pc_1697 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _stc_1697 = lua_call(G.str['GetStance'], [_pc_1697])[0];
      if (lua_eq(_stc_1697, null)) {
        return [1.0];
      }
      return [lua_tableget(_stc_1697, 'SkillASPD')];
      return [];
    })
    G.str['SCR_GET_USEOVERHEAT'] = (function (_skill) {
      var tmp;
      var _pc_1699 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _skillScale_1699 = 0.4;
      var _value_1699 = lua_tableget(_skill, 'BasicCoolDown');
      _value_1699 = lua_multiply(_value_1699, (lua_divide((lua_add(100, lua_tableget(_pc_1699, 'OverHeat_BM'))), 100)));
      if (lua_lt(_value_1699, 0)) {
        _value_1699 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1699]);
      return [];
    })
    G.str['SCR_GET_Tackle_Bonus'] = (function (_skill) {
      var tmp;
      return [lua_add(lua_tableget(_skill, 'BonusDam'), 84)];
      return [];
    })
    G.str['SCR_SKILL_MAXR'] = (function (_skill) {
      var tmp;
      var _pc_1702 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _addMaxR_1702 = 0;
      var _abilFletcher26_1702 = lua_call(G.str['GetAbility'], [_pc_1702, "Fletcher26"])[0];
      if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, "Job"])[0], "Fletcher")) {
        if ((!lua_eq(_abilFletcher26_1702, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilFletcher26_1702, "ActiveState"])[0], 1))) {
          var _abilLv_1704 = lua_call(G.str['TryGetProp'], [_abilFletcher26_1702, "Level"])[0];
          _addMaxR_1702 = lua_multiply(_abilLv_1704, 10);
        }
      }
      return [lua_add(lua_add(lua_tableget(_skill, 'MaxRValue'), lua_tableget(_pc_1702, 'MaxR_BM')), _addMaxR_1702)];
      return [];
    })
    G.str['SCR_NORMALSKILL_MAXR'] = (function (_skill) {
      var tmp;
      var _pc_1705 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1705 = lua_call(G.str['GetAbility'], [_pc_1705, "Mergen1"])[0];
      var _abilBonus_1705 = 0;
      if ((!lua_eq(_abil_1705, null) && lua_eq(1, lua_tableget(_abil_1705, 'ActiveState')))) {
        _abilBonus_1705 = lua_add(_abilBonus_1705, lua_tableget(_abil_1705, 'Level'));
      }
      return [lua_add(lua_add(lua_tableget(_skill, 'MaxRValue'), lua_tableget(_pc_1705, 'MaxR_BM')), _abilBonus_1705)];
      return [];
    })
    G.str['SCR_SKILL_ITEM_MAXR'] = (function (_skill) {
      var tmp;
      var _pc_1707 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _maxr_1707 = lua_add(lua_tableget(_skill, 'MaxRValue'), lua_tableget(_pc_1707, 'MaxR_BM'));
      var _rItem_1707 = lua_call(G.str['GetEquipItem'], [_pc_1707, 'RH'])[0];
      if (!lua_eq(_rItem_1707, null)) {
        _maxr_1707 = lua_add(_maxr_1707, lua_tableget(_rItem_1707, 'AddSkillMaxR'));
      }
      return [_maxr_1707];
      return [];
    })
    G.str['SCR_GET_SKILLLV_WITH_BM'] = (function (_skill) {
      var tmp;
      var _fixedLevel_1709 = lua_call(G.str['GetExProp'], [_skill, "FixedLevel"])[0];
      if (lua_lt(0, _fixedLevel_1709)) {
        return [_fixedLevel_1709];
      }
      if ((lua_eq(lua_call(G.str['CHECK_SKILL_KEYWORD'], [_skill, "ExpertSkill"])[0], 1) && lua_eq(lua_call(G.str['CHECK_SKILL_KEYWORD'], [_skill, "LimitInstanceLevelUp"])[0], 1))) {
        return [lua_tableget(_skill, 'LevelByDB')];
      }
      var _value_1709 = lua_add(lua_tableget(_skill, 'LevelByDB'), lua_tableget(_skill, 'Level_BM'));
      if (lua_lt(0, lua_tableget(_skill, 'GemLevel_BM'))) {
        _value_1709 = lua_add(_value_1709, 1);
      }
      if (lua_eq(lua_tableget(_skill, 'LevelByDB'), 0)) {
        return [0];
      }
      if (lua_lt(_value_1709, 1)) {
        _value_1709 = 1;
      }
      return [_value_1709];
      return [];
    })
    G.str['SCR_GET_SR_LV_WagonWheel'] = (function (_skill) {
      var tmp;
      var _pc_1715 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _byAbil_1715 = 0;
      var _abil_1715 = lua_call(G.str['GetAbility'], [_pc_1715, 'Highlander6'])[0];
      if ((!lua_eq(_abil_1715, null) && lua_eq(1, lua_tableget(_abil_1715, 'ActiveState')))) {
        _byAbil_1715 = lua_multiply(lua_tableget(_abil_1715, 'Level'), 1);
      }
      return [lua_add(lua_add(lua_tableget(_pc_1715, 'SR'), lua_tableget(_skill, 'SklSR')), _byAbil_1715)];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'SpendItemBaseCount')];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_BroomTrap'] = (function (_skill) {
      var tmp;
      var _count_1718 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1718 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1718 = lua_call(G.str['GetAbility'], [_pc_1718, 'Sapper34'])[0];
      if ((!lua_eq(_abil_1718, null) && lua_eq(1, lua_tableget(_abil_1718, 'ActiveState')))) {
        _count_1718 = lua_add(_count_1718, 1);
      }
      return [_count_1718];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_PunjiStake'] = (function (_skill) {
      var tmp;
      var _count_1720 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1720 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1720 = lua_call(G.str['GetAbility'], [_pc_1720, 'Sapper32'])[0];
      if ((!lua_eq(_abil_1720, null) && lua_eq(1, lua_tableget(_abil_1720, 'ActiveState')))) {
        _count_1720 = lua_subtract(_count_1720, 1);
      }
      return [_count_1720];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_SpikeShooter'] = (function (_skill) {
      var tmp;
      var _count_1722 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1722 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1722 = lua_call(G.str['GetAbility'], [_pc_1722, 'Sapper35'])[0];
      if ((!lua_eq(_abil_1722, null) && lua_eq(1, lua_tableget(_abil_1722, 'ActiveState')))) {
        _count_1722 = lua_multiply(_count_1722, 2);
      }
      return [_count_1722];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_Claymore'] = (function (_skill) {
      var tmp;
      var _count_1724 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1724 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1724 = lua_call(G.str['GetAbility'], [_pc_1724, 'Sapper33'])[0];
      if ((!lua_eq(_abil_1724, null) && lua_eq(1, lua_tableget(_abil_1724, 'ActiveState')))) {
        _count_1724 = lua_multiply(_count_1724, 2);
      }
      return [_count_1724];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_GreenwoodShikigami'] = (function (_skill) {
      var tmp;
      var _count_1726 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1726 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1726 = lua_call(G.str['GetAbility'], [_pc_1726, 'Onmyoji16'])[0];
      if ((!lua_eq(_abil_1726, null) && lua_eq(lua_tableget(_abil_1726, 'ActiveState'), 1))) {
        _count_1726 = lua_multiply(_count_1726, 2);
      }
      return [_count_1726];
      return [];
    })
    G.str['SCR_GET_Dekatos_Ratio'] = (function (_skill) {
      var tmp;
      return [300];
      return [];
    })
    G.str['SCR_GET_Overestimate_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1729 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(lua_tableget(_skill, 'Level'), 2)];
      return [];
    })
    G.str['SCR_GET_Overestimate_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1730 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1730 = lua_call(G.str['GetAbility'], [_pc_1730, 'Appraiser1'])[0];
      var _time_1730 = 40;
      if ((!lua_eq(_abil_1730, null) && lua_eq(lua_tableget(_abil_1730, 'ActiveState'), 1))) {
        _time_1730 = lua_add(_time_1730, (lua_multiply(lua_tableget(_abil_1730, 'Level'), 1)));
      }
      return [_time_1730];
      return [];
    })
    G.str['SCR_GET_Devaluation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1732 = lua_tableget(_skill, 'Level');
      return [_value_1732];
      return [];
    })
    G.str['SCR_GET_Devaluation_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1733 = 15;
      _value_1733 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1733, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1733];
      return [];
    })
    G.str['SCR_GET_Devaluation_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1734 = 15;
      _value_1734 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1734, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1734];
      return [];
    })
    G.str['SCR_GET_Blindside_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1735 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)))];
      return [];
    })
    G.str['SCR_GET_Forgery_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1736 = lua_add(75, (lua_multiply(lua_tableget(_skill, 'Level'), 15)));
      return [_value_1736];
      return [];
    })
    G.str['SCR_GET_Apprise_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1737 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(20, (lua_multiply(lua_tableget(_skill, 'Level'), 2)))];
      return [];
    })
    G.str['SCR_GET_Apprise_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1738 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [lua_add(20, (lua_multiply(lua_tableget(_skill, 'Level'), 2)))];
      return [];
    })
    G.str['SCR_GET_Devaluation_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_1739 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1739 = lua_call(G.str['GetAbility'], [_pc_1739, "Appraiser2"])[0];
      var _ratio_1739 = 50;
      if ((!lua_eq(_abil_1739, null) && lua_eq(lua_tableget(_abil_1739, 'ActiveState'), 1))) {
        _ratio_1739 = lua_add(_ratio_1739, (lua_multiply(lua_tableget(_abil_1739, 'Level'), 1)));
      }
      return [_ratio_1739];
      return [];
    })
    G.str['SCR_GET_Blindside_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1741 = lua_add(5, lua_tableget(_skill, 'Level'));
      _value_1741 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1741, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1741];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_Aspersion'] = (function (_skill) {
      var tmp;
      var _count_1742 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1742 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (!lua_eq(lua_call(G.str['GetAbility'], [_pc_1742, 'Priest1'])[0], null)) {
        _count_1742 = lua_add(_count_1742, 1);
      }
      return [_count_1742];
      return [];
    })
    G.str['SCR_GET_SPENDITEM_COUNT_Blessing'] = (function (_skill) {
      var tmp;
      var _count_1744 = lua_tableget(_skill, 'SpendItemBaseCount');
      var _pc_1744 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      return [_count_1744];
      return [];
    })
    G.str['SCR_GET_Hexing_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1745 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1745 = lua_add(3, (lua_multiply(lua_tableget(_skill, 'Level'), 0.5)));
      return [_value_1745];
      return [];
    })
    G.str['SCR_GET_IronHook_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1746 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1746 = lua_add(4, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _zone_1746 = lua_call(G.str['GetZoneName'], [_pc_1746])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1746])[0], 1) || lua_eq(_zone_1746, 'pvp_Mine'))) {
        _value_1746 = lua_multiply(_value_1746, 0.5);
      }
      return [_value_1746];
      return [];
    })
    G.str['SCR_GET_Ogouveve_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1748 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1748 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1748]);
      return [];
    })
    G.str['SCR_GET_Ogouveve_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_1749 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1749 = lua_add(60, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1749]);
      return [];
    })
    G.str['SCR_GET_Ogouveve_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1750 = lua_add(1, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1750]);
      return [];
    })
    G.str['SCR_GET_Ogouveve_Ratio3'] = (function (_skill) {
      var tmp;
      var _skillLevel_1751 = lua_call(G.str['TryGetProp'], [_skill, 'Level'])[0];
      if (lua_eq(_skillLevel_1751, null)) {
        _skillLevel_1751 = 0;
      }
      var _value_1751 = lua_multiply(_skillLevel_1751, 10);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1751]);
      return [];
    })
    G.str['SCR_GET_Samdiveve_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1753 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1753 = lua_multiply((lua_subtract(lua_tableget(_pc_1753, 'MHP'), lua_tableget(_pc_1753, 'MHP_BM'))), (lua_multiply(0.05, lua_tableget(_skill, 'Level'))));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1753]);
      return [];
    })
    G.str['SCR_GET_Samdiveve_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1754 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1754 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 1));
      var _zone_1754 = lua_call(G.str['GetZoneName'], [_pc_1754])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1754])[0], 1) || lua_eq(_zone_1754, 'pvp_Mine'))) {
        _value_1754 = lua_multiply(_value_1754, 0.5);
      }
      return [_value_1754];
      return [];
    })
    G.str['SCR_GET_Samdiveve_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1756 = lua_add(60, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return [_value_1756];
      return [];
    })
    G.str['SCR_GET_CarveAustrasKoks_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1757 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1757];
      return [];
    })
    G.str['SCR_GET_CarveAustrasKoks_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1758 = lua_multiply(lua_tableget(_skill, 'Level'), 4);
      _value_1758 = lua_multiply(_value_1758, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1758];
      return [];
    })
    G.str['SCR_GET_CarveVakarine_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'Level')];
      return [];
    })
    G.str['SCR_GET_CarveZemina_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1760 = lua_multiply(1.5, lua_tableget(_skill, 'Level'));
      return [_value_1760];
      return [];
    })
    G.str['SCR_GET_CarveLaima_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1761 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      return [_value_1761];
      return [];
    })
    G.str['SCR_GET_CarveLaima_Ratio3'] = (function (_skill) {
      var tmp;
      var _pc_1762 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1762 = 10;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1762])[0], 1)) {
        _value_1762 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1762, 0.5)])[0];
      }
      return [_value_1762];
      return [];
    })
    G.str['SCR_GET_CarveAusirine_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1764 = lua_multiply(lua_tableget(_skill, 'Level'), 60);
      return [_value_1764];
      return [];
    })
    G.str['SCR_GET_DELAY_TIME'] = (function (_skill) {
      var tmp;
      var _actor_1765 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (!lua_eq(_actor_1765, null)) {
        if ((!lua_eq(lua_tableget(_actor_1765, 'ClassName'), "PC") && lua_eq(lua_tableget(_actor_1765, 'Faction'), "Monster"))) {
          if (((lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile') || lua_eq(lua_tableget(_skill, 'UseType'), 'FORCE')) || lua_eq(lua_tableget(_skill, 'UseType'), 'FORCE_GROUND'))) {
            if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 75)) {
              return [3000];
            } else if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 170)) {
              return [2500];
            } else if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 220)) {
              return [2000];
            } else {
              return [1500];
            }
          } else {
            if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 40)) {
              return [3000];
            } else if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 75)) {
              return [2500];
            } else if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 120)) {
              return [2000];
            } else if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 170)) {
              return [1500];
            } else if (lua_lt(lua_tableget(_actor_1765, 'Lv'), 220)) {
              return [1000];
            } else {
              return [500];
            }
          }
        }
      }
      return [lua_tableget(_skill, 'DelayTime')];
      return [];
    })
    G.str['SCR_USE_DELAY_TIME'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'DelayTime')];
      return [];
    })
    G.str['SCR_GET_Dig_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1781 = lua_tableget(_skill, 'Level');
      return [_value_1781];
      return [];
    })
    G.str['SCR_Get_SkillFactor_Zombify'] = (function (_skill) {
      var tmp;
      var _mon_1782 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _owner_1782 = lua_call(G.str['GetOwner'], [_mon_1782])[0];
      var _ownerSkill_1782 = lua_call(G.str['GetSkill'], [_owner_1782, "Bokor_Zombify"])[0];
      var _value_1782 = lua_add(lua_tableget(_skill, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_ownerSkill_1782, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1782]);
      return [];
    })
    G.str['SCR_GET_SilverBullet_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1783 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_1783];
      return [];
    })
    G.str['SCR_GET_Tase_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1784 = lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 3));
      return [_value_1784];
      return [];
    })
    G.str['SCR_GET_Tase_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1785 = 10;
      var _pc_1785 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1785 = lua_call(G.str['GetAbility'], [_pc_1785, "Bulletmarker7"])[0];
      if ((!lua_eq(_abil_1785, null) && lua_eq(lua_tableget(_abil_1785, 'ActiveState'), 1))) {
        _value_1785 = lua_add(_value_1785, lua_tableget(_abil_1785, 'Level'));
      }
      return [_value_1785];
      return [];
    })
    G.str['SCR_GET_DoubleGunStance_BuffTime'] = (function (_skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_GET_SmashBullet_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1788 = 0;
      return [_value_1788];
      return [];
    })
    G.str['SCR_GET_TracerBullet_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1789 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1789];
      return [];
    })
    G.str['SCR_GET_TracerBullet_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1790 = 15;
      return [_value_1790];
      return [];
    })
    G.str['SCR_GET_JumpShot_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1791 = lua_multiply(6, lua_tableget(_skill, 'Level'));
      return [_value_1791];
      return [];
    })
    G.str['SCR_GET_InfiniteAssault_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1792 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_1792];
      return [];
    })
    G.str['SCR_GET_DownFall_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1793 = lua_add(3, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_1793];
      return [];
    })
    G.str['SCR_GET_HakkaPalle_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1794 = lua_multiply(50, lua_tableget(_skill, 'Level'));
      return [_value_1794];
      return [];
    })
    G.str['SCR_GET_HakkaPalle_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1795 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1795];
      return [];
    })
    G.str['SCR_GET_HakkaPalle_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1796 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1796];
      return [];
    })
    G.str['SCR_GET_SnipersSerenity_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1797 = lua_subtract(4, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 0.4)));
      if (lua_lt(_value_1797, 0.4)) {
        _value_1797 = 0.4;
      }
      return [_value_1797];
      return [];
    })
    G.str['SCR_GET_NonInvasiveArea_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1799 = 10;
      return [_value_1799];
      return [];
    })
    G.str['SCR_GET_NonInvasiveArea_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1800 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1800];
      return [];
    })
    G.str['SCR_GET_NonInvasiveArea_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1801 = lua_add(42, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1801];
      return [];
    })
    G.str['SCR_Get_SkillFactor_RamMuay'] = (function (_skill) {
      var tmp;
      var _pc_1802 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1802 = 0;
      var _RamMuaySkill_1802 = lua_call(G.str['GetSkill'], [_pc_1802, "NakMuay_RamMuay"])[0];
      if (!lua_eq(_RamMuaySkill_1802, null)) {
        _value_1802 = lua_add(lua_tableget(_RamMuaySkill_1802, 'SklFactor'), lua_multiply((lua_subtract(lua_tableget(_RamMuaySkill_1802, 'Level'), 1)), lua_tableget(_skill, 'SklFactorByLevel')));
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1802]);
      return [];
    })
    G.str['SCR_GET_Rammuay_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1804 = lua_multiply(lua_tableget(_skill, 'Level'), 20);
      return [_value_1804];
      return [];
    })
    G.str['SCR_GET_GroovingMuzzle_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1805 = lua_add(15, lua_tableget(_skill, 'Level'));
      return [_value_1805];
      return [];
    })
    G.str['SCR_GET_Sabbath_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1806 = lua_multiply(lua_call(G.str['TryGetProp'], [_skill, "Level"])[0], 10);
      return [_value_1806];
      return [];
    })
    G.str['SCR_GET_SubweaponCancel_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1807 = lua_add(30, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      return [_value_1807];
      return [];
    })
    G.str['SCR_GET_FishingNetsDraw_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1808 = lua_multiply(5, lua_tableget(_skill, 'Level'));
      _value_1808 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1808, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1808];
      return [];
    })
    G.str['SCR_GET_FishingNetsDraw_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1809 = lua_add(3, lua_tableget(_skill, 'Level'));
      return [_value_1809];
      return [];
    })
    G.str['SCR_GET_FishingNetsDraw_Ratio3'] = (function (_skill) {
      var tmp;
      var _skillLv_1810 = lua_call(G.str['TryGetProp'], [_skill, "Level"])[0];
      var _value_1810 = lua_multiply(_skillLv_1810, 2);
      return [_value_1810];
      return [];
    })
    G.str['SCR_GET_ThrowingFishingNet_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1811 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1811 = lua_add(2.5, lua_multiply(lua_tableget(_skill, 'Level'), 0.5));
      return [_value_1811];
      return [];
    })
    G.str['SCR_GET_ThrowingFishingNet_Ratio2'] = (function (_skill) {
      var tmp;
      return [lua_add(3, lua_tableget(_skill, 'Level'))];
      return [];
    })
    G.str['SCR_GET_ThrowingFishingNet_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1813 = 100;
      _value_1813 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1813, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1813];
      return [];
    })
    G.str['SCR_GET_DaggerGuard_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1814 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      _value_1814 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1814, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1814];
      return [];
    })
    G.str['SCR_GET_DaggerGuard_Ratio2'] = (function (_skill) {
      var tmp;
      return [15];
      return [];
    })
    G.str['SCR_GET_DaggerGuard_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1816 = lua_add(10, lua_call(G.str['TryGetProp'], [_skill, "Level"])[0]);
      return [_value_1816];
      return [];
    })
    G.str['SCR_Get_SkillFactor_FireFoxShikigami_Summon'] = (function (_skill) {
      var tmp;
      var _value_1817 = 0;
      var _fireFox_1817 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _owner_1817 = lua_call(G.str['GetOwner'], [_fireFox_1817])[0];
      if (!lua_eq(_owner_1817, null)) {
        var _skillFireFoxShikigami_1818 = lua_call(G.str['GetSkill'], [_owner_1817, "Onmyoji_FireFoxShikigami"])[0];
        if (!lua_eq(_skillFireFoxShikigami_1818, null)) {
          _value_1817 = lua_tableget(_skillFireFoxShikigami_1818, 'SkillFactor');
        }
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1817]);
      return [];
    })
    G.str['SCR_Get_SkillFactor_FireFoxShikigami2_Summon'] = (function (_skill) {
      var tmp;
      var _value_1820 = lua_tableget(_skill, 'SklFactor');
      var _fireFox_1820 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _owner_1820 = lua_call(G.str['GetOwner'], [_fireFox_1820])[0];
      if (!lua_eq(_owner_1820, null)) {
        var _skillFireFoxShikigami_1821 = lua_call(G.str['GetSkill'], [_owner_1820, "Onmyoji_FireFoxShikigami"])[0];
        if (!lua_eq(_skillFireFoxShikigami_1821, null)) {
          _value_1820 = lua_tableget(_skillFireFoxShikigami_1821, 'SkillFactor');
        }
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1820]);
      return [];
    })
    G.str['SCR_GET_FireFoxShikigami_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1823 = lua_add(20, lua_multiply(lua_tableget(_skill, 'Level'), 5));
      return [_value_1823];
      return [];
    })
    G.str['SCR_GET_WhiteTigerHowling_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1824 = lua_add(4, lua_tableget(_skill, 'Level'));
      return [_value_1824];
      return [];
    })
    G.str['SCR_GET_GenbuArmor_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1825 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1825 = lua_subtract(100, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 10)));
      return [_value_1825];
      return [];
    })
    G.str['SCR_GET_GenbuArmor_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1826 = 60;
      return [_value_1826];
      return [];
    })
    G.str['SCR_GET_VitalProtection_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1827 = lua_add(10, lua_multiply(lua_tableget(_skill, 'Level'), 2));
      return [_value_1827];
      return [];
    })
    G.str['SCR_GET_Retiarii_EquipDesrption_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1828 = 25;
      return [_value_1828];
      return [];
    })
    G.str['SCR_GET_Retiarii_EquipDesrption_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1829 = 5;
      return [_value_1829];
      return [];
    })
    G.str['SCR_GET_Kraujas_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1830 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1830 = lua_tableget(_pc_1830, 'RHP');
      if (!lua_eq(_pc_1830, null)) {
        _value_1830 = lua_multiply(lua_tableget(_pc_1830, 'RHP'), 10);
      }
      return [_value_1830];
      return [];
    })
    G.str['SCR_GET_LatentVenom_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1832 = 3;
      return [_value_1832];
      return [];
    })
    G.str['SCR_GET_LatentVenom_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1833 = 100;
      return [_value_1833];
      return [];
    })
    G.str['SCR_GET_Dissonanz_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1834 = lua_add(150, lua_multiply(lua_tableget(_skill, 'Level'), 10));
      return [_value_1834];
      return [];
    })
    G.str['SCR_GET_Wiegenlied_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1835 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_1835];
      return [];
    })
    G.str['SCR_GET_Wiegenlied_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1836 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1836];
      return [];
    })
    G.str['SCR_GET_HypnotischeFlete_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1837 = lua_add(3, lua_tableget(_skill, 'Level'));
      return [_value_1837];
      return [];
    })
    G.str['SCR_GET_Friedenslied_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1838 = lua_add(4, lua_tableget(_skill, 'Level'));
      return [_value_1838];
      return [];
    })
    G.str['SCR_GET_Marschierendeslied_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1839 = lua_add(10, lua_tableget(_skill, 'Level'));
      return [_value_1839];
      return [];
    })
    G.str['SCR_GET_LiedDerWeltbaum_BuffTime'] = (function (_skill) {
      var tmp;
      var _pc_1840 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1840 = 10;
      var _abil_1840 = lua_call(G.str['GetAbility'], [_pc_1840, "PiedPiper15"])[0];
      if ((!lua_eq(_abil_1840, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abil_1840, "ActiveState"])[0], 1))) {
        _value_1840 = lua_add(_value_1840, lua_call(G.str['TryGetProp'], [_abil_1840, "Level"])[0]);
      }
      return [_value_1840];
      return [];
    })
    G.str['SCR_GET_LiedDerWeltbaum_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1842 = lua_add(50, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return [_value_1842];
      return [];
    })
    G.str['SCR_GET_LiedDerWeltbaum_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1843 = lua_add(50, (lua_multiply(lua_tableget(_skill, 'Level'), 10)));
      return [_value_1843];
      return [];
    })
    G.str['SCR_Get_Crescendo_Bane'] = (function (_skill) {
      var tmp;
      var _value_1844 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_1844];
      return [];
    })
    G.str['SCR_GET_WideMiasma_Bufftime'] = (function (_skill) {
      var tmp;
      var _value_1845 = 10;
      return [_value_1845];
      return [];
    })
    G.str['SCR_Get_SkillFactor_HamelnNagetier_Mouse'] = (function (_skill) {
      var tmp;
      var _value_1846 = 0;
      var _piedPiper_1846 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _owner_1846 = lua_call(G.str['GetOwner'], [_piedPiper_1846])[0];
      if (!lua_eq(_owner_1846, null)) {
        var _skillHameln_1847 = lua_call(G.str['GetSkill'], [_owner_1846, "PiedPiper_HamelnNagetier"])[0];
        if (!lua_eq(_skillHameln_1847, null)) {
          _value_1846 = lua_tableget(_skillHameln_1847, 'SkillFactor');
        }
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1846]);
      return [];
    })
    G.str['SCR_GET_Rubric_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1849 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1849 = 5;
      var _abilExorcist2_1849 = lua_call(G.str['GetAbility'], [_pc_1849, "Exorcist2"])[0];
      if ((!lua_eq(_abilExorcist2_1849, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilExorcist2_1849, "ActiveState"])[0], 1))) {
        _value_1849 = lua_add(_value_1849, lua_tableget(_abilExorcist2_1849, 'Level'));
      }
      return [_value_1849];
      return [];
    })
    G.str['SCR_GET_Rubric_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1851 = 5;
      var _pc_1851 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilExorcist3_1851 = lua_call(G.str['GetAbility'], [_pc_1851, "Exorcist3"])[0];
      if ((!lua_eq(_abilExorcist3_1851, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilExorcist3_1851, "ActiveState"])[0], 1))) {
        _value_1851 = 25;
      }
      return [_value_1851];
      return [];
    })
    G.str['SCR_GET_Rubric_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1853 = 6;
      var _pc_1853 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilExorcist3_1853 = lua_call(G.str['GetAbility'], [_pc_1853, "Exorcist3"])[0];
      if ((!lua_eq(_abilExorcist3_1853, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilExorcist3_1853, "ActiveState"])[0], 1))) {
        _value_1853 = 4;
      }
      return [_value_1853];
      return [];
    })
    G.str['SCR_GET_Engkrateia_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_multiply(lua_tableget(_skill, 'Level'), 5)];
      return [];
    })
    G.str['SCR_GET_Engkrateia_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1856 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1856 = 3;
      var _abilExorcist8_1856 = lua_call(G.str['GetAbility'], [_pc_1856, "Exorcist8"])[0];
      if ((!lua_eq(_abilExorcist8_1856, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilExorcist8_1856, "ActiveState"])[0], 1))) {
        _value_1856 = lua_add(_value_1856, lua_tableget(_abilExorcist8_1856, 'Level'));
      }
      return [_value_1856];
      return [];
    })
    G.str['SCR_GET_TheTreeofSepiroth_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1858 = lua_tableget(_skill, 'Level');
      _value_1858 = lua_multiply(_value_1858, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1858];
      return [];
    })
    G.str['SCR_GET_TheTreeofSepiroth_Time'] = (function (_skill) {
      var tmp;
      var _value_1859 = lua_add(10, lua_tableget(_skill, 'Level'));
      return [_value_1859];
      return [];
    })
    G.str['SCR_GET_Koinonia_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1860 = lua_add(5, lua_multiply(3, lua_tableget(_skill, 'Level')));
      return [_value_1860];
      return [];
    })
    G.str['SCR_GET_Gregorate_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1861 = 3;
      var _pc_1861 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abilExorcist11_1861 = lua_call(G.str['GetAbility'], [_pc_1861, "Exorcist11"])[0];
      if ((!lua_eq(_abilExorcist11_1861, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilExorcist11_1861, "ActiveState"])[0], 1))) {
        _value_1861 = lua_add(_value_1861, lua_tableget(_abilExorcist11_1861, 'Level'));
      }
      return [_value_1861];
      return [];
    })
    G.str['SCR_GET_FreezeBullet_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1863 = lua_add(15, lua_tableget(_skill, 'Level'));
      return [_value_1863];
      return [];
    })
    G.str['SCR_GET_OverReinforce_BuffTime'] = (function (_skill) {
      var tmp;
      var _value_1864 = 45;
      var _pc_1864 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1864 = lua_call(G.str['GetAbility'], [_pc_1864, 'Enchanter5'])[0];
      if ((!lua_eq(_abil_1864, null) && lua_eq(lua_tableget(_abil_1864, 'ActiveState'), 1))) {
        _value_1864 = lua_add(_value_1864, (lua_multiply(lua_tableget(_abil_1864, 'Level'), 3)));
      }
      return [_value_1864];
      return [];
    })
    G.str['SCR_GET_OverReinforce_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1866 = lua_tableget(_skill, 'Level');
      return [_value_1866];
      return [];
    })
    G.str['SCR_GET_BreastRipper_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1867 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1867 = 5;
      var _STR_1867 = lua_call(G.str['TryGetProp'], [_pc_1867, "STR"])[0];
      var _strValue_1867 = lua_divide(_STR_1867, 50);
      if (lua_lte(_strValue_1867, 0)) {
        _strValue_1867 = 0;
      }
      _value_1867 = lua_add(_value_1867, _strValue_1867);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1867]);
      return [];
    })
    G.str['SCR_GET_InfernalShadow_Bufftime'] = (function (_skill) {
      var tmp;
      return [lua_add(5, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_InfernalShadow_CaptionRatio'] = (function (_skill) {
      var tmp;
      return [lua_add(20, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 20))];
      return [];
    })
    G.str['SCR_GET_EmphasisTrust_Ratio'] = (function (_skill) {
      var tmp;
      return [lua_add(15, lua_multiply(lua_tableget(_skill, 'Level'), 2))];
      return [];
    })
    G.str['SCR_GET_Hasisas_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1872 = lua_add(30, lua_multiply(lua_tableget(_skill, 'Level'), 15));
      _value_1872 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1872, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1872];
      return [];
    })
    G.str['SCR_GET_Hasisas_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1873 = 10;
      var _pc_1873 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1873 = lua_call(G.str['GetAbility'], [_pc_1873, 'Assassin2'])[0];
      if ((!lua_eq(_abil_1873, null) && lua_eq(lua_tableget(_abil_1873, 'ActiveState'), 1))) {
        _value_1873 = lua_add(_value_1873, lua_tableget(_abil_1873, 'Level'));
      }
      return [_value_1873];
      return [];
    })
    G.str['SCR_GET_Hasisas_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1875 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      _value_1875 = lua_multiply(_value_1875, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      var _pc_1875 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _MHP_1875 = lua_tableget(_pc_1875, 'MHP');
      if (lua_eq(G.str['info'], null)) {
        return [0];
      }
      var _stat_1875 = lua_tablegetcall(G.str['info'], 'GetStat', lua_tablegetcall(G.str['session'], 'GetMyHandle', []))[0];
      var _HP_1875 = lua_tableget(_stat_1875, 'HP');
      var _HPRate_1875 = lua_multiply((lua_subtract(1, (lua_divide(_HP_1875, _MHP_1875)))), 100);
      _value_1875 = lua_add(_value_1875, _HPRate_1875);
      return [_value_1875];
      return [];
    })
    G.str['SCR_GET_HallucinationSmoke_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1877 = 20;
      _value_1877 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1877, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1877];
      return [];
    })
    G.str['SCR_GET_HallucinationSmoke_Time'] = (function (_skill) {
      var tmp;
      var _value_1878 = lua_add(5, lua_tableget(_skill, 'Level'));
      return [_value_1878];
      return [];
    })
    G.str['SCR_GET_PiercingHeart_Time'] = (function (_skill) {
      var tmp;
      var _value_1879 = 10;
      var _pc_1879 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1879 = lua_call(G.str['GetAbility'], [_pc_1879, 'Assassin13'])[0];
      if ((!lua_eq(_abil_1879, null) && lua_eq(lua_tableget(_abil_1879, 'ActiveState'), 1))) {
        _value_1879 = lua_add(_value_1879, lua_tableget(_abil_1879, 'Level'));
      }
      return [_value_1879];
      return [];
    })
    G.str['SCR_GET_Bully_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1881 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_1881];
      return [];
    })
    G.str['SCR_GET_Bully_Ratio2'] = (function (_skill) {
      var tmp;
      var _pc_1882 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _minSubPATK_1882 = lua_call(G.str['TryGetProp'], [_pc_1882, "MINPATK_SUB"])[0];
      var _maxSubPATK_1882 = lua_call(G.str['TryGetProp'], [_pc_1882, "MAXPATK_SUB"])[0];
      var _patkValue_1882 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(_minSubPATK_1882, _maxSubPATK_1882)), 2)])[0];
      var _hateValue_1882 = lua_multiply(_patkValue_1882, (lua_multiply(lua_tableget(_skill, 'Level'), 0.02)));
      return lua_tablegetcall(G.str['math'], 'floor', [_hateValue_1882]);
      return [];
    })
    G.str['SCR_GET_Aggress_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1883 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_1883];
      return [];
    })
    G.str['SCR_GET_SiegeBurst_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1884 = lua_multiply(lua_tableget(_skill, 'Level'), 0.1);
      return [_value_1884];
      return [];
    })
    G.str['SCR_GET_Algiz_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1885 = lua_multiply(lua_tableget(_skill, 'Level'), 2);
      _value_1885 = lua_multiply(_value_1885, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1885];
      return [];
    })
    G.str['SCR_GET_SprinkleHPPotion_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1886 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _hpPotion_1886 = lua_call(G.str['SCR_GET_SPEND_ITEM_Alchemist_SprinkleHPPotion'], [_pc_1886])[0];
      var _numberArg1_1886 = lua_call(G.str['TryGetProp'], [_hpPotion_1886, "NumberArg1", 0])[0];
      var _hpValue_1886 = lua_multiply(_numberArg1_1886, 7);
      _hpValue_1886 = lua_multiply(_hpValue_1886, 8);
      var _sprinkleHP_1886 = lua_multiply(_hpValue_1886, (lua_multiply(lua_tableget(_skill, 'Level'), 0.1)));
      return [_sprinkleHP_1886];
      return [];
    })
    G.str['SCR_GET_SprinkleSPPotion_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1887 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _spPotion_1887 = lua_call(G.str['SCR_GET_SPEND_ITEM_Alchemist_SprinkleSPPotion'], [_pc_1887])[0];
      var _numberArg1_1887 = lua_call(G.str['TryGetProp'], [_spPotion_1887, "NumberArg1", 0])[0];
      var _spValue_1887 = lua_multiply(_numberArg1_1887, 7);
      _spValue_1887 = lua_multiply(_spValue_1887, 8);
      var _sprinkleSP_1887 = lua_multiply(_spValue_1887, (lua_multiply(lua_tableget(_skill, 'Level'), 0.1)));
      return [_sprinkleSP_1887];
      return [];
    })
    G.str['GET_SPENDSP_BY_LEVEL'] = (function (_sklObj, _destLv) {
      var tmp;
      if ((lua_eq(_destLv, null) || lua_eq(_destLv, 0))) {
        return lua_tablegetcall(G.str['math'], 'floor', [lua_tableget(_sklObj, 'SpendSP')]);
      }
      if (lua_lt(0, _destLv)) {
        var _tempObj_1890 = lua_call(G.str['CreateGCIESByID'], ["Skill", lua_tableget(_sklObj, 'ClassID')])[0];
        if (lua_eq(_tempObj_1890, null)) {
          return [0];
        }
        lua_tableset(_tempObj_1890, 'Level', _destLv);
        return lua_tablegetcall(G.str['math'], 'floor', [lua_tableget(_tempObj_1890, 'SpendSP')]);
      }
      return [null];
      return [];
    })
    G.str['SCR_GET_Insurance_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1892 = lua_multiply(lua_tableget(_skill, 'Level'), 6);
      _value_1892 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1892, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1892];
      return [];
    })
    G.str['SCR_GET_Insurance_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1893 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1893];
      return [];
    })
    G.str['SCR_GET_Insurance_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1894 = lua_multiply(lua_tableget(_skill, 'Level'), 5);
      return [_value_1894];
      return [];
    })
    G.str['SCR_GET_SwellHands_Ratio'] = (function (_skill) {
      var tmp;
      var _pc_1895 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _DEX_1895 = lua_call(G.str['TryGetProp'], [_pc_1895, "DEX", 1])[0];
      var _value_1895 = lua_add(lua_add(30, (lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 2))), (lua_multiply((lua_divide(lua_tableget(_skill, 'Level'), 5)), (lua_power((lua_multiply(_DEX_1895, 0.8)), 0.9)))));
      _value_1895 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1895, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1895];
      return [];
    })
    G.str['SCR_GET_Agility_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1896 = lua_multiply(lua_tableget(_skill, 'Level'), 1);
      _value_1896 = lua_multiply(_value_1896, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1896];
      return [];
    })
    G.str['SCR_GET_EnchantGlove_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1897 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      _value_1897 = lua_multiply(_value_1897, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1897];
      return [];
    })
    G.str['SCR_GET_KnifeThrowing_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1898 = lua_add(5, (lua_multiply(lua_tableget(_skill, 'Level'), 1)));
      return [_value_1898];
      return [];
    })
    G.str['SCR_Get_TimeForward_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1899 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_1899];
      return [];
    })
    G.str['SCR_Get_Howling_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1900 = lua_multiply(lua_tableget(_skill, 'Level'), 4);
      _value_1900 = lua_multiply(_value_1900, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1900]);
      return [];
    })
    G.str['SCR_GET_Immolation_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1901 = 0;
      var _pc_1901 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _abil_1901 = lua_call(G.str['GetAbility'], [_pc_1901, "Zealot4"])[0];
      if ((!lua_eq(_abil_1901, null) && lua_eq(lua_tableget(_abil_1901, 'ActiveState'), 1))) {
        _value_1901 = lua_multiply(lua_tableget(_abil_1901, 'Level'), 300);
      }
      return [_value_1901];
      return [];
    })
    G.str['SCR_GET_BeadyEyed_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1903 = lua_multiply(lua_tableget(_skill, 'Level'), 3);
      return [_value_1903];
      return [];
    })
    G.str['SCR_GET_FanaticIllusion_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1904 = lua_multiply(lua_tableget(_skill, 'Level'), 10);
      return [_value_1904];
      return [];
    })
    G.str['SCR_GET_FreezeBullet_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1905 = 30;
      var _pc_1905 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_pc_1905])[0], 1)) {
        _value_1905 = lua_divide(_value_1905, 2);
      }
      return [_value_1905];
      return [];
    })
    G.str['SCR_GET_brutality_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1907 = lua_add(8, (lua_multiply(lua_tableget(_skill, 'Level'), 0.8)));
      return [_value_1907];
      return [];
    })
    G.str['SCR_GET_Bunshin_no_jutsu_Ratio3'] = (function (_skill) {
      var tmp;
      var _value_1908 = lua_multiply(10, lua_tableget(_skill, 'Level'));
      return [_value_1908];
      return [];
    })
    G.str['SCR_Get_DragonFear_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1909 = lua_add(10, (lua_multiply(lua_tableget(_skill, 'Level'), 2)));
      return [_value_1909];
      return [];
    })
    G.str['SCR_Get_DragonFear_Ratio2'] = (function (_skill) {
      var tmp;
      var _value_1910 = lua_tableget(_skill, 'Level');
      return [_value_1910];
      return [];
    })
    G.str['SCR_GET_MuayThai_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1911 = lua_add(10, lua_tableget(_skill, 'Level'));
      return [_value_1911];
      return [];
    })
    G.str['SCR_GET_Hallucination_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1912 = lua_add(25, (lua_multiply(lua_tableget(_skill, 'Level'), 5)));
      _value_1912 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1912, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return [_value_1912];
      return [];
    })
    G.str['SCR_GET_HardShield_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1913 = lua_multiply(20, lua_tableget(_skill, 'Level'));
      _value_1913 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_1913, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0])])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_1913]);
      return [];
    })
    G.str['SCR_GET_SR_LV_Hackapell_GrindCutter'] = (function (_skill) {
      var tmp;
      var _pc_1914 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1914 = lua_add(lua_tableget(_pc_1914, 'SR'), lua_tableget(_skill, 'SklSR'));
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_pc_1914, "CavalryCharge_Buff"])[0], "YES")) {
        _value_1914 = lua_add(_value_1914, 10);
      }
      if (lua_lt(_value_1914, 1)) {
        _value_1914 = 1;
      }
      return [_value_1914];
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_Preparation'] = (function (_skill) {
      var tmp;
      var _pc_1917 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1917 = lua_tableget(_skill, 'BasicCoolDown');
      _value_1917 = lua_subtract(_value_1917, (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      return [_value_1917];
      return [];
    })
    G.str['SCR_GET_SKL_COOLDOWN_KnifeThrowing'] = (function (_skill) {
      var tmp;
      var _pc_1918 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _value_1918 = lua_tableget(_skill, 'BasicCoolDown');
      _value_1918 = lua_subtract(_value_1918, (lua_multiply(lua_tableget(_skill, 'Level'), 1000)));
      return [_value_1918];
      return [];
    })
    G.str['SCR_GET_Bully_Time'] = (function (_skill) {
      var tmp;
      var _value_1919 = 60;
      var _pc_1919 = lua_call(G.str['GetSkillOwner'], [_skill])[0];
      var _Outlaw19_abil_1919 = lua_call(G.str['GetAbility'], [_pc_1919, 'Outlaw19'])[0];
      if ((!lua_eq(_Outlaw19_abil_1919, null) && lua_eq(1, lua_tableget(_Outlaw19_abil_1919, 'ActiveState')))) {
        _value_1919 = 20;
      }
      return [_value_1919];
      return [];
    })
    G.str['SCR_GET_LightningCharm_Ratio'] = (function (_skill) {
      var tmp;
      var _value_1921 = 50;
      _value_1921 = lua_multiply(_value_1921, lua_call(G.str['SCR_REINFORCEABILITY_TOOLTIP'], [_skill])[0]);
      return [_value_1921];
      return [];
    })
    G.str['PC_PCAA'] = (function (_pc) {
      var tmp;
      var _jobHistory_1922 = lua_call(G.str['GetJobHistorySting'], [_pc])[0];
      lua_call(G.str['print'], [_jobHistory_1922]);
      return [];
    })
    G.str['LOGGING_ABILITY_CHECK'] = (function (_isEnableLogging, _abilityName, _logMsg) {
      var tmp;
      if ((!lua_eq(_isEnableLogging, null) && lua_eq(_isEnableLogging, true))) {
        lua_call(G.str['IMC_LOG'], ["LOGGING_ABILITY_CHECK", lua_concat("AbilityName : ", lua_concat(_abilityName, lua_concat(", LogMsg : ", _logMsg)))]);
      }
      return [];
    })
    G.str['CHECK_ABILITY_LOCK'] = (function (_pc, _ability, _isEnableLogging) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsServerSection'], [_pc])[0], 1)) {
        if (lua_eq(lua_call(G.str['IS_REAL_PC'], [_pc])[0], 'NO')) {
          if (lua_eq(lua_call(G.str['GetExProp'], [_pc, "BUNSIN"])[0], 1)) {
            var _bunsinOwner_1928 = lua_call(G.str['GetExArgObject'], [_pc, 'BUNSIN_OWNER'])[0];
            if (lua_eq(_bunsinOwner_1928, null)) {
              lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[LOCK] BunsinOwner is nullptr"]);
              return ['LOCK'];
            } else {
              _pc = _bunsinOwner_1928;
            }
          } else {
            lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[LOCK] Not Real Pc"]);
            return ['LOCK'];
          }
        }
      }
      if (lua_eq(lua_tableget(_ability, 'Job'), "None")) {
        lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[UNLOCK] Ability Job is None"]);
        return ["UNLOCK"];
      }
      var _jobHistory_1925 = '';
      if (lua_eq(lua_call(G.str['IsServerObj'], [_pc])[0], 1)) {
        _jobHistory_1925 = lua_call(G.str['GetJobHistoryString'], [_pc])[0];
      } else {
        _jobHistory_1925 = lua_call(G.str['GetMyJobHistoryString'], [])[0];
      }
      if (lua_eq(lua_tablegetcall(G.str['string'], 'find', [lua_tableget(_ability, 'Job'), ";"])[0], null)) {
        if (!lua_eq(lua_tablegetcall(G.str['string'], 'find', [_jobHistory_1925, lua_tableget(_ability, 'Job')])[0], null)) {
          var _jobCls_1936 = lua_call(G.str['GetClass'], ["Job", lua_tableget(_ability, 'Job')])[0];
          var _abilGroupClass_1936 = lua_call(G.str['GetClass'], [lua_concat("Ability_", lua_tableget(_jobCls_1936, 'EngName')), lua_tableget(_ability, 'ClassName')])[0];
          if (lua_eq(_abilGroupClass_1936, null)) {
            _abilGroupClass_1936 = lua_call(G.str['GetClass'], ["Ability", lua_tableget(_ability, 'ClassName')])[0];
          }
          if (lua_eq(_abilGroupClass_1936, null)) {
            lua_call(G.str['IMC_LOG'], ["INFO_NORMAL", lua_concat("abilGroupClass is nil!!  jobCls.EngName : ", lua_concat(lua_tableget(_jobCls_1936, 'EngName'), lua_concat("  ability.ClassName : ", lua_tableget(_ability, 'ClassName'))))]);
            lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[UNLOCK] abilGroupClass is nullptr"]);
            return ["UNLOCK"];
          }
          var _unlockFuncName_1936 = lua_call(G.str['TryGetProp'], [_abilGroupClass_1936, 'UnlockScr', 'None'])[0];
          if (lua_eq(_unlockFuncName_1936, 'None')) {
            lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[UNLOCK] abilGroupClass.UnlockScr is None"]);
            return ["UNLOCK"];
          }
          var _scp_1936 = lua_tableget(G.str['_G'], _unlockFuncName_1936);
          var _ret_1936 = lua_call(_scp_1936, [_pc, lua_tableget(_abilGroupClass_1936, 'UnlockArgStr'), lua_tableget(_abilGroupClass_1936, 'UnlockArgNum'), _ability])[0];
          lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), lua_concat("[", lua_concat(_ret_1936, "] Result1"))]);
          return [_ret_1936];
        }
      } else {
        var _sList_1940 = lua_call(G.str['StringSplit'], [_jobHistory_1925, ";"])[0];
        var var_1941 = 1, stop_1941 = lua_assertfloat(lua_len(_sList_1940));
        for (; var_1941 <= stop_1941; var_1941++) {
          var _i_1941 = var_1941;
          if (!lua_eq(lua_tablegetcall(G.str['string'], 'find', [lua_tableget(_ability, 'Job'), lua_tableget(_sList_1940, _i_1941)])[0], null)) {
            var _jobCls_1943 = lua_call(G.str['GetClass'], ["Job", lua_tableget(_sList_1940, _i_1941)])[0];
            var _abilGroupClass_1943 = lua_call(G.str['GetClass'], [lua_concat("Ability_", lua_tableget(_jobCls_1943, 'EngName')), lua_tableget(_ability, 'ClassName')])[0];
            if (lua_eq(_abilGroupClass_1943, null)) {
              _abilGroupClass_1943 = lua_call(G.str['GetClass'], ["Ability", lua_tableget(_ability, 'ClassName')])[0];
            }
            var _unlockFuncName_1943 = lua_call(G.str['TryGetProp'], [_abilGroupClass_1943, 'UnlockScr'])[0];
            if ((lua_eq(_unlockFuncName_1943, null) || lua_eq(lua_tableget(_abilGroupClass_1943, 'UnlockScr'), "None"))) {
              lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[UNLOCK] abilGroupClass.UnlockScr is None"]);
              return ["UNLOCK"];
            }
            var _scp_1943 = lua_tableget(G.str['_G'], _unlockFuncName_1943);
            var _ret_1943 = lua_call(_scp_1943, [_pc, lua_tableget(_abilGroupClass_1943, 'UnlockArgStr'), lua_tableget(_abilGroupClass_1943, 'UnlockArgNum'), _ability])[0];
            if (lua_eq(_ret_1943, "UNLOCK")) {
              lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), lua_concat("[", lua_concat(_ret_1943, "] Result2"))]);
              return [_ret_1943];
            }
          }
        }
      }
      lua_call(G.str['IMC_LOG'], ["INFO_NORMAL", "abilityUnlock Error"]);
      lua_call(G.str['LOGGING_ABILITY_CHECK'], [_isEnableLogging, lua_tableget(_ability, 'ClassName'), "[UNLOCK] Error1"]);
      return ["UNLOCK"];
      return [];
    })
    G.str['GET_ABILITY_SKILL_CATEGORY_LIST'] = (function (_abilClsName) {
      var tmp;
      var _abilCls_1947 = lua_call(G.str['GetClass'], ["Ability", _abilClsName])[0];
      if (lua_eq(_abilCls_1947, null)) {
        return [lua_newtable()];
      }
      if ((lua_eq(lua_tableget(_abilCls_1947, 'SkillCategory'), "All") || lua_eq(lua_tableget(_abilCls_1947, 'SkillCategory'), "None"))) {
        return [lua_newtable()];
      }
      var _category_list_1947 = lua_call(G.str['StringSplit'], [lua_tableget(_abilCls_1947, 'SkillCategory'), ';'])[0];
      return [_category_list_1947];
      return [];
    })
    G.str['SCR_ABIL_NONE_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_NONE_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_JUMP_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'Jumpable', 1);
      return [];
    })
    G.str['SCR_ABIL_JUMP_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'Jumpable', 0);
      return [];
    })
    G.str['SCR_ABIL_DASH_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'Runnable', 1);
      return [];
    })
    G.str['SCR_ABIL_DASH_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'Runnable', 0);
      return [];
    })
    G.str['SCR_ABIL_STEP_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'Steppable', 1);
      return [];
    })
    G.str['SCR_ABIL_STEP_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'Steppable', 0);
      return [];
    })
    G.str['SCR_ABIL_HIGHLANDER9_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "BUNSIN"])[0], 1)) {
        return [];
      }
      var _rItem_1958 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addValue_1958 = 0;
      if (lua_eq(lua_tableget(_rItem_1958, 'ClassType'), "THSword")) {
        _addValue_1958 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'CRTATK'), lua_tableget(_ability, 'Level')), 0.1)])[0];
      }
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), _addValue_1958));
      lua_call(G.str['SetExProp'], [_ability, "ADD_CRTATK", _addValue_1958]);
      lua_call(G.str['Invalidate'], [_self, "CRTATK"]);
      return [];
    })
    G.str['SCR_ABIL_HIGHLANDER9_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addValue_1961 = lua_call(G.str['GetExProp'], [_ability, "ADD_CRTATK"])[0];
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), _addValue_1961));
      lua_call(G.str['Invalidate'], [_self, "CRTATK"]);
      return [];
    })
    G.str['SCR_GET_MaceMastery_Bonus'] = (function (_ability) {
      var tmp;
      return [lua_multiply(lua_tableget(_ability, 'Level'), 5)];
      return [];
    })
    G.str['SCR_ABIL_MACEMASTERY_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_1963 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (lua_eq(lua_tableget(_rItem_1963, 'ClassType2'), "Mace")) {
        var _addValue_1964 = lua_divide(lua_multiply(lua_tableget(_self, 'MAXPATK'), lua_call(G.str['SCR_GET_MaceMastery_Bonus'], [_ability])[0]), 100);
        lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _addValue_1964));
        lua_call(G.str['SetExProp'], [_ability, "ADD", _addValue_1964]);
      } else {
        lua_call(G.str['SetExProp'], [_ability, "ADD", 0]);
      }
      return [];
    })
    G.str['SCR_ABIL_MACEMASTERY_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addValue_1966 = lua_call(G.str['GetExProp'], [_ability, "ADD"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _addValue_1966));
      return [];
    })
    G.str['SCR_GET_StaffMastery_Bonus'] = (function (_ability) {
      var tmp;
      return [lua_multiply(lua_tableget(_ability, 'Level'), 5)];
      return [];
    })
    G.str['SCR_ABIL_STAFFMASTERY_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _crtHR_1968 = lua_call(G.str['TryGetProp'], [_self, "CRTHR"])[0];
      var _crthrRate_1968 = 0;
      var _rItem_1968 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (lua_eq(lua_tableget(_rItem_1968, 'ClassType'), "Staff")) {
        lua_call(G.str['SetCastingSpeedBuffInfo'], [_self, "StaffMastery", 50]);
      }
      return [];
    })
    G.str['SCR_ABIL_STAFFMASTERY_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['RemoveCastingSpeedBuffInfo'], [_self, "StaffMastery"]);
      return [];
    })
    G.str['SCR_ABIL_CRYOMANCER5_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_CRYOMANCER5_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_SORCERER2_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addrsp_1973 = lua_tableget(_ability, 'Level');
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), _addrsp_1973));
      lua_call(G.str['SetExProp'], [_ability, "ADD_RSP", _addrsp_1973]);
      return [];
    })
    G.str['SCR_ABIL_SORCERER2_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addrsp_1974 = lua_call(G.str['GetExProp'], [_ability, "ADD_RSP"])[0];
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), _addrsp_1974));
      return [];
    })
    G.str['SCR_GET_BowMastery_Bonus'] = (function (_ability) {
      var tmp;
      return [lua_multiply(lua_tableget(_ability, 'Level'), 5)];
      return [];
    })
    G.str['SCR_ABIL_BOWMASTERY_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_1976 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (lua_eq(lua_tableget(_rItem_1976, 'ClassType2'), "Bow")) {
        var _addValue_1977 = lua_divide(lua_multiply(lua_tableget(_self, 'MAXPATK'), lua_call(G.str['SCR_GET_BowMastery_Bonus'], [_ability])[0]), 100);
        lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _addValue_1977));
        lua_call(G.str['SetExProp'], [_ability, "ADD", _addValue_1977]);
      } else {
        lua_call(G.str['SetExProp'], [_ability, "ADD", 0]);
      }
      return [];
    })
    G.str['SCR_ABIL_BOWMASTERY_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addValue_1979 = lua_call(G.str['GetExProp'], [_ability, "ADD"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _addValue_1979));
      return [];
    })
    G.str['SCR_ABIL_ELEMENTALIST6_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _resiceadd_1980 = lua_add(4, lua_tableget(_ability, 'Level'));
      var _resfireadd_1980 = lua_add(4, lua_tableget(_ability, 'Level'));
      var _reslightadd_1980 = lua_add(4, lua_tableget(_ability, 'Level'));
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), _resiceadd_1980));
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _resfireadd_1980));
        lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_1980));
      }
      lua_call(G.str['SetExProp'], [_ability, "ADD_ICE", _resiceadd_1980]);
      lua_call(G.str['SetExProp'], [_ability, "ADD_FIRE", _resfireadd_1980]);
      lua_call(G.str['SetExProp'], [_ability, "ADD_LIGHT", _reslightadd_1980]);
      return [];
    })
    G.str['SCR_ABIL_ELEMENTALIST6_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _resiceadd_1982 = lua_call(G.str['GetExProp'], [_ability, "ADD_ICE"])[0];
      var _resfireadd_1982 = lua_call(G.str['GetExProp'], [_ability, "ADD_FIRE"])[0];
      var _reslightadd_1982 = lua_call(G.str['GetExProp'], [_ability, "ADD_LIGHT"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), _resiceadd_1982));
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _resfireadd_1982));
        lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_1982));
      }
      return [];
    })
    G.str['CHECK_ARMORMATERIAL'] = (function (_self, _meaterial) {
      var tmp;
      var _count_1984 = 0;
      var _lowestGrade_1984 = null;
      var _itemList_1984 = lua_newtable();
      lua_tableset(_itemList_1984, lua_add(lua_len(_itemList_1984), 1), "SHIRT");
      lua_tableset(_itemList_1984, lua_add(lua_len(_itemList_1984), 1), "PANTS");
      lua_tableset(_itemList_1984, lua_add(lua_len(_itemList_1984), 1), "GLOVES");
      lua_tableset(_itemList_1984, lua_add(lua_len(_itemList_1984), 1), "BOOTS");
      var _noItemList_1984 = lua_newtable();
      lua_tableset(_noItemList_1984, lua_add(lua_len(_noItemList_1984), 1), "NoShirt");
      lua_tableset(_noItemList_1984, lua_add(lua_len(_noItemList_1984), 1), "NoPants");
      lua_tableset(_noItemList_1984, lua_add(lua_len(_noItemList_1984), 1), "NoGloves");
      lua_tableset(_noItemList_1984, lua_add(lua_len(_noItemList_1984), 1), "NoBoots");
      var var_1985 = 1, stop_1985 = lua_assertfloat(lua_len(_itemList_1984));
      for (; var_1985 <= stop_1985; var_1985++) {
        var _i_1985 = var_1985;
        var _item_1986 = lua_call(G.str['GetEquipItem'], [_self, lua_tableget(_itemList_1984, _i_1985)])[0];
        if ((lua_eq(lua_call(G.str['TryGetProp'], [_item_1986, "Material", "None"])[0], _meaterial) && lua_eq(0, lua_tablegetcall(G.str['table'], 'find', [_noItemList_1984].concat(lua_call(G.str['TryGetProp'], [_item_1986, "ClassName", "None"])))[0]))) {
          _count_1984 = lua_add(_count_1984, 1);
          var _itemGrade_1987 = lua_call(G.str['TryGetProp'], [_item_1986, "ItemGrade", 1])[0];
          if ((lua_eq(_lowestGrade_1984, null) || lua_lt(_itemGrade_1987, _lowestGrade_1984))) {
            _lowestGrade_1984 = _itemGrade_1987;
          }
        }
      }
      if (lua_eq(_lowestGrade_1984, null)) {
        _lowestGrade_1984 = 1;
      }
      return [_count_1984, _lowestGrade_1984];
      return [];
    })
    G.str['SCR_ABIL_CLOTH_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      tmp = lua_call(G.str['CHECK_ARMORMATERIAL'], [_self, "Cloth"]); var _count_1990 = tmp[0]; var _lowestGrade_1990 = tmp[1]; tmp = null;
      var _value_1990 = 0;
      if ((lua_lte(4, _count_1990) && lua_lte(1, _lowestGrade_1990))) {
        _value_1990 = lua_multiply(25, (lua_add(1, _lowestGrade_1990)));
      }
      lua_call(G.str['SetExProp'], [_self, "CLOTH_ARMOR_ABIL_VALUE", _value_1990]);
      return [];
    })
    G.str['SCR_ABIL_CLOTH_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_MERGEN'] = (function (_self) {
      var tmp;
      var _Bow_Attack_1993 = lua_call(G.str['GetSkill'], [_self, 'Bow_Attack'])[0];
      if (!lua_eq(null, _Bow_Attack_1993)) {
        lua_call(G.str['InvalidateSkill'], [_self, 'Bow_Attack']);
        lua_call(G.str['SendSkillProperty'], [_self, _Bow_Attack_1993]);
      }
      var _CrossBow_Attack_1993 = lua_call(G.str['GetSkill'], [_self, 'CrossBow_Attack'])[0];
      if (!lua_eq(null, _CrossBow_Attack_1993)) {
        lua_call(G.str['InvalidateSkill'], [_self, 'CrossBow_Attack']);
        lua_call(G.str['SendSkillProperty'], [_self, _CrossBow_Attack_1993]);
      }
      return [];
    })
    G.str['SCR_ABIL_MERGEN1_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['SCR_ABIL_MERGEN'], [_self]);
      return [];
    })
    G.str['SCR_ABIL_MERGEN1_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['SCR_ABIL_MERGEN'], [_self]);
      return [];
    })
    G.str['SCR_ABIL_LEATHER_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      tmp = lua_call(G.str['CHECK_ARMORMATERIAL'], [_self, "Leather"]); var _count_1998 = tmp[0]; var _lowestGrade_1998 = tmp[1]; tmp = null;
      var _value_1998 = 0;
      if ((lua_lte(4, _count_1998) && lua_lte(1, _lowestGrade_1998))) {
        _value_1998 = lua_multiply(_lowestGrade_1998, 40);
      }
      lua_call(G.str['SetExProp'], [_self, "LEATHER_ARMOR_ABIL_VALUE", _value_1998]);
      return [];
    })
    G.str['SCR_ABIL_LEATHER_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_IRON_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      tmp = lua_call(G.str['CHECK_ARMORMATERIAL'], [_self, "Iron"]); var _count_2001 = tmp[0]; var _lowestGrade_2001 = tmp[1]; tmp = null;
      var _value_2001 = 0;
      if ((lua_lte(4, _count_2001) && lua_lte(1, _lowestGrade_2001))) {
        _value_2001 = lua_multiply(25, (lua_add(1, _lowestGrade_2001)));
      }
      lua_call(G.str['SetExProp'], [_self, "IRON_ARMOR_ABIL_VALUE", _value_2001]);
      return [];
    })
    G.str['SCR_ABIL_IRON_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT26_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2004 = lua_call(G.str['GetSkill'], [_self, "Cataphract_EarthWave"])[0];
      if (!lua_eq(_skl_2004, null)) {
        lua_tableset(_skl_2004, 'Attribute', "Earth");
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT26_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2006 = lua_call(G.str['GetSkill'], [_self, "Cataphract_EarthWave"])[0];
      if (!lua_eq(_skl_2006, null)) {
        lua_tableset(_skl_2006, 'Attribute', "Melee");
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT28_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2008 = lua_call(G.str['GetSkill'], [_self, "Cataphract_EarthWave"])[0];
      if (!lua_eq(_skl_2008, null)) {
        lua_tableset(_skl_2008, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT28_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2010 = lua_call(G.str['GetSkill'], [_self, "Cataphract_EarthWave"])[0];
      if (!lua_eq(_skl_2010, null)) {
        lua_tableset(_skl_2010, 'KnockDownHitType', 4);
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT29_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2012 = lua_call(G.str['GetSkill'], [_self, "Cataphract_SteedCharge"])[0];
      if (!lua_eq(_skl_2012, null)) {
        lua_tableset(_skl_2012, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT29_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2014 = lua_call(G.str['GetSkill'], [_self, "Cataphract_SteedCharge"])[0];
      if (!lua_eq(_skl_2014, null)) {
        lua_tableset(_skl_2014, 'KnockDownHitType', 4);
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT30_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2016 = lua_call(G.str['GetSkill'], [_self, "Cataphract_DoomSpike"])[0];
      if (!lua_eq(_skl_2016, null)) {
        lua_tableset(_skl_2016, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT30_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2018 = lua_call(G.str['GetSkill'], [_self, "Cataphract_DoomSpike"])[0];
      if (!lua_eq(_skl_2018, null)) {
        lua_tableset(_skl_2018, 'KnockDownHitType', 4);
      }
      return [];
    })
    G.str['SCR_ABIL_PALADIN4_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2020 = lua_call(G.str['GetSkill'], [_self, "Cleric_Smite"])[0];
      if (!lua_eq(_skl_2020, null)) {
        lua_tableset(_skl_2020, 'KnockDownHitType', 4);
        lua_tableset(_skl_2020, 'KDownValue', 250);
      }
      return [];
    })
    G.str['SCR_ABIL_PALADIN4_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2022 = lua_call(G.str['GetSkill'], [_self, "Cleric_Smite"])[0];
      if (!lua_eq(_skl_2022, null)) {
        lua_tableset(_skl_2022, 'KnockDownHitType', 1);
        lua_tableset(_skl_2022, 'KDownValue', 10);
      }
      return [];
    })
    G.str['SCR_ABIL_HIGHLANDER32_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2024 = lua_call(G.str['GetSkill'], [_self, "Highlander_ScullSwing"])[0];
      if (!lua_eq(_skl_2024, null)) {
        lua_tableset(_skl_2024, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_HIGHLANDER32_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2026 = lua_call(G.str['GetSkill'], [_self, "Highlander_ScullSwing"])[0];
      if (!lua_eq(_skl_2026, null)) {
        lua_tableset(_skl_2026, 'KnockDownHitType', 3);
      }
      return [];
    })
    G.str['SCR_ABIL_RODELERO30_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2028 = lua_call(G.str['GetSkill'], [_self, "Rodelero_TargeSmash"])[0];
      if (!lua_eq(_skl_2028, null)) {
        lua_tableset(_skl_2028, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_RODELERO30_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2030 = lua_call(G.str['GetSkill'], [_self, "Rodelero_TargeSmash"])[0];
      if (!lua_eq(_skl_2030, null)) {
        lua_tableset(_skl_2030, 'KnockDownHitType', 3);
      }
      return [];
    })
    G.str['SCR_ABIL_SCHWARZEREITER1_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2032 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _lItem_2032 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      var _addhr_2032 = 0;
      if (lua_eq(lua_tableget(_rItem_2032, 'ClassType'), "Musket")) {
        _addhr_2032 = lua_multiply(lua_tableget(_ability, 'Level'), 500);
        lua_call(G.str['SetExProp'], [_self, "MUSKET_HR_ADD", _addhr_2032]);
      } else if (lua_eq(lua_tableget(_lItem_2032, 'ClassType'), "Pistol")) {
        _addhr_2032 = lua_multiply(lua_tableget(_ability, 'Level'), 500);
        lua_call(G.str['SetExProp'], [_self, "PISTOL_HR_ADD", _addhr_2032]);
      }
      return [];
    })
    G.str['SCR_ABIL_SCHWARZEREITER1_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "MUSKET_HR_ADD"]);
      lua_call(G.str['DelExProp'], [_self, "PISTOL_HR_ADD"]);
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT31_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2036 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addBlkBreak_2036 = 0;
      if (lua_eq(lua_tableget(_rItem_2036, 'ClassType'), "THSpear")) {
        _addBlkBreak_2036 = lua_multiply(lua_tableget(_ability, 'Level'), 1000);
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_BLKBREAK_ADD", _addBlkBreak_2036]);
      return [];
    })
    G.str['SCR_ABIL_CATAPHRACT31_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_BLKBREAK_ADD"]);
      return [];
    })
    G.str['SCR_ABIL_WEIGHT_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'MaxWeight_BM', lua_add(lua_tableget(_self, 'MaxWeight_BM'), lua_multiply(lua_tableget(_ability, 'Level'), 20)));
      return [];
    })
    G.str['SCR_ABIL_WEIGHT_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'MaxWeight_BM', lua_subtract(lua_tableget(_self, 'MaxWeight_BM'), lua_multiply(lua_tableget(_ability, 'Level'), 20)));
      return [];
    })
    G.str['SCR_ABIL_CRYOMANCER21_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _lItem_2041 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      var _addmdef_2041 = 0;
      var _addresice_2041 = 0;
      if (lua_eq(lua_tableget(_lItem_2041, 'ClassType'), "Shield")) {
        _addmdef_2041 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_lItem_2041, 'DEF'), lua_tableget(_ability, 'Level')), 0.05)])[0];
        _addresice_2041 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_lItem_2041, 'DEF'), lua_tableget(_ability, 'Level')), 0.25)])[0];
      }
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addmdef_2041));
      lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), _addresice_2041));
      lua_call(G.str['SetExProp'], [_ability, "ADD_MDEF", _addmdef_2041]);
      lua_call(G.str['SetExProp'], [_ability, "ADD_RESICE", _addresice_2041]);
      return [];
    })
    G.str['SCR_ABIL_CRYOMANCER21_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addmdef_2043 = lua_call(G.str['GetExProp'], [_ability, "ADD_MDEF", G.str['addmdef']])[0];
      var _addresice_2043 = lua_call(G.str['GetExProp'], [_ability, "ADD_RESICE", G.str['addresice']])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _addmdef_2043));
      lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), _addresice_2043));
      return [];
    })
    G.str['SCR_GET_Penetration_Bonus'] = (function (_ability) {
      var tmp;
      return [lua_multiply(lua_tableget(_ability, 'Level'), 1)];
      return [];
    })
    G.str['SCR_ABIL_KRIWI1_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), (lua_multiply(lua_tableget(_ability, 'Level'), 5))));
      lua_tableset(_self, 'ResDark_BM', lua_subtract(lua_tableget(_self, 'ResDark_BM'), (lua_multiply(lua_tableget(_ability, 'Level'), 3))));
      return [];
    })
    G.str['SCR_ABIL_KRIWI1_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), (lua_multiply(lua_tableget(_ability, 'Level'), 5))));
      lua_tableset(_self, 'ResDark_BM', lua_add(lua_tableget(_self, 'ResDark_BM'), (lua_multiply(lua_tableget(_ability, 'Level'), 3))));
      return [];
    })
    G.str['SCR_ABIL_INQUISITOR9_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2047 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addresdark_2047 = 0;
      if ((lua_eq(lua_tableget(_rItem_2047, 'ClassType'), "Mace") || lua_eq(lua_tableget(_rItem_2047, 'ClassType'), "THMace"))) {
        _addresdark_2047 = lua_multiply(lua_tableget(_ability, 'Level'), 10);
      }
      lua_tableset(_self, 'ResDark_BM', lua_add(lua_tableget(_self, 'ResDark_BM'), _addresdark_2047));
      lua_call(G.str['SetExProp'], [_ability, "ABIL_RESDARK_ADD", _addresdark_2047]);
      return [];
    })
    G.str['SCR_ABIL_INQUISITOR9_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addresdark_2049 = lua_call(G.str['GetExProp'], [_ability, "ABIL_RESDARK_ADD"])[0];
      lua_tableset(_self, 'ResDark_BM', lua_subtract(lua_tableget(_self, 'ResDark_BM'), _addresdark_2049));
      return [];
    })
    G.str['SCR_ABIL_SWORDMASTERY_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addDEF_2050 = 0;
      var _addSpeed_2050 = 0;
      var _rItem_2050 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (lua_eq(lua_tableget(_rItem_2050, 'ClassType'), "Sword")) {
        var _lItem_2051 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
        if (lua_eq(lua_tableget(_lItem_2051, 'ClassType'), "Shield")) {
          var _akt_2052 = lua_divide((lua_add(lua_tableget(_rItem_2050, 'MINATK'), lua_tableget(_rItem_2050, 'MAXATK'))), 2);
          _addDEF_2050 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_akt_2052, 0.2)])[0];
        } else {
          _addSpeed_2050 = 200;
        }
      }
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _addDEF_2050));
      lua_call(G.str['SetExProp'], [_ability, "ABIL_ADD_DEF", _addDEF_2050]);
      lua_call(G.str['SetExProp'], [_self, "ABIL_ADD_ATKSPD", _addSpeed_2050]);
      return [];
    })
    G.str['SCR_ABIL_SWORDMASTERY_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addDEF_2054 = lua_call(G.str['GetExProp'], [_ability, "ABIL_ADD_DEF"])[0];
      lua_call(G.str['DelExProp'], [_self, "ABIL_ADD_ATKSPD"]);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addDEF_2054));
      return [];
    })
    G.str['SCR_ABIL_SCHWARZEREITER2_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _lItem_2055 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      var _value_2055 = 0;
      if (lua_eq(lua_tableget(_lItem_2055, 'ClassType'), "Pistol")) {
        _value_2055 = 1;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_ADD_HIT", _value_2055]);
      return [];
    })
    G.str['SCR_ABIL_SCHWARZEREITER2_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_ADD_HIT"]);
      return [];
    })
    G.str['SCR_GET_DustDevil_Bonus'] = (function (_ability) {
      var tmp;
      return [lua_add(100, (lua_multiply(lua_tableget(_ability, 'Level'), 10)))];
      return [];
    })
    G.str['SCR_ABIL_DUSTDEVIL_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_DUSTDEVIL_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_GET_WHIPPINGTOP_Bonus'] = (function (_ability) {
      var tmp;
      return [lua_multiply(lua_tableget(_ability, 'Level'), 0.5)];
      return [];
    })
    G.str['SCR_ABIL_WHIPPINGTOP_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_WHIPPINGTOP_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_CRTDR_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_add(lua_tableget(_self, 'CRTDR_BM'), lua_multiply(lua_tableget(_ability, 'Level'), 0.5)), 4));
      return [];
    })
    G.str['SCR_ABIL_CRTDR_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_subtract(lua_tableget(_self, 'CRTDR_BM'), lua_multiply(lua_tableget(_ability, 'Level'), 0.5)), 4));
      return [];
    })
    G.str['SCR_ABIL_MagicArrow_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), lua_divide(lua_tableget(_self, 'Lv'), 3)));
      return [];
    })
    G.str['SCR_ABIL_MagicArrow_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), lua_divide(lua_tableget(_self, 'Lv'), 3)));
      return [];
    })
    G.str['SCR_ABIL_Kriwi4_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['InvalidateSkill'], [_self, 'Kriwi_Zaibas']);
      return [];
    })
    G.str['SCR_ABIL_Kriwi4_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['InvalidateSkill'], [_self, 'Kriwi_Zaibas']);
      return [];
    })
    G.str['SCR_ABIL_MONK3_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_MONK3_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ABIL_MONK9_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2072 = lua_call(G.str['GetSkill'], [_self, "Monk_HandKnife"])[0];
      if (!lua_eq(_skl_2072, null)) {
        lua_tableset(_skl_2072, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_MONK9_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2074 = lua_call(G.str['GetSkill'], [_self, "Monk_HandKnife"])[0];
      if (!lua_eq(_skl_2074, null)) {
        lua_tableset(_skl_2074, 'KnockDownHitType', 4);
      }
      return [];
    })
    G.str['SCR_ABIL_DRAGOON14_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2076 = lua_call(G.str['GetSkill'], [_self, "Dragoon_Dethrone"])[0];
      if (!lua_eq(_skl_2076, null)) {
        lua_tableset(_skl_2076, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_DRAGOON14_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2078 = lua_call(G.str['GetSkill'], [_self, "Dragoon_Dethrone"])[0];
      if (!lua_eq(_skl_2078, null)) {
        lua_tableset(_skl_2078, 'KnockDownHitType', 3);
      }
      return [];
    })
    G.str['SCR_ABIL_THSWORD_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2080 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addSR_2080 = 0;
      if (lua_eq(lua_tableget(_rItem_2080, 'ClassType'), "THSword")) {
        _addSR_2080 = 1;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_THSWORD_SR", _addSR_2080]);
      return [];
    })
    G.str['SCR_ABIL_THSWORD_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_THSWORD_SR"]);
      return [];
    })
    G.str['SCR_ABIL_THSTAFF_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2083 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addSR_2083 = 0;
      if (lua_eq(lua_tableget(_rItem_2083, 'ClassType'), "THStaff")) {
        _addSR_2083 = 1;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_THSTAFF_SR", _addSR_2083]);
      return [];
    })
    G.str['SCR_ABIL_THSTAFF_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_THSTAFF_SR"]);
      return [];
    })
    G.str['SCR_ABIL_THSPEAR_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2086 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addSkillRange_2086 = 0;
      if (lua_eq(lua_tableget(_rItem_2086, 'ClassType'), "THSpear")) {
        _addSkillRange_2086 = 10;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_THSPEAR_RANGE", _addSkillRange_2086]);
      return [];
    })
    G.str['SCR_ABIL_THSPEAR_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_THSPEAR_RANGE"]);
      return [];
    })
    G.str['SCR_ABIL_THMACE_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2089 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addBlkBreak_2089 = 0;
      if (lua_eq(lua_tableget(_rItem_2089, 'ClassType'), "THMace")) {
        _addBlkBreak_2089 = 85;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_THMACE_BLKBLEAK", _addBlkBreak_2089]);
      return [];
    })
    G.str['SCR_ABIL_THMACE_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_THMACE_BLKBLEAK"]);
      return [];
    })
    G.str['SCR_ABIL_THMACE_SR_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2092 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addSR_2092 = 0;
      if (lua_eq(lua_tableget(_rItem_2092, 'ClassType'), "THMace")) {
        _addSR_2092 = 5;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_THMACE_SR", _addSR_2092]);
      return [];
    })
    G.str['SCR_ABIL_THMACE_SR_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_THMACE_SR"]);
      return [];
    })
    G.str['SCR_ABIL_THMACE_StrikeDamage_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2095 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addDamageRate_2095 = 0;
      if (lua_eq(lua_tableget(_rItem_2095, 'ClassType'), "THMace")) {
        _addDamageRate_2095 = 0.1;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_THMACE_STRIKE_DAMAGE", _addDamageRate_2095]);
      return [];
    })
    G.str['SCR_ABIL_THMACE_StrikeDamage_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_THMACE_STRIKE_DAMAGE"]);
      return [];
    })
    G.str['SCR_ABIL_SPEAR_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _rItem_2098 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _addSkillRange_2098 = 0;
      if (lua_eq(lua_tableget(_rItem_2098, 'ClassType'), "Spear")) {
        _addSkillRange_2098 = 5;
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_SPEAR_RANGE", _addSkillRange_2098]);
      return [];
    })
    G.str['SCR_ABIL_SPEAR_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_SPEAR_RANGE"]);
      return [];
    })
    G.str['SCR_ABIL_KABBALIST21_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addMaxMATKRate_2101 = 0.0;
      var _rItem_2101 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      var _rItemType_2101 = lua_call(G.str['TryGetProp'], [_rItem_2101, 'ClassType'])[0];
      if ((!lua_eq(_rItem_2101, null) && (lua_eq(_rItemType_2101, 'Staff') || lua_eq(_rItemType_2101, 'Mace')))) {
        _addMaxMATKRate_2101 = 0.2;
      }
      lua_tableset(_self, 'MAXMATK_RATE_BM', lua_add(lua_tableget(_self, 'MAXMATK_RATE_BM'), _addMaxMATKRate_2101));
      lua_call(G.str['SetExProp'], [_self, "ABIL_KABBALIST21_MAX_MATK_RATE", _addMaxMATKRate_2101]);
      return [];
    })
    G.str['SCR_ABIL_KABBALIST21_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addMaxMATKRate_2103 = lua_call(G.str['GetExProp'], [_self, "ABIL_KABBALIST21_MAX_MATK_RATE"])[0];
      lua_tableset(_self, 'MAXMATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MAXMATK_RATE_BM'), _addMaxMATKRate_2103));
      lua_call(G.str['DelExProp'], [_self, "ABIL_KABBALIST21_MAX_MATK_RATE"]);
      return [];
    })
    G.str['SCR_ABIL_KABBALIST22_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addMSPD_2104 = 0;
      var _addBLKABLE_2104 = 0;
      var _count_2104 = lua_call(G.str['CHECK_ARMORMATERIAL'], [_self, "Cloth"])[0];
      if (lua_lte(4, _count_2104)) {
        _addMSPD_2104 = 5;
        _addBLKABLE_2104 = 1;
      }
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addMSPD_2104));
      lua_tableset(_self, 'BLKABLE_BM', lua_add(lua_tableget(_self, 'BLKABLE_BM'), _addBLKABLE_2104));
      lua_call(G.str['SetExProp'], [_self, "ABIL_KABBALIST22_MSPD", _addMSPD_2104]);
      lua_call(G.str['SetExProp'], [_self, "ABIL_KABBALIST22_BLKABLE", _addBLKABLE_2104]);
      return [];
    })
    G.str['SCR_ABIL_KABBALIST22_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addMSPD_2106 = lua_call(G.str['GetExProp'], [_self, "ABIL_KABBALIST22_MSPD"])[0];
      var _addBLKABLE_2106 = lua_call(G.str['GetExProp'], [_self, "ABIL_KABBALIST22_BLKABLE"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addMSPD_2106));
      lua_tableset(_self, 'BLKABLE_BM', lua_subtract(lua_tableget(_self, 'BLKABLE_BM'), _addBLKABLE_2106));
      lua_call(G.str['DelExProp'], [_self, "ABIL_KABBALIST22_MSPD"]);
      lua_call(G.str['DelExProp'], [_self, "ABIL_KABBALIST22_BLKABLE"]);
      return [];
    })
    G.str['SCR_ABIL_WIZARD23_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2107 = lua_call(G.str['GetSkill'], [_self, "Wizard_EarthQuake"])[0];
      if (!lua_eq(_skl_2107, null)) {
        lua_tableset(_skl_2107, 'KnockDownHitType', 1);
      }
      return [];
    })
    G.str['SCR_ABIL_WIZARD23_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _skl_2109 = lua_call(G.str['GetSkill'], [_self, "Wizard_EarthQuake"])[0];
      if (!lua_eq(_skl_2109, null)) {
        lua_tableset(_skl_2109, 'KnockDownHitType', 4);
      }
      return [];
    })
    G.str['SCR_ABIL_MACE_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addHeaLPwrRate_2111 = 0;
      var _rItem_2111 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (lua_eq(lua_call(G.str['TryGetProp'], [_rItem_2111, "ClassType"])[0], "Mace")) {
        _addHeaLPwrRate_2111 = lua_multiply(lua_tableget(_ability, 'Level'), 0.02);
      }
      lua_call(G.str['SetExProp'], [_self, "ABIL_MACE_ADDHEAL", _addHeaLPwrRate_2111]);
      return [];
    })
    G.str['SCR_ABIL_MACE_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ABIL_MACE_ADDHEAL"]);
      return [];
    })
    G.str['SCR_ABIL_PELTASTA5_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _lItem_2114 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      var _addValue_2114 = 0;
      if (lua_eq(lua_tableget(_lItem_2114, 'ClassType'), "Shield")) {
        _addValue_2114 = lua_tableget(_ability, 'Level');
      }
      lua_tableset(_self, 'MaxHateCount_BM', lua_add(lua_tableget(_self, 'MaxHateCount_BM'), _addValue_2114));
      lua_call(G.str['SetExProp'], [_ability, "ADD_MaxHateCount", _addValue_2114]);
      lua_call(G.str['Invalidate'], [_self, "MaxHateCount"]);
      return [];
    })
    G.str['SCR_ABIL_PELTASTA5_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addValue_2116 = lua_call(G.str['GetExProp'], [_ability, "ADD_MaxHateCount"])[0];
      lua_tableset(_self, 'MaxHateCount_BM', lua_subtract(lua_tableget(_self, 'MaxHateCount_BM'), _addValue_2116));
      lua_call(G.str['Invalidate'], [_self, "MaxHateCount"]);
      return [];
    })
    G.str['SCR_ABIL_DOPPELSOELDNER24_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addsta_2117 = 5;
      lua_tableset(_self, 'MaxSta_BM', lua_subtract(lua_tableget(_self, 'MaxSta_BM'), _addsta_2117));
      lua_call(G.str['SetExProp'], [_ability, 'ADD_STA', _addsta_2117]);
      return [];
    })
    G.str['SCR_ABIL_DOPPELSOELDNER24_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addsta_2118 = lua_call(G.str['GetExProp'], [_ability, 'ADD_STA'])[0];
      lua_tableset(_self, 'MaxSta_BM', lua_add(lua_tableget(_self, 'MaxSta_BM'), _addsta_2118));
      return [];
    })
    G.str['SCR_ABIL_MUSKETEER30_ACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _minPATK_2119 = lua_call(G.str['TryGetProp'], [_self, "MINPATK"])[0];
      var _maxPATK_2119 = lua_call(G.str['TryGetProp'], [_self, "MAXPATK"])[0];
      var _addATK_2119 = 0;
      var _addMSPD_2119 = 1;
      _addATK_2119 = lua_multiply((lua_subtract(lua_divide((lua_add(_minPATK_2119, _maxPATK_2119)), 2), lua_tableget(_self, 'PATK_BM'))), (lua_multiply(lua_tableget(_ability, 'Level'), 0.01)));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addMSPD_2119));
      lua_call(G.str['SetExProp'], [_self, "add_Musketeer30_ATK", _addATK_2119]);
      lua_call(G.str['SetExProp'], [_self, "add_Musketeer30_MSPD", _addMSPD_2119]);
      return [];
    })
    G.str['SCR_ABIL_MUSKETEER30_INACTIVE'] = (function (_self, _ability) {
      var tmp;
      var _addMSPD_2120 = lua_call(G.str['GetExProp'], [_self, "add_Musketeer30_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addMSPD_2120));
      lua_call(G.str['DelExProp'], [_self, "add_Musketeer30_ATK"]);
      return [];
    })
    G.str['IS_ABILITY_KEYWORD'] = (function (_abilCls, _keyword) {
      var tmp;
      var _keywordStr_2121 = lua_call(G.str['TryGetProp'], [_abilCls, "Keyword"])[0];
      if ((lua_eq(_keywordStr_2121, null) || lua_eq(_keywordStr_2121, "None"))) {
        return [false];
      }
      var _tokenList_2121 = lua_call(G.str['StringSplit'], [_keywordStr_2121, ";"])[0];
      var var_2123 = 1, stop_2123 = lua_assertfloat(lua_len(_tokenList_2121));
      for (; var_2123 <= stop_2123; var_2123++) {
        var _i_2123 = var_2123;
        var _token_2124 = lua_tableget(_tokenList_2121, _i_2123);
        if (lua_eq(_token_2124, _keyword)) {
          return [true];
        }
      }
      return [false];
      return [];
    })
    G.str['ABIL_1RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2126 = 1;
      var _time_2126 = 0;
      return [_price_2126, _time_2126];
      return [];
    })
    G.str['ABIL_2RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2127 = 1;
      var _time_2127 = 0;
      return [_price_2127, _time_2127];
      return [];
    })
    G.str['ABIL_3RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2128 = 1;
      var _time_2128 = 0;
      return [_price_2128, _time_2128];
      return [];
    })
    G.str['ABIL_4RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2129 = 1;
      var _time_2129 = 0;
      return [_price_2129, _time_2129];
      return [];
    })
    G.str['ABIL_5RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2130 = lua_add(22, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), 2));
      var _time_2130 = 0;
      return [_price_2130, _time_2130];
      return [];
    })
    G.str['ABIL_6RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2131 = lua_add(41, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), 3));
      var _time_2131 = 0;
      return [_price_2131, _time_2131];
      return [];
    })
    G.str['ABIL_7RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2132 = lua_add(70, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), 7));
      var _time_2132 = 0;
      return [_price_2132, _time_2132];
      return [];
    })
    G.str['ABIL_8RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2133 = lua_add(480, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), 45));
      var _time_2133 = 0;
      return [_price_2133, _time_2133];
      return [];
    })
    G.str['ABIL_9RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2134 = lua_add(720, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), 67));
      var _time_2134 = 0;
      return [_price_2134, _time_2134];
      return [];
    })
    G.str['ABIL_10RANK_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2135 = lua_add(1080, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), 100));
      var _time_2135 = 0;
      return [_price_2135, _time_2135];
      return [];
    })
    G.str['ABIL_1RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2136 = 1;
      var _time_2136 = 0;
      return [_price_2136, _time_2136];
      return [];
    })
    G.str['ABIL_2RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2137 = 1;
      var _time_2137 = 0;
      return [_price_2137, _time_2137];
      return [];
    })
    G.str['ABIL_3RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2138 = 1;
      var _time_2138 = 0;
      return [_price_2138, _time_2138];
      return [];
    })
    G.str['ABIL_4RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2139 = 1;
      var _time_2139 = 0;
      return [_price_2139, _time_2139];
      return [];
    })
    G.str['ABIL_5RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2140 = lua_add(22, lua_multiply((lua_subtract(_abilLevel, 1)), 2));
      var _time_2140 = 0;
      return [_price_2140, _time_2140];
      return [];
    })
    G.str['ABIL_6RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2141 = lua_add(41, lua_multiply((lua_subtract(_abilLevel, 1)), 3));
      var _time_2141 = 0;
      return [_price_2141, _time_2141];
      return [];
    })
    G.str['ABIL_7RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2142 = lua_add(70, lua_multiply((lua_subtract(_abilLevel, 1)), 7));
      var _time_2142 = 0;
      return [_price_2142, _time_2142];
      return [];
    })
    G.str['ABIL_8RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2143 = lua_add(500, lua_multiply((lua_subtract(_abilLevel, 1)), 55));
      var _time_2143 = 0;
      return [_price_2143, _time_2143];
      return [];
    })
    G.str['ABIL_9RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2144 = lua_add(600, lua_multiply((lua_subtract(_abilLevel, 1)), 65));
      var _time_2144 = 0;
      return [_price_2144, _time_2144];
      return [];
    })
    G.str['ABIL_10RANK_BUFF_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2145 = lua_add(700, lua_multiply((lua_subtract(_abilLevel, 1)), 75));
      var _time_2145 = 0;
      return [_price_2145, _time_2145];
      return [];
    })
    G.str['ABIL_1RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2146 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 1)])[0];
      var _time_2146 = 0;
      return [_price_2146, _time_2146];
      return [];
    })
    G.str['ABIL_2RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2147 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 2)])[0];
      var _time_2147 = 0;
      return [_price_2147, _time_2147];
      return [];
    })
    G.str['ABIL_3RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2148 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 3)])[0];
      var _time_2148 = 0;
      return [_price_2148, _time_2148];
      return [];
    })
    G.str['ABIL_4RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2149 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 4)])[0];
      var _time_2149 = 0;
      return [_price_2149, _time_2149];
      return [];
    })
    G.str['ABIL_5RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2150 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 5)])[0];
      var _time_2150 = 0;
      return [_price_2150, _time_2150];
      return [];
    })
    G.str['ABIL_6RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2151 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 6)])[0];
      var _time_2151 = 0;
      return [_price_2151, _time_2151];
      return [];
    })
    G.str['ABIL_7RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2152 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 7)])[0];
      var _time_2152 = 0;
      return [_price_2152, _time_2152];
      return [];
    })
    G.str['ABIL_8RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2153 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.0822, (lua_subtract(_abilLevel, 1))), 8)])[0];
      var _time_2153 = 0;
      return [_price_2153, _time_2153];
      return [];
    })
    G.str['ABIL_9RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2154 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.0822, (lua_subtract(_abilLevel, 1))), 8.5)])[0];
      var _time_2154 = 0;
      return [_price_2154, _time_2154];
      return [];
    })
    G.str['ABIL_10RANK_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2155 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.0822, (lua_subtract(_abilLevel, 1))), 9)])[0];
      var _time_2155 = 0;
      return [_price_2155, _time_2155];
      return [];
    })
    G.str['ABIL_10RANK_FOR67_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2156 = lua_add(250, lua_multiply((lua_subtract(_abilLevel, 1)), 250));
      var _time_2156 = 0;
      return [_price_2156, _time_2156];
      return [];
    })
    G.str['ABIL_3RANK_MASTER_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2157 = 3;
      var _time_2157 = 0;
      return [_price_2157, _time_2157];
      return [];
    })
    G.str['ABIL_BASE_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2158 = 1;
      var _time_2158 = 0;
      return [_price_2158, _time_2158];
      return [];
    })
    G.str['ABIL_REINFORCE_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _baseFactor_2159 = 1.07;
      var _increseFactorList_2159 = lua_newtable([1, 2, 3, 4, 5, 6, 7, 8, 8.5, 9]);
      var _index_2159 = lua_tablegetcall(G.str['math'], 'ceil', [lua_divide(_abilLevel, 10)])[0];
      var _increseFactor_2159 = 0;
      if ((lua_lt(0, _index_2159) && lua_lte(_index_2159, lua_len(_increseFactorList_2159)))) {
        _increseFactor_2159 = lua_tableget(_increseFactorList_2159, _index_2159);
      }
      var _price_2159 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(_baseFactor_2159, (lua_subtract(_abilLevel, 1))), lua_tableget(_increseFactorList_2159, _index_2159))])[0];
      var _time_2159 = 0;
      return [_price_2159, _time_2159];
      return [];
    })
    G.str['ABIL_ABOVE_NORMAL_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2161 = lua_add(60, lua_multiply((lua_subtract(_abilLevel, 1)), 5));
      var _time_2161 = 0;
      return [_price_2161, _time_2161];
      return [];
    })
    G.str['ABIL_COMMON_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      var _minimumFactor_2162 = _factor1;
      var _increseFactor_2162 = _factor2;
      if (lua_eq(_minimumFactor_2162, null)) {
        _minimumFactor_2162 = 0;
      }
      if (lua_eq(_increseFactor_2162, null)) {
        _increseFactor_2162 = 0;
      }
      var _price_2162 = lua_add(_minimumFactor_2162, lua_multiply((lua_add(lua_subtract(4, _maxLevel), _abilLevel)), _increseFactor_2162));
      if (lua_lt(_price_2162, 1)) {
        _price_2162 = 1;
      }
      var _time_2162 = 0;
      return [_price_2162, _time_2162];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_1LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 11, 1]); var _price_2166 = tmp[0]; var _time_2166 = tmp[1]; tmp = null;
      return [_price_2166, _time_2166];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_100LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 22, 2]); var _price_2167 = tmp[0]; var _time_2167 = tmp[1]; tmp = null;
      return [_price_2167, _time_2167];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_150LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 34, 3]); var _price_2168 = tmp[0]; var _time_2168 = tmp[1]; tmp = null;
      return [_price_2168, _time_2168];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_200LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 48, 4]); var _price_2169 = tmp[0]; var _time_2169 = tmp[1]; tmp = null;
      return [_price_2169, _time_2169];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_250LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 63, 5]); var _price_2170 = tmp[0]; var _time_2170 = tmp[1]; tmp = null;
      return [_price_2170, _time_2170];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_300LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 84, 6]); var _price_2171 = tmp[0]; var _time_2171 = tmp[1]; tmp = null;
      return [_price_2171, _time_2171];
      return [];
    })
    G.str['ABIL_COMMON_PRICE_350LV'] = (function (_pc, _abilName, _abilLevel, _maxLevel, _factor1, _factor2) {
      var tmp;
      tmp = lua_call(G.str['ABIL_COMMON_PRICE'], [_pc, _abilName, _abilLevel, _maxLevel, 115, 7]); var _price_2172 = tmp[0]; var _time_2172 = tmp[1]; tmp = null;
      return [_price_2172, _time_2172];
      return [];
    })
    G.str['ABIL_SWAPWEAPON_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2173 = 3;
      var _time_2173 = 0;
      return [_price_2173, _time_2173];
      return [];
    })
    G.str['ABIL_MASTERY_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2174 = lua_add(3, lua_multiply(1, (lua_subtract(_abilLevel, 1))));
      var _time_2174 = 0;
      return [_price_2174, _time_2174];
      return [];
    })
    G.str['ABIL_UNIQUEMASTERY_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2175 = lua_add(6, lua_multiply(1, (lua_subtract(_abilLevel, 1))));
      var _time_2175 = 0;
      return [_price_2175, _time_2175];
      return [];
    })
    G.str['ABIL_BOKOR21_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2176 = lua_add(60, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.05, (lua_subtract(_abilLevel, 1))), 7)])[0]);
      var _time_2176 = 0;
      return [_price_2176, _time_2176];
      return [];
    })
    G.str['ABIL_BOKOR22_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2177 = lua_add(60, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.05, (lua_subtract(_abilLevel, 1))), 7)])[0]);
      var _time_2177 = 0;
      return [_price_2177, _time_2177];
      return [];
    })
    G.str['ABIL_SAVEPOISON_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2178 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.07, (lua_subtract(_abilLevel, 1))), 6)])[0];
      var _time_2178 = 0;
      return [_price_2178, _time_2178];
      return [];
    })
    G.str['ABIL_SORCERER2_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2179 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.05, (lua_subtract(_abilLevel, 1))), 35)])[0];
      var _time_2179 = 0;
      return [_price_2179, _time_2179];
      return [];
    })
    G.str['ABIL_SQUIRE_TOUCHUP_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2180 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.04, (lua_subtract(_abilLevel, 1))), 15)])[0];
      var _time_2180 = 0;
      return [_price_2180, _time_2180];
      return [];
    })
    G.str['ABIL_SQUIRE_FOODTABLE_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2181 = lua_add(10, lua_multiply(10, (lua_subtract(_abilLevel, 1))));
      var _time_2181 = 0;
      return [_price_2181, _time_2181];
      return [];
    })
    G.str['ABIL_BOKOR17_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2182 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.04, (lua_subtract(_abilLevel, 1))), 10)])[0];
      var _time_2182 = 0;
      return [_price_2182, _time_2182];
      return [];
    })
    G.str['ABIL_PARDONER5_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2183 = lua_add(lua_multiply(_abilLevel, 1), lua_call(G.str['IMCRandom'], [0, 99])[0]);
      var _time_2183 = 0;
      return [_price_2183, _time_2183];
      return [];
    })
    G.str['ABIL_TINCTURINGPOTION_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2184 = lua_multiply(_abilLevel, 10);
      var _time_2184 = 0;
      return [_price_2184, _time_2184];
      return [];
    })
    G.str['ABIL_HIGHLANDER28_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2185 = 15;
      var _time_2185 = 0;
      return [_price_2185, _time_2185];
      return [];
    })
    G.str['ABIL_CATAPHRACT28_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2186 = 70;
      var _time_2186 = 0;
      return [_price_2186, _time_2186];
      return [];
    })
    G.str['ABIL_CATAPHRACT30_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2187 = 100;
      var _time_2187 = 0;
      return [_price_2187, _time_2187];
      return [];
    })
    G.str['ABIL_NECROMANCER8_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2188 = lua_add(80, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.05, (lua_subtract(_abilLevel, 1))), 9)])[0]);
      var _time_2188 = 0;
      return [_price_2188, _time_2188];
      return [];
    })
    G.str['ABIL_PROVOKE_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2189 = lua_add(1, lua_multiply((lua_subtract(_abilLevel, 1)), 1));
      var _time_2189 = 0;
      return [_price_2189, _time_2189];
      return [];
    })
    G.str['ABIL_UNLOCKCHEST_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2190 = lua_multiply(32, _abilLevel);
      var _time_2190 = 0;
      return [_price_2190, _time_2190];
      return [];
    })
    G.str['ABIL_FEATHERFOOTBLOOD_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2191 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.055, (lua_subtract(_abilLevel, 1))), 20)])[0];
      var _time_2191 = 0;
      return [_price_2191, _time_2191];
      return [];
    })
    G.str['ABIL_FEATHERFOOTREGENERATE_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2192 = 500;
      var _time_2192 = 0;
      return [_price_2192, _time_2192];
      return [];
    })
    G.str['ABIL_QUARRELSHOOTER9_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2193 = lua_add(1, lua_multiply((lua_subtract(_abilLevel, 1)), 1));
      var _time_2193 = 0;
      return [_price_2193, _time_2193];
      return [];
    })
    G.str['ABIL_RODELERO29_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2194 = lua_add(41, lua_multiply((lua_subtract(_abilLevel, 1)), 3));
      var _time_2194 = 0;
      return [_price_2194, _time_2194];
      return [];
    })
    G.str['ABIL_CLERIC18_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2195 = lua_add(2, lua_multiply((lua_subtract(_abilLevel, 1)), 1));
      var _time_2195 = 0;
      return [_price_2195, _time_2195];
      return [];
    })
    G.str['ABIL_ADDBUFFCOUNT_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2196 = 10;
      var _time_2196 = 0;
      return [_price_2196, _time_2196];
      return [];
    })
    G.str['ABIL_DOPPELSOELDNER20_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2197 = 713;
      var _time_2197 = 0;
      return [_price_2197, _time_2197];
      return [];
    })
    G.str['ABIL_ALCHEMIST10_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2198 = 3000;
      var _time_2198 = 0;
      return [_price_2198, _time_2198];
      return [];
    })
    G.str['ABIL_TOTALDEADPARTS_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2199 = lua_add(1670, lua_multiply((lua_subtract(_abilLevel, 1)), 200));
      var _time_2199 = 0;
      return [_price_2199, _time_2199];
      return [];
    })
    G.str['ABIL_HIGHERROTTEN_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2200 = 2000;
      var _time_2200 = 0;
      return [_price_2200, _time_2200];
      return [];
    })
    G.str['ABIL_WARLOCK14_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2201 = lua_add(450, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.1, (lua_subtract(_abilLevel, 1))), 65)])[0]);
      var _time_2201 = 0;
      return [_price_2201, _time_2201];
      return [];
    })
    G.str['ABIL_SAGE8_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2202 = 1600;
      var _time_2202 = 0;
      return [_price_2202, _time_2202];
      return [];
    })
    G.str['ABIL_SAGE9_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2203 = lua_add(1500, lua_multiply((lua_subtract(_abilLevel, 1)), 56));
      var _time_2203 = 0;
      return [_price_2203, _time_2203];
      return [];
    })
    G.str['ABIL_FALCONER11_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2204 = lua_add(1000, lua_multiply((lua_subtract(_abilLevel, 1)), 100));
      var _time_2204 = 0;
      return [_price_2204, _time_2204];
      return [];
    })
    G.str['ABIL_SHINOBIARUKI_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2205 = 1800;
      var _time_2205 = 0;
      return [_price_2205, _time_2205];
      return [];
    })
    G.str['ABIL_SCHWARZEREITER17_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2206 = 1658;
      var _time_2206 = 0;
      return [_price_2206, _time_2206];
      return [];
    })
    G.str['ABIL_DRUID12_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2207 = lua_add(954, lua_multiply((lua_subtract(_abilLevel, 1)), 99));
      var _time_2207 = 0;
      return [_price_2207, _time_2207];
      return [];
    })
    G.str['ABIL_INQUISITOR9_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2208 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_power(1.09, (lua_subtract(_abilLevel, 1))), 1000)])[0];
      var _time_2208 = 0;
      return [_price_2208, _time_2208];
      return [];
    })
    G.str['ABIL_CLERIC9_PRICE'] = (function (_pc, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2209 = lua_add(3, lua_multiply((lua_subtract(_abilLevel, 1)), 1));
      var _time_2209 = 0;
      return [_price_2209, _time_2209];
      return [];
    })
    G.str['GET_TOTAL_ABILITY_PRICE'] = (function (_pc, _scrCalcPrice, _abilName, _abilLevel, _maxLevel) {
      var tmp;
      var _price_2210 = 0;
      if ((((((lua_eq(_pc, null) || lua_eq(_abilName, null)) || lua_eq(_abilLevel, null)) || lua_eq(_maxLevel, null)) || lua_eq(_scrCalcPrice, null)) || lua_eq(_scrCalcPrice, 'None'))) {
        return [_price_2210];
      }
      var var_2212 = 1, stop_2212 = lua_assertfloat(_abilLevel);
      for (; var_2212 <= stop_2212; var_2212++) {
        var _i_2212 = var_2212;
        var _GetCalcPriceScript_2213 = lua_tableget(G.str['_G'], _scrCalcPrice);
        _price_2210 = lua_add(_price_2210, lua_call(_GetCalcPriceScript_2213, [_pc, _abilName, _i_2212, _maxLevel])[0]);
      }
      return [_price_2210];
      return [];
    })
    G.str['GET_TOTAL_ABILITY_PRICE_BY_PRICE_COLUMN'] = (function (_abilGroup, _abilName, _abilLevel) {
      var tmp;
      var _price_2214 = 0;
      if (((lua_eq(_abilGroup, null) || lua_eq(_abilName, null)) || lua_eq(_abilLevel, null))) {
        return [_price_2214];
      }
      var _abilShopInfoCls_2214 = lua_call(G.str['GetClass'], [_abilGroup, _abilName])[0];
      if (lua_eq(_abilShopInfoCls_2214, null)) {
        lua_call(G.str['IMC_LOG'], ["ERROR_NULLPTR", lua_concat("Not Exist Ability shop info- abilGroup[", lua_concat(_abilGroup, lua_concat("], abilName[", lua_concat(_abilName, "]"))))]);
        return [_price_2214];
      }
      var var_2217 = 1, stop_2217 = lua_assertfloat(_abilLevel);
      for (; var_2217 <= stop_2217; var_2217++) {
        var _i_2217 = var_2217;
        var _priceCol_2218 = lua_call(G.str['TryGetProp'], [_abilShopInfoCls_2214, lua_concat("Price", _i_2217)])[0];
        if (lua_eq(_priceCol_2218, null)) {
          lua_call(G.str['IMC_LOG'], ["ERROR_NULLPTR", lua_concat("Not Exist Price column- abilGroup[", lua_concat(_abilGroup, lua_concat("], abilName[", lua_concat(_abilName, lua_concat("], abilLevel[", lua_concat(_i_2217, "]"))))))]);
        } else {
          _price_2214 = lua_add(_price_2214, _priceCol_2218);
        }
      }
      return [_price_2214];
      return [];
    })
    G.str['UNLOCK_ABIL_CIRCLE'] = (function (_pc, _jobName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2221 = lua_call(G.str['GetJobGradeByName'], [_pc, _jobName])[0];
      if (lua_lte(_limitLevel, _jobGrade_2221)) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ABIL_SKILL'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _skl_2223 = lua_call(G.str['GetSkill'], [_pc, _sklName])[0];
      if ((!lua_eq(_skl_2223, null) && lua_lte(_limitLevel, lua_tableget(_skl_2223, 'LevelByDB')))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ABIL_LEVEL'] = (function (_pc, _pcLevel, _levelFix, _abilIES) {
      var tmp;
      var _abilLv_2225 = _levelFix;
      if (!lua_eq(_abilIES, null)) {
        _abilLv_2225 = lua_add(_abilLv_2225, lua_tableget(_abilIES, 'Level'));
      }
      if (lua_lte(_abilLv_2225, lua_tableget(_pc, 'Lv'))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ABIL_RANK'] = (function (_pc, _strarg, _limitRank, _abilIES) {
      var tmp;
      var _rank_2228 = lua_call(G.str['GetTotalJobCount'], [_pc])[0];
      if (lua_lte(_limitRank, _rank_2228)) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_BASE_LEVEL'] = (function (_pc, _jobName, _limitLevel, _abilIES) {
      var tmp;
      var _pcBaseLevel_2230 = lua_call(G.str['TryGetProp'], [_pc, "Lv"])[0];
      if (lua_lte(_limitLevel, _pcBaseLevel_2230)) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_PRIEST21'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2232 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char4_2'])[0];
      var _skl_2232 = lua_call(G.str['GetSkill'], [_pc, _sklName])[0];
      if ((((!lua_eq(_skl_2232, null) && lua_lte(_limitLevel, lua_tableget(_skl_2232, 'LevelByDB'))) && !lua_eq(_jobGrade_2232, null)) && lua_lte(2, _jobGrade_2232))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_FEATHERFOOT_BLOOD'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _bloodbathSkl_2234 = lua_call(G.str['GetSkill'], [_pc, "Featherfoot_BloodBath"])[0];
      var _bloodsuckingSkl_2234 = lua_call(G.str['GetSkill'], [_pc, "Featherfoot_BloodSucking"])[0];
      if ((((!lua_eq(_bloodbathSkl_2234, null) && lua_lte(_limitLevel, lua_tableget(_bloodbathSkl_2234, 'LevelByDB'))) && !lua_eq(_bloodsuckingSkl_2234, null)) && lua_lte(_limitLevel, lua_tableget(_bloodsuckingSkl_2234, 'LevelByDB')))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_MUSKETEER15'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2236 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char3_16'])[0];
      var _skl_2236 = lua_call(G.str['GetSkill'], [_pc, _sklName])[0];
      if ((((!lua_eq(_skl_2236, null) && lua_lte(1, lua_tableget(_skl_2236, 'LevelByDB'))) && !lua_eq(_jobGrade_2236, null)) && lua_lte(2, _jobGrade_2236))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ELEMENTALIST25'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2238 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_11'])[0];
      var _skl_2238 = lua_call(G.str['GetSkill'], [_pc, "Elementalist_Meteor"])[0];
      if ((((!lua_eq(_skl_2238, null) && lua_lte(10, lua_tableget(_skl_2238, 'LevelByDB'))) && !lua_eq(_jobGrade_2238, null)) && lua_lte(3, _jobGrade_2238))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_FALCONER20'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2240 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char3_14'])[0];
      var _sklCalling_2240 = lua_call(G.str['GetSkill'], [_pc, "Falconer_Calling"])[0];
      var _sklBuildRoost_2240 = lua_call(G.str['GetSkill'], [_pc, "Falconer_BuildRoost"])[0];
      if ((((((!lua_eq(_sklCalling_2240, null) && !lua_eq(_sklBuildRoost_2240, null)) && lua_lte(1, lua_tableget(_sklCalling_2240, 'LevelByDB'))) && lua_lte(1, lua_tableget(_sklBuildRoost_2240, 'LevelByDB'))) && !lua_eq(_jobGrade_2240, null)) && lua_lte(3, _jobGrade_2240))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_SORCERER16'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2242 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_6'])[0];
      var _sklSummoning_2242 = lua_call(G.str['GetSkill'], [_pc, "Sorcerer_Summoning"])[0];
      if ((((!lua_eq(_sklSummoning_2242, null) && lua_lte(11, lua_tableget(_sklSummoning_2242, 'LevelByDB'))) && !lua_eq(_jobGrade_2242, null)) && lua_lte(3, _jobGrade_2242))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_NECROMANCER24'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2244 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_9'])[0];
      var _sklEnchantFire_2244 = lua_call(G.str['GetSkill'], [_pc, "Pyromancer_EnchantFire"])[0];
      if ((((!lua_eq(_sklEnchantFire_2244, null) && lua_lte(6, lua_tableget(_sklEnchantFire_2244, 'LevelByDB'))) && !lua_eq(_jobGrade_2244, null)) && lua_lte(2, _jobGrade_2244))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_NECROMANCER25'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2246 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_9'])[0];
      var _sklIceBolt_2246 = lua_call(G.str['GetSkill'], [_pc, "Cryomancer_IceBolt"])[0];
      if ((((!lua_eq(_sklIceBolt_2246, null) && lua_lte(6, lua_tableget(_sklIceBolt_2246, 'LevelByDB'))) && !lua_eq(_jobGrade_2246, null)) && lua_lte(3, _jobGrade_2246))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_PELTASTA30'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2248 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char1_3'])[0];
      var _sklIceBolt_2248 = lua_call(G.str['GetSkill'], [_pc, "Peltasta_SwashBuckling"])[0];
      if ((((!lua_eq(_sklIceBolt_2248, null) && lua_lte(6, lua_tableget(_sklIceBolt_2248, 'LevelByDB'))) && !lua_eq(_jobGrade_2248, null)) && lua_lte(2, _jobGrade_2248))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_WIZARD25'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2250 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_1'])[0];
      var _skillSleep_2250 = lua_call(G.str['GetSkill'], [_pc, "Wizard_Sleep"])[0];
      if ((((!lua_eq(_skillSleep_2250, null) && lua_lte(6, lua_tableget(_skillSleep_2250, 'LevelByDB'))) && !lua_eq(_jobGrade_2250, null)) && lua_lte(2, _jobGrade_2250))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ONMYOJI8'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2252 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_20'])[0];
      var _skillWhiteTigerHowling_2252 = lua_call(G.str['GetSkill'], [_pc, "Onmyoji_WhiteTigerHowling"])[0];
      if ((((!lua_eq(_skillWhiteTigerHowling_2252, null) && lua_lte(6, lua_tableget(_skillWhiteTigerHowling_2252, 'LevelByDB'))) && !lua_eq(_jobGrade_2252, null)) && lua_lte(2, _jobGrade_2252))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ONMYOJI17'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2254 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_20'])[0];
      var _skillFireFoxShikigami_2254 = lua_call(G.str['GetSkill'], [_pc, "Onmyoji_FireFoxShikigami"])[0];
      if ((((!lua_eq(_skillFireFoxShikigami_2254, null) && lua_lte(6, lua_tableget(_skillFireFoxShikigami_2254, 'LevelByDB'))) && !lua_eq(_jobGrade_2254, null)) && lua_lte(2, _jobGrade_2254))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ONMYOJI18'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2256 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_20'])[0];
      var _skillFireFoxShikigami_2256 = lua_call(G.str['GetSkill'], [_pc, "Onmyoji_FireFoxShikigami"])[0];
      if ((((!lua_eq(_skillFireFoxShikigami_2256, null) && lua_lte(6, lua_tableget(_skillFireFoxShikigami_2256, 'LevelByDB'))) && !lua_eq(_jobGrade_2256, null)) && lua_lte(2, _jobGrade_2256))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_PELTASTA33'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2258 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char1_3'])[0];
      var _skillGuardian_2258 = lua_call(G.str['GetSkill'], [_pc, "Peltasta_Guardian"])[0];
      if ((((!lua_eq(_skillGuardian_2258, null) && lua_lte(6, lua_tableget(_skillGuardian_2258, 'LevelByDB'))) && !lua_eq(_jobGrade_2258, null)) && lua_lte(2, _jobGrade_2258))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_PELTASTA34'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2260 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char1_3'])[0];
      var _skillGuardian_2260 = lua_call(G.str['GetSkill'], [_pc, "Peltasta_Guardian"])[0];
      if ((((!lua_eq(_skillGuardian_2260, null) && lua_lte(11, lua_tableget(_skillGuardian_2260, 'LevelByDB'))) && !lua_eq(_jobGrade_2260, null)) && lua_lte(3, _jobGrade_2260))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_LANCER14'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2262 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char1_17'])[0];
      var _skillPrevent_2262 = lua_call(G.str['GetSkill'], [_pc, "Rancer_Prevent"])[0];
      if ((((!lua_eq(_skillPrevent_2262, null) && lua_lte(6, lua_tableget(_skillPrevent_2262, 'LevelByDB'))) && !lua_eq(_jobGrade_2262, null)) && lua_lte(3, _jobGrade_2262))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_LANCER_RHONGOMIANT'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2264 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char1_17'])[0];
      var _skillChage_2264 = lua_call(G.str['GetSkill'], [_pc, "Rancer_Chage"])[0];
      if ((((!lua_eq(_skillChage_2264, null) && lua_lte(6, lua_tableget(_skillChage_2264, 'LevelByDB'))) && !lua_eq(_jobGrade_2264, null)) && lua_lte(3, _jobGrade_2264))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_HACKAPELL14'] = (function (_pc, _abilName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2266 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char3_7'])[0];
      var _skillCavalry_2266 = lua_call(G.str['GetSkill'], [_pc, "Hackapell_CavalryCharge"])[0];
      if ((((!lua_eq(_skillCavalry_2266, null) && lua_lte(1, lua_tableget(_skillCavalry_2266, 'LevelByDB'))) && !lua_eq(_jobGrade_2266, null)) && lua_lte(3, _jobGrade_2266))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ONMYOJI10'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2268 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char2_20'])[0];
      var _skillWaterShikigami_2268 = lua_call(G.str['GetSkill'], [_pc, "Onmyoji_WaterShikigami"])[0];
      if ((((!lua_eq(_skillWaterShikigami_2268, null) && lua_lte(11, lua_tableget(_skillWaterShikigami_2268, 'LevelByDB'))) && !lua_eq(_jobGrade_2268, null)) && lua_lte(3, _jobGrade_2268))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_LANCER17'] = (function (_pc, _sklName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2270 = lua_call(G.str['GetJobGradeByName'], [_pc, 'Char1_17'])[0];
      var _skillSpillAttack_2270 = lua_call(G.str['GetSkill'], [_pc, "Rancer_SpillAttack"])[0];
      if ((((!lua_eq(_skillSpillAttack_2270, null) && lua_lte(6, lua_tableget(_skillSpillAttack_2270, 'LevelByDB'))) && !lua_eq(_jobGrade_2270, null)) && lua_lte(3, _jobGrade_2270))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['UNLOCK_ABIL_CIRCLE_AND_RANK'] = (function (_pc, _jobName, _limitLevel, _abilIES) {
      var tmp;
      var _jobGrade_2272 = lua_call(G.str['GetJobGradeByName'], [_pc, _jobName])[0];
      var _rank_2272 = lua_call(G.str['GetTotalJobCount'], [_pc])[0];
      var _limitRank_2272 = 10;
      if ((lua_lte(_limitLevel, _jobGrade_2272) && lua_lte(_limitRank_2272, _rank_2272))) {
        return ["UNLOCK"];
      }
      return ["LOCK_GRADE"];
      return [];
    })
    G.str['GET_COMMON_PROP_LIST'] = (function () {
      var tmp;
      return [lua_newtable(['MINATK', 'MAXATK', 'ADD_MINATK', 'ADD_MAXATK', 'ADD_MATK', 'ADD_DEF', 'ADD_MDEF', 'DEF', 'MDEF', 'PATK', 'MATK', 'CRTHR', 'CRTATK', 'CRTDR', 'HR', 'DR', 'ADD_HR', 'ADD_DR', 'STR', 'DEX', 'CON', 'INT', 'MNA', 'SR', 'SDR', 'CRTMATK', 'MGP', 'AddSkillMaxR', 'SkillRange', 'SkillWidthRange', 'SkillAngle', 'BlockRate', 'BLK', 'BLK_BREAK', 'MSPD', 'KDPow', 'MHP', 'MSP', 'MSTA', 'RHP', 'RSP', 'RSPTIME', 'RSTA', 'ADD_CLOTH', 'ADD_LEATHER', 'ADD_CHAIN', 'ADD_IRON', 'ADD_GHOST', 'ADD_SMALLSIZE', 'ADD_MIDDLESIZE', 'ADD_LARGESIZE', 'ADD_FORESTER', 'ADD_WIDLING', 'ADD_VELIAS', 'ADD_PARAMUNE', 'ADD_KLAIDA', 'Aries', 'Slash', 'Strike', 'AriesDEF', 'SlashDEF', 'StrikeDEF', 'ADD_FIRE', 'ADD_ICE', 'ADD_POISON', 'ADD_LIGHTNING', 'ADD_SOUL', 'ADD_EARTH', 'ADD_HOLY', 'ADD_DARK', 'RES_FIRE', 'RES_ICE', 'RES_POISON', 'RES_LIGHTNING', 'RES_SOUL', 'RES_EARTH', 'RES_HOLY', 'RES_DARK', 'LootingChance', 'RareOption_MainWeaponDamageRate', 'RareOption_MainWeaponDamageRate', 'RareOption_SubWeaponDamageRate', 'RareOption_BossDamageRate', 'RareOption_MeleeReducedRate', 'RareOption_MagicReducedRate', 'RareOption_PVPDamageRate', 'RareOption_PVPReducedRate', 'RareOption_CriticalDamage_Rate', 'RareOption_CriticalHitRate', 'RareOption_CriticalDodgeRate', 'RareOption_HitRate', 'RareOption_DodgeRate', 'RareOption_BlockBreakRate', 'RareOption_BlockRate'])];
      return [];
    })
    G.str['INIT_WEAPON_PROP'] = (function (_item, _class) {
      var tmp;
      var _commonPropList_2275 = lua_call(G.str['GET_COMMON_PROP_LIST'], [])[0];
      var var_2276 = 1, stop_2276 = lua_assertfloat(lua_len(_commonPropList_2275));
      for (; var_2276 <= stop_2276; var_2276++) {
        var _i_2276 = var_2276;
        var _propName_2277 = lua_tableget(_commonPropList_2275, _i_2276);
        lua_tableset(_item, _propName_2277, lua_tableget(_class, _propName_2277));
      }
      lua_call(G.str['OVERRIDE_INHERITANCE_PROPERTY'], [_item]);
      return [];
    })
    G.str['INIT_ARMOR_PROP'] = (function (_item, _class) {
      var tmp;
      var _commonPropList_2278 = lua_call(G.str['GET_COMMON_PROP_LIST'], [])[0];
      var var_2279 = 1, stop_2279 = lua_assertfloat(lua_len(_commonPropList_2278));
      for (; var_2279 <= stop_2279; var_2279++) {
        var _i_2279 = var_2279;
        var _propName_2280 = lua_tableget(_commonPropList_2278, _i_2279);
        lua_tableset(_item, _propName_2280, lua_tableget(_class, _propName_2280));
      }
      lua_call(G.str['OVERRIDE_INHERITANCE_PROPERTY'], [_item]);
      return [];
    })
    G.str['GET_REINFORCE_ADD_VALUE_ATK'] = (function (_item, _ignoreReinf, _reinfBonusValue, _basicTooltipProp) {
      var tmp;
      if (lua_eq(_basicTooltipProp, null)) {
        _basicTooltipProp = lua_tableget(_item, 'BasicTooltipProp');
      }
      if (lua_eq(_ignoreReinf, 1)) {
        return [0];
      }
      if (lua_eq(_reinfBonusValue, null)) {
        _reinfBonusValue = 0;
      }
      var _buffValue_2281 = lua_call(G.str['TryGetProp'], [_item, "BuffValue"])[0];
      if (lua_eq(_buffValue_2281, null)) {
        _buffValue_2281 = 0;
      }
      var _lv_2281 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2281, null)) {
        return [0];
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2287 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_item, 0])[0];
        if (lua_eq(_kupoleItemLv_2287, null)) {
          _lv_2281 = _lv_2281;
        } else if (lua_lt(0, _kupoleItemLv_2287)) {
          _lv_2281 = _kupoleItemLv_2287;
        }
      }
      var _pcBangItemLevel_2281 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_item])[0];
      if (!lua_eq(_pcBangItemLevel_2281, null)) {
        _lv_2281 = _pcBangItemLevel_2281;
      }
      var _itemstring_2281 = lua_call(G.str['TryGetProp'], [_item, 'StringArg', 'None'])[0];
      if (lua_eq(_itemstring_2281, 'Growth_Item')) {
        var _grothItem_2291 = lua_call(G.str['CALC_GROWTH_ITEM_LEVEL'], [_item])[0];
        if (!lua_eq(_grothItem_2291, null)) {
          _lv_2281 = _grothItem_2291;
        }
      }
      var _value_2281 = 0;
      var _grade_2281 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      if (lua_eq(_grade_2281, null)) {
        return [0];
      }
      var _reinforceValue_2281 = lua_call(G.str['TryGetProp'], [_item, "Reinforce_2"])[0];
      if (lua_eq(_reinforceValue_2281, null)) {
        return [0];
      }
      var _reinforceRatio_2281 = lua_call(G.str['TryGetProp'], [_item, "ReinforceRatio"])[0];
      if (lua_eq(_reinforceRatio_2281, null)) {
        return [0];
      }
      tmp = lua_call(G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'], [_item, _lv_2281, _grade_2281, _reinforceValue_2281, _reinforceRatio_2281]); _lv_2281 = tmp[0]; _grade_2281 = tmp[1]; _reinforceValue_2281 = tmp[2]; _reinforceRatio_2281 = tmp[3]; tmp = null;
      var _gradeRatio_2281 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2281, "ReinforceRatio"])[0];
      _reinforceValue_2281 = lua_add(_reinforceValue_2281, _reinfBonusValue);
      _value_2281 = lua_tablegetcall(G.str['math'], 'floor', [(lua_add(_reinforceValue_2281, (lua_multiply(_lv_2281, (lua_multiply(_reinforceValue_2281, (lua_add(0.08, (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tablegetcall(G.str['math'], 'min', [21, _reinforceValue_2281])[0], 1)), 5)])[0], 0.015))))))))))])[0];
      _value_2281 = lua_add(lua_multiply(lua_multiply(_value_2281, (lua_divide(_reinforceRatio_2281, 100))), _gradeRatio_2281), _buffValue_2281);
      _value_2281 = lua_call(G.str['SyncFloor'], [_value_2281])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2281]);
      return [];
    })
    G.str['GET_REINFORCE_ADD_VALUE'] = (function (_prop, _item, _ignoreReinf, _reinfBonusValue) {
      var tmp;
      if (lua_eq(_ignoreReinf, 1)) {
        return [0];
      }
      if (lua_eq(_reinfBonusValue, null)) {
        _reinfBonusValue = 0;
      }
      var _value_2296 = 0;
      var _buffValue_2296 = lua_call(G.str['TryGetProp'], [_item, "BuffValue"])[0];
      if (lua_eq(_buffValue_2296, null)) {
        return [0];
      }
      var _reinforceValue_2296 = lua_call(G.str['TryGetProp'], [_item, "Reinforce_2"])[0];
      if (lua_eq(_reinforceValue_2296, null)) {
        return [0];
      }
      var _lv_2296 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2296, null)) {
        return [0];
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2302 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_item, 1])[0];
        if (lua_eq(_kupoleItemLv_2302, null)) {
          _lv_2296 = _lv_2296;
        } else if (lua_lt(0, _kupoleItemLv_2302)) {
          _lv_2296 = _kupoleItemLv_2302;
        }
      }
      var _pcBangItemLevel_2296 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_item])[0];
      if (!lua_eq(_pcBangItemLevel_2296, null)) {
        _lv_2296 = _pcBangItemLevel_2296;
      }
      var _itemstring_2296 = lua_call(G.str['TryGetProp'], [_item, 'StringArg', 'None'])[0];
      if (lua_eq(_itemstring_2296, 'Growth_Item')) {
        var _grothItem_2306 = lua_call(G.str['CALC_GROWTH_ITEM_LEVEL'], [_item])[0];
        if (!lua_eq(_grothItem_2306, null)) {
          _lv_2296 = _grothItem_2306;
        }
      }
      var _classType_2296 = lua_call(G.str['TryGetProp'], [_item, "ClassType"])[0];
      if (lua_eq(_classType_2296, null)) {
        return [0];
      }
      var _grade_2296 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      if (lua_eq(_grade_2296, null)) {
        return [0];
      }
      tmp = lua_call(G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'], [_item, _lv_2296, _grade_2296, _reinforceValue_2296]); _lv_2296 = tmp[0]; _grade_2296 = tmp[1]; _reinforceValue_2296 = tmp[2]; tmp = null;
      var _gradeRatio_2296 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2296, "ReinforceRatio"])[0];
      var _typeRatio_2296;
      if (((lua_eq(_classType_2296, 'Shirt') || lua_eq(_classType_2296, 'Pants')) || lua_eq(_classType_2296, 'Shield'))) {
        _typeRatio_2296 = 3.5;
      } else if ((lua_eq(_classType_2296, 'Gloves') || lua_eq(_classType_2296, 'Boots'))) {
        _typeRatio_2296 = 4.5;
      } else if (lua_eq(_classType_2296, 'Neck')) {
        _typeRatio_2296 = 5.5;
      } else if (lua_eq(_classType_2296, 'Ring')) {
        _typeRatio_2296 = 11;
      } else {
        return [0];
      }
      var _value_2296;
      _reinforceValue_2296 = lua_add(_reinforceValue_2296, _reinfBonusValue);
      _value_2296 = lua_multiply(lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [(lua_add(_reinforceValue_2296, lua_divide((lua_multiply(_lv_2296, (lua_multiply(_reinforceValue_2296, (lua_add(0.12, (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tablegetcall(G.str['math'], 'min', [21, _reinforceValue_2296])[0], 1)), 5)])[0], 0.0225)))))))), _typeRatio_2296)))])[0], 1.25), _gradeRatio_2296);
      if ((lua_eq(_classType_2296, 'Neck') || lua_eq(_classType_2296, 'Ring'))) {
        _value_2296 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [(lua_add(_reinforceValue_2296, lua_divide((lua_multiply(_lv_2296, (lua_multiply(_reinforceValue_2296, (lua_add(0.08, (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tablegetcall(G.str['math'], 'min', [21, _reinforceValue_2296])[0], 1)), 5)])[0], 0.015)))))))), _typeRatio_2296)))])[0], _gradeRatio_2296);
      }
      _value_2296 = lua_add(lua_multiply(_value_2296, (lua_divide(lua_tableget(_item, 'ReinforceRatio'), 100))), _buffValue_2296);
      return lua_call(G.str['SyncFloor'], [_value_2296]);
      return [];
    })
    G.str['GET_BASIC_ATK'] = (function (_item) {
      var tmp;
      var _lv_2316 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2316, null)) {
        return [0];
      }
      var _hiddenLv_2316 = lua_call(G.str['TryGetProp'], [_item, "ItemLv"])[0];
      if (lua_lt(0, _hiddenLv_2316)) {
        _lv_2316 = _hiddenLv_2316;
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2319 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_item, 1])[0];
        if (lua_eq(_kupoleItemLv_2319, null)) {
          _lv_2316 = _lv_2316;
        } else if (lua_lt(0, _kupoleItemLv_2319)) {
          _lv_2316 = _kupoleItemLv_2319;
        }
      }
      var _pcBangItemLevel_2316 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_item])[0];
      if (!lua_eq(_pcBangItemLevel_2316, null)) {
        _lv_2316 = _pcBangItemLevel_2316;
      }
      var _itemstring_2316 = lua_call(G.str['TryGetProp'], [_item, 'StringArg'])[0];
      if (lua_eq(_itemstring_2316, null)) {
        return [];
      }
      if (lua_eq(_itemstring_2316, 'Growth_Item')) {
        var _grothItem_2324 = lua_call(G.str['CALC_GROWTH_ITEM_LEVEL'], [_item])[0];
        if (!lua_eq(_grothItem_2324, null)) {
          _lv_2316 = _grothItem_2324;
        }
      }
      var _grade_2316 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      if (lua_eq(_grade_2316, null)) {
        return [0];
      }
      tmp = lua_call(G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'], [_item, _lv_2316, _grade_2316]); _lv_2316 = tmp[0]; _grade_2316 = tmp[1]; tmp = null;
      var _gradeRatio_2316 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2316, "BasicRatio"])[0];
      var _itemATK_2316 = lua_multiply((lua_add(30, lua_multiply(_lv_2316, 7.5))), _gradeRatio_2316);
      if (lua_eq(_lv_2316, 0)) {
        _itemATK_2316 = 0;
      }
      var _slot_2316 = lua_call(G.str['TryGetProp'], [_item, "DefaultEqpSlot"])[0];
      if (lua_eq(_slot_2316, null)) {
        return [0];
      }
      var _classType_2316 = lua_call(G.str['TryGetProp'], [_item, "ClassType"])[0];
      if (lua_eq(_classType_2316, null)) {
        return [0];
      }
      var _itemGradeClass_2316 = lua_call(G.str['GetClassList'], ['item_grade'])[0];
      if (lua_eq(_itemGradeClass_2316, null)) {
        return [0];
      }
      var _weaponClass_2316 = lua_call(G.str['GetClassByNameFromList'], [_itemGradeClass_2316, 'WeaponClassTypeRatio'])[0];
      if (lua_eq(_weaponClass_2316, null)) {
        return [0];
      }
      var _weaponDamageClass_2316 = lua_call(G.str['GetClassByNameFromList'], [_itemGradeClass_2316, 'WeaponDamageRange'])[0];
      if (lua_eq(_weaponDamageClass_2316, null)) {
        return [0];
      }
      if ((!lua_eq(_itemGradeClass_2316, null) && lua_lt(0, lua_tableget(_weaponClass_2316, _classType_2316)))) {
        _itemATK_2316 = lua_multiply(_itemATK_2316, lua_tableget(_weaponClass_2316, _classType_2316));
      }
      var _damageRange_2316 = lua_tableget(_weaponDamageClass_2316, _classType_2316);
      if (lua_eq(_damageRange_2316, null)) {
        return [0];
      }
      var _maxAtk_2316 = lua_multiply(_itemATK_2316, _damageRange_2316);
      var _minAtk_2316 = lua_multiply(_itemATK_2316, (lua_subtract(2, _damageRange_2316)));
      return [_maxAtk_2316, _minAtk_2316];
      return [];
    })
    G.str['GET_BASIC_MATK'] = (function (_item) {
      var tmp;
      var _grade_2335 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      if (lua_eq(_grade_2335, null)) {
        return [0];
      }
      var _lv_2335 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2335, null)) {
        return [0];
      }
      if (lua_eq(_lv_2335, 0)) {
        G.str['itemATK'] = 0;
      }
      var _hiddenLv_2335 = lua_call(G.str['TryGetProp'], [_item, "ItemLv"])[0];
      if (lua_eq(_hiddenLv_2335, null)) {
        return [0];
      }
      if (lua_lt(0, _hiddenLv_2335)) {
        _lv_2335 = _hiddenLv_2335;
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2341 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_item, 1])[0];
        if (lua_eq(_kupoleItemLv_2341, null)) {
          _lv_2335 = _lv_2335;
        } else if (lua_lt(0, _kupoleItemLv_2341)) {
          _lv_2335 = _kupoleItemLv_2341;
        }
      }
      var _pcBangItemLevel_2335 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_item])[0];
      if (!lua_eq(_pcBangItemLevel_2335, null)) {
        _lv_2335 = _pcBangItemLevel_2335;
      }
      var _itemstring_2335 = lua_call(G.str['TryGetProp'], [_item, 'StringArg'])[0];
      if (lua_eq(_itemstring_2335, 'Growth_Item')) {
        var _grothItem_2345 = lua_call(G.str['CALC_GROWTH_ITEM_LEVEL'], [_item])[0];
        if (!lua_eq(_grothItem_2345, null)) {
          _lv_2335 = _grothItem_2345;
        }
      }
      tmp = lua_call(G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'], [_item, _lv_2335, _grade_2335]); _lv_2335 = tmp[0]; _grade_2335 = tmp[1]; tmp = null;
      var _gradeRatio_2335 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2335, "BasicRatio"])[0];
      var _itemATK_2335 = lua_multiply((lua_add(30, lua_multiply(_lv_2335, 7.5))), _gradeRatio_2335);
      var _classType_2335 = lua_call(G.str['TryGetProp'], [_item, "ClassType"])[0];
      if (lua_eq(_classType_2335, null)) {
        return [0];
      }
      var _itemGradeClass_2335 = lua_call(G.str['GetClassList'], ['item_grade'])[0];
      var _weaponClass_2335 = lua_call(G.str['GetClassByNameFromList'], [_itemGradeClass_2335, 'WeaponClassTypeRatio'])[0];
      if ((!lua_eq(_itemGradeClass_2335, null) && lua_lt(0, lua_tableget(_weaponClass_2335, _classType_2335)))) {
        _itemATK_2335 = lua_multiply(_itemATK_2335, lua_tableget(_weaponClass_2335, _classType_2335));
      }
      return [_itemATK_2335];
      return [];
    })
    G.str['SCR_REFRESH_WEAPON'] = (function (_item, _enchantUpdate, _ignoreReinfAndTranscend, _reinfBonusValue) {
      var tmp;
      if (lua_eq(null, _enchantUpdate)) {
        _enchantUpdate = 0;
      }
      if (lua_eq(_ignoreReinfAndTranscend, null)) {
        _ignoreReinfAndTranscend = 0;
      }
      if (lua_eq(_reinfBonusValue, null)) {
        _reinfBonusValue = 0;
      }
      if (lua_eq(_item, null)) {
        return [];
      }
      var _class_2349 = lua_call(G.str['GetClassByType'], ['Item', lua_tableget(_item, 'ClassID')])[0];
      lua_call(G.str['INIT_WEAPON_PROP'], [_item, _class_2349]);
      lua_tableset(_item, 'Level', lua_call(G.str['GET_ITEM_LEVEL'], [_item])[0]);
      var _star_2349 = lua_tableget(_item, 'ItemStar');
      var _basicTooltipPropList_2349 = lua_call(G.str['StringSplit'], [lua_tableget(_item, 'BasicTooltipProp'), ';'])[0];
      var var_2354 = 1, stop_2354 = lua_assertfloat(lua_len(_basicTooltipPropList_2349));
      for (; var_2354 <= stop_2354; var_2354++) {
        var _i_2354 = var_2354;
        var _basicProp_2355 = lua_tableget(_basicTooltipPropList_2349, _i_2354);
        var _upgradeRatio_2355 = lua_add(1, lua_divide(lua_call(G.str['GET_UPGRADE_ADD_ATK_RATIO'], [_item, _ignoreReinfAndTranscend])[0], 100));
        var _zero_2355 = 0;
        var _buffarg_2355 = 0;
        if (lua_eq(_enchantUpdate, 1)) {
          _buffarg_2355 = lua_call(G.str['GetExProp'], [_item, "Rewards_BuffValue"])[0];
        }
        if (lua_eq(_basicProp_2355, 'ATK')) {
          tmp = lua_call(G.str['GET_BASIC_ATK'], [_item]); lua_tableset(_item, 'MAXATK', tmp[0]); lua_tableset(_item, 'MINATK', tmp[1]); tmp = null;
          var _reinforceAddValueAtk_2357 = lua_call(G.str['GET_REINFORCE_ADD_VALUE_ATK'], [_item, _ignoreReinfAndTranscend, _reinfBonusValue, _basicProp_2355])[0];
          lua_tableset(_item, 'MAXATK', lua_call(G.str['SyncFloor'], [lua_add(lua_add((lua_multiply(lua_tableget(_item, 'MAXATK'), _upgradeRatio_2355)), _buffarg_2355), _reinforceAddValueAtk_2357)])[0]);
          lua_tableset(_item, 'MINATK', lua_call(G.str['SyncFloor'], [lua_add(lua_add((lua_multiply(lua_tableget(_item, 'MINATK'), _upgradeRatio_2355)), _buffarg_2355), _reinforceAddValueAtk_2357)])[0]);
          if (!lua_eq(_zero_2355, lua_tableget(_item, 'MAXATK_AC'))) {
            lua_tableset(_item, 'MAXATK', lua_call(G.str['SyncFloor'], [lua_add(lua_tableget(_item, 'MAXATK'), lua_tableget(_item, 'MAXATK_AC'))])[0]);
          }
          if (!lua_eq(_zero_2355, lua_tableget(_item, 'MINATK_AC'))) {
            lua_tableset(_item, 'MINATK', lua_call(G.str['SyncFloor'], [lua_add(lua_tableget(_item, 'MINATK'), lua_tableget(_item, 'MINATK_AC'))])[0]);
          }
        } else if (lua_eq(_basicProp_2355, 'MATK')) {
          lua_tableset(_item, 'MATK', lua_call(G.str['GET_BASIC_MATK'], [_item])[0]);
          var _reinfAddValueAtk_2360 = lua_call(G.str['GET_REINFORCE_ADD_VALUE_ATK'], [_item, _ignoreReinfAndTranscend, _reinfBonusValue, _basicProp_2355])[0];
          lua_tableset(_item, 'MATK', lua_call(G.str['SyncFloor'], [lua_add(lua_add((lua_multiply(lua_tableget(_item, 'MATK'), _upgradeRatio_2355)), _buffarg_2355), _reinfAddValueAtk_2360)])[0]);
          if (!lua_eq(_zero_2355, lua_tableget(_item, 'MAXATK_AC'))) {
            lua_tableset(_item, 'MATK', lua_add(lua_tableget(_item, 'MATK'), lua_tableget(_item, 'MAXATK_AC')));
          }
        }
      }
      lua_call(G.str['APPLY_OPTION_SOCKET'], [_item]);
      lua_call(G.str['APPLY_AWAKEN'], [_item]);
      lua_call(G.str['APPLY_RANDOM_OPTION'], [_item]);
      lua_call(G.str['APPLY_RARE_RANDOM_OPTION'], [_item]);
      lua_call(G.str['MAKE_ITEM_OPTION_BY_OPTION_SOCKET'], [_item]);
      return [];
    })
    G.str['SCR_REFRESH_ARMOR'] = (function (_item, _enchantUpdate, _ignoreReinfAndTranscend, _reinfBonusValue) {
      var tmp;
      if (lua_eq(_enchantUpdate, null)) {
        _enchantUpdate = 0;
      }
      if (lua_eq(_ignoreReinfAndTranscend, null)) {
        _ignoreReinfAndTranscend = 0;
      }
      if (lua_eq(_reinfBonusValue, null)) {
        _reinfBonusValue = 0;
      }
      var _class_2362 = lua_call(G.str['GetClassByType'], ['Item', lua_tableget(_item, 'ClassID')])[0];
      lua_call(G.str['INIT_ARMOR_PROP'], [_item, _class_2362]);
      var _lv_2362 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2362, null)) {
        return [0];
      }
      var _hiddenLv_2362 = lua_call(G.str['TryGetProp'], [_item, "ItemLv"])[0];
      if (lua_eq(_hiddenLv_2362, null)) {
        return [0];
      }
      if (lua_lt(0, _hiddenLv_2362)) {
        _lv_2362 = _hiddenLv_2362;
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2369 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_item, 1])[0];
        if (lua_eq(_kupoleItemLv_2369, null)) {
          _lv_2362 = _lv_2362;
        } else if (lua_lt(0, _kupoleItemLv_2369)) {
          _lv_2362 = _kupoleItemLv_2369;
        }
      }
      var _pcBangItemLevel_2362 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_item])[0];
      if (!lua_eq(_pcBangItemLevel_2362, null)) {
        _lv_2362 = _pcBangItemLevel_2362;
      }
      var _itemstring_2362 = lua_call(G.str['TryGetProp'], [_item, 'StringArg'])[0];
      if (lua_eq(_itemstring_2362, null)) {
        return [];
      }
      if (lua_eq(_itemstring_2362, 'Growth_Item')) {
        var _grothItem_2374 = lua_call(G.str['CALC_GROWTH_ITEM_LEVEL'], [_item])[0];
        if (!lua_eq(_grothItem_2374, null)) {
          _lv_2362 = _grothItem_2374;
        }
      }
      var _grade_2362 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      if (lua_eq(_grade_2362, null)) {
        return [0];
      }
      tmp = lua_call(G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'], [_item, _lv_2362, _grade_2362]); _lv_2362 = tmp[0]; _grade_2362 = tmp[1]; tmp = null;
      var _gradeRatio_2362 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2362, "BasicRatio"])[0];
      var _buffarg_2362 = 0;
      if (lua_eq(_enchantUpdate, 1)) {
        _buffarg_2362 = lua_call(G.str['GetExProp'], [_item, "Rewards_BuffValue"])[0];
      }
      var _equipMaterial_2362 = lua_call(G.str['TryGetProp'], [_item, "Material"])[0];
      if (lua_eq(_equipMaterial_2362, null)) {
        return [0];
      }
      var _classType_2362 = lua_call(G.str['TryGetProp'], [_item, "ClassType"])[0];
      if (lua_eq(_classType_2362, null)) {
        return [0];
      }
      var _itemGradeClass_2362 = lua_call(G.str['GetClassList'], ['item_grade'])[0];
      if (lua_eq(_itemGradeClass_2362, null)) {
        return [0];
      }
      var _basicTooltipPropList_2362 = lua_call(G.str['StringSplit'], [lua_tableget(_item, 'BasicTooltipProp'), ';'])[0];
      var var_2381 = 1, stop_2381 = lua_assertfloat(lua_len(_basicTooltipPropList_2362));
      for (; var_2381 <= stop_2381; var_2381++) {
        var _i_2381 = var_2381;
        var _basicProp_2382 = lua_tableget(_basicTooltipPropList_2362, _i_2381);
        var _upgradeRatio_2382 = 1;
        var _basicDef_2382 = 0;
        var _armorClassTypeRatio_2382 = lua_call(G.str['GetClassByNameFromList'], [_itemGradeClass_2362, 'ArmorClassTypeRatio'])[0];
        if (lua_eq(_classType_2362, null)) {
          lua_tableset(_armorClassTypeRatio_2382, _classType_2362, 0);
        }
        _basicDef_2382 = lua_multiply((lua_multiply((lua_add(40, lua_multiply(_lv_2362, 8))), lua_tableget(_armorClassTypeRatio_2382, _classType_2362))), _gradeRatio_2362);
        _upgradeRatio_2382 = lua_add(_upgradeRatio_2382, lua_divide(lua_call(G.str['GET_UPGRADE_ADD_DEF_RATIO'], [_item, _ignoreReinfAndTranscend])[0], 100));
        var _armorMaterialRatio_2382 = lua_call(G.str['GetClassByNameFromList'], [_itemGradeClass_2362, lua_concat('armorMaterial_', _basicProp_2382)])[0];
        _basicDef_2382 = lua_multiply(_basicDef_2382, lua_tableget(_armorMaterialRatio_2382, _equipMaterial_2362));
        if (lua_lt(_basicDef_2382, 1)) {
          _basicDef_2382 = 1;
        }
        _basicDef_2382 = lua_add(lua_add(lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [_basicDef_2382])[0], _upgradeRatio_2382), lua_call(G.str['GET_REINFORCE_ADD_VALUE'], [_basicProp_2382, _item, _ignoreReinfAndTranscend, _reinfBonusValue])[0]), _buffarg_2362);
        lua_tableset(_item, _basicProp_2382, lua_call(G.str['SyncFloor'], [_basicDef_2382])[0]);
      }
      lua_call(G.str['APPLY_AWAKEN'], [_item]);
      lua_call(G.str['APPLY_RANDOM_OPTION'], [_item]);
      lua_call(G.str['APPLY_RARE_RANDOM_OPTION'], [_item]);
      lua_call(G.str['MAKE_ITEM_OPTION_BY_OPTION_SOCKET'], [_item]);
      return [];
    })
    G.str['SCR_REFRESH_ACC'] = (function (_item, _enchantUpdate, _ignoreReinfAndTranscend, _reinfBonusValue) {
      var tmp;
      if (lua_eq(_enchantUpdate, null)) {
        _enchantUpdate = 0;
      }
      if (lua_eq(_ignoreReinfAndTranscend, null)) {
        _ignoreReinfAndTranscend = 0;
      }
      if (lua_eq(_reinfBonusValue, null)) {
        _reinfBonusValue = 0;
      }
      var _class_2385 = lua_call(G.str['GetClassByType'], ['Item', lua_tableget(_item, 'ClassID')])[0];
      lua_call(G.str['INIT_ARMOR_PROP'], [_item, _class_2385]);
      lua_tableset(_item, 'Level', lua_call(G.str['GET_ITEM_LEVEL'], [_item])[0]);
      var _lv_2385 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2385, null)) {
        return [0];
      }
      var _hiddenLv_2385 = lua_call(G.str['TryGetProp'], [_item, "ItemLv"])[0];
      if (lua_eq(_hiddenLv_2385, null)) {
        return [0];
      }
      if (lua_lt(0, _hiddenLv_2385)) {
        _lv_2385 = _hiddenLv_2385;
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2392 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_item, 1])[0];
        if (lua_eq(_kupoleItemLv_2392, null)) {
          _lv_2385 = _lv_2385;
        } else if (lua_lt(0, _kupoleItemLv_2392)) {
          _lv_2385 = _kupoleItemLv_2392;
        }
      }
      var _pcBangItemLevel_2385 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_item])[0];
      if (!lua_eq(_pcBangItemLevel_2385, null)) {
        _lv_2385 = _pcBangItemLevel_2385;
      }
      var _PropName_2385 = lua_newtable(["ADD_FIRE"]);
      var _changeProp_2385 = lua_newtable();
      var _buffarg_2385 = 0;
      var _grade_2385 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      if (lua_eq(_grade_2385, null)) {
        return [0];
      }
      tmp = lua_call(G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'], [_item, _lv_2385, _grade_2385]); _lv_2385 = tmp[0]; _grade_2385 = tmp[1]; tmp = null;
      if (lua_eq(_enchantUpdate, 1)) {
        _buffarg_2385 = lua_call(G.str['GetExProp'], [_item, "Rewards_BuffValue"])[0];
      }
      var _equipMaterial_2385 = lua_call(G.str['TryGetProp'], [_item, "Material"])[0];
      if (lua_eq(_equipMaterial_2385, null)) {
        return [0];
      }
      var _classType_2385 = lua_call(G.str['TryGetProp'], [_item, "ClassType"])[0];
      if (lua_eq(_classType_2385, null)) {
        return [0];
      }
      var _gradeRatio_2385 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2385, "BasicRatio"])[0];
      var _basicTooltipPropList_2385 = lua_call(G.str['StringSplit'], [lua_tableget(_item, 'BasicTooltipProp'), ';'])[0];
      var var_2400 = 1, stop_2400 = lua_assertfloat(lua_len(_basicTooltipPropList_2385));
      for (; var_2400 <= stop_2400; var_2400++) {
        var _i_2400 = var_2400;
        var _basicProp_2401 = lua_tableget(_basicTooltipPropList_2385, _i_2400);
        if ((lua_eq(_basicProp_2401, 'DEF') || lua_eq(_basicProp_2401, 'MDEF'))) {
          var _itemGradeClass_2402 = lua_call(G.str['GetClassList'], ['item_grade'])[0];
          var _ACCClassTypeRatio_2402 = lua_call(G.str['GetClassByNameFromList'], [_itemGradeClass_2402, 'ACCClassTypeRatio'])[0];
          if ((lua_eq(_ACCClassTypeRatio_2402, null) || lua_eq(_ACCClassTypeRatio_2402, 0))) {
            return [];
          }
          var _accRatio_2402 = lua_tableget(_ACCClassTypeRatio_2402, _classType_2385);
          var _basicDef_2402 = lua_multiply((lua_multiply((lua_add(2, lua_multiply(_lv_2385, 0.3))), _accRatio_2402)), _gradeRatio_2385);
          var _upgradeRatio_2402 = 1;
          _upgradeRatio_2402 = lua_add(_upgradeRatio_2402, lua_divide(lua_call(G.str['GET_UPGRADE_ADD_DEF_RATIO'], [_item, _ignoreReinfAndTranscend])[0], 100));
          _basicDef_2402 = lua_add(lua_add(lua_multiply(_basicDef_2402, _upgradeRatio_2402), lua_call(G.str['GET_REINFORCE_ADD_VALUE'], [_basicProp_2401, _item, _ignoreReinfAndTranscend, _reinfBonusValue])[0]), _buffarg_2385);
          if (lua_lt(_basicDef_2402, 1)) {
            _basicDef_2402 = 1;
          }
          lua_tableset(_item, _basicProp_2401, lua_call(G.str['SyncFloor'], [_basicDef_2402])[0]);
        } else if (lua_eq(_basicProp_2401, 'ADD_FIRE')) {
          lua_tableset(_changeProp_2385, "ADD_FIRE", lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_multiply(_lv_2385, _gradeRatio_2385), lua_call(G.str['GET_REINFORCE_ADD_VALUE'], [_basicProp_2401, _item, _ignoreReinfAndTranscend])[0])])[0]);
          lua_tableset(_changeProp_2385, "ADD_FIRE", lua_call(G.str['SyncFloor'], [lua_tableget(_changeProp_2385, "ADD_FIRE")])[0]);
          var var_2406 = 1, stop_2406 = lua_assertfloat(lua_len(_PropName_2385));
          for (; var_2406 <= stop_2406; var_2406++) {
            var _i_2406 = var_2406;
            if (!lua_eq(lua_tableget(_changeProp_2385, lua_tableget(_PropName_2385, _i_2406)), null)) {
              if (!lua_eq(lua_tableget(_changeProp_2385, lua_tableget(_PropName_2385, _i_2406)), 0)) {
                lua_tableset(_item, lua_tableget(_PropName_2385, _i_2406), lua_call(G.str['SyncFloor'], [lua_tableget(_changeProp_2385, lua_tableget(_PropName_2385, _i_2406))])[0]);
              }
            }
          }
        }
      }
      lua_call(G.str['APPLY_AWAKEN'], [_item]);
      lua_call(G.str['MAKE_ITEM_OPTION_BY_OPTION_SOCKET'], [_item]);
      return [];
    })
    G.str['SCR_REFRESH_GEM'] = (function (_item) {
      var tmp;
      lua_tableset(_item, 'Level', lua_call(G.str['GET_ITEM_LEVEL'], [_item])[0]);
      return [];
    })
    G.str['SCR_REFRESH_CARD'] = (function (_item) {
      var tmp;
      lua_tableset(_item, 'Level', lua_call(G.str['GET_ITEM_LEVEL'], [_item])[0]);
      return [];
    })
    G.str['APPLY_OPTION_SOCKET'] = (function (_item) {
      var tmp;
      var _nextSlotIdx_2412 = lua_call(G.str['GET_NEXT_SOCKET_SLOT_INDEX'], [_item])[0];
      if (lua_eq(_nextSlotIdx_2412, 0)) {
        return [];
      }
      var _invItem_2412;
      if (lua_eq(lua_call(G.str['IsServerSection'], [])[0], 0)) {
        _invItem_2412 = lua_call(G.str['GET_INV_ITEM_BY_ITEM_OBJ'], [_item])[0];
        if (lua_eq(_invItem_2412, null)) {
          return [];
        }
      }
      var var_2416 = 0, stop_2416 = lua_assertfloat(lua_subtract(_nextSlotIdx_2412, 1));
      for (; var_2416 <= stop_2416; var_2416++) {
        var _i_2416 = var_2416;
        var _runeID_2417;
        if (!lua_eq(_invItem_2412, null)) {
          _runeID_2417 = lua_mcall(_invItem_2412, 'GetEquipGemID', [_i_2416])[0];
        } else {
          _runeID_2417 = lua_call(G.str['GetItemSocketInfo'], [_item, _i_2416])[0];
        }
        if ((!lua_eq(_runeID_2417, null) && lua_lt(0, _runeID_2417))) {
          var _runeItem_2420 = lua_call(G.str['GetClassByType'], ['Item', _runeID_2417])[0];
          if (!lua_eq(_runeItem_2420, null)) {
            if ((!lua_eq(lua_tableget(_runeItem_2420, 'StringArg'), 'None') && !lua_eq(_item, null))) {
              var _func_2422 = lua_tableget(G.str['_G'], lua_tableget(_runeItem_2420, 'StringArg'));
              if (!lua_eq(_func_2422, null)) {
                lua_call(_func_2422, [_item, lua_tableget(_runeItem_2420, 'NumberArg1'), lua_tableget(_runeItem_2420, 'NumberArg2')]);
              }
            }
          }
        }
      }
      _nextSlotIdx_2412 = lua_call(G.str['GET_OPTION_CNT'], [_item])[0];
      var var_2424 = 0, stop_2424 = lua_assertfloat(lua_subtract(_nextSlotIdx_2412, 1));
      for (; var_2424 <= stop_2424; var_2424++) {
        var _i_2424 = var_2424;
        var _optDur_2425 = lua_tableget(_item, lua_concat("OpDur_", _i_2424));
        if (lua_lt(0, _optDur_2425)) {
          var _Opt_2426 = lua_call(G.str['TryGetProp'], [_item, lua_concat('Option_', _i_2424)])[0];
          var _OptType_2426 = lua_call(G.str['OPT_TYPE'], [_Opt_2426])[0];
          var _OptValue_2426 = lua_call(G.str['OPT_VALUE'], [_Opt_2426])[0];
          var _cls_2426 = lua_call(G.str['GetClassByType'], ['Option', _OptType_2426])[0];
          var _scpname_2426 = lua_tableget(_cls_2426, 'Script');
          if (!lua_eq(_scpname_2426, "None")) {
            var _optionscp_2427 = lua_tableget(G.str['_G'], _scpname_2426);
            lua_call(_optionscp_2427, [_item, _OptValue_2426]);
          }
        }
      }
      return [];
    })
    G.str['SCR_REFRESH_HAIRACC'] = (function (_item) {
      var tmp;
      var _class_2428 = lua_call(G.str['GetClassByType'], ['Item', lua_tableget(_item, 'ClassID')])[0];
      lua_call(G.str['INIT_ARMOR_PROP'], [_item, _class_2428]);
      var var_2429 = 1, stop_2429 = 3;
      for (; var_2429 <= stop_2429; var_2429++) {
        var _i_2429 = var_2429;
        var _propName_2430 = lua_concat("HatPropName_", _i_2429);
        var _propValue_2430 = lua_concat("HatPropValue_", _i_2429);
        var _getProp_2430 = lua_call(G.str['TryGetProp'], [_item, _propName_2430])[0];
        if (((!lua_eq(_getProp_2430, null) && !lua_eq(lua_tableget(_item, _propValue_2430), 0)) && !lua_eq(lua_tableget(_item, _propName_2430), "None"))) {
          var _prop_2431 = lua_tableget(_item, _propName_2430);
          var _propData_2431 = lua_tableget(_item, _prop_2431);
          lua_tableset(_item, _prop_2431, lua_add(_propData_2431, lua_tableget(_item, _propValue_2430)));
        }
      }
      return [];
    })
    G.str['APPLY_RANDOM_OPTION'] = (function (_item) {
      var tmp;
      var var_2433 = 1, stop_2433 = 6;
      for (; var_2433 <= stop_2433; var_2433++) {
        var _i_2433 = var_2433;
        var _propName_2434 = lua_concat("RandomOption_", _i_2433);
        var _propValue_2434 = lua_concat("RandomOptionValue_", _i_2433);
        var _getProp_2434 = lua_call(G.str['TryGetProp'], [_item, _propName_2434])[0];
        if (((!lua_eq(_getProp_2434, null) && !lua_eq(lua_tableget(_item, _propValue_2434), 0)) && !lua_eq(lua_tableget(_item, _propName_2434), "None"))) {
          var _prop_2435 = lua_tableget(_item, _propName_2434);
          var _propData_2435 = lua_tableget(_item, _prop_2435);
          lua_tableset(_item, _prop_2435, lua_add(_propData_2435, lua_tableget(_item, _propValue_2434)));
        }
      }
      return [];
    })
    G.str['APPLY_RARE_RANDOM_OPTION'] = (function (_item) {
      var tmp;
      var _propName_2436 = "RandomOptionRare";
      var _propValue_2436 = "RandomOptionRareValue";
      var _getProp_2436 = lua_call(G.str['TryGetProp'], [_item, _propName_2436])[0];
      if (((!lua_eq(_getProp_2436, null) && !lua_eq(lua_tableget(_item, _propValue_2436), 0)) && !lua_eq(lua_tableget(_item, _propName_2436), "None"))) {
        var _prop_2437 = lua_tableget(_item, _propName_2436);
        var _propData_2437 = lua_tableget(_item, _prop_2437);
        lua_tableset(_item, _prop_2437, lua_add(_propData_2437, lua_tableget(_item, _propValue_2436)));
      }
      return [];
    })
    G.str['APPLY_AWAKEN'] = (function (_item) {
      var tmp;
      if (!lua_eq(lua_tableget(_item, 'IsAwaken'), 1)) {
        return [];
      }
      var _hiddenProp_2438 = lua_tableget(_item, 'HiddenProp');
      lua_tableset(_item, _hiddenProp_2438, lua_add(lua_tableget(_item, _hiddenProp_2438), lua_tableget(_item, 'HiddenPropValue')));
      return [];
    })
    G.str['SCR_ENTER_AQUA'] = (function (_item, _arg1, _arg2) {
      var tmp;
      lua_tableset(_item, 'STR', lua_add(lua_tableget(_item, 'STR'), _arg1));
      return [];
    })
    G.str['SCR_ENTER_TOPAZ'] = (function (_item, _arg1, _arg2) {
      var tmp;
      lua_tableset(_item, 'DEX', lua_add(lua_tableget(_item, 'DEX'), _arg1));
      return [];
    })
    G.str['SCR_ENTER_RUBY'] = (function (_item, _arg1, _arg2) {
      var tmp;
      lua_tableset(_item, 'CON', lua_add(lua_tableget(_item, 'CON'), _arg1));
      return [];
    })
    G.str['SCR_ENTER_PERI'] = (function (_item, _arg1, _arg2) {
      var tmp;
      lua_tableset(_item, 'INT', lua_add(lua_tableget(_item, 'INT'), _arg1));
      return [];
    })
    G.str['SCR_OPT_ATK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'MINATK', lua_add(lua_tableget(_item, 'MINATK'), _optvalue));
      lua_tableset(_item, 'MAXATK', lua_add(lua_tableget(_item, 'MAXATK'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_SR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'SR', lua_add(lua_tableget(_item, 'SR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_DEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'DEF', lua_add(lua_tableget(_item, 'DEF'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RR', lua_add(lua_tableget(_item, 'RR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_Aries'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'Aries', lua_add(lua_tableget(_item, 'Aries'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_AriesDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'AriesDEF', lua_add(lua_tableget(_item, 'AriesDEF'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_Slash'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'Slash', lua_add(lua_tableget(_item, 'Slash'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_SlashDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'SlashDEF', lua_add(lua_tableget(_item, 'SlashDEF'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_Strike'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'Strike', lua_add(lua_tableget(_item, 'Strike'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_StrikeDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'StrikeDEF', lua_add(lua_tableget(_item, 'StrikeDEF'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_CRTHR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'CRTHR', lua_add(lua_tableget(_item, 'CRTHR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_StunRate'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'StunRate', lua_add(lua_tableget(_item, 'StunRate'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_KDBonus'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'KDBonusDamage', lua_add(lua_tableget(_item, 'KDBonusDamage'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_CRTDR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'CRTDR', lua_add(lua_tableget(_item, 'CRTDR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_STR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'STR', lua_add(lua_tableget(_item, 'STR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_DEX'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'DEX', lua_add(lua_tableget(_item, 'DEX'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_CON'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'CON', lua_add(lua_tableget(_item, 'CON'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_INT'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'INT', lua_add(lua_tableget(_item, 'INT'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_CRTATK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'CRTATK', lua_add(lua_tableget(_item, 'CRTATK'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_CRTDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'CRTDEF', lua_add(lua_tableget(_item, 'CRTDEF'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_HR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'HR', lua_add(lua_tableget(_item, 'HR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_DR'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'DR', lua_add(lua_tableget(_item, 'DR'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_MGP'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'MGP', lua_add(lua_tableget(_item, 'MGP'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_MHP'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'MHP', lua_add(lua_tableget(_item, 'MHP'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_MSP'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'MSP', lua_add(lua_tableget(_item, 'MSP'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RHP'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RHP', lua_add(lua_tableget(_item, 'RHP'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RSP'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RSP', lua_add(lua_tableget(_item, 'RSP'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDFIRE'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_FIRE', lua_add(lua_tableget(_item, 'ADD_FIRE'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESFIRE'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_FIRE', lua_add(lua_tableget(_item, 'RES_FIRE'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDICE'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_ICE', lua_add(lua_tableget(_item, 'ADD_ICE'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESICE'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_ICE', lua_add(lua_tableget(_item, 'RES_ICE'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDLIGHTNING'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_LIGHTNING', lua_add(lua_tableget(_item, 'ADD_LIGHTNING'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESLIGHTNING'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_LIGHTNING', lua_add(lua_tableget(_item, 'RES_LIGHTNING'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDSOUL'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_SOUL', lua_add(lua_tableget(_item, 'ADD_SOUL'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESSOUL'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_SOUL', lua_add(lua_tableget(_item, 'RES_SOUL'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDEARTH'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_EARTH', lua_add(lua_tableget(_item, 'ADD_EARTH'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESEARTH'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_EARTH', lua_add(lua_tableget(_item, 'RES_EARTH'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDPOISON'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_POISON', lua_add(lua_tableget(_item, 'ADD_POISON'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESPOISON'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_POISON', lua_add(lua_tableget(_item, 'RES_POISON'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDLIGHT'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_LIGHT', lua_add(lua_tableget(_item, 'ADD_LIGHT'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESLIGHT'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_LIGHT', lua_add(lua_tableget(_item, 'RES_LIGHT'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ADDDARK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ADD_DARK', lua_add(lua_tableget(_item, 'ADD_DARK'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_RESDARK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'RES_DARK', lua_add(lua_tableget(_item, 'RES_DARK'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_VelniasATK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'VelniasATK', lua_add(lua_tableget(_item, 'ADD_VELNIAS'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_VelniasDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'VelniasDEF', lua_add(lua_tableget(_item, 'RES_VELNIAS'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ForesterATK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ForesterATK', lua_add(lua_tableget(_item, 'ADD_FORESTER'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ForesterDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ForesterDEF', lua_add(lua_tableget(_item, 'RES_FORESTER'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ParamuneATK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ParamuneATK', lua_add(lua_tableget(_item, 'ADD_PARAMUNE'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_ParamuneDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'ParamuneDEF', lua_add(lua_tableget(_item, 'RES_PARAMUNE'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_WidlingATK'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'WidlingATK', lua_add(lua_tableget(_item, 'ADD_WIDLING'), _optvalue));
      return [];
    })
    G.str['SCR_OPT_WidlingDEF'] = (function (_item, _optvalue) {
      var tmp;
      lua_tableset(_item, 'WidlingDEF', lua_add(lua_tableget(_item, 'RES_WIDLING'), _optvalue));
      return [];
    })
    G.str['OPT_CONSUME'] = (function (_optValue, _skillResult) {
      var tmp;
      return [1];
      return [];
    })
    G.str['OPT_CRITICAL'] = (function (_optValue, _skillResult) {
      var tmp;
      var _resultType_2496 = lua_mcall(_skillResult, 'GetResultType', [])[0];
      if (lua_eq(_resultType_2496, 3)) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['GET_REINFORCE_SEC'] = (function (_item, _reinforce) {
      var tmp;
      var _itemrank_weight_2498;
      var _reinforce_sec_2498;
      var _itemrank_num_2498 = lua_tableget(_item, 'ItemStar');
      if (lua_lt(_itemrank_num_2498, 2)) {
        _itemrank_weight_2498 = 2.5;
      } else {
        _itemrank_weight_2498 = 3.5;
      }
      _reinforce_sec_2498 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_power((lua_add(lua_tableget(_item, 'Reinforce'), 1)), _itemrank_weight_2498)), lua_tableget(_item, 'UseLv'))])[0];
      if (lua_eq(_reinforce_sec_2498, 0)) {
        _reinforce_sec_2498 = 1;
      }
      return [_reinforce_sec_2498];
      return [];
    })
    G.str['GET_ITEM_REINF_REMAIN_TIME'] = (function (_pc, _item, _startTime, _sysTime) {
      var tmp;
      var _reinSec_2502 = lua_call(G.str['GET_REINFORCE_SEC'], [_item, lua_tableget(_item, 'Reinforce')])[0];
      var _endTime_2502 = lua_tablegetcall(G.str['imcTime'], 'AddSec', [_startTime, _reinSec_2502])[0];
      var _remainSec_2502 = lua_tablegetcall(G.str['imcTime'], 'GetIntDifSec', [_endTime_2502, _sysTime])[0];
      var _perc_2502 = lua_divide(lua_multiply((lua_subtract(_reinSec_2502, _remainSec_2502)), 100), lua_tablegetcall(G.str['math'], 'abs', [_reinSec_2502])[0]);
      return [_remainSec_2502].concat(lua_tablegetcall(G.str['math'], 'max', [_perc_2502, 0]));
      return [];
    })
    G.str['GET_REINFORCE_PR'] = (function (_obj) {
      var tmp;
      return [lua_tableget(_obj, 'PR')];
      return [];
    })
    G.str['GET_APPRAISAL_PRICE'] = (function (_item, _SellPrice, _taxRate) {
      var tmp;
      var _lv_2504 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      var _grade_2504 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      var _priceRatio_2504 = 10;
      if (lua_eq(_lv_2504, null)) {
        return [0];
      }
      if (lua_eq(_SellPrice, null)) {
        if (lua_lte(_grade_2504, 2)) {
          _SellPrice = lua_multiply(_lv_2504, _priceRatio_2504);
        } else if (lua_lt(2, _grade_2504)) {
          _SellPrice = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_multiply(_lv_2504, _priceRatio_2504)), 1.5)])[0];
        } else {
          return [];
        }
      }
      if (!lua_eq(_taxRate, null)) {
        _SellPrice = lua_call(G.str['tonumber'], lua_call(G.str['CALC_PRICE_WITH_TAX_RATE'], [_SellPrice, _taxRate]))[0];
      }
      return [_SellPrice];
      return [];
    })
    G.str['GET_DECOMPOSE_PRICE'] = (function (_item, _taxRate) {
      var tmp;
      var _lv_2511 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      var _itemGradeRatio_2511 = lua_newtable([75, 50, 35, 20]);
      var _grade_2511 = lua_call(G.str['TryGetProp'], [_item, "ItemGrade"])[0];
      var _price_2511 = 0;
      if (lua_eq(_lv_2511, null)) {
        return [];
      }
      _price_2511 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_add(1, (lua_divide(_lv_2511, lua_tableget(_itemGradeRatio_2511, _grade_2511))))])[0], 100);
      if (!lua_eq(_taxRate, null)) {
        _price_2511 = lua_call(G.str['tonumber'], lua_call(G.str['CALC_PRICE_WITH_TAX_RATE'], [_price_2511, _taxRate]))[0];
      }
      return [_price_2511];
      return [];
    })
    G.str['GET_REPAIR_PRICE'] = (function (_item, _fillValue, _taxRate) {
      var tmp;
      var _reinforceCount_2514 = lua_call(G.str['TryGetProp'], [_item, "Reinforce_2"])[0];
      if (lua_eq(_reinforceCount_2514, null)) {
        return [0];
      }
      var _transcendCount_2514 = lua_call(G.str['TryGetProp'], [_item, "Transcend"])[0];
      if (lua_eq(_transcendCount_2514, null)) {
        return [0];
      }
      var _lv_2514 = lua_call(G.str['TryGetProp'], [_item, "UseLv"])[0];
      if (lua_eq(_lv_2514, null)) {
        return [0];
      }
      var _priceRatio_2514 = lua_divide(lua_tableget(_item, 'RepairPriceRatio'), 100);
      var _price_2514 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
      var _value_2514;
      if ((lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'RH') || lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'RH LH'))) {
        if (lua_eq(lua_tableget(_item, 'DBLHand'), 'YES')) {
          var _stat_weapon_2519 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
          _value_2514 = lua_tableget(_stat_weapon_2519, 'RepairPrice_THWeapon');
        } else {
          var _stat_weapon_2520 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
          _value_2514 = lua_tableget(_stat_weapon_2520, 'RepairPrice_Weapon');
        }
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'LH')) {
        var _stat_weapon_2521 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2521, 'RepairPrice_SubWeapon');
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'SHIRT')) {
        var _stat_weapon_2522 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2522, 'RepairPrice_SHIRT');
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'PANTS')) {
        var _stat_weapon_2523 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2523, 'RepairPrice_PANTS');
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'GLOVES')) {
        var _stat_weapon_2524 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2524, 'RepairPrice_GLOVES');
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'BOOTS')) {
        var _stat_weapon_2525 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2525, 'RepairPrice_BOOTS');
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'NECK')) {
        var _stat_weapon_2526 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2526, 'RepairPrice_NECK');
      } else if (lua_eq(lua_tableget(_item, 'DefaultEqpSlot'), 'RING')) {
        var _stat_weapon_2527 = lua_call(G.str['GetClassByType'], ["Stat_Weapon", _lv_2514])[0];
        _value_2514 = lua_tableget(_stat_weapon_2527, 'RepairPrice_RING');
      }
      var _reinforceRatio_2514 = (lua_multiply(0.01, _reinforceCount_2514));
      var _transcendRatio_2514 = (lua_multiply(0.1, _transcendCount_2514));
      _value_2514 = lua_multiply(lua_multiply(lua_multiply(_value_2514, _priceRatio_2514), (lua_add(1, lua_multiply((lua_subtract(lua_tableget(_item, 'ItemGrade'), 1)), 0.1)))), (lua_add(lua_add(1, _reinforceRatio_2514), _transcendRatio_2514)));
      _value_2514 = lua_tablegetcall(G.str['math'], 'floor', [_value_2514])[0];
      if (!lua_eq(_taxRate, null)) {
        _value_2514 = lua_call(G.str['tonumber'], lua_call(G.str['CALC_PRICE_WITH_TAX_RATE'], [_value_2514, _taxRate]))[0];
      }
      return [_value_2514];
      return [];
    })
    G.str['GET_REPAIR_PRICE_BY_RANK'] = (function (_item, _fillValue) {
      var tmp;
      var _itemrank_num_2529 = lua_tableget(_item, 'ItemStar');
      var _fee_2529 = lua_divide(lua_multiply(lua_multiply(_itemrank_num_2529, lua_tableget(_item, 'Price')), _fillValue), 10000);
      return lua_tablegetcall(G.str['math'], 'ceil', [_fee_2529]);
      return [];
    })
    G.str['GET_ROP1_PRICE'] = (function (_item, _fillValue) {
      var tmp;
      var _fee_2530 = lua_divide(lua_multiply(lua_tableget(_item, 'Price'), _fillValue), 10000);
      return lua_tablegetcall(G.str['math'], 'ceil', [_fee_2530]);
      return [];
    })
    G.str['GET_ROP2_PRICE'] = (function (_item, _fillValue) {
      var tmp;
      var _fee_2531 = lua_divide(lua_multiply(lua_tableget(_item, 'Price'), _fillValue), 10000);
      return lua_tablegetcall(G.str['math'], 'ceil', [_fee_2531]);
      return [];
    })
    G.str['GET_OP_REFILL_PRICE'] = (function (_item, _fillValue) {
      var tmp;
      var _fee_2532 = lua_multiply(lua_multiply(lua_tableget(_item, 'Price'), _fillValue), 0.1);
      return lua_tablegetcall(G.str['math'], 'ceil', [_fee_2532]);
      return [];
    })
    G.str['IS_NEED_REPAIR'] = (function (_item) {
      var tmp;
      if (lua_lt(0, lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tableget(_item, 'MaxDur'), lua_tableget(_item, 'Dur'))), lua_call(G.str['DUR_DIV'], [])[0])])[0])) {
        return [1];
      }
      if (lua_lt(0, lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tableget(_item, 'MROp1'), lua_tableget(_item, 'ROp1'))), lua_call(G.str['DUR_DIV'], [])[0])])[0])) {
        return [1];
      }
      if (lua_lt(0, lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tableget(_item, 'MROp2'), lua_tableget(_item, 'ROp2'))), lua_call(G.str['DUR_DIV'], [])[0])])[0])) {
        return [1];
      }
      var _optCnt_2533 = lua_call(G.str['GET_OPTION_CNT'], [_item])[0];
      var var_2537 = 0, stop_2537 = lua_assertfloat(lua_subtract(_optCnt_2533, 1));
      for (; var_2537 <= stop_2537; var_2537++) {
        var _i_2537 = var_2537;
        if (lua_lt(lua_tableget(_item, lua_concat("OpDur_", _i_2537)), lua_tableget(_item, lua_concat("OpMDur_", _i_2537)))) {
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['GET_AUCTION_START_PRICE'] = (function (_item) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'max', [1, lua_tableget(_item, 'SellPrice')]);
      return [];
    })
    G.str['GET_AUCTION_INCR_PRICE'] = (function (_item) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'ceil', [1, lua_divide(lua_tableget(_item, 'SellPrice'), 10)]);
      return [];
    })
    G.str['GET_MAGICAMULET_EMPTY_SOCKET_INDEX'] = (function (_invitem) {
      var tmp;
      if (!lua_eq(lua_tableget(_invitem, 'ItemType'), 'Equip')) {
        return [0];
      }
      var var_2544 = 0, stop_2544 = lua_assertfloat(lua_subtract(lua_tableget(_invitem, 'MaxSocket_MA'), 1));
      for (; var_2544 <= stop_2544; var_2544++) {
        var _i_2544 = var_2544;
        var _val_2545 = lua_call(G.str['GetIESProp'], [_invitem, lua_concat("MagicAmulet_", _i_2544)])[0];
        if (lua_eq(_val_2545, 0)) {
          return [_i_2544];
        }
      }
      return [-1];
      return [];
    })
    G.str['GET_NEXT_SOCKET_SLOT_INDEX'] = (function (_item) {
      var tmp;
      if (!lua_eq(lua_tableget(_item, 'ItemType'), 'Equip')) {
        return [0];
      }
      var _invitem_2547 = null;
      if (lua_eq(lua_call(G.str['IsServerSection'], [])[0], 0)) {
        var _guid_2549 = lua_call(G.str['GetIESID'], [_item])[0];
        if (lua_eq(_guid_2549, null)) {
          return [0];
        }
        _invitem_2547 = lua_call(G.str['GET_PC_ITEM_BY_GUID'], [_guid_2549])[0];
        if (lua_eq(_invitem_2547, null)) {
          return [0];
        }
      }
      var var_2552 = 0, stop_2552 = lua_assertfloat(lua_subtract(G.str['SKT_COUNT'], 1));
      for (; var_2552 <= stop_2552; var_2552++) {
        var _i_2552 = var_2552;
        if (lua_eq(lua_call(G.str['IsServerSection'], [])[0], 1)) {
          if (lua_eq(lua_call(G.str['GetItemSocketInfo'], [_item, _i_2552])[0], null)) {
            return [_i_2552];
          }
        } else {
          if (lua_eq(lua_mcall(_invitem_2547, 'IsAvailableSocket', [_i_2552])[0], false)) {
            return [_i_2552];
          }
        }
      }
      return [G.str['SKT_COUNT']];
      return [];
    })
    G.str['GET_OPTION_CNT'] = (function (_invitem) {
      var tmp;
      if (!lua_eq(lua_tableget(_invitem, 'ItemType'), "Equip")) {
        return [0];
      }
      var var_2560 = 0, stop_2560 = lua_assertfloat(lua_subtract(G.str['OPT_COUNT'], 1));
      for (; var_2560 <= stop_2560; var_2560++) {
        var _i_2560 = var_2560;
        var _val_2561 = lua_call(G.str['GetIESProp'], [_invitem, lua_concat("Option_", _i_2560)])[0];
        if (lua_eq(_val_2561, 0)) {
          return [_i_2560];
        }
      }
      return [G.str['OPT_COUNT']];
      return [];
    })
    G.str['GET_OPTION_TARGET_INDEX'] = (function (_invitem, _optclass) {
      var tmp;
      var _clsID_2563 = lua_tableget(_optclass, 'ClassID');
      var _maxidx_2563 = lua_subtract(lua_tableget(_invitem, 'MaxOption'), 1);
      var var_2564 = 0, stop_2564 = lua_assertfloat(_maxidx_2563);
      for (; var_2564 <= stop_2564; var_2564++) {
        var _i_2564 = var_2564;
        var _val_2565 = lua_tableget(_invitem, lua_concat("Option_", _i_2564));
        if (lua_eq(_val_2565, 0)) {
          return [_i_2564];
        }
      }
      return [-1];
      return [];
    })
    G.str['SOCKET_MAX'] = 10000;
    G.str['OPT_MAX'] = 10000;
    G.str['BASIC_SOCKET'] = (function (_type) {
      var tmp;
      return [lua_mod(_type, G.str['SOCKET_MAX'])];
      return [];
    })
    G.str['CUR_SOCKET'] = (function (_type) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_type, G.str['SOCKET_MAX'])]);
      return [];
    })
    G.str['GET_OPT'] = (function (_item, _index) {
      var tmp;
      var _optionValue_2569 = lua_tableget(_item, lua_concat("Option_", _index));
      var _opttype_2569 = lua_call(G.str['OPT_TYPE'], [_optionValue_2569])[0];
      var _optvalue_2569 = lua_call(G.str['OPT_VALUE'], [_optionValue_2569])[0];
      var _class_2569 = lua_call(G.str['GetClassByType'], ["Option", _opttype_2569])[0];
      return [_opttype_2569, _optvalue_2569, _class_2569];
      return [];
    })
    G.str['OPT_TYPE'] = (function (_type) {
      var tmp;
      return [lua_mod(_type, G.str['OPT_MAX'])];
      return [];
    })
    G.str['OPT_VALUE'] = (function (_type) {
      var tmp;
      return lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_type, G.str['OPT_MAX'])]);
      return [];
    })
    G.str['IS_EQUIPITEM'] = (function (_ItemClassName) {
      var tmp;
      var _itemObj_2572 = lua_call(G.str['GetClass'], ["Item", _ItemClassName])[0];
      if ((!lua_eq(_itemObj_2572, null) && lua_eq(lua_tableget(_itemObj_2572, 'ItemType'), 'Equip'))) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['IS_PERSONAL_SHOP_TRADABLE'] = (function (_itemCls) {
      var tmp;
      if (lua_eq(lua_tableget(_itemCls, 'GroupName'), "Premium")) {
        return [0];
      }
      var _itemProp_2574 = lua_tablegetcall(G.str['geItemTable'], 'GetPropByName', [lua_tableget(_itemCls, 'ClassName')])[0];
      if ((lua_eq(lua_mcall(_itemProp_2574, 'IsEnableUserTrade', [])[0], false) || lua_eq(lua_tableget(_itemCls, 'ItemType'), "Equip"))) {
        return [0];
      }
      if ((lua_eq(lua_tableget(_itemCls, 'ClassName'), 'Default_Recipe') || lua_eq(lua_call(G.str['IS_SKILL_SCROLL_ITEM'], [_itemCls])[0], 1))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_GET_ITEM_COOLDOWN'] = (function (_item) {
      var tmp;
      return [lua_tableget(_item, 'ItemCoolDown')];
      return [];
    })
    G.str['SCR_GET_HASTE_COOLDOWN'] = (function (_item) {
      var tmp;
      return [lua_tableget(_item, 'ItemCoolDown')];
      return [];
    })
    G.str['SCR_GET_STA_COOLDOWN'] = (function (_item) {
      var tmp;
      return [lua_tableget(_item, 'ItemCoolDown')];
      return [];
    })
    G.str['SCR_GET_HP_COOLDOWN'] = (function (_item) {
      var tmp;
      var _owner_2581 = lua_call(G.str['GetItemOwner'], [_item])[0];
      var _iscolonyzone_2581 = lua_call(G.str['IsJoinColonyWarMap'], [_owner_2581])[0];
      if (lua_eq(_iscolonyzone_2581, 1)) {
        if (lua_eq(lua_tableget(_item, 'CoolDownGroup'), "HPPOTION_TP")) {
          var _colonyCoolDown_2583 = lua_call(G.str['SCR_GET_COLONY_POTION_TP_COOLDOWN'], [_item])[0];
          if ((!lua_eq(_colonyCoolDown_2583, 0) && !lua_eq(_colonyCoolDown_2583, null))) {
            return [_colonyCoolDown_2583];
          } else {
            return [lua_tableget(_item, 'ItemCoolDown')];
          }
        }
      }
      return [lua_tableget(_item, 'ItemCoolDown')];
      return [];
    })
    G.str['SCR_GET_HPSP_COOLDOWN'] = (function (_item) {
      var tmp;
      return [lua_tableget(_item, 'ItemCoolDown')];
      return [];
    })
    G.str['SCR_GET_SP_COOLDOWN'] = (function (_item) {
      var tmp;
      var _owner_2587 = lua_call(G.str['GetItemOwner'], [_item])[0];
      var _iscolonyzone_2587 = lua_call(G.str['IsJoinColonyWarMap'], [_owner_2587])[0];
      if (lua_eq(_iscolonyzone_2587, 1)) {
        if (lua_eq(lua_tableget(_item, 'CoolDownGroup'), "SPPOTION_TP")) {
          var _colonyCoolDown_2589 = lua_call(G.str['SCR_GET_COLONY_POTION_TP_COOLDOWN'], [_item])[0];
          if ((!lua_eq(_colonyCoolDown_2589, 0) && !lua_eq(_colonyCoolDown_2589, null))) {
            return [_colonyCoolDown_2589];
          } else {
            return [lua_tableget(_item, 'ItemCoolDown')];
          }
        }
      }
      return [lua_tableget(_item, 'ItemCoolDown')];
      return [];
    })
    G.str['SCR_GET_COLONY_POTION_TP_COOLDOWN'] = (function (_item) {
      var tmp;
      var _coolDownGroup_2592 = lua_tableget(_item, 'CoolDownGroup');
      var _owner_2592 = lua_call(G.str['GetItemOwner'], [_item])[0];
      if (!lua_eq(_owner_2592, null)) {
        var _iscolonyzone_2593 = lua_call(G.str['IsJoinColonyWarMap'], [_owner_2592])[0];
        if (lua_eq(_iscolonyzone_2593, 1)) {
          tmp = lua_call(G.str['SCR_GUILD_COLONY_RESTRICTION_CHECK_CLIENT'], [_owner_2592, "GuildColony_Restricted_Item_CoolDown"]); var _list_2594 = tmp[0]; var _cnt_2594 = tmp[1]; tmp = null;
          var _coolTime_2594 = 0;
          var var_2595 = 1, stop_2595 = lua_assertfloat(_cnt_2594);
          for (; var_2595 <= stop_2595; var_2595++) {
            var _i_2595 = var_2595;
            if (lua_lt(0, lua_tablegetcall(G.str['table'], 'find', [lua_tableget(_list_2594, _i_2595), _coolDownGroup_2592])[0])) {
              _coolTime_2594 = lua_tableget(lua_tableget(_list_2594, _i_2595), 2);
              break;
            }
          }
          return [_coolTime_2594];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_GET_AWAKENING_PROP_LEVEL'] = (function (_star, _grade) {
      var tmp;
      var _value_2598 = 0;
      if (lua_eq(_star, 1)) {
        _value_2598 = 15;
      } else if (lua_eq(_star, 2)) {
        _value_2598 = 40;
      } else if (lua_eq(_star, 3)) {
        _value_2598 = 75;
      } else if (lua_eq(_star, 4)) {
        _value_2598 = 120;
      } else {
        _value_2598 = lua_add(lua_multiply((lua_subtract(_star, 4)), 50), 120);
      }
      _value_2598 = lua_multiply(_value_2598, (lua_add(1, lua_divide((lua_subtract(_grade, 1)), 10))));
      return [_value_2598];
      return [];
    })
    G.str['SCR_GET_MAXPROP_DEF'] = (function (_item) {
      var tmp;
      var _star_2604 = lua_tableget(_item, 'ItemStar');
      var _grade_2604 = lua_tableget(_item, 'ItemGrade');
      var _value_2604 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2604, _grade_2604])[0];
      _value_2604 = lua_multiply(lua_multiply(_value_2604, 0.1), 0.4);
      var _result_2604 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2604, 0.5), _value_2604])[0];
      if (lua_lt(_result_2604, 1)) {
        _result_2604 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2604]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_DEFATTRIBUTE'] = (function (_item) {
      var tmp;
      var _star_2606 = lua_tableget(_item, 'ItemStar');
      var _grade_2606 = lua_tableget(_item, 'ItemGrade');
      var _value_2606 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2606, _grade_2606])[0];
      _value_2606 = lua_multiply(lua_multiply(_value_2606, 0.1), 0.5);
      var _result_2606 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2606, 0.5), _value_2606])[0];
      if (lua_lt(_result_2606, 1)) {
        _result_2606 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2606]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ATK'] = (function (_item) {
      var tmp;
      var _star_2608 = lua_tableget(_item, 'ItemStar');
      var _grade_2608 = lua_tableget(_item, 'ItemGrade');
      var _value_2608 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2608, _grade_2608])[0];
      _value_2608 = lua_multiply(_value_2608, 0.12);
      if (lua_eq(lua_tableget(_item, 'DBLHand'), 'YES')) {
        _value_2608 = lua_multiply(_value_2608, 1.4);
      }
      var _result_2608 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2608, 0.5), _value_2608])[0];
      if (lua_lt(_result_2608, 1)) {
        _result_2608 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2608]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_STAT'] = (function (_item) {
      var tmp;
      var _star_2611 = lua_tableget(_item, 'ItemStar');
      var _grade_2611 = lua_tableget(_item, 'ItemGrade');
      var _value_2611 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2611, _grade_2611])[0];
      _value_2611 = lua_multiply(lua_multiply(_value_2611, 0.1), 0.5);
      if (lua_eq(lua_tableget(_item, 'DBLHand'), 'YES')) {
        _value_2611 = lua_multiply(_value_2611, 1.4);
      }
      var _result_2611 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2611, 0.5), _value_2611])[0];
      if (lua_lt(_result_2611, 1)) {
        _result_2611 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2611]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_MHP'] = (function (_item) {
      var tmp;
      var _star_2614 = lua_tableget(_item, 'ItemStar');
      var _grade_2614 = lua_tableget(_item, 'ItemGrade');
      var _value_2614 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2614, _grade_2614])[0];
      _value_2614 = lua_multiply(lua_multiply(_value_2614, 0.08), 34);
      var _result_2614 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2614, 0.5), _value_2614])[0];
      if (lua_lt(_result_2614, 1)) {
        _result_2614 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2614]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_MSP'] = (function (_item) {
      var tmp;
      var _star_2616 = lua_tableget(_item, 'ItemStar');
      var _grade_2616 = lua_tableget(_item, 'ItemGrade');
      var _value_2616 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2616, _grade_2616])[0];
      _value_2616 = lua_multiply(lua_multiply(_value_2616, 0.08), 6.7);
      var _result_2616 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2616, 0.5), _value_2616])[0];
      if (lua_lt(_result_2616, 1)) {
        _result_2616 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2616]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_RHP'] = (function (_item) {
      var tmp;
      var _star_2618 = lua_tableget(_item, 'ItemStar');
      var _grade_2618 = lua_tableget(_item, 'ItemGrade');
      var _value_2618 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2618, _grade_2618])[0];
      _value_2618 = lua_multiply(_value_2618, 0.2);
      var _result_2618 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2618, 0.5), _value_2618])[0];
      if (lua_lt(_result_2618, 1)) {
        _result_2618 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2618]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_RSP'] = (function (_item) {
      var tmp;
      var _star_2620 = lua_tableget(_item, 'ItemStar');
      var _grade_2620 = lua_tableget(_item, 'ItemGrade');
      var _value_2620 = lua_call(G.str['SCR_GET_AWAKENING_PROP_LEVEL'], [_star_2620, _grade_2620])[0];
      _value_2620 = lua_multiply(_value_2620, 0.2);
      var _result_2620 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2620, 0.5), _value_2620])[0];
      if (lua_lt(_result_2620, 1)) {
        _result_2620 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2620]);
      return [];
    })
    G.str['GET_KEYWORD_PROP_NAME'] = (function (_idx) {
      var tmp;
      if (lua_eq(_idx, 1)) {
        return ["KeyWord"];
      }
      return [lua_concat("KeyWord_", _idx)];
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_DEF'] = (function (_item) {
      var tmp;
      var _result_2624 = lua_call(G.str['IMCRandom'], [41, 110])[0];
      if (lua_lt(_result_2624, 1)) {
        _result_2624 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2624]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_DEFATTRIBUTE'] = (function (_item) {
      var tmp;
      var _result_2626 = lua_call(G.str['IMCRandom'], [40, 84])[0];
      if (lua_lt(_result_2626, 1)) {
        _result_2626 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2626]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_ATK'] = (function (_item) {
      var tmp;
      var _result_2628 = lua_call(G.str['IMCRandom'], [61, 126])[0];
      if (lua_lt(_result_2628, 1)) {
        _result_2628 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2628]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_CRTATK'] = (function (_item) {
      var tmp;
      var _result_2630 = lua_call(G.str['IMCRandom'], [91, 189])[0];
      if (lua_lt(_result_2630, 1)) {
        _result_2630 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2630]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_ATTRIBUTEATK'] = (function (_item) {
      var tmp;
      var _result_2632 = lua_call(G.str['IMCRandom'], [46, 99])[0];
      if (lua_lt(_result_2632, 1)) {
        _result_2632 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2632]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_STAT'] = (function (_item) {
      var tmp;
      var _value_2634 = 280;
      _value_2634 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(_value_2634, 0.1), 0.5)])[0];
      var _result_2634 = lua_call(G.str['IMCRandom'], [lua_multiply(_value_2634, 0.5), _value_2634])[0];
      if (lua_lt(_result_2634, 1)) {
        _result_2634 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2634]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_MHP'] = (function (_item) {
      var tmp;
      var _result_2636 = lua_call(G.str['IMCRandom'], [1138, 2283])[0];
      if (lua_lt(_result_2636, 1)) {
        _result_2636 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2636]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_MSP'] = (function (_item) {
      var tmp;
      var _result_2638 = lua_call(G.str['IMCRandom'], [223, 450])[0];
      if (lua_lt(_result_2638, 1)) {
        _result_2638 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2638]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_RHP'] = (function (_item) {
      var tmp;
      var _result_2640 = lua_call(G.str['IMCRandom'], [28, 56])[0];
      if (lua_lt(_result_2640, 1)) {
        _result_2640 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2640]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_RSP'] = (function (_item) {
      var tmp;
      var _result_2642 = lua_call(G.str['IMCRandom'], [21, 42])[0];
      if (lua_lt(_result_2642, 1)) {
        _result_2642 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_result_2642]);
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_MSPD'] = (function (_item) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_SR'] = (function (_item) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_GET_MAXPROP_ENCHANT_SDR'] = (function (_item) {
      var tmp;
      return [4];
      return [];
    })
    G.str['IS_SAME_TYPE_GEM_IN_ITEM'] = (function (_invItem, _gemType, _sckCnt, _itemObj) {
      var tmp;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_itemObj, "ItemType"])[0], 'Equip')) {
        return [false];
      }
      var var_2649 = 0, stop_2649 = lua_assertfloat(lua_subtract(_sckCnt, 1));
      for (; var_2649 <= stop_2649; var_2649++) {
        var _i_2649 = var_2649;
        if (lua_eq(lua_mcall(_invItem, 'GetEquipGemID', [_i_2649])[0], _gemType)) {
          return [true];
        }
      }
      return [false];
      return [];
    })
    G.str['GET_EMPTY_SOCKET_CNT'] = (function (_socketCnt, _invItem) {
      var tmp;
      var _emptyCnt_2652 = 0;
      var var_2653 = 0, stop_2653 = lua_assertfloat(lua_subtract(_socketCnt, 1));
      for (; var_2653 <= stop_2653; var_2653++) {
        var _i_2653 = var_2653;
        if (lua_eq(lua_mcall(_invItem, 'GetEquipGemID', [_i_2653])[0], 0)) {
          _emptyCnt_2652 = lua_add(_emptyCnt_2652, 1);
        }
      }
      return [_emptyCnt_2652];
      return [];
    })
    G.str['SCR_GET_MAX_SOKET'] = (function (_item) {
      var tmp;
      return [lua_add(lua_tableget(_item, 'MaxSocket_COUNT'), lua_tableget(_item, 'AppraisalSoket'))];
      return [];
    })
    G.str['SRC_KUPOLE_GROWTH_ITEM'] = (function (_item, _Reinforce) {
      var tmp;
      if (lua_eq(_item, null)) {
        return [0];
      }
      var _itemName_2657 = lua_call(G.str['TryGetProp'], [_item, "ClassName"])[0];
      if (lua_eq(_itemName_2657, null)) {
        return [0];
      }
      var _lv_2657 = lua_call(G.str['TryGetProp'], [_item, "ItemLv"])[0];
      if (lua_eq(_lv_2657, null)) {
        return [0];
      }
      var _checkKupole_2657 = lua_newtable(['T_SWD01_137', 'T_TSW01_129', 'T_STF01_137', 'T_TBW01_137', 'T_BOW01_130', 'T_MAC01_136', 'T_SPR01_119', 'T_TSP01_111', 'T_TSF01_129', 'T_RAP01_103', 'T_TOP01_139', 'T_LEG01_139', 'T_FOOT01_139', 'T_HAND01_139', 'T_TOP01_140', 'T_LEG01_140', 'T_FOOT01_140', 'T_HAND01_140', 'T_TOP01_141', 'T_LEG01_141', 'T_FOOT01_141', 'T_HAND01_141', 'T_NECK100_101', 'T_BRC100_101', 'T_SHD100_101', 'T_DAG100_101', 'T_CAN100_101', 'T_PST100_101', 'T_MUS100_101']);
      var var_2661 = 1, stop_2661 = lua_assertfloat(lua_len(_checkKupole_2657));
      for (; var_2661 <= stop_2661; var_2661++) {
        var _i_2661 = var_2661;
        if (lua_eq(lua_tableget(_checkKupole_2657, _i_2661), _itemName_2657)) {
          var _pc_2663 = lua_call(G.str['GetItemOwner'], [_item])[0];
          if (lua_eq(_pc_2663, null)) {
            return [0];
          }
          var _pcLv_2663 = lua_tableget(_pc_2663, 'Lv');
          if (lua_eq(_Reinforce, 1)) {
            if (lua_lt(_pcLv_2663, 220)) {
              _lv_2657 = 220;
            } else if (lua_lt(_pcLv_2663, 270)) {
              _lv_2657 = 270;
            } else {
              _lv_2657 = 315;
            }
          } else if (lua_eq(_Reinforce, 0)) {
            _lv_2657 = _lv_2657;
          }
        }
      }
      return [_lv_2657];
      return [];
    })
    G.str['SCR_GET_ITEM_GRADE_RATIO'] = (function (_grade, _prop) {
      var tmp;
      var _class_2670 = lua_call(G.str['GetClassByNumProp'], ["item_grade", "Grade", _grade])[0];
      if (lua_eq(_class_2670, null)) {
        return [0];
      }
      var _value_2670 = lua_call(G.str['TryGetProp'], [_class_2670, _prop])[0];
      if (lua_eq(_value_2670, null)) {
        return [0];
      }
      _value_2670 = lua_divide(_value_2670, 100);
      return [_value_2670];
      return [];
    })
    G.str['SCR_CHECK_ADD_SOCKET'] = (function (_item, _invItem) {
      var tmp;
      if (lua_eq(_item, null)) {
        return [false];
      }
      var _isNeedAppraisal_2673 = lua_call(G.str['TryGetProp'], [_item, "NeedAppraisal"])[0];
      if (((!lua_eq(_isNeedAppraisal_2673, null) && lua_eq(_isNeedAppraisal_2673, 1)) && !lua_eq(G.str['ENABLE_APPRAISAL_ITEM_MOVE'], 1))) {
        return [false];
      }
      var _isNeedRandomOption_2673 = lua_call(G.str['TryGetProp'], [_item, "NeedRandomOption"])[0];
      if ((!lua_eq(_isNeedRandomOption_2673, null) && lua_eq(_isNeedRandomOption_2673, 1))) {
        return [false];
      }
      var _itemType_2673 = lua_call(G.str['TryGetProp'], [_item, "ItemType"])[0];
      if (!lua_eq(_itemType_2673, 'Equip')) {
        return [false];
      }
      var _itemPr_2673 = lua_call(G.str['TryGetProp'], [_item, "PR"])[0];
      if ((lua_eq(_itemPr_2673, null) || !lua_eq(_itemPr_2673, 0))) {
        return [false];
      }
      var _nowSocketCount_2673 = 0;
      var _itemMaxSocket_2673 = lua_call(G.str['TryGetProp'], [_item, "MaxSocket"])[0];
      if (lua_eq(_itemMaxSocket_2673, null)) {
        return [false];
      }
      if (!lua_eq(_invItem, null)) {
        var var_2681 = 0, stop_2681 = lua_assertfloat(lua_subtract(_itemMaxSocket_2673, 1));
        for (; var_2681 <= stop_2681; var_2681++) {
          var _i_2681 = var_2681;
          if (lua_true(lua_mcall(_invItem, 'IsAvailableSocket', [_i_2681])[0])) {
            _nowSocketCount_2673 = lua_add(_nowSocketCount_2673, 1);
          }
        }
      } else {
        _nowSocketCount_2673 = lua_call(G.str['GET_CURRENT_AVAILABLE_SOCKET_COUNT'], [_item])[0];
      }
      if (lua_lte(lua_subtract(_itemMaxSocket_2673, _nowSocketCount_2673), 0)) {
        return [false];
      }
      return [true];
      return [];
    })
    G.str['GET_SOCKET_ADD_PRICE_BY_TICKET'] = (function (_item) {
      var tmp;
      var _nextSlotIdx_2686 = lua_call(G.str['GET_NEXT_SOCKET_SLOT_INDEX'], [_item])[0];
      return [lua_multiply(lua_call(G.str['GET_MAKE_SOCKET_PRICE'], [lua_tableget(_item, 'UseLv'), lua_tableget(_item, 'ItemGrade'), _nextSlotIdx_2686])[0], 3)];
      return [];
    })
    G.str['GET_COPY_TARGET_OPTION_LIST'] = (function () {
      var tmp;
      return [lua_newtable(['Reinforce_2', 'Transcend', 'Transcend_MatCount', 'Transcend_SucessCount', 'Dur', 'PR', 'IsAwaken', 'HiddenProp', 'HiddenPropValue', 'LegendPrefix', 'RandomOptionRare', 'RandomOptionRareValue'])];
      return [];
    })
    G.str['CALC_GROWTH_ITEM_LEVEL'] = (function (_item) {
      var tmp;
      if (lua_eq(_item, null)) {
        return [1];
      }
      var _pc_2688 = lua_call(G.str['GetItemOwner'], [_item])[0];
      if (lua_eq(_pc_2688, null)) {
        return [1];
      }
      var _pcLv_2688 = lua_call(G.str['TryGetProp'], [_pc_2688, 'Lv', 1])[0];
      var _itemLvList_2688 = lua_newtable([1, 40, 75, 120, 170, 220, 270, 315, 350, 380]);
      var _value_2688 = lua_tableget(_itemLvList_2688, lua_len(_itemLvList_2688));
      var var_2691 = 2, stop_2691 = lua_assertfloat(lua_len(_itemLvList_2688));
      for (; var_2691 <= stop_2691; var_2691++) {
        var _i_2691 = var_2691;
        if (lua_lt(_pcLv_2688, lua_tableget(_itemLvList_2688, _i_2691))) {
          _value_2688 = lua_tableget(_itemLvList_2688, lua_subtract(_i_2691, 1));
          break;
        } else if (lua_lt(lua_tableget(_itemLvList_2688, _i_2691), _pcLv_2688)) {
          _value_2688 = lua_tableget(_itemLvList_2688, _i_2691);
        }
      }
      var _growthItem_2688 = lua_call(G.str['GetClass'], ['item_growth'].concat(lua_call(G.str['TryGetProp'], [_item, 'ClassName', "None"])))[0];
      var _maxLv_2688 = lua_call(G.str['TryGetProp'], [_growthItem_2688, 'MaxLV', 1])[0];
      if (lua_lt(_maxLv_2688, _value_2688)) {
        _value_2688 = _maxLv_2688;
      }
      return [_value_2688];
      return [];
    })
    G.str['GET_CURRENT_AVAILABLE_SOCKET_COUNT'] = (function (_item, _invItem) {
      var tmp;
      if (lua_eq(_item, null)) {
        return [0];
      }
      var _count_2696 = 0;
      var var_2698 = 0, stop_2698 = lua_assertfloat(lua_subtract(lua_tableget(_item, 'MaxSocket'), 1));
      for (; var_2698 <= stop_2698; var_2698++) {
        var _i_2698 = var_2698;
        if (!lua_eq(_invItem, null)) {
          if (lua_eq(lua_mcall(_invItem, 'IsAvailableSocket', [_i_2698])[0], true)) {
            _count_2696 = lua_add(_count_2696, 1);
          }
        } else {
          if (!lua_eq(lua_call(G.str['GetItemSocketInfo'], [_item, _i_2698])[0], null)) {
            _count_2696 = lua_add(_count_2696, 1);
          }
        }
      }
      return [_count_2696];
      return [];
    })
    G.str['MAKE_ITEM_OPTION_BY_OPTION_SOCKET'] = (function (_item) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsServerSection'], [])[0], 1)) {
        lua_call(G.str['MakeItemOptionByOptionSocket'], [_item]);
      } else {
        var _invItem_2706 = lua_call(G.str['GET_INV_ITEM_BY_ITEM_OBJ'], [_item])[0];
        if (!lua_eq(_invItem_2706, null)) {
          lua_mcall(_invItem_2706, 'ApplySocketOption', []);
        }
      }
      return [];
    })
    G.str['IS_TRANSCENDING_STATE'] = (function () {
      var tmp;
      var _frame_2708 = lua_tablegetcall(G.str['ui'], 'GetFrame', ["itemtranscend"])[0];
      if (!lua_eq(_frame_2708, null)) {
        if (lua_eq(lua_mcall(_frame_2708, 'IsVisible', [])[0], 1)) {
          return [true];
        }
      }
      _frame_2708 = lua_tablegetcall(G.str['ui'], 'GetFrame', ["itemtranscend_remove"])[0];
      if (!lua_eq(_frame_2708, null)) {
        if (lua_eq(lua_mcall(_frame_2708, 'IsVisible', [])[0], 1)) {
          return [true];
        }
      }
      _frame_2708 = lua_tablegetcall(G.str['ui'], 'GetFrame', ["itemtranscend_break"])[0];
      if (!lua_eq(_frame_2708, null)) {
        if (lua_eq(lua_mcall(_frame_2708, 'IsVisible', [])[0], 1)) {
          return [true];
        }
      }
      return [false];
      return [];
    })
    G.str['IS_TRANSCEND_ABLE_ITEM'] = (function (_obj) {
      var tmp;
      if (lua_eq(lua_call(G.str['TryGetProp'], [_obj, "Transcend"])[0], null)) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['TryGetProp'], [_obj, "BasicTooltipProp"])[0], null)) {
        return [0];
      }
      if ((lua_eq(lua_call(G.str['TryGetProp'], [_obj, "ItemStar"])[0], null) || lua_lt(lua_call(G.str['TryGetProp'], [_obj, "ItemStar"])[0], 1))) {
        return [0];
      }
      tmp = lua_call(G.str['GET_ITEM_TRANSCENDED_PROPERTY'], [_obj]); var _afterNames_2715 = tmp[0]; var _afterValues_2715 = tmp[1]; tmp = null;
      if (lua_eq(lua_len(_afterNames_2715), 0)) {
        return [0];
      }
      var _itemCls_2715 = lua_call(G.str['GetClass'], ["Item", lua_tableget(_obj, 'ClassName')])[0];
      if (lua_eq(_itemCls_2715, null)) {
        return [0];
      }
      var _itemMaxPR_2715 = lua_call(G.str['TryGetProp'], [_itemCls_2715, "MaxPR"])[0];
      if ((lua_eq(_itemMaxPR_2715, null) || lua_eq(_itemMaxPR_2715, 0))) {
        return [0];
      }
      var _itemMPR_2715 = lua_call(G.str['TryGetProp'], [_itemCls_2715, "PR"])[0];
      if ((lua_eq(_itemMPR_2715, null) || lua_eq(_itemMPR_2715, 0))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['IS_TRANSCEND_ITEM'] = (function (_obj) {
      var tmp;
      var _value_2723 = lua_call(G.str['TryGetProp'], [_obj, "Transcend"])[0];
      if (!lua_eq(_value_2723, null)) {
        if (!lua_eq(_value_2723, 0)) {
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_TARGET_TRANSCEND_CHECK'] = (function (_obj, _scrollTranscend) {
      var tmp;
      var _value_2726 = lua_call(G.str['TryGetProp'], [_obj, "Transcend"])[0];
      if (lua_eq(_value_2726, null)) {
        return [0];
      } else {
        if (lua_lt(_value_2726, _scrollTranscend)) {
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['GET_TRANSCEND_MATERIAL_ITEM'] = (function (_target) {
      var tmp;
      var _groupName_2730 = lua_call(G.str['TryGetProp'], [_target, "GroupName"])[0];
      if (lua_eq(_groupName_2730, null)) {
        return [0];
      }
      return ["Premium_item_transcendence_Stone"];
      return [];
    })
    G.str['GET_TRANSCEND_MATERIAL_COUNT'] = (function (_targetItem, _Arg1) {
      var tmp;
      var _lv_2732 = lua_call(G.str['TryGetProp'], [_targetItem, "UseLv"])[0];
      if (lua_eq(_lv_2732, null)) {
        return [0];
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2734 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_targetItem, 0])[0];
        if (lua_eq(_kupoleItemLv_2734, null)) {
          _lv_2732 = _lv_2732;
        } else if (lua_lt(0, _kupoleItemLv_2734)) {
          _lv_2732 = _kupoleItemLv_2734;
        }
      }
      var _pcBangItemLevel_2732 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_targetItem])[0];
      if (!lua_eq(_pcBangItemLevel_2732, null)) {
        _lv_2732 = _pcBangItemLevel_2732;
      }
      var _transcendCount_2732 = lua_call(G.str['TryGetProp'], [_targetItem, "Transcend"])[0];
      if (lua_eq(_transcendCount_2732, null)) {
        return [0];
      }
      if (!lua_eq(_Arg1, null)) {
        _transcendCount_2732 = _Arg1;
      }
      var _grade_2732 = lua_call(G.str['TryGetProp'], [_targetItem, "ItemGrade"])[0];
      if (lua_eq(_grade_2732, null)) {
        return [0];
      }
      var _gradeRatio_2732 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2732, "TranscendCostRatio"])[0];
      var _needMatCount_2732;
      var _classType_2732 = lua_call(G.str['TryGetProp'], [_targetItem, "ClassType"])[0];
      if (lua_eq(_classType_2732, null)) {
        return [0];
      }
      var _slot_2732 = lua_call(G.str['TryGetProp'], [_targetItem, "DefaultEqpSlot"])[0];
      if (lua_eq(_slot_2732, null)) {
        return [0];
      }
      var _equipTypeRatio_2732;
      var _groupName_2732 = lua_call(G.str['TryGetProp'], [_targetItem, "GroupName"])[0];
      if (lua_eq(_groupName_2732, null)) {
        return [0];
      }
      if (lua_eq(_groupName_2732, 'Weapon')) {
        if ((((((lua_eq(_classType_2732, 'Sword') || lua_eq(_classType_2732, 'Staff')) || lua_eq(_classType_2732, 'Rapier')) || lua_eq(_classType_2732, 'Spear')) || lua_eq(_classType_2732, 'Bow')) || lua_eq(_classType_2732, 'Mace'))) {
          _equipTypeRatio_2732 = 0.8;
        } else if (lua_eq(_slot_2732, 'RH')) {
          _equipTypeRatio_2732 = 1;
        } else {
          return [0];
        }
      } else if (lua_eq(_groupName_2732, 'SubWeapon')) {
        _equipTypeRatio_2732 = 0.6;
      } else if ((lua_eq(_groupName_2732, 'Armor') || lua_eq(_classType_2732, 'Shield'))) {
        _equipTypeRatio_2732 = 0.33;
      } else {
        return [0];
      }
      _needMatCount_2732 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_multiply((lua_add(1, lua_multiply((lua_add(_transcendCount_2732, lua_power(_lv_2732, (lua_add(lua_add(0.2, ((lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_transcendCount_2732, 3)])[0], 0.03)))), (lua_multiply(_transcendCount_2732, 0.05))))))), _equipTypeRatio_2732))), _gradeRatio_2732)), 0.5)])[0];
      if (lua_lt(_needMatCount_2732, 1)) {
        _needMatCount_2732 = 1;
      }
      return lua_call(G.str['SyncFloor'], [_needMatCount_2732]);
      return [];
    })
    G.str['GET_TRANSCEND_BREAK_ITEM'] = (function () {
      var tmp;
      return ["Premium_itemDissassembleStone"];
      return [];
    })
    G.str['GET_TRANSCEND_BREAK_ITEM_COUNT'] = (function (_itemObj) {
      var tmp;
      if (!lua_eq(1, lua_call(G.str['IS_TRANSCEND_ABLE_ITEM'], [_itemObj])[0])) {
        return [];
      }
      var _transcend_2753 = lua_call(G.str['TryGetProp'], [_itemObj, "Transcend"])[0];
      if (lua_eq(_transcend_2753, null)) {
        return [0];
      }
      var _useMatCount_2753 = lua_call(G.str['TryGetProp'], [_itemObj, "Transcend_SucessCount"])[0];
      if (lua_eq(_useMatCount_2753, null)) {
        return [0];
      }
      var _giveCnt_2753 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_useMatCount_2753, 0.9)])[0];
      if (lua_lte(_transcend_2753, 1)) {
        _giveCnt_2753 = 0;
      }
      return lua_call(G.str['SyncFloor'], [_giveCnt_2753]);
      return [];
    })
    G.str['GET_TRANSCEND_BREAK_SILVER'] = (function (_itemObj) {
      var tmp;
      return [lua_multiply(lua_call(G.str['GET_TRANSCEND_BREAK_ITEM_COUNT'], [_itemObj])[0], 10000)];
      return [];
    })
    G.str['GET_TRANSCEND_SUCCESS_RATIO'] = (function (_itemObj, _cls, _itemCount) {
      var tmp;
      var _maxItemCls_2759 = lua_call(G.str['GET_TRANSCEND_MATERIAL_COUNT'], [_itemObj, null])[0];
      if ((lua_eq(_maxItemCls_2759, null) || lua_eq(_maxItemCls_2759, 0))) {
        return [0];
      }
      return lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_multiply(_itemCount, 100), _maxItemCls_2759)]);
      return [];
    })
    G.str['GET_ITEM_TRANSCENDED_PROPERTY'] = (function (_itemObj, _ignoreTranscend) {
      var tmp;
      if (lua_eq(_ignoreTranscend, null)) {
        _ignoreTranscend = 0;
      }
      var _retPropType_2761 = lua_newtable();
      var _retPropValue_2761 = lua_newtable();
      var _basicTooltipPropList_2761 = lua_call(G.str['StringSplit'], [lua_tableget(_itemObj, 'BasicTooltipProp'), ';'])[0];
      var var_2763 = 1, stop_2763 = lua_assertfloat(lua_len(_basicTooltipPropList_2761));
      for (; var_2763 <= stop_2763; var_2763++) {
        var _i_2763 = var_2763;
        var _baseProp_2764 = lua_tableget(_basicTooltipPropList_2761, _i_2763);
        if (((lua_eq(_baseProp_2764, "ATK") || lua_eq(_baseProp_2764, "MATK")) && lua_eq(lua_call(G.str['CHECK_EXIST_ELEMENT_IN_LIST'], [_retPropType_2761, 'ATK'])[0], false))) {
          lua_tableset(_retPropValue_2761, lua_add(lua_len(_retPropValue_2761), 1), lua_call(G.str['GET_UPGRADE_ADD_ATK_RATIO'], [_itemObj, _ignoreTranscend])[0]);
          lua_tableset(_retPropType_2761, lua_add(lua_len(_retPropType_2761), 1), "ATK");
        } else if ((lua_eq(_baseProp_2764, "DEF") && lua_eq(lua_call(G.str['CHECK_EXIST_ELEMENT_IN_LIST'], [_retPropType_2761, 'DEF'])[0], false))) {
          lua_tableset(_retPropValue_2761, lua_add(lua_len(_retPropValue_2761), 1), lua_call(G.str['GET_UPGRADE_ADD_DEF_RATIO'], [_itemObj, _ignoreTranscend])[0]);
          lua_tableset(_retPropType_2761, lua_add(lua_len(_retPropType_2761), 1), "DEF");
        } else if ((lua_eq(_baseProp_2764, "MDEF") && lua_eq(lua_call(G.str['CHECK_EXIST_ELEMENT_IN_LIST'], [_retPropType_2761, 'MDEF'])[0], false))) {
          lua_tableset(_retPropValue_2761, lua_add(lua_len(_retPropValue_2761), 1), lua_call(G.str['GET_UPGRADE_ADD_MDEF_RATIO'], [_itemObj, _ignoreTranscend])[0]);
          lua_tableset(_retPropType_2761, lua_add(lua_len(_retPropType_2761), 1), "MDEF");
        }
      }
      return [_retPropType_2761, _retPropValue_2761];
      return [];
    })
    G.str['CHECK_EXIST_ELEMENT_IN_LIST'] = (function (_list, _element) {
      var tmp;
      var var_2769 = 1, stop_2769 = lua_assertfloat(lua_len(_list));
      for (; var_2769 <= stop_2769; var_2769++) {
        var _i_2769 = var_2769;
        if (lua_eq(lua_tableget(_list, _i_2769), _element)) {
          return [true];
        }
      }
      return [false];
      return [];
    })
    G.str['GET_UPGRADE_ADD_ATK_RATIO'] = (function (_item, _ignoreTranscend) {
      var tmp;
      if ((lua_lt(0, lua_tableget(_item, 'Transcend')) && !lua_eq(_ignoreTranscend, 1))) {
        var _class_2773 = lua_call(G.str['GetClassByType'], ['ItemTranscend', lua_tableget(_item, 'Transcend')])[0];
        if (lua_eq(_class_2773, null)) {
          return [0];
        }
        var _value_2773 = lua_tableget(_class_2773, 'AtkRatio');
        _value_2773 = lua_call(G.str['SCR_PVP_ITEM_TRANSCEND_SET'], [_item, _value_2773])[0];
        return [_value_2773];
      }
      return [0];
      return [];
    })
    G.str['GET_UPGRADE_ADD_DEF_RATIO'] = (function (_item, _ignoreTranscend) {
      var tmp;
      if ((lua_lt(0, lua_tableget(_item, 'Transcend')) && !lua_eq(_ignoreTranscend, 1))) {
        var _class_2776 = lua_call(G.str['GetClassByType'], ['ItemTranscend', lua_tableget(_item, 'Transcend')])[0];
        var _value_2776 = lua_tableget(_class_2776, 'DefRatio');
        _value_2776 = lua_call(G.str['SCR_PVP_ITEM_TRANSCEND_SET'], [_item, _value_2776])[0];
        return [_value_2776];
      }
      return [0];
      return [];
    })
    G.str['GET_UPGRADE_ADD_MDEF_RATIO'] = (function (_item, _ignoreTranscend) {
      var tmp;
      if ((lua_lt(0, lua_tableget(_item, 'Transcend')) && !lua_eq(_ignoreTranscend, 1))) {
        var _class_2778 = lua_call(G.str['GetClassByType'], ['ItemTranscend', lua_tableget(_item, 'Transcend')])[0];
        var _value_2778 = lua_tableget(_class_2778, 'MdefRatio');
        _value_2778 = lua_call(G.str['SCR_PVP_ITEM_TRANSCEND_SET'], [_item, _value_2778])[0];
        return [_value_2778];
      }
      return [0];
      return [];
    })
    G.str['GET_TRANSCEND_REMOVE_ITEM'] = (function () {
      var tmp;
      return ["Premium_deleteTranscendStone"];
      return [];
    })
    G.str['GET_TRANSCEND_SCROLL_TYPE'] = (function (_scrollObj) {
      var tmp;
      if (!lua_eq(lua_call(G.str['IS_TRANSCEND_SCROLL_ITEM'], [_scrollObj])[0], 1)) {
        return [];
      }
      var _scrollType_2780 = lua_tableget(_scrollObj, 'StringArg');
      return [_scrollType_2780];
      return [];
    })
    G.str['IS_TRANSCEND_SCROLL_ITEM'] = (function (_scrollObj) {
      var tmp;
      var _scrollType_2782 = lua_call(G.str['TryGetProp'], [_scrollObj, "StringArg"])[0];
      var _transcend_2782 = lua_call(G.str['TryGetProp'], [_scrollObj, "NumberArg1"])[0];
      var _percent_2782 = lua_call(G.str['TryGetProp'], [_scrollObj, "NumberArg2"])[0];
      if (((lua_eq(_scrollType_2782, null) || lua_eq(_transcend_2782, null)) || lua_eq(_percent_2782, null))) {
        return [0];
      }
      if (lua_eq(_scrollType_2782, "transcend_Set")) {
        return [1];
      } else if (lua_eq(_scrollType_2782, "transcend_Set_380")) {
        return [1];
      } else if (lua_eq(_scrollType_2782, "transcend_Add")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['IS_TRANSCEND_SCROLL_ABLE_ITEM'] = (function (_itemObj, _scrollType, _scrollTranscend) {
      var tmp;
      if (lua_eq(_scrollType, "transcend_Set")) {
        if ((lua_eq(lua_call(G.str['SCR_TARGET_TRANSCEND_CHECK'], [_itemObj, _scrollTranscend])[0], 1) && lua_eq(lua_call(G.str['IS_TRANSCEND_ABLE_ITEM'], [_itemObj])[0], 1))) {
          return [1];
        } else {
          return [0];
        }
      } else if (lua_eq(_scrollType, "transcend_Set_380")) {
        if ((lua_eq(lua_call(G.str['SCR_TARGET_TRANSCEND_CHECK'], [_itemObj, _scrollTranscend])[0], 1) && lua_eq(lua_call(G.str['IS_TRANSCEND_ABLE_ITEM'], [_itemObj])[0], 1))) {
          if (lua_lte(lua_tableget(_itemObj, 'UseLv'), 380)) {
            return [1];
          }
          return [0];
        }
      } else if (lua_eq(_scrollType, "transcend_Add")) {
        if (lua_eq(lua_call(G.str['IS_TRANSCEND_ABLE_ITEM'], [_itemObj])[0], 1)) {
          return [1];
        } else {
          return [0];
        }
      }
      return [0];
      return [];
    })
    G.str['GET_ANTICIPATED_TRANSCEND_SCROLL_SUCCESS'] = (function (_itemObj, _scrollObj) {
      var tmp;
      if (!lua_eq(lua_call(G.str['IS_TRANSCEND_SCROLL_ITEM'], [_scrollObj])[0], 1)) {
        return [];
      }
      var _scrollType_2797 = lua_tableget(_scrollObj, 'StringArg');
      var _scrollTranscend_2797 = lua_tableget(_scrollObj, 'NumberArg1');
      if (!lua_eq(lua_call(G.str['IS_TRANSCEND_SCROLL_ABLE_ITEM'], [_itemObj, _scrollType_2797, _scrollTranscend_2797])[0], 1)) {
        return [];
      }
      var _transcend_2797 = lua_tableget(_scrollObj, 'NumberArg1');
      var _percent_2797 = lua_tableget(_scrollObj, 'NumberArg2');
      if (((lua_eq(_scrollType_2797, null) || lua_eq(_transcend_2797, null)) || lua_eq(_percent_2797, null))) {
        return [];
      }
      if ((lua_eq(_scrollType_2797, "transcend_Set") || lua_eq(_scrollType_2797, "transcend_Set_380"))) {
        return [_transcend_2797, _percent_2797];
      } else if (lua_eq(_scrollType_2797, "transcend_Add")) {
        var _curTranscend_2802 = 0;
        if (lua_eq(lua_call(G.str['IS_TRANSCEND_ITEM'], [_itemObj])[0], 1)) {
          _curTranscend_2802 = lua_tableget(_itemObj, 'Transcend');
        }
        return [lua_add(_curTranscend_2802, _transcend_2797), _percent_2797];
      }
      return [];
    })
    G.str['IS_MORU_FREE_PRICE'] = (function (_moruItem) {
      var tmp;
      if (lua_eq(_moruItem, null)) {
        return [false];
      }
      if ((((((((((((((((lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Silver") || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Silver_test")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Silver_NoDay")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Silver_TA")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Silver_TA2")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Silver_Event_1704")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), 'Moru_Silver_TA_Recycle')) || lua_eq(lua_tableget(_moruItem, 'ClassName'), 'Moru_Silver_TA_V2')) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_TA")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_TA_NR")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_EVENT_1710_NEWCHARACTER")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Event160609")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Event160929_14d")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Potential")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Potential14d")) || lua_eq(lua_tableget(_moruItem, 'StringArg'), 'SILVER'))) {
        return [true];
      }
      return [false];
      return [];
    })
    G.str['IS_MORU_DISCOUNT_50_PERCENT'] = (function (_moruItem) {
      var tmp;
      if (lua_eq(_moruItem, null)) {
        return [false];
      }
      if (lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Platinum_Premium")) {
        return [true];
      }
      return [false];
      return [];
    })
    G.str['IS_MORU_NOT_DESTROY_TARGET_ITEM'] = (function (_moruItem) {
      var tmp;
      if (lua_eq(_moruItem, null)) {
        return [false];
      }
      if ((((((((lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Premium") || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_14d")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_TA")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_TA_NR")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_Team_Trade")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_14d_Team")) || lua_eq(lua_tableget(_moruItem, 'ClassName'), "Moru_Gold_EVENT_1710_NEWCHARACTER"))) {
        return [true];
      }
      return [false];
      return [];
    })
    G.str['REINFORCE_ABLE_131014'] = (function (_item) {
      var tmp;
      if (!lua_eq(lua_tableget(_item, 'ItemType'), 'Equip')) {
        return [0];
      }
      if (!lua_eq(lua_tableget(_item, 'Reinforce_Type'), "Moru")) {
        return [0];
      }
      var _prop_2813 = lua_call(G.str['TryGetProp'], [_item, "BasicTooltipProp"])[0];
      if (lua_eq(_prop_2813, null)) {
        return [0];
      }
      if (((((((((!lua_eq(_prop_2813, 'DEF') && !lua_eq(_prop_2813, 'MDEF')) && !lua_eq(_prop_2813, 'ADD_FIRE')) && !lua_eq(_prop_2813, 'ADD_ICE')) && !lua_eq(_prop_2813, 'ADD_LIGHTNING')) && !lua_eq(_prop_2813, 'DEF;MDEF')) && !lua_eq(_prop_2813, 'ATK;MATK')) && !lua_eq(_prop_2813, 'MATK')) && !lua_eq(_prop_2813, 'ATK'))) {
        return [0];
      }
      var _reinforceValue_2813 = lua_call(G.str['TryGetProp'], [_item, "Reinforce_2"])[0];
      if ((lua_eq(_reinforceValue_2813, null) || lua_lte(40, _reinforceValue_2813))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['GET_REINFORCE_PRICE'] = (function (_fromItem, _moruItem, _pc) {
      var tmp;
      var _reinforcecount_2819 = lua_call(G.str['TryGetProp'], [_fromItem, "Reinforce_2"])[0];
      if (lua_eq(_reinforcecount_2819, null)) {
        return [0];
      }
      var _reinforcecount_diamond_2819 = lua_subtract(_reinforcecount_2819, 1);
      if (lua_lt(_reinforcecount_diamond_2819, 0)) {
        _reinforcecount_diamond_2819 = 0;
      }
      var _slot_2819 = lua_call(G.str['TryGetProp'], [_fromItem, "DefaultEqpSlot"])[0];
      if (lua_eq(_slot_2819, null)) {
        return [0];
      }
      var _grade_2819 = lua_call(G.str['TryGetProp'], [_fromItem, "ItemGrade"])[0];
      if (lua_eq(_grade_2819, null)) {
        return [0];
      }
      var _gradeRatio_2819 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_grade_2819, "ReinforceCostRatio"])[0];
      var _lv_2819 = lua_call(G.str['TryGetProp'], [_fromItem, "UseLv"])[0];
      if (lua_eq(_lv_2819, null)) {
        return [0];
      }
      if ((lua_eq(lua_call(G.str['GetServerNation'], [])[0], "KOR") && (lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9001) || lua_eq(lua_call(G.str['GetServerGroupID'], [])[0], 9501)))) {
        var _kupoleItemLv_2825 = lua_call(G.str['SRC_KUPOLE_GROWTH_ITEM'], [_fromItem, 0])[0];
        if (lua_eq(_kupoleItemLv_2825, null)) {
          _lv_2819 = _lv_2819;
        } else if (lua_lt(0, _kupoleItemLv_2825)) {
          _lv_2819 = _kupoleItemLv_2825;
        }
      }
      var _pcBangItemLevel_2819 = lua_call(G.str['CALC_PCBANG_GROWTH_ITEM_LEVEL'], [_fromItem])[0];
      if (!lua_eq(_pcBangItemLevel_2819, null)) {
        _lv_2819 = _pcBangItemLevel_2819;
      }
      tmp = [0, 0]; var _value_2819 = tmp[0]; var _value_diamond_2819 = tmp[1]; tmp = null;
      var _priceRatio_2819 = 1;
      if ((lua_eq(_slot_2819, 'RH') || lua_eq(_slot_2819, 'RH LH'))) {
        if (lua_eq(lua_tableget(_fromItem, 'DBLHand'), 'YES')) {
          _priceRatio_2819 = 1.2;
        } else {
          _priceRatio_2819 = 1;
        }
      } else if (lua_eq(_slot_2819, 'LH')) {
        if (lua_eq(lua_tableget(_fromItem, 'ClassType'), 'Shield')) {
          _priceRatio_2819 = 0.66;
        } else {
          _priceRatio_2819 = 0.8;
        }
      } else if ((((lua_eq(_slot_2819, 'SHIRT') || lua_eq(_slot_2819, 'PANTS')) || lua_eq(_slot_2819, 'GLOVES')) || lua_eq(_slot_2819, 'BOOTS'))) {
        _priceRatio_2819 = 0.75;
      } else if ((lua_eq(_slot_2819, 'NECK') || lua_eq(_slot_2819, 'RING'))) {
        _priceRatio_2819 = 0.5;
      } else {
        return [0];
      }
      _value_2819 = lua_multiply(lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(500, (lua_multiply(lua_power(_lv_2819, 1.1), (lua_add(5, (lua_multiply(_reinforcecount_2819, 2.5)))))))), (lua_add(2, (lua_multiply(lua_tablegetcall(G.str['math'], 'max', [0, lua_subtract(_reinforcecount_2819, 9)])[0], 0.5)))))])[0], _priceRatio_2819), _gradeRatio_2819);
      _value_diamond_2819 = lua_multiply(lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(500, (lua_multiply(lua_power(_lv_2819, 1.1), (lua_add(5, (lua_multiply(_reinforcecount_diamond_2819, 2.5)))))))), (lua_add(2, (lua_multiply(lua_tablegetcall(G.str['math'], 'max', [0, lua_subtract(_reinforcecount_2819, 9)])[0], 0.5)))))])[0], _priceRatio_2819), _gradeRatio_2819);
      if (lua_eq(lua_call(G.str['IS_MORU_DISCOUNT_50_PERCENT'], [_moruItem])[0], true)) {
        _value_2819 = lua_divide(_value_2819, 2);
      }
      if (lua_eq(lua_call(G.str['IS_MORU_FREE_PRICE'], [_moruItem])[0], true)) {
        _value_2819 = 0;
      }
      if ((lua_eq(lua_tableget(_moruItem, 'StringArg'), 'DIAMOND') && lua_lt(1, _reinforcecount_2819))) {
        _value_2819 = lua_add(_value_2819, (lua_multiply(_value_diamond_2819, 2.1)));
      }
      return lua_call(G.str['SyncFloor'], [_value_2819]);
      return [];
    })
    G.str['GET_REINFORCE_HITCOUNT'] = (function (_fromItem, _moru) {
      var tmp;
      return [3];
      return [];
    })
    G.str['SCR_PVP_ITEM_LV_GRADE_REINFORCE_SET'] = (function (_item, _lv, _grade, _reinforceValue, _reinforceRatio) {
      var tmp;
      if (lua_eq(lua_tableget(G.str['_G'], "GetItemOwner"), null)) {
        return [_lv, _grade, _reinforceValue, _reinforceRatio];
      }
      var _owner_2842 = lua_call(G.str['GetItemOwner'], [_item])[0];
      if (lua_eq(_owner_2842, null)) {
        return [_lv, _grade, _reinforceValue, _reinforceRatio];
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_owner_2842])[0], 1)) {
        var _pvpLv_2845 = G.str['PVP_TEAMBATTLE_ITEM_LV'];
        var _pvpGrade_2845 = G.str['PVP_TEAMBATTLE_ITEM_GRADE'];
        var _pvpReinforceValue_2845 = G.str['PVP_TEAMBATTLE_ITEM_REINFORCE'];
        var _pvpReinforceRatio_2845 = G.str['PVP_TEAMBATTLE_ITEM_REINFORCERATIO'];
        if (!lua_eq(_pvpLv_2845, null)) {
          _lv = _pvpLv_2845;
        }
        if (!lua_eq(_pvpGrade_2845, null)) {
          _grade = _pvpGrade_2845;
        }
        if (!lua_eq(_pvpReinforceValue_2845, null)) {
          _reinforceValue = _pvpReinforceValue_2845;
        }
        if (!lua_eq(_pvpReinforceRatio_2845, null)) {
          _reinforceRatio = _pvpReinforceRatio_2845;
        }
      }
      return [_lv, _grade, _reinforceValue, _reinforceRatio];
      return [];
    })
    G.str['SCR_PVP_ITEM_TRANSCEND_SET'] = (function (_item, _transcend) {
      var tmp;
      var _owner_2850 = lua_call(G.str['GetItemOwner'], [_item])[0];
      if (lua_eq(_owner_2850, null)) {
        return [_transcend];
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_owner_2850])[0], 1)) {
        var _pvpTranscend_2852 = G.str['PVP_TEAMBATTLE_ITEM_TRANSCEND'];
        if (!lua_eq(_pvpTranscend_2852, null)) {
          _transcend = _pvpTranscend_2852;
        }
      }
      return [_transcend];
      return [];
    })
    G.str['GET_MON_STAT'] = (function (_self, _lv, _statStr) {
      var tmp;
      var _allStatMax_2854 = lua_add(10, (lua_multiply(_lv, 2)));
      var _raceType_2854 = lua_call(G.str['TryGetProp'], [_self, "RaceType", "None"])[0];
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "EXPROP_SHADOW_INFERNAL"])[0], 1)) {
        _raceType_2854 = lua_call(G.str['GetExProp_Str'], [_self, "SHADOW_INFERNAL_RACETYPE"])[0];
        if (lua_eq(_raceType_2854, null)) {
          _raceType_2854 = "None";
        }
      }
      var _raceTypeClass_2854 = lua_call(G.str['GetClass'], ["Stat_Monster_Race", _raceType_2854])[0];
      if (lua_eq(_raceTypeClass_2854, null)) {
        return [1];
      }
      var _statRate_2854 = 100;
      _statRate_2854 = lua_call(G.str['TryGetProp'], [_raceTypeClass_2854, _statStr, _statRate_2854])[0];
      if (lua_lt(_statRate_2854, 0)) {
        _statRate_2854 = 0;
      }
      var _totalStatRate_2854 = 0;
      var _statRateList_2854 = lua_newtable(['STR', 'INT', 'CON', 'MNA', 'DEX']);
      var var_2859 = 1, stop_2859 = lua_assertfloat(lua_len(_statRateList_2854));
      for (; var_2859 <= stop_2859; var_2859++) {
        var _i_2859 = var_2859;
        var _statRateTemp_2860 = lua_call(G.str['TryGetProp'], [_raceTypeClass_2854, lua_tableget(_statRateList_2854, _i_2859), 0])[0];
        if (lua_eq(_statRateTemp_2860, null)) {
          _statRateTemp_2860 = 0;
        }
        _totalStatRate_2854 = lua_add(_totalStatRate_2854, _statRateTemp_2860);
      }
      var _value_2854 = lua_multiply(_allStatMax_2854, (lua_divide(_statRate_2854, _totalStatRate_2854)));
      if (lua_lt(_value_2854, 1)) {
        _value_2854 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2854]);
      return [];
    })
    G.str['GET_MON_ITEM_STAT'] = (function (_self, _lv, _statStr) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_GET_MON_ADDSTAT'] = (function (_self, _stat) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_Get_MON_STR'] = (function (_self) {
      var tmp;
      var _statString_2865 = "STR";
      var _lv_2865 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2865, null)) {
        _lv_2865 = 1;
      }
      var _byStat_2865 = lua_call(G.str['GET_MON_STAT'], [_self, _lv_2865, _statString_2865])[0];
      if ((lua_eq(_byStat_2865, null) || lua_lt(_byStat_2865, 0))) {
        _byStat_2865 = 0;
      }
      var _byBuff_2865 = lua_call(G.str['TryGetProp'], [_self, lua_concat(_statString_2865, "_BM")])[0];
      if (lua_eq(_byBuff_2865, null)) {
        _byBuff_2865 = 0;
      }
      var _value_2865 = lua_add(_byStat_2865, _byBuff_2865);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2865]);
      return [];
    })
    G.str['SCR_Get_MON_INT'] = (function (_self) {
      var tmp;
      var _statString_2869 = "INT";
      var _lv_2869 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2869, null)) {
        _lv_2869 = 1;
      }
      var _byStat_2869 = lua_call(G.str['GET_MON_STAT'], [_self, _lv_2869, _statString_2869])[0];
      if ((lua_eq(_byStat_2869, null) || lua_lt(_byStat_2869, 0))) {
        _byStat_2869 = 0;
      }
      var _byBuff_2869 = lua_call(G.str['TryGetProp'], [_self, lua_concat(_statString_2869, "_BM")])[0];
      if (lua_eq(_byBuff_2869, null)) {
        _byBuff_2869 = 0;
      }
      var _value_2869 = lua_add(_byStat_2869, _byBuff_2869);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2869]);
      return [];
    })
    G.str['SCR_Get_MON_CON'] = (function (_self) {
      var tmp;
      var _statString_2873 = "CON";
      var _lv_2873 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2873, null)) {
        _lv_2873 = 1;
      }
      var _byStat_2873 = lua_call(G.str['GET_MON_STAT'], [_self, _lv_2873, _statString_2873])[0];
      if ((lua_eq(_byStat_2873, null) || lua_lt(_byStat_2873, 0))) {
        _byStat_2873 = 0;
      }
      var _byBuff_2873 = lua_call(G.str['TryGetProp'], [_self, lua_concat(_statString_2873, "_BM")])[0];
      if (lua_eq(_byBuff_2873, null)) {
        _byBuff_2873 = 0;
      }
      var _value_2873 = lua_add(_byStat_2873, _byBuff_2873);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2873]);
      return [];
    })
    G.str['SCR_Get_MON_MNA'] = (function (_self) {
      var tmp;
      var _statString_2877 = "MNA";
      var _lv_2877 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2877, null)) {
        _lv_2877 = 1;
      }
      var _byStat_2877 = lua_call(G.str['GET_MON_STAT'], [_self, _lv_2877, _statString_2877])[0];
      if ((lua_eq(_byStat_2877, null) || lua_lt(_byStat_2877, 0))) {
        _byStat_2877 = 0;
      }
      var _byBuff_2877 = lua_call(G.str['TryGetProp'], [_self, lua_concat(_statString_2877, "_BM")])[0];
      if (lua_eq(_byBuff_2877, null)) {
        _byBuff_2877 = 0;
      }
      var _value_2877 = lua_add(_byStat_2877, _byBuff_2877);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2877]);
      return [];
    })
    G.str['SCR_Get_MON_DEX'] = (function (_self) {
      var tmp;
      var _statString_2881 = "DEX";
      var _lv_2881 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2881, null)) {
        _lv_2881 = 1;
      }
      var _byStat_2881 = lua_call(G.str['GET_MON_STAT'], [_self, _lv_2881, _statString_2881])[0];
      if ((lua_eq(_byStat_2881, null) || lua_lt(_byStat_2881, 0))) {
        _byStat_2881 = 0;
      }
      var _byBuff_2881 = lua_call(G.str['TryGetProp'], [_self, lua_concat(_statString_2881, "_BM")])[0];
      if (lua_eq(_byBuff_2881, null)) {
        _byBuff_2881 = 0;
      }
      var _value_2881 = lua_add(_byStat_2881, _byBuff_2881);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2881]);
      return [];
    })
    G.str['SCR_Get_MON_MHP'] = (function (_self) {
      var tmp;
      var _monHPCount_2885 = lua_call(G.str['TryGetProp'], [_self, "HPCount", 0])[0];
      if (lua_lt(0, _monHPCount_2885)) {
        return lua_tablegetcall(G.str['math'], 'floor', [_monHPCount_2885]);
      }
      var _fixedMHP_2885 = lua_call(G.str['TryGetProp'], [_self, "FIXMHP_BM", 0])[0];
      if (lua_lt(0, _fixedMHP_2885)) {
        return lua_tablegetcall(G.str['math'], 'floor', [_fixedMHP_2885]);
      }
      var _lv_2885 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _standardMHP_2885 = lua_tablegetcall(G.str['math'], 'max', [30, _lv_2885])[0];
      var _byLevel_2885 = lua_multiply((lua_divide(_standardMHP_2885, 4)), _lv_2885);
      var _stat_2885 = lua_call(G.str['TryGetProp'], [_self, "CON", 1])[0];
      var _byStat_2885 = lua_add((lua_multiply(_byLevel_2885, (lua_multiply(_stat_2885, 0.0015)))), (lua_multiply(_byLevel_2885, (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2885, 10)])[0], 0.005)))));
      var _value_2885 = lua_add(lua_add(_standardMHP_2885, _byLevel_2885), _byStat_2885);
      var _statTypeRate_2885 = 100;
      var _statType_2885 = lua_call(G.str['TryGetProp'], [_self, "StatType", "None"])[0];
      if ((!lua_eq(_statType_2885, null) && !lua_eq(_statType_2885, 'None'))) {
        var _statTypeClass_2888 = lua_call(G.str['GetClass'], ["Stat_Monster_Type", _statType_2885])[0];
        if (!lua_eq(_statTypeClass_2888, null)) {
          _statTypeRate_2885 = lua_call(G.str['TryGetProp'], [_statTypeClass_2888, "MHP", _statTypeRate_2885])[0];
        }
      }
      _statTypeRate_2885 = lua_divide(_statTypeRate_2885, 100);
      _value_2885 = lua_multiply(_value_2885, _statTypeRate_2885);
      var _raceTypeRate_2885 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "MHP"])[0];
      _value_2885 = lua_multiply(_value_2885, _raceTypeRate_2885);
      var _byBuff_2885 = lua_call(G.str['TryGetProp'], [_self, "MHP_BM"])[0];
      if (lua_eq(_byBuff_2885, null)) {
        _byBuff_2885 = 0;
      }
      _value_2885 = lua_add(_value_2885, _byBuff_2885);
      var _monClassName_2885 = lua_call(G.str['TryGetProp'], [_self, "ClassName", "None"])[0];
      var _monOriginFaction_2885 = lua_call(G.str['TryGetProp'], [lua_call(G.str['GetClass'], ["Monster", _monClassName_2885])[0], "Faction"])[0];
      if (lua_eq(_monOriginFaction_2885, "Summon")) {
        _value_2885 = lua_add(_value_2885, 5000);
      }
      if (lua_lt(_value_2885, 1)) {
        _value_2885 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2885]);
      return [];
    })
    G.str['SCR_Get_MON_MSP'] = (function (_self) {
      var tmp;
      var _mna_2893 = lua_tableget(_self, 'MNA');
      var _lv_2893 = lua_tableget(_self, 'Lv');
      var _byBuff_2893 = lua_tableget(_self, 'MSP_BM');
      var _byLevel_2893 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(_lv_2893, 1)), 6.7)])[0];
      var _byStat_2893 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_mna_2893, 13)])[0];
      var _value_2893 = lua_add(lua_add(_byLevel_2893, _byStat_2893), _byBuff_2893);
      if (lua_lt(_value_2893, 1)) {
        _value_2893 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2893]);
      return [];
    })
    G.str['SCR_GET_MON_EXP'] = (function (_self) {
      var tmp;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "GiveEXP", "NO"])[0], "YES")) {
        return [0];
      }
      var _level_2895 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _exPropLevel_2895 = lua_call(G.str['GetExProp'], [_self, "LEVEL_FOR_EXP"])[0];
      if ((!lua_eq(_exPropLevel_2895, null) && !lua_eq(_exPropLevel_2895, 0))) {
        _level_2895 = _exPropLevel_2895;
      }
      var _cls_2895 = lua_call(G.str['GetClassByType'], ["Stat_Monster", _level_2895])[0];
      var _value_2895 = lua_call(G.str['TryGetProp'], [_cls_2895, "EXP_BASE", 0])[0];
      var _expValue_2895 = 100;
      var _monStatType_2895 = lua_call(G.str['TryGetProp'], [_self, "StatType", "None"])[0];
      if (!lua_eq(_monStatType_2895, 'None')) {
        var _cls2_2898 = lua_call(G.str['GetClass'], ["Stat_Monster_Type", _monStatType_2895])[0];
        if (!lua_eq(_cls2_2898, null)) {
          _expValue_2895 = lua_call(G.str['TryGetProp'], [_cls2_2898, "EXP", 0])[0];
        }
      }
      var _raceTypeRate_2895 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "EXP"])[0];
      _value_2895 = lua_multiply(lua_multiply(_value_2895, (lua_divide(_expValue_2895, 100))), _raceTypeRate_2895);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2895]);
      return [];
    })
    G.str['SCR_GET_MON_JOBEXP'] = (function (_self) {
      var tmp;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "GiveEXP", "NO"])[0], "YES")) {
        return [0];
      }
      var _level_2900 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _cls_2900 = lua_call(G.str['GetClassByType'], ["Stat_Monster", _level_2900])[0];
      var _value_2900 = lua_call(G.str['TryGetProp'], [_cls_2900, "JEXP_BASE", 0])[0];
      var _jexpValue_2900 = 100;
      var _monStatType_2900 = lua_call(G.str['TryGetProp'], [_self, "StatType", "None"])[0];
      if (!lua_eq(_monStatType_2900, 'None')) {
        var _cls2_2902 = lua_call(G.str['GetClass'], ["Stat_Monster_Type", _monStatType_2900])[0];
        if (!lua_eq(_cls2_2902, null)) {
          _jexpValue_2900 = lua_call(G.str['TryGetProp'], [_cls2_2902, "JEXP", 0])[0];
        }
      }
      var _raceTypeRate_2900 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "JEXP"])[0];
      _value_2900 = lua_multiply(lua_multiply(_value_2900, (lua_divide(_jexpValue_2900, 100))), _raceTypeRate_2900);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2900]);
      return [];
    })
    G.str['SCR_Get_MON_DEF'] = (function (_self) {
      var tmp;
      var _fixedDEF_2904 = lua_call(G.str['TryGetProp'], [_self, "FixedDefence"])[0];
      if ((!lua_eq(_fixedDEF_2904, null) && lua_lt(0, _fixedDEF_2904))) {
        return [_fixedDEF_2904];
      }
      var _lv_2904 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2904, null)) {
        _lv_2904 = 1;
      }
      var _byLevel_2904 = lua_multiply(_lv_2904, 1.0);
      var _stat_2904 = lua_call(G.str['TryGetProp'], [_self, "CON"])[0];
      if (lua_eq(_stat_2904, null)) {
        _stat_2904 = 1;
      }
      var _byStat_2904 = lua_add((lua_multiply(_stat_2904, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2904, 10)])[0], (lua_multiply(_byLevel_2904, 0.05)))));
      var _byItem_2904 = lua_call(G.str['SCR_MON_ITEM_ARMOR_DEF_CALC'], [_self])[0];
      var _value_2904 = lua_add(lua_add(_byLevel_2904, _byStat_2904), _byItem_2904);
      var _raceTypeRate_2904 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "DEF"])[0];
      _value_2904 = lua_multiply(_value_2904, _raceTypeRate_2904);
      var _byBuff_2904 = lua_call(G.str['TryGetProp'], [_self, "DEF_BM"])[0];
      if (lua_eq(_byBuff_2904, null)) {
        _byBuff_2904 = 0;
      }
      var _byRateBuff_2904 = lua_call(G.str['TryGetProp'], [_self, "DEF_RATE_BM"])[0];
      if (lua_eq(_byRateBuff_2904, null)) {
        _byRateBuff_2904 = 0;
      }
      _byRateBuff_2904 = lua_multiply(_value_2904, _byRateBuff_2904);
      _value_2904 = lua_add(lua_add(_value_2904, _byBuff_2904), _byRateBuff_2904);
      if (lua_lt(_value_2904, 0)) {
        _value_2904 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2904]);
      return [];
    })
    G.str['SCR_Get_MON_MDEF'] = (function (_self) {
      var tmp;
      var _fixedDEF_2911 = lua_call(G.str['TryGetProp'], [_self, "FixedDefence"])[0];
      if ((!lua_eq(_fixedDEF_2911, null) && lua_lt(0, _fixedDEF_2911))) {
        return [_fixedDEF_2911];
      }
      var _lv_2911 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2911, null)) {
        _lv_2911 = 1;
      }
      var _byLevel_2911 = lua_multiply(_lv_2911, 1.0);
      var _stat_2911 = lua_call(G.str['TryGetProp'], [_self, "CON"])[0];
      if (lua_eq(_stat_2911, null)) {
        _stat_2911 = 1;
      }
      var _byStat_2911 = lua_add((lua_multiply(_stat_2911, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2911, 10)])[0], (lua_multiply(_byLevel_2911, 0.05)))));
      var _byItem_2911 = lua_call(G.str['SCR_MON_ITEM_ARMOR_MDEF_CALC'], [_self])[0];
      var _value_2911 = lua_add(lua_add(_byLevel_2911, _byStat_2911), _byItem_2911);
      var _raceTypeRate_2911 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "MDEF"])[0];
      _value_2911 = lua_multiply(_value_2911, _raceTypeRate_2911);
      var _byBuff_2911 = lua_call(G.str['TryGetProp'], [_self, "MDEF_BM"])[0];
      if (lua_eq(_byBuff_2911, null)) {
        _byBuff_2911 = 0;
      }
      var _byRateBuff_2911 = lua_call(G.str['TryGetProp'], [_self, "MDEF_RATE_BM"])[0];
      if (lua_eq(_byRateBuff_2911, null)) {
        _byRateBuff_2911 = 0;
      }
      _byRateBuff_2911 = lua_multiply(_value_2911, _byRateBuff_2911);
      _value_2911 = lua_add(lua_add(_value_2911, _byBuff_2911), _byRateBuff_2911);
      if (lua_lt(_value_2911, 0)) {
        _value_2911 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2911]);
      return [];
    })
    G.str['SCR_Get_MON_HR'] = (function (_self) {
      var tmp;
      var _lv_2918 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2918, null)) {
        _lv_2918 = 1;
      }
      var _byLevel_2918 = lua_multiply(_lv_2918, 1.0);
      var _raceTypeRate_2918 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "HR"])[0];
      var _value_2918 = lua_multiply(_byLevel_2918, _raceTypeRate_2918);
      var _byBuff_2918 = lua_call(G.str['TryGetProp'], [_self, "HR_BM", 0])[0];
      var _byRateBuff_2918 = lua_call(G.str['TryGetProp'], [_self, "HR_RATE_BM", 0])[0];
      _byRateBuff_2918 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_2918, _byRateBuff_2918)])[0];
      _value_2918 = lua_add(lua_add(_value_2918, _byBuff_2918), _byRateBuff_2918);
      if (lua_lt(_value_2918, 0)) {
        _value_2918 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2918]);
      return [];
    })
    G.str['SCR_Get_MON_DR'] = (function (_self) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'HPCount'))) {
        return [0];
      }
      var _lv_2921 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2921, null)) {
        _lv_2921 = 1;
      }
      var _byLevel_2921 = lua_multiply(_lv_2921, 1.0);
      var _raceTypeRate_2921 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "DR"])[0];
      var _value_2921 = lua_multiply(_byLevel_2921, _raceTypeRate_2921);
      var _byBuff_2921 = lua_call(G.str['TryGetProp'], [_self, "DR_BM", 0])[0];
      var _byRateBuff_2921 = lua_call(G.str['TryGetProp'], [_self, "DR_RATE_BM", 0])[0];
      _byRateBuff_2921 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_2921, _byRateBuff_2921)])[0];
      _value_2921 = lua_add(lua_add(_value_2921, _byBuff_2921), _byRateBuff_2921);
      if (lua_lt(_value_2921, 0)) {
        _value_2921 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2921]);
      return [];
    })
    G.str['SCR_Get_MON_MHR'] = (function (_self) {
      var tmp;
      var _value_2925 = 0;
      _value_2925 = lua_add(_value_2925, lua_tableget(_self, 'MHR_BM'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2925]);
      return [];
    })
    G.str['SCR_Get_MON_CRTHR'] = (function (_self) {
      var tmp;
      var _lv_2926 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _byLevel_2926 = lua_multiply(_lv_2926, 1.0);
      var _raceTypeRate_2926 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "CRTHR"])[0];
      var _value_2926 = lua_multiply(_byLevel_2926, _raceTypeRate_2926);
      var _byBuff_2926 = lua_call(G.str['TryGetProp'], [_self, "CRTHR_BM", 0])[0];
      var _byRateBuff_2926 = lua_call(G.str['TryGetProp'], [_self, "CRTHR_RATE_BM", 0])[0];
      _byRateBuff_2926 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_2926, _byRateBuff_2926)])[0];
      _value_2926 = lua_add(lua_add(_value_2926, _byBuff_2926), _byRateBuff_2926);
      if (lua_lt(_value_2926, 0)) {
        _value_2926 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2926]);
      return [];
    })
    G.str['SCR_Get_MON_CRTDR'] = (function (_self) {
      var tmp;
      var _lv_2928 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _byLevel_2928 = lua_multiply(_lv_2928, 1.0);
      var _raceTypeRate_2928 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "CRTDR"])[0];
      var _value_2928 = lua_multiply(_byLevel_2928, _raceTypeRate_2928);
      var _byBuff_2928 = lua_call(G.str['TryGetProp'], [_self, "CRTDR_BM", 0])[0];
      var _byRateBuff_2928 = lua_call(G.str['TryGetProp'], [_self, "CRTDR_RATE_BM", 0])[0];
      _byRateBuff_2928 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_2928, _byRateBuff_2928)])[0];
      _value_2928 = lua_add(lua_add(_value_2928, _byBuff_2928), _byRateBuff_2928);
      if (lua_lt(_value_2928, 0)) {
        _value_2928 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2928]);
      return [];
    })
    G.str['SCR_Get_MON_CRTATK'] = (function (_self) {
      var tmp;
      var _lv_2930 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2930, null)) {
        _lv_2930 = 1;
      }
      var _byLevel_2930 = lua_multiply(_lv_2930, 1.0);
      var _stat_2930 = lua_call(G.str['TryGetProp'], [_self, "DEX"])[0];
      if (lua_eq(_stat_2930, null)) {
        _stat_2930 = 1;
      }
      var _byStat_2930 = lua_add((lua_multiply(_stat_2930, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2930, 10)])[0], (lua_multiply(_byLevel_2930, 0.05)))));
      var _value_2930 = lua_add(_byLevel_2930, _byStat_2930);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2930]);
      return [];
    })
    G.str['SCR_Get_MON_CRTMATK'] = (function (_self) {
      var tmp;
      var _lv_2933 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2933, null)) {
        _lv_2933 = 1;
      }
      var _byLevel_2933 = lua_multiply(_lv_2933, 1.0);
      var _stat_2933 = lua_call(G.str['TryGetProp'], [_self, "MNA"])[0];
      if (lua_eq(_stat_2933, null)) {
        _stat_2933 = 1;
      }
      var _byStat_2933 = lua_add((lua_multiply(_stat_2933, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2933, 10)])[0], (lua_multiply(_byLevel_2933, 0.05)))));
      var _value_2933 = lua_add(_byLevel_2933, _byStat_2933);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2933]);
      return [];
    })
    G.str['SCR_Get_MON_MINPATK'] = (function (_self) {
      var tmp;
      var _lv_2936 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2936, null)) {
        _lv_2936 = 1;
      }
      var _byLevel_2936 = lua_multiply(_lv_2936, 1.0);
      var _stat_2936 = lua_call(G.str['TryGetProp'], [_self, "STR"])[0];
      if (lua_eq(_stat_2936, null)) {
        _stat_2936 = 1;
      }
      var _byStat_2936 = lua_add((lua_multiply(_stat_2936, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2936, 10)])[0], (lua_multiply(_byLevel_2936, 0.05)))));
      var _byItem_2936 = lua_call(G.str['SCR_MON_ITEM_WEAPON_CALC'], [_self])[0];
      var _value_2936 = lua_add(lua_add(_byLevel_2936, _byStat_2936), _byItem_2936);
      var _monAtkRange_2936 = lua_call(G.str['TryGetProp'], [_self, "ATK_RANGE"])[0];
      if (lua_eq(_monAtkRange_2936, null)) {
        _monAtkRange_2936 = 100;
      }
      var _range_2936 = lua_call(G.str['MinMaxCorrection'], [_monAtkRange_2936, 100, 200])[0];
      _value_2936 = lua_multiply(_value_2936, (lua_subtract(2.0, lua_divide(_range_2936, 100.0))));
      var _raceTypeRate_2936 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "PATK"])[0];
      _value_2936 = lua_multiply(_value_2936, _raceTypeRate_2936);
      var _byBuff_2936 = 0;
      var _byBuffList_2936 = lua_newtable(["PATK_BM", "MINPATK_BM"]);
      var var_2940 = 1, stop_2940 = lua_assertfloat(lua_len(_byBuffList_2936));
      for (; var_2940 <= stop_2940; var_2940++) {
        var _i_2940 = var_2940;
        var _byBuffTemp_2941 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_byBuffList_2936, _i_2940)])[0];
        if (lua_eq(_byBuffTemp_2941, null)) {
          _byBuffTemp_2941 = 0;
        }
        _byBuff_2936 = lua_add(_byBuff_2936, _byBuffTemp_2941);
      }
      var _rateBuffList_2936 = lua_newtable(['PATK_RATE_BM', 'MINPATK_RATE_BM']);
      var _byRateBuff_2936 = 0;
      var var_2943 = 1, stop_2943 = lua_assertfloat(lua_len(_rateBuffList_2936));
      for (; var_2943 <= stop_2943; var_2943++) {
        var _i_2943 = var_2943;
        var _rateBuff_2944 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_rateBuffList_2936, _i_2943)])[0];
        if (!lua_eq(_rateBuff_2944, null)) {
          _byRateBuff_2936 = lua_add(_byRateBuff_2936, _rateBuff_2944);
        }
      }
      _byRateBuff_2936 = lua_multiply(_value_2936, _byRateBuff_2936);
      _value_2936 = lua_add(lua_add(_value_2936, _byBuff_2936), _byRateBuff_2936);
      if (lua_lt(_value_2936, 1)) {
        _value_2936 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2936]);
      return [];
    })
    G.str['SCR_Get_MON_MAXPATK'] = (function (_self) {
      var tmp;
      var _lv_2947 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2947, null)) {
        _lv_2947 = 1;
      }
      var _byLevel_2947 = lua_multiply(_lv_2947, 1.0);
      var _stat_2947 = lua_call(G.str['TryGetProp'], [_self, "STR"])[0];
      if (lua_eq(_stat_2947, null)) {
        _stat_2947 = 1;
      }
      var _byStat_2947 = lua_add((lua_multiply(_stat_2947, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2947, 10)])[0], (lua_multiply(_byLevel_2947, 0.05)))));
      var _byItem_2947 = lua_call(G.str['SCR_MON_ITEM_WEAPON_CALC'], [_self])[0];
      var _value_2947 = lua_add(lua_add(_byLevel_2947, _byStat_2947), _byItem_2947);
      var _monAtkRange_2947 = lua_call(G.str['TryGetProp'], [_self, "ATK_RANGE"])[0];
      if (lua_eq(_monAtkRange_2947, null)) {
        _monAtkRange_2947 = 100;
      }
      var _range_2947 = lua_call(G.str['MinMaxCorrection'], [_monAtkRange_2947, 100, 200])[0];
      _value_2947 = lua_multiply(_value_2947, (lua_divide(_range_2947, 100.0)));
      var _raceTypeRate_2947 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "PATK"])[0];
      _value_2947 = lua_multiply(_value_2947, _raceTypeRate_2947);
      var _byBuff_2947 = 0;
      var _byBuffList_2947 = lua_newtable(["PATK_BM", "MAXPATK_BM"]);
      var var_2951 = 1, stop_2951 = lua_assertfloat(lua_len(_byBuffList_2947));
      for (; var_2951 <= stop_2951; var_2951++) {
        var _i_2951 = var_2951;
        var _byBuffTemp_2952 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_byBuffList_2947, _i_2951)])[0];
        if (lua_eq(_byBuffTemp_2952, null)) {
          _byBuffTemp_2952 = 0;
        }
        _byBuff_2947 = lua_add(_byBuff_2947, _byBuffTemp_2952);
      }
      var _rateBuffList_2947 = lua_newtable(['PATK_RATE_BM', 'MAXPATK_RATE_BM']);
      var _byRateBuff_2947 = 0;
      var var_2954 = 1, stop_2954 = lua_assertfloat(lua_len(_rateBuffList_2947));
      for (; var_2954 <= stop_2954; var_2954++) {
        var _i_2954 = var_2954;
        var _rateBuff_2955 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_rateBuffList_2947, _i_2954)])[0];
        if (!lua_eq(_rateBuff_2955, null)) {
          _byRateBuff_2947 = lua_add(_byRateBuff_2947, _rateBuff_2955);
        }
      }
      _byRateBuff_2947 = lua_multiply(_value_2947, _byRateBuff_2947);
      _value_2947 = lua_add(lua_add(_value_2947, _byBuff_2947), _byRateBuff_2947);
      if (lua_lt(_value_2947, 1)) {
        _value_2947 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2947]);
      return [];
    })
    G.str['SCR_Get_MON_MINMATK'] = (function (_self) {
      var tmp;
      var _lv_2958 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2958, null)) {
        _lv_2958 = 1;
      }
      var _byLevel_2958 = lua_multiply(_lv_2958, 1.0);
      var _stat_2958 = lua_call(G.str['TryGetProp'], [_self, "INT"])[0];
      if (lua_eq(_stat_2958, null)) {
        _stat_2958 = 1;
      }
      var _byStat_2958 = lua_add((lua_multiply(_stat_2958, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2958, 10)])[0], (lua_multiply(_byLevel_2958, 0.05)))));
      var _byItem_2958 = lua_call(G.str['SCR_MON_ITEM_WEAPON_CALC'], [_self])[0];
      var _value_2958 = lua_add(lua_add(_byLevel_2958, _byStat_2958), _byItem_2958);
      var _monAtkRange_2958 = lua_call(G.str['TryGetProp'], [_self, "ATK_RANGE"])[0];
      if (lua_eq(_monAtkRange_2958, null)) {
        _monAtkRange_2958 = 100;
      }
      var _range_2958 = lua_call(G.str['MinMaxCorrection'], [_monAtkRange_2958, 100, 200])[0];
      _value_2958 = lua_multiply(_value_2958, (lua_subtract(2.0, lua_divide(_range_2958, 100.0))));
      var _raceTypeRate_2958 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "MATK"])[0];
      _value_2958 = lua_multiply(_value_2958, _raceTypeRate_2958);
      var _byBuff_2958 = 0;
      var _byBuffList_2958 = lua_newtable(["MATK_BM", "MINMATK_BM"]);
      var var_2962 = 1, stop_2962 = lua_assertfloat(lua_len(_byBuffList_2958));
      for (; var_2962 <= stop_2962; var_2962++) {
        var _i_2962 = var_2962;
        var _byBuffTemp_2963 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_byBuffList_2958, _i_2962)])[0];
        if (lua_eq(_byBuffTemp_2963, null)) {
          _byBuffTemp_2963 = 0;
        }
        _byBuff_2958 = lua_add(_byBuff_2958, _byBuffTemp_2963);
      }
      var _rateBuffList_2958 = lua_newtable(['MATK_RATE_BM', 'MINMATK_RATE_BM']);
      var _byRateBuff_2958 = 0;
      var var_2965 = 1, stop_2965 = lua_assertfloat(lua_len(_rateBuffList_2958));
      for (; var_2965 <= stop_2965; var_2965++) {
        var _i_2965 = var_2965;
        var _rateBuff_2966 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_rateBuffList_2958, _i_2965)])[0];
        if (!lua_eq(_rateBuff_2966, null)) {
          _byRateBuff_2958 = lua_add(_byRateBuff_2958, _rateBuff_2966);
        }
      }
      _byRateBuff_2958 = lua_multiply(_value_2958, _byRateBuff_2958);
      _value_2958 = lua_add(lua_add(_value_2958, _byBuff_2958), _byRateBuff_2958);
      if (lua_lt(_value_2958, 1)) {
        _value_2958 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2958]);
      return [];
    })
    G.str['SCR_Get_MON_MAXMATK'] = (function (_self) {
      var tmp;
      var _lv_2969 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2969, null)) {
        _lv_2969 = 1;
      }
      var _byLevel_2969 = lua_multiply(_lv_2969, 1.0);
      var _stat_2969 = lua_call(G.str['TryGetProp'], [_self, "INT"])[0];
      if (lua_eq(_stat_2969, null)) {
        _stat_2969 = 1;
      }
      var _byStat_2969 = lua_add((lua_multiply(_stat_2969, 2)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_2969, 10)])[0], (lua_multiply(_byLevel_2969, 0.05)))));
      var _byItem_2969 = lua_call(G.str['SCR_MON_ITEM_WEAPON_CALC'], [_self])[0];
      var _value_2969 = lua_add(lua_add(_byLevel_2969, _byStat_2969), _byItem_2969);
      var _monAtkRange_2969 = lua_call(G.str['TryGetProp'], [_self, "ATK_RANGE"])[0];
      if (lua_eq(_monAtkRange_2969, null)) {
        _monAtkRange_2969 = 100;
      }
      var _range_2969 = lua_call(G.str['MinMaxCorrection'], [_monAtkRange_2969, 100, 200])[0];
      _value_2969 = lua_multiply(_value_2969, (lua_divide(_range_2969, 100.0)));
      var _raceTypeRate_2969 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "MATK"])[0];
      _value_2969 = lua_multiply(_value_2969, _raceTypeRate_2969);
      var _byBuff_2969 = 0;
      var _byBuffList_2969 = lua_newtable(["MATK_BM", "MAXMATK_BM"]);
      var var_2973 = 1, stop_2973 = lua_assertfloat(lua_len(_byBuffList_2969));
      for (; var_2973 <= stop_2973; var_2973++) {
        var _i_2973 = var_2973;
        var _byBuffTemp_2974 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_byBuffList_2969, _i_2973)])[0];
        if (lua_eq(_byBuffTemp_2974, null)) {
          _byBuffTemp_2974 = 0;
        }
        _byBuff_2969 = lua_add(_byBuff_2969, _byBuffTemp_2974);
      }
      var _rateBuffList_2969 = lua_newtable(['MATK_RATE_BM', 'MAXMATK_RATE_BM']);
      var _byRateBuff_2969 = 0;
      var var_2976 = 1, stop_2976 = lua_assertfloat(lua_len(_rateBuffList_2969));
      for (; var_2976 <= stop_2976; var_2976++) {
        var _i_2976 = var_2976;
        var _rateBuff_2977 = lua_call(G.str['TryGetProp'], [_self, lua_tableget(_rateBuffList_2969, _i_2976)])[0];
        if (!lua_eq(_rateBuff_2977, null)) {
          _byRateBuff_2969 = lua_add(_byRateBuff_2969, _rateBuff_2977);
        }
      }
      _byRateBuff_2969 = lua_multiply(_value_2969, _byRateBuff_2969);
      _value_2969 = lua_add(lua_add(_value_2969, _byBuff_2969), _byRateBuff_2969);
      if (lua_lt(_value_2969, 1)) {
        _value_2969 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2969]);
      return [];
    })
    G.str['SCR_Get_MON_BLKABLE'] = (function (_self) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'HPCount'))) {
        return [0];
      }
      var _value_2980 = lua_call(G.str['TryGetProp'], [_self, 'Blockable', 0])[0];
      return [_value_2980];
      return [];
    })
    G.str['SCR_Get_MON_BLK'] = (function (_self) {
      var tmp;
      if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "BLKABLE", 0])[0], 0)) {
        return [0];
      }
      var _lv_2982 = lua_tableget(_self, 'Lv');
      var _byLevel_2982 = lua_multiply(_lv_2982, 1.0);
      var _raceTypeRate_2982 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "BLK"])[0];
      var _value_2982 = lua_multiply(_byLevel_2982, _raceTypeRate_2982);
      var _byBuff_2982 = lua_call(G.str['TryGetProp'], [_self, "BLK_BM", 0])[0];
      var _byRateBuff_2982 = lua_call(G.str['TryGetProp'], [_self, "BLK_RATE_BM", 0])[0];
      _byRateBuff_2982 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_2982, _byRateBuff_2982)])[0];
      _value_2982 = lua_add(lua_add(_value_2982, _byBuff_2982), _byRateBuff_2982);
      if (lua_lt(_value_2982, 0)) {
        _value_2982 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2982]);
      return [];
    })
    G.str['SCR_Get_MON_BLK_BREAK'] = (function (_self) {
      var tmp;
      var _lv_2985 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_2985, null)) {
        _lv_2985 = 1;
      }
      var _byLevel_2985 = lua_multiply(_lv_2985, 1.0);
      var _raceTypeRate_2985 = lua_call(G.str['SCR_RACE_TYPE_RATE'], [_self, "BLK_BREAK"])[0];
      var _value_2985 = lua_multiply(_byLevel_2985, _raceTypeRate_2985);
      var _byBuff_2985 = lua_call(G.str['TryGetProp'], [_self, "BLK_BREAK_BM", 0])[0];
      var _byRateBuff_2985 = lua_call(G.str['TryGetProp'], [_self, "BLK_BREAK_RATE_BM", 0])[0];
      _byRateBuff_2985 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_2985, _byRateBuff_2985)])[0];
      _value_2985 = lua_add(lua_add(_value_2985, _byBuff_2985), _byRateBuff_2985);
      if (lua_lt(_value_2985, 0)) {
        _value_2985 = 0;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2985]);
      return [];
    })
    G.str['SCR_Get_MON_KDArmorType'] = (function (_self) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'HPCount'))) {
        return [9999];
      }
      var _value_2988 = lua_tableget(_self, 'KDArmor');
      var _buffList_2988 = lua_newtable(["Safe", "PainBarrier_Buff", "Lycanthropy_Buff", "Marschierendeslied_Buff", "Methadone_Buff", "Mon_PainBarrier_Buff", "SkullFollowPainBarrier_Buff"]);
      var var_2990 = 1, stop_2990 = lua_assertfloat(lua_len(_buffList_2988));
      for (; var_2990 <= stop_2990; var_2990++) {
        var _i_2990 = var_2990;
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, lua_tableget(_buffList_2988, _i_2990)])[0], 'YES')) {
          _value_2988 = 9999;
        }
      }
      return [_value_2988];
      return [];
    })
    G.str['SCR_GET_MON_RHPTIME'] = (function (_self) {
      var tmp;
      return [10000];
      return [];
    })
    G.str['SCR_GET_COMPANION_RHPTIME'] = (function (_self) {
      var tmp;
      return [5000];
      return [];
    })
    G.str['SCR_GET_MON_MSHIELD'] = (function (_self) {
      var tmp;
      return [lua_multiply(lua_divide(lua_tableget(_self, 'ShieldRate'), 100), lua_tableget(_self, 'MHP'))];
      return [];
    })
    G.str['SCR_Get_MON_RHP'] = (function (_self) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'HPCount'))) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetBuffByProp'], [_self, 'Keyword', 'Curse'])[0], null)) {
        return [0];
      }
      var _value_2996 = lua_call(G.str['TryGetProp'], [_self, "RHP_BM"])[0];
      return [_value_2996];
      return [];
    })
    G.str['SCR_Get_MON_CRTDEF'] = (function (_self) {
      var tmp;
      var _value_2999 = lua_tableget(_self, 'Lv');
      _value_2999 = lua_add(_value_2999, lua_tableget(_self, 'CRTDEF_BM'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_2999]);
      return [];
    })
    G.str['SCR_Get_MON_DRR'] = (function (_self) {
      var tmp;
      var _value_3000 = 25;
      _value_3000 = lua_add(_value_3000, lua_tableget(_self, 'DRR_BM'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3000]);
      return [];
    })
    G.str['SCR_Get_MON_TR'] = (function (_self) {
      var tmp;
      var _value_3001 = 10;
      _value_3001 = lua_add(_value_3001, lua_tableget(_self, 'TR_BM'));
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3001]);
      return [];
    })
    G.str['SCR_GET_MON_FIRE_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3002 = "Fire";
      var _value_3002 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3002])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3002]);
      return [];
    })
    G.str['SCR_GET_MON_ICE_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3003 = "Ice";
      var _value_3003 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3003])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3003]);
      return [];
    })
    G.str['SCR_GET_MON_POISON_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3004 = "Poison";
      var _value_3004 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3004])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3004]);
      return [];
    })
    G.str['SCR_GET_MON_LIGHTNING_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3005 = "Lightning";
      var _value_3005 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3005])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3005]);
      return [];
    })
    G.str['SCR_GET_MON_SOUL_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3006 = "Soul";
      var _value_3006 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3006])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3006]);
      return [];
    })
    G.str['SCR_GET_MON_EARTH_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3007 = "Earth";
      var _value_3007 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3007])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3007]);
      return [];
    })
    G.str['SCR_GET_MON_HOLY_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3008 = "Holy";
      var _value_3008 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3008])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3008]);
      return [];
    })
    G.str['SCR_GET_MON_DARK_ATK'] = (function (_self) {
      var tmp;
      var _attributeName_3009 = "Dark";
      var _value_3009 = lua_call(G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'], [_self, _attributeName_3009])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3009]);
      return [];
    })
    G.str['SCR_GET_MON_ATTRIBUTE_ATK_CALC'] = (function (_self, _attributeName) {
      var tmp;
      var _value_3010 = lua_call(G.str['TryGetProp'], [_self, lua_concat(_attributeName, "_Atk_BM"), 0])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3010]);
      return [];
    })
    G.str['SCR_Get_MON_HitRange'] = (function (_self) {
      var tmp;
      var _value_3011 = 10;
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3011]);
      return [];
    })
    G.str['SCR_Get_MON_ASPD'] = (function (_self) {
      var tmp;
      var _value_3012 = 0;
      _value_3012 = lua_multiply(lua_tableget(_self, 'AniASPD'), 1.25);
      _value_3012 = lua_divide(lua_multiply(_value_3012, (lua_subtract(100, lua_tableget(_self, 'ASPD_BM')))), 100);
      if (lua_lt(_value_3012, 500)) {
        _value_3012 = 500;
      } else if (lua_lt(10000, _value_3012)) {
        _value_3012 = 10000;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3012]);
      return [];
    })
    G.str['SCR_GET_SKL_CAST_MON'] = (function (_skill) {
      var tmp;
      return [lua_tableget(_skill, 'BasicCast')];
      return [];
    })
    G.str['SCR_Get_MON_MSPD'] = (function (_self) {
      var tmp;
      var _fixMSPD_3016 = lua_call(G.str['TryGetProp'], [_self, "FIXMSPD_BM"])[0];
      if ((!lua_eq(_fixMSPD_3016, null) && lua_lt(0, _fixMSPD_3016))) {
        return [_fixMSPD_3016];
      }
      var _wlkMSPD_3016 = lua_call(G.str['TryGetProp'], [_self, "WlkMSPD", 0])[0];
      if (lua_eq(_wlkMSPD_3016, 0)) {
        return [0];
      }
      var _byBuff_3016 = lua_call(G.str['TryGetProp'], [_self, "MSPD_BM", 0])[0];
      var _byBuffOnlyTopValue_3016 = 0;
      if (lua_eq(lua_call(G.str['IsServerSection'], [_self])[0], 1)) {
        var _byBuffOnlyTopList_3019 = lua_call(G.str['GetMSPDBuffInfoTable'], [_self])[0];
        if (!lua_eq(_byBuffOnlyTopList_3019, null)) {
          tmp = lua_call(G.str['pairs'], [_byBuffOnlyTopList_3019]);
          var f_3021 = tmp[0], s_3021 = tmp[1], var_3021 = tmp[2];
          while ((tmp = lua_call(f_3021, [s_3021, var_3021]))[0] != null) {
            var_3021 = tmp[0];
            var _k_3021 = var_3021, _v_3021 = tmp[1];
            tmp = null;
            if (lua_lt(_byBuffOnlyTopValue_3016, lua_tableget(_byBuffOnlyTopList_3019, _k_3021))) {
              _byBuffOnlyTopValue_3016 = lua_tableget(_byBuffOnlyTopList_3019, _k_3021);
            }
          }
          tmp = null;
        }
      }
      var _moveType_3016 = lua_call(G.str['GetExProp'], [_self, 'MOVE_TYPE_CURRENT'])[0];
      if (!lua_eq(_moveType_3016, 0)) {
        var _runMSPD_3024 = lua_call(G.str['TryGetProp'], [_self, "RunMSPD", 0])[0];
        var _moveSpd_3024 = lua_add(lua_add(_wlkMSPD_3016, _byBuff_3016), _byBuffOnlyTopValue_3016);
        if (lua_eq(_moveType_3016, 2)) {
          _moveSpd_3024 = lua_add(lua_add(_runMSPD_3024, _byBuff_3016), _byBuffOnlyTopValue_3016);
        } else if (lua_eq(_moveType_3016, 3)) {
          _moveSpd_3024 = lua_add(lua_add(lua_add(_wlkMSPD_3016, _runMSPD_3024), _byBuff_3016), _byBuffOnlyTopValue_3016);
        }
        return [_moveSpd_3024];
      }
      var _value_3016 = lua_add(lua_add(_wlkMSPD_3016, _byBuff_3016), _byBuffOnlyTopValue_3016);
      if (lua_lt(_value_3016, 0)) {
        _value_3016 = 0;
      }
      _value_3016 = lua_multiply(_value_3016, G.str['SERV_MSPD_FIX']);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3016]);
      return [];
    })
    G.str['SCR_Get_MON_minRange'] = (function (_self) {
      var tmp;
      var _value_3028 = lua_call(G.str['TryGetProp'], [_self, "MinR", 0])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3028]);
      return [];
    })
    G.str['SCR_Get_MON_maxRange'] = (function (_self) {
      var tmp;
      var _value_3029 = lua_call(G.str['TryGetProp'], [_self, "MaxR", 0])[0];
      var _byBuff_3029 = lua_call(G.str['TryGetProp'], [_self, "maxRange_BM", 0])[0];
      _value_3029 = lua_add(_value_3029, _byBuff_3029);
      var _minRange_3029 = lua_call(G.str['TryGetProp'], [_self, "MinR", 0])[0];
      if (lua_lt(_value_3029, (lua_add(_minRange_3029, 2)))) {
        _value_3029 = lua_add(_minRange_3029, 2);
      } else if (lua_lt(300, _value_3029)) {
        _value_3029 = 300;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3029]);
      return [];
    })
    G.str['SCR_Get_MON_KDPow'] = (function (_self) {
      var tmp;
      var _value_3032 = 0;
      var _byBuff_3032 = lua_call(G.str['TryGetProp'], [_self, "KDPow_BM", 0])[0];
      _value_3032 = lua_add(_value_3032, _byBuff_3032);
      var _monKDRank_3032 = lua_call(G.str['TryGetProp'], [_self, "KDRank", 1])[0];
      _value_3032 = lua_multiply(_value_3032, _monKDRank_3032);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3032]);
      return [];
    })
    G.str['SCR_GET_MON_KDBONUS'] = (function (_self) {
      var tmp;
      var _defaultValue_3033 = 120;
      var _lv_3033 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _byLevel_3033 = lua_multiply(_lv_3033, 10);
      var _byBuff_3033 = lua_call(G.str['TryGetProp'], [_self, "KDBonus_BM", 0])[0];
      var _value_3033 = lua_add(lua_add(_defaultValue_3033, _byLevel_3033), _byBuff_3033);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3033]);
      return [];
    })
    G.str['SCR_GET_MON_KDDEFENCE'] = (function (_self) {
      var tmp;
      var _defaultValue_3034 = 80;
      var _lv_3034 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _byLevel_3034 = lua_multiply(_lv_3034, 10);
      var _byBuff_3034 = lua_call(G.str['TryGetProp'], [_self, "KDBonus_BM", 0])[0];
      var _value_3034 = lua_add(lua_add(_defaultValue_3034, _byLevel_3034), _byBuff_3034);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3034]);
      return [];
    })
    G.str['SCR_Get_MON_MGP'] = (function (_self) {
      var tmp;
      return [65535];
      return [];
    })
    G.str['SCR_Get_MON_SR'] = (function (_self) {
      var tmp;
      var _value_3036 = 50;
      var _monSize_3036 = lua_call(G.str['TryGetProp'], [_self, 'Size', "S"])[0];
      if (lua_eq(_monSize_3036, 'S')) {
        _value_3036 = 8;
      } else if (lua_eq(_monSize_3036, 'M')) {
        _value_3036 = 16;
      } else if (lua_eq(_monSize_3036, 'L')) {
        _value_3036 = 24;
      } else if (lua_eq(_monSize_3036, 'XL')) {
        _value_3036 = 50;
      }
      var _byBuff_3036 = lua_call(G.str['TryGetProp'], [_self, "SR_BM", 0])[0];
      _value_3036 = lua_add(_value_3036, _byBuff_3036);
      if (lua_lt(_value_3036, 1)) {
        _value_3036 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3036]);
      return [];
    })
    G.str['SCR_Get_MON_SDR'] = (function (_self) {
      var tmp;
      var _fixedSDR_3042 = lua_call(G.str['TryGetProp'], [_self, 'FixedMinSDR_BM'])[0];
      if ((!lua_eq(_fixedSDR_3042, null) && !lua_eq(_fixedSDR_3042, 0))) {
        return [1];
      }
      var _value_3042 = 5;
      var _monSDR_3042 = lua_call(G.str['TryGetProp'], [_self, 'MonSDR', 1])[0];
      var _monSize_3042 = lua_call(G.str['TryGetProp'], [_self, 'Size', "S"])[0];
      if (lua_eq(_monSize_3042, 'S')) {
        _value_3042 = 1;
      } else if (lua_eq(_monSize_3042, 'M')) {
        _value_3042 = 2;
      } else if (lua_eq(_monSize_3042, 'L')) {
        _value_3042 = 3;
      } else if (lua_eq(_monSize_3042, 'XL')) {
        _value_3042 = 5;
      }
      var _byBuff_3042 = lua_call(G.str['TryGetProp'], [_self, 'SDR_BM', 0])[0];
      _value_3042 = lua_add(_value_3042, _byBuff_3042);
      if (lua_lt(_value_3042, 1)) {
        _value_3042 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3042]);
      return [];
    })
    G.str['SCR_GET_MONSKL_COOL'] = (function (_skill) {
      var tmp;
      var _value_3049 = lua_call(G.str['TryGetProp'], [_skill, "BasicCoolDown", 0])[0];
      return [_value_3049];
      return [];
    })
    G.str['SCR_MON_COMBOABLE'] = (function (_mon) {
      var tmp;
      if (lua_eq(lua_call(G.str['TryGetProp'], [_mon, "GroupName"])[0], "Monster")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_GET_MON_RES_FIRE'] = (function (_self) {
      var tmp;
      var _attributeName_3052 = "Fire";
      var _value_3052 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3052])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3052]);
      return [];
    })
    G.str['SCR_GET_MON_RES_ICE'] = (function (_self) {
      var tmp;
      var _attributeName_3053 = "Ice";
      var _value_3053 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3053])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3053]);
      return [];
    })
    G.str['SCR_GET_MON_RES_POISON'] = (function (_self) {
      var tmp;
      var _attributeName_3054 = "Poison";
      var _value_3054 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3054])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3054]);
      return [];
    })
    G.str['SCR_GET_MON_RES_LIGHTNING'] = (function (_self) {
      var tmp;
      var _attributeName_3055 = "Lightning";
      var _value_3055 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3055])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3055]);
      return [];
    })
    G.str['SCR_GET_MON_RES_SOUL'] = (function (_self) {
      var tmp;
      var _attributeName_3056 = "Soul";
      var _value_3056 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3056])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3056]);
      return [];
    })
    G.str['SCR_GET_MON_RES_EARTH'] = (function (_self) {
      var tmp;
      var _attributeName_3057 = "Earth";
      var _value_3057 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3057])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3057]);
      return [];
    })
    G.str['SCR_GET_MON_RES_HOLY'] = (function (_self) {
      var tmp;
      var _attributeName_3058 = "Holy";
      var _value_3058 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3058])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3058]);
      return [];
    })
    G.str['SCR_GET_MON_RES_DARK'] = (function (_self) {
      var tmp;
      var _attributeName_3059 = "Dark";
      var _value_3059 = lua_call(G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'], [_self, _attributeName_3059])[0];
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3059]);
      return [];
    })
    G.str['SCR_GET_MON_RES_ATTRIBUTE_CALC'] = (function (_self, _attributeName) {
      var tmp;
      var _lv_3060 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      var _fixedFigure_3060 = 30;
      var _byLevel_3060 = lua_add(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_power((lua_divide(_lv_3060, 3)), 2)), _fixedFigure_3060)])[0], _fixedFigure_3060);
      var _byBuff_3060 = lua_call(G.str['TryGetProp'], [_self, lua_concat("Res", lua_concat(_attributeName, "_BM")), 0])[0];
      var _byStatType_3060 = 0;
      var _statType_3060 = lua_call(G.str['TryGetProp'], [_self, "StatType", "None"])[0];
      if (!lua_eq(_statType_3060, null)) {
        var _statTypeClass_3061 = lua_call(G.str['GetClass'], ["Stat_Monster_Type", _statType_3060])[0];
        if (!lua_eq(_statTypeClass_3061, null)) {
          _byStatType_3060 = lua_multiply(lua_call(G.str['TryGetProp'], [_statTypeClass_3061, "ResAttributeRate", 100])[0], 0.01);
        }
      }
      var _value_3060 = lua_add((lua_multiply(_byLevel_3060, _byStatType_3060)), _byBuff_3060);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3060]);
      return [];
    })
    G.str['SCR_GET_MON_LIMIT_BUFF_COUNT'] = (function (_self) {
      var tmp;
      var _value_3063 = 999;
      return [_value_3063];
      return [];
    })
    G.str['CLIENT_SORCERER_SUMMONING_MON'] = (function (_self, _caster, _skl, _item) {
      var tmp;
      if (lua_eq(null, _self)) {
        return [];
      }
      if (lua_eq(null, _caster)) {
        return [];
      }
      if (lua_eq(null, _skl)) {
        return [];
      }
      lua_tableset(_self, 'Lv', lua_tableget(_caster, 'Lv'));
      lua_tableset(_self, 'StatType', 30);
      var _monDef_3064 = lua_tableget(_self, 'DEF');
      var _monMDef_3064 = lua_tableget(_self, 'MDEF');
      var _sklbonus_3064 = lua_add(1, lua_multiply(lua_tableget(_skl, 'Level'), 0.1));
      var _itembonus_3064 = lua_add(1, lua_multiply(lua_tableget(_item, 'Level'), 0.1));
      lua_tableset(_self, 'MATK_BM', lua_multiply((lua_add(500, (lua_multiply(lua_tableget(_caster, 'INT'), _sklbonus_3064)))), _itembonus_3064));
      lua_tableset(_self, 'PATK_BM', lua_multiply((lua_add(500, (lua_multiply(lua_tableget(_caster, 'INT'), _sklbonus_3064)))), _itembonus_3064));
      lua_tableset(_self, 'DEF_BM', lua_multiply((lua_add(lua_divide(_monDef_3064, 2), (lua_multiply(lua_tableget(_caster, 'MNA'), _sklbonus_3064)))), _itembonus_3064));
      lua_tableset(_self, 'MDEF_BM', lua_multiply((lua_add(lua_divide(_monMDef_3064, 2), (lua_multiply(lua_tableget(_caster, 'MNA'), _sklbonus_3064)))), _itembonus_3064));
      return [];
    })
    G.str['SCR_GET_MON_SKILLFACTORRATE'] = (function (_self) {
      var tmp;
      var _value_3068 = 100;
      var _byBuff_3068 = lua_call(G.str['TryGetProp'], [_self, "SkillFactorRate_BM"])[0];
      if (lua_eq(_byBuff_3068, null)) {
        _byBuff_3068 = 0;
      }
      var _byRateBuff_3068 = lua_call(G.str['TryGetProp'], [_self, "SkillFactorRate_RATE_BM"])[0];
      if (lua_eq(_byRateBuff_3068, null)) {
        _byRateBuff_3068 = 0;
      }
      _byRateBuff_3068 = lua_multiply(_value_3068, _byRateBuff_3068);
      _value_3068 = lua_add(lua_add(_value_3068, _byBuff_3068), _byRateBuff_3068);
      return [_value_3068];
      return [];
    })
    G.str['SCR_Get_MON_HEAL_PWR'] = (function (_self) {
      var tmp;
      var _lv_3071 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_3071, null)) {
        _lv_3071 = 1;
      }
      var _byLevel_3071 = lua_multiply(_lv_3071, 1.0);
      var _stat_3071 = lua_call(G.str['TryGetProp'], [_self, "MNA"])[0];
      if (lua_eq(_stat_3071, null)) {
        _stat_3071 = 1;
      }
      var _byStat_3071 = lua_add((lua_multiply(_stat_3071, 1)), (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_stat_3071, 10)])[0], (lua_multiply(_byLevel_3071, 0.03)))));
      var _value_3071 = lua_add(_byLevel_3071, _byStat_3071);
      var _byBuff_3071 = 0;
      var _byBuffTemp_3071 = lua_call(G.str['TryGetProp'], [_self, "HEAL_PWR_BM"])[0];
      if (!lua_eq(_byBuffTemp_3071, null)) {
        _byBuff_3071 = lua_add(_byBuff_3071, _byBuffTemp_3071);
      }
      var _byRateBuff_3071 = 0;
      var _byRateBuffTemp_3071 = lua_call(G.str['TryGetProp'], [_self, "HEAL_PWR_RATE_BM"])[0];
      if (!lua_eq(_byRateBuffTemp_3071, null)) {
        _byRateBuff_3071 = lua_add(_byRateBuff_3071, _byRateBuffTemp_3071);
      }
      _byRateBuff_3071 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3071, _byRateBuffTemp_3071)])[0];
      _value_3071 = lua_add(lua_add(_value_3071, _byBuff_3071), _byRateBuff_3071);
      if (lua_lt(_value_3071, 1)) {
        _value_3071 = 1;
      }
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3071]);
      return [];
    })
    G.str['SCR_Get_MON_Slash_Res'] = (function (_self) {
      var tmp;
      var _value_3077 = 0;
      var _Slash_Res_3077 = lua_call(G.str['TryGetProp'], [_self, "Slash_Res"])[0];
      if (lua_eq(_Slash_Res_3077, null)) {
        _Slash_Res_3077 = 0;
      }
      var _Slash_Def_BM_3077 = lua_call(G.str['TryGetProp'], [_self, "Slash_Def_BM"])[0];
      if (lua_eq(_Slash_Def_BM_3077, null)) {
        _Slash_Def_BM_3077 = 0;
      }
      _value_3077 = lua_add(lua_add(_value_3077, _Slash_Res_3077), _Slash_Def_BM_3077);
      return [_value_3077];
      return [];
    })
    G.str['SCR_Get_MON_Aries_Res'] = (function (_self) {
      var tmp;
      var _value_3080 = 0;
      var _Aries_Res_3080 = lua_call(G.str['TryGetProp'], [_self, "Aries_Res"])[0];
      if (lua_eq(_Aries_Res_3080, null)) {
        _Aries_Res_3080 = 0;
      }
      var _Aries_Def_BM_3080 = lua_call(G.str['TryGetProp'], [_self, "Aries_Def_BM"])[0];
      if (lua_eq(_Aries_Def_BM_3080, null)) {
        _Aries_Def_BM_3080 = 0;
      }
      _value_3080 = lua_add(lua_add(_value_3080, _Aries_Res_3080), _Aries_Def_BM_3080);
      return [_value_3080];
      return [];
    })
    G.str['SCR_Get_MON_Strike_Res'] = (function (_self) {
      var tmp;
      var _value_3083 = 0;
      var _Strike_Res_3083 = lua_call(G.str['TryGetProp'], [_self, "Strike_Res"])[0];
      if (lua_eq(_Strike_Res_3083, null)) {
        _Strike_Res_3083 = 0;
      }
      var _Strike_Def_BM_3083 = lua_call(G.str['TryGetProp'], [_self, "Strike_Def_BM"])[0];
      if (lua_eq(_Strike_Def_BM_3083, null)) {
        _Strike_Def_BM_3083 = 0;
      }
      _value_3083 = lua_add(lua_add(_value_3083, _Strike_Res_3083), _Strike_Def_BM_3083);
      return [_value_3083];
      return [];
    })
    G.str['SCR_Get_MON_Magic_Res'] = (function (_self) {
      var tmp;
      var _value_3086 = 0;
      var _magicRes_3086 = lua_call(G.str['TryGetProp'], [_self, "Magic_Res"])[0];
      if (lua_eq(_magicRes_3086, null)) {
        _magicRes_3086 = 0;
      }
      var _magicDefBM_3086 = lua_call(G.str['TryGetProp'], [_self, "Magic_Def_BM"])[0];
      if (lua_eq(_magicDefBM_3086, null)) {
        _magicDefBM_3086 = 0;
      }
      _value_3086 = lua_add(lua_add(_value_3086, _magicRes_3086), _magicDefBM_3086);
      return [_value_3086];
      return [];
    })
    G.str['SCR_Get_MON_Arrow_Res'] = (function (_self) {
      var tmp;
      var _value_3089 = 0;
      var _Arrow_Res_3089 = lua_call(G.str['TryGetProp'], [_self, "Arrow_Res"])[0];
      if (lua_eq(_Arrow_Res_3089, null)) {
        _Arrow_Res_3089 = 0;
      }
      var _Arrow_Def_BM_3089 = lua_call(G.str['TryGetProp'], [_self, "Arrow_Def_BM"])[0];
      if (lua_eq(_Arrow_Def_BM_3089, null)) {
        _Arrow_Def_BM_3089 = 0;
      }
      _value_3089 = lua_add(lua_add(_value_3089, _Arrow_Res_3089), _Arrow_Def_BM_3089);
      return [_value_3089];
      return [];
    })
    G.str['SCR_Get_MON_Gun_Res'] = (function (_self) {
      var tmp;
      var _value_3092 = 0;
      var _Gun_Res_3092 = lua_call(G.str['TryGetProp'], [_self, "Gun_Res"])[0];
      if (lua_eq(_Gun_Res_3092, null)) {
        _Gun_Res_3092 = 0;
      }
      var _Gun_Def_BM_3092 = lua_call(G.str['TryGetProp'], [_self, "Gun_Def_BM"])[0];
      if (lua_eq(_Gun_Def_BM_3092, null)) {
        _Gun_Def_BM_3092 = 0;
      }
      _value_3092 = lua_add(lua_add(_value_3092, _Gun_Res_3092), _Gun_Def_BM_3092);
      return [_value_3092];
      return [];
    })
    G.str['SCR_Get_MON_Cannon_Res'] = (function (_self) {
      var tmp;
      var _value_3095 = 0;
      var _Cannon_Res_3095 = lua_call(G.str['TryGetProp'], [_self, "Cannon_Res"])[0];
      if (lua_eq(_Cannon_Res_3095, null)) {
        _Cannon_Res_3095 = 0;
      }
      var _Cannon_Def_BM_3095 = lua_call(G.str['TryGetProp'], [_self, "Cannon_Def_BM"])[0];
      if (lua_eq(_Cannon_Def_BM_3095, null)) {
        _Cannon_Def_BM_3095 = 0;
      }
      _value_3095 = lua_add(lua_add(_value_3095, _Cannon_Res_3095), _Cannon_Def_BM_3095);
      return [_value_3095];
      return [];
    })
    G.str['SCR_RACE_TYPE_RATE'] = (function (_self, _prop) {
      var tmp;
      var _raceTypeRate_3098 = 100;
      var _raceType_3098 = lua_call(G.str['TryGetProp'], [_self, "RaceType", "None"])[0];
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "EXPROP_SHADOW_INFERNAL"])[0], 1)) {
        _raceType_3098 = lua_call(G.str['GetExProp_Str'], [_self, "SHADOW_INFERNAL_RACETYPE"])[0];
        if (lua_eq(_raceType_3098, null)) {
          _raceType_3098 = "None";
        }
      }
      var _raceTypeClass_3098 = lua_call(G.str['GetClass'], ["Stat_Monster_Race", _raceType_3098])[0];
      if (!lua_eq(_raceTypeClass_3098, null)) {
        _raceTypeRate_3098 = lua_call(G.str['TryGetProp'], [_raceTypeClass_3098, _prop, _raceTypeRate_3098])[0];
      }
      _raceTypeRate_3098 = lua_divide(_raceTypeRate_3098, 100);
      if (lua_lt(_raceTypeRate_3098, 0)) {
        _raceTypeRate_3098 = 0;
      }
      var _sizeTypeRate_3098 = 100;
      var _sizeType_3098 = lua_call(G.str['TryGetProp'], [_self, "Size", "None"])[0];
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "EXPROP_SHADOW_INFERNAL"])[0], 1)) {
        _sizeType_3098 = lua_call(G.str['GetExProp_Str'], [_self, "SHADOW_INFERNAL_SIZE"])[0];
        if (lua_eq(_sizeType_3098, null)) {
          _sizeType_3098 = "None";
        }
      }
      if (!lua_eq(_sizeType_3098, null)) {
        var _sizeTypeClass_3105 = lua_call(G.str['GetClass'], ["Stat_Monster_Race", _sizeType_3098])[0];
        if (!lua_eq(_sizeTypeClass_3105, null)) {
          _sizeTypeRate_3098 = lua_call(G.str['TryGetProp'], [_sizeTypeClass_3105, _prop, _sizeTypeRate_3098])[0];
        }
      }
      _sizeTypeRate_3098 = lua_divide(_sizeTypeRate_3098, 100);
      if (lua_lt(_sizeTypeRate_3098, 0)) {
        _sizeTypeRate_3098 = 0;
      }
      var _rankTypeRate_3098 = 100;
      var _rankType_3098 = lua_call(G.str['TryGetProp'], [_self, "MonRank", "None"])[0];
      if (!lua_eq(_rankType_3098, null)) {
        var _rankTypeClass_3108 = lua_call(G.str['GetClass'], ["Stat_Monster_Race", _rankType_3098])[0];
        if (!lua_eq(_rankTypeClass_3108, null)) {
          _rankTypeRate_3098 = lua_call(G.str['TryGetProp'], [_rankTypeClass_3108, _prop, _rankTypeRate_3098])[0];
        }
      }
      _rankTypeRate_3098 = lua_divide(_rankTypeRate_3098, 100);
      if (lua_lt(_rankTypeRate_3098, 0)) {
        _rankTypeRate_3098 = 0;
      }
      var _value_3098 = lua_multiply(lua_multiply(_raceTypeRate_3098, _sizeTypeRate_3098), _rankTypeRate_3098);
      return [_value_3098];
      return [];
    })
    G.str['SCR_MON_ITEM_WEAPON_CALC'] = (function (_self) {
      var tmp;
      var _monClassName_3111 = lua_call(G.str['TryGetProp'], [_self, "ClassName", "None"])[0];
      var _monOriginFaction_3111 = lua_call(G.str['TryGetProp'], [lua_call(G.str['GetClass'], ["Monster", _monClassName_3111])[0], "Faction"])[0];
      if (lua_eq(_monOriginFaction_3111, "Summon")) {
        return [0];
      }
      var _lv_3111 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      _lv_3111 = lua_tablegetcall(G.str['math'], 'max', [1, lua_subtract(_lv_3111, 30)])[0];
      var _value_3111 = lua_add(20, (lua_multiply(_lv_3111, 5)));
      var _defList_3111 = lua_newtable();
      lua_tableset(_defList_3111, "Cloth", 1.0);
      lua_tableset(_defList_3111, "Leather", 1.5);
      lua_tableset(_defList_3111, "Iron", 1.0);
      var _armorMaterial_3111 = lua_call(G.str['TryGetProp'], [_self, "ArmorMaterial", "None"])[0];
      if (!lua_eq(lua_tableget(_defList_3111, _armorMaterial_3111), null)) {
        _value_3111 = lua_multiply(_value_3111, lua_tableget(_defList_3111, _armorMaterial_3111));
      }
      var _byReinforce_3111 = 0;
      var _byTranscend_3111 = 0;
      var _statType_3111 = lua_call(G.str['TryGetProp'], [_self, "StatType", "None"])[0];
      if (!lua_eq(_statType_3111, null)) {
        var _statTypeClass_3114 = lua_call(G.str['GetClass'], ["Stat_Monster_Type", _statType_3111])[0];
        if (!lua_eq(_statTypeClass_3114, null)) {
          var _itemGrade_3115 = lua_call(G.str['TryGetProp'], [_statTypeClass_3114, "WeaponGrade", "Normal"])[0];
          tmp = lua_call(G.str['SCR_MON_ITEM_GRADE_RATE'], [_self, _itemGrade_3115]); var _basicGradeRatio_3115 = tmp[0]; var _reinforceGradeRatio_3115 = tmp[1]; tmp = null;
          _value_3111 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3111, _basicGradeRatio_3115)])[0];
          var _reinforceValue_3115 = lua_call(G.str['TryGetProp'], [_statTypeClass_3114, "ReinforceWeapon", 0])[0];
          _byReinforce_3111 = lua_call(G.str['SCR_MON_ITEM_REINFORCE_WEAPON_CALC'], [_self, _lv_3111, _reinforceValue_3115, _reinforceGradeRatio_3115])[0];
          var _itemTranscend_3115 = lua_call(G.str['TryGetProp'], [_statTypeClass_3114, "TranscendWeapon", 0])[0];
          var _transcendValue_3115 = lua_call(G.str['SCR_MON_ITEM_TRANSCEND_CALC'], [_self, _itemTranscend_3115])[0];
          _byTranscend_3111 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3111, _transcendValue_3115)])[0];
        }
      }
      _value_3111 = lua_add(lua_add(_value_3111, _byReinforce_3111), _byTranscend_3111);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3111]);
      return [];
    })
    G.str['SCR_MON_ITEM_ARMOR_DEF_CALC'] = (function (_self) {
      var tmp;
      return lua_call(G.str['SCR_MON_ITEM_ARMOR_CALC'], [_self, "DEF"]);
      return [];
    })
    G.str['SCR_MON_ITEM_ARMOR_MDEF_CALC'] = (function (_self) {
      var tmp;
      return lua_call(G.str['SCR_MON_ITEM_ARMOR_CALC'], [_self, "MDEF"]);
      return [];
    })
    G.str['SCR_MON_ITEM_ARMOR_CALC'] = (function (_self, _defType) {
      var tmp;
      var _lv_3118 = lua_call(G.str['TryGetProp'], [_self, "Lv", 1])[0];
      _lv_3118 = lua_tablegetcall(G.str['math'], 'max', [1, lua_subtract(_lv_3118, 30)])[0];
      var _value_3118 = (lua_add(40, (lua_multiply(_lv_3118, 8))));
      if (!lua_eq(_defType, null)) {
        var _defClass_3119 = lua_call(G.str['GetClass'], ["item_grade", lua_concat("armorMaterial_", _defType)])[0];
        var _armorMaterial_3119 = lua_call(G.str['TryGetProp'], [_self, "ArmorMaterial", "None"])[0];
        var _defRatio_3119 = lua_call(G.str['TryGetProp'], [_defClass_3119, _armorMaterial_3119, 1])[0];
        if (!lua_eq(_defRatio_3119, null)) {
          _value_3118 = lua_multiply(_value_3118, _defRatio_3119);
        }
      }
      var _byReinforce_3118 = 0;
      var _byTranscend_3118 = 0;
      var _statType_3118 = lua_call(G.str['TryGetProp'], [_self, "StatType", "None"])[0];
      if (!lua_eq(_statType_3118, null)) {
        var _statTypeClass_3121 = lua_call(G.str['GetClass'], ["Stat_Monster_Type", _statType_3118])[0];
        if (!lua_eq(_statTypeClass_3121, null)) {
          var _itemGrade_3122 = lua_call(G.str['TryGetProp'], [_statTypeClass_3121, "ArmorGrade", "C"])[0];
          tmp = lua_call(G.str['SCR_MON_ITEM_GRADE_RATE'], [_self, _itemGrade_3122]); var _basicGradeRatio_3122 = tmp[0]; var _reinforceGradeRatio_3122 = tmp[1]; tmp = null;
          _value_3118 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3118, _basicGradeRatio_3122)])[0];
          var _reinforceValue_3122 = lua_call(G.str['TryGetProp'], [_statTypeClass_3121, "ReinforceArmor", 0])[0];
          _byReinforce_3118 = lua_call(G.str['SCR_MON_ITEM_REINFORCE_ARMOR_CALC'], [_self, _lv_3118, _reinforceValue_3122, _reinforceGradeRatio_3122])[0];
          var _itemTranscend_3122 = lua_call(G.str['TryGetProp'], [_statTypeClass_3121, "TranscendArmor", 0])[0];
          var _transcendValue_3122 = lua_call(G.str['SCR_MON_ITEM_TRANSCEND_CALC'], [_self, _itemTranscend_3122])[0];
          _byTranscend_3118 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3118, _transcendValue_3122)])[0];
        }
      }
      _value_3118 = lua_add(lua_add(_value_3118, _byReinforce_3118), _byTranscend_3118);
      return lua_tablegetcall(G.str['math'], 'floor', [_value_3118]);
      return [];
    })
    G.str['SCR_MON_ITEM_GRADE_RATE'] = (function (_self, _itemGrade) {
      var tmp;
      if (lua_eq(_itemGrade, null)) {
        _itemGrade = "Normal";
      }
      var _gradeList_3123 = lua_newtable(["Normal", "Magic", "Rare", "Unique", "Legend"]);
      var _gradeIndex_3123 = lua_tablegetcall(G.str['table'], 'find', [_gradeList_3123, _itemGrade])[0];
      if (lua_eq(_gradeIndex_3123, 0)) {
        _gradeIndex_3123 = 1;
      }
      var _basicGradeRatio_3123 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_gradeIndex_3123, "BasicRatio"])[0];
      var _reinforceGradeRatio_3123 = lua_call(G.str['SCR_GET_ITEM_GRADE_RATIO'], [_gradeIndex_3123, "ReinforceRatio"])[0];
      return [_basicGradeRatio_3123, _reinforceGradeRatio_3123];
      return [];
    })
    G.str['SCR_MON_ITEM_REINFORCE_WEAPON_CALC'] = (function (_self, _lv, _reinforceValue, _reinforceGradeRatio) {
      var tmp;
      var _value_3126 = 0;
      _value_3126 = lua_tablegetcall(G.str['math'], 'floor', [(lua_add(_reinforceValue, (lua_multiply(lua_tablegetcall(G.str['math'], 'max', [1, lua_subtract(_lv, 50)])[0], (lua_multiply(_reinforceValue, (lua_add(0.08, (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tablegetcall(G.str['math'], 'min', [21, _reinforceValue])[0], 1)), 5)])[0], 0.015))))))))))])[0];
      _value_3126 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3126, _reinforceGradeRatio)])[0];
      return [_value_3126];
      return [];
    })
    G.str['SCR_MON_ITEM_REINFORCE_ARMOR_CALC'] = (function (_self, _lv, _reinforceValue, _reinforceGradeRatio) {
      var tmp;
      var _value_3127 = 0;
      _value_3127 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(_reinforceValue, (lua_multiply(lua_tablegetcall(G.str['math'], 'max', [1, lua_subtract(_lv, 50)])[0], (lua_multiply(_reinforceValue, (lua_add(0.12, (lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_subtract(lua_tablegetcall(G.str['math'], 'min', [21, _reinforceValue])[0], 1)), 5)])[0], 0.0225)))))))))), 1.25)])[0];
      _value_3127 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_3127, _reinforceGradeRatio)])[0];
      _value_3127 = lua_multiply(_value_3127, 2);
      return [_value_3127];
      return [];
    })
    G.str['SCR_MON_ITEM_TRANSCEND_CALC'] = (function (_self, _transcendValue) {
      var tmp;
      var _value_3128 = lua_multiply(_transcendValue, 0.1);
      return [_value_3128];
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Avoidance'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Avoidance']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Antimage'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Antimage']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Antiwarrior'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Antiwarrior']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Explosion'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Explosion']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Immune'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Immune']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Pauldron'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Pauldron']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Shield'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Shield']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_attribute'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_attribute']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_HealFactor'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_HealFactor']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_SolidStrong'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_SolidStrong']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_MultipleDEF'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_MultipleDEF']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_MultipleMDEF'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_MultipleMDEF']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_SlashDEF'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_SlashDEF']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Avoidance2'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Avoidance2']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Berserk'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_Berserk']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_AntiMissileATK'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_AntiMissileATK']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_AntiPadATK'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_AntiPadATK']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_AntiJointpenalty'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_AntiJointpenalty']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_PC_SummonBoss'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_PC_SummonBoss']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_PC_Summon'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_PC_Summon']);
      return [];
    })
    G.str['MON_BORN_FIREFOX_PC_Summon'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_PC_FireFox_Summon']);
      return [];
    })
    G.str['MON_BORN_PIEDPIPER_PC_Summon'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_PC_PiedPiper_Summon']);
      return [];
    })
    G.str['MON_BORN_PIEDPIPER_WHITE_PC_Summon'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_buff_PC_PiedPiper_WHITE_Summon']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Weakness_Melee'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_Weakness_Melee']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Weakness_Missile'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_Weakness_Missile']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Weakness_Magic'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_Weakness_Magic']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_Weakness_Attribute'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Ability_Weakness_Attribute']);
      return [];
    })
    G.str['MON_BORN_DETECTING'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, "Ability_Detecting_Buff"]);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_INVINCIBILITY_EXCEPT_FOR_CERTAIN_ATTACKS'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'INVINCIBILITY_EXCEPT_FOR_CERTAIN_ATTACKS']);
      return [];
    })
    G.str['MON_BORN_ATTRIBUTE_TOWER_SET'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'GM_Tower_Setting_Buff']);
      return [];
    })
    G.str['MON_BORN_UNRECOVERABLE_HP'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, "UC_UnrecoverableHP"]);
      lua_call(G.str['print'], lua_call(G.str['IsBuffApplied'], [_self, "UC_UnrecoverableHP"]));
      return [];
    })
    G.str['SCR_FIELD_BOSS_NEAR_ENTER'] = (function (_self, _pc) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _pc, 'Ability_SoulCrystal_Debuff', 1, 0, 0, 1]);
      return [];
    })
    G.str['SCR_FIELD_BOSS_NEAR_LEAVE'] = (function (_self, _pc) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_pc, 'Ability_SoulCrystal_Debuff']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_SoulCrystal_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_SoulCrystal_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Ability_SoulCrystal_Debuff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Ability_SoulCrystal_Debuff"])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, 'Safe']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Avoidance'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DR_BM', 100);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Avoidance'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Explosion'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Explosion'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 40, 'PC']); var _objList_3169 = tmp[0]; var _objCount_3169 = tmp[1]; tmp = null;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_explosion_burst', 1]);
      var var_3170 = 1, stop_3170 = lua_assertfloat(_objCount_3169);
      for (; var_3170 <= stop_3170; var_3170++) {
        var _i_3170 = var_3170;
        var _obj_3171 = lua_tableget(_objList_3169, _i_3170);
        if (lua_eq(lua_tableget(_obj_3171, 'ClassName'), 'PC')) {
          var _angle_3172 = lua_call(G.str['GetAngleTo'], [_self, _obj_3171])[0];
          lua_call(G.str['TakeDamage'], [_self, _obj_3171, "None", (lua_multiply(lua_tableget(_self, 'MAXPATK'), 1.5)), "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['KnockBack'], [_obj_3171, _self, 150, _angle_3172, 60, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Debuff_Immune'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Debuff_Immun'] = (function (_eself, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Pauldron'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Pauldron'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_attribute'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_attribute'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_LevelUp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_LevelUp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_HealFactor'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Ability_buff_HealFactor'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'HP'), lua_tableget(_self, 'MHP'))) {
        lua_call(G.str['Heal'], [_self, lua_divide(lua_tableget(_self, 'MHP'), 20), 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_HealFactor'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_MultipleDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3187 = lua_multiply(lua_tableget(_self, 'DEF'), 3);
      var _ADDMDEF_3187 = lua_multiply(lua_tableget(_self, 'MDEF'), 0.5);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_DEF", _ADDDEF_3187]);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_MDEF", _ADDMDEF_3187]);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3187));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3187));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_MultipleDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3188 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_DEF"])[0];
      var _ADDMDEF_3188 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3188));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3188));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_MultipleMDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3189 = lua_multiply(lua_tableget(_self, 'DEF'), 0.5);
      var _ADDMDEF_3189 = lua_multiply(lua_tableget(_self, 'MDEF'), 3);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_DEF", _ADDDEF_3189]);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_MDEF", _ADDMDEF_3189]);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3189));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3189));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_MultipleMDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3190 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_DEF"])[0];
      var _ADDMDEF_3190 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_BUFF_MULTIPLE_ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3190));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3190));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Avoidance2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADD_DR_3191 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DR'), 1.0)])[0];
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_BUFF_AVOIDANCE_ADD_DR", _ADD_DR_3191]);
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _ADD_DR_3191));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Avoidance2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADD_DR_3192 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_BUFF_AVOIDANCE_ADD_DR"])[0];
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _ADD_DR_3192));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_Berserk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADD_CRTDR_3193 = 500;
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_BUFF_BERSERK_ADD_CRTDR", _ADD_CRTDR_3193]);
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _ADD_CRTDR_3193));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_Berserk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADD_CRTDR_3194 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_BUFF_BERSERK_ADD_CRTDR"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _ADD_CRTDR_3194));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_Berserk'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_Berserk'])[0], 'YES')) {
        lua_tableset(_rateTable, 'DamageRate', 1);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Ability_buff_Berserk'])[0], 'YES')) {
        lua_tableset(_rateTable, 'DamageRate', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_AntiMissileATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", 5]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_AntiMissileATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ability_buff_AntiMissileATK'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_AntiMissileATK'])[0], 'YES') && (lua_eq(lua_tableget(_skill, 'HitType'), 'Force') || lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')))) {
        lua_tableset(_ret, 'KDPower', 0);
        lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        lua_tableset(_ret, 'HitDelay', 0);
        lua_tableset(_ret, 'Damage', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Ability_buff_AntiMissileATK'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(_damage, 0)) {
        return [1];
      }
      var _skill_3202 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_AntiMissileATK'])[0], 'YES') && (lua_eq(lua_tableget(_skill_3202, 'HitType'), 'Force') || lua_eq(lua_tableget(_skill_3202, 'ClassType'), 'Missile')))) {
        var _attackedCount_3204 = lua_subtract(lua_call(G.str['tonumber'], lua_call(G.str['GetExProp'], [_buff, "ATTACKED_COUNT"]))[0], 1);
        lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", _attackedCount_3204]);
        if (lua_lte(_attackedCount_3204, 0)) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_AntiPadATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_AntiPadATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ability_buff_AntiPadATK'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_AntiJointpenalty'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", 3]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_AntiJointpenalty'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ability_buff_AntiJointpenalty'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_AntiJointpenalty'])[0], 'YES') && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Link_Enemy'])[0], 'YES'))) {
        lua_tableset(_ret, 'Damage', lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_ret, 'Damage'), 1.5)])[0]);
      }
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Ability_buff_AntiJointpenalty'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(_damage, 0)) {
        return [1];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_AntiJointpenalty'])[0], 'YES') && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Link_Enemy'])[0], 'YES'))) {
        var _attackedCount_3215 = lua_subtract(lua_call(G.str['tonumber'], lua_call(G.str['GetExProp'], [_buff, "ATTACKED_COUNT"]))[0], 1);
        lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", _attackedCount_3215]);
        if (lua_lte(_attackedCount_3215, 0)) {
          var _buffLink_3216 = lua_call(G.str['GetBuffByName'], [_self, 'Link_Enemy'])[0];
          var _buffCaster_3216 = lua_call(G.str['GetBuffCaster'], [_buffLink_3216])[0];
          if (!lua_eq(_buffCaster_3216, null)) {
            lua_call(G.str['RemoveLinkByBuffName'], [_buffCaster_3216, 'Link_Enemy']);
            lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", 3]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_PC_FireFox_Summon_ENTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _myOwner_3218 = null;
      var var_3219 = 1, stop_3219 = 10;
      for (; var_3219 <= stop_3219; var_3219++) {
        var _i_3219 = var_3219;
        lua_call(G.str['sleep'], [100]);
        if (!lua_eq(lua_call(G.str['GetOwner'], [_self])[0], null)) {
          _myOwner_3218 = lua_call(G.str['GetOwner'], [_self])[0];
        }
      }
      var _selfMATK_3218 = lua_divide((lua_add(lua_call(G.str['TryGetProp'], [_self, "MINMATK"])[0], lua_call(G.str['TryGetProp'], [_self, "MAXMATK"])[0])), 2);
      var _ownerMATK_3218 = lua_subtract(lua_call(G.str['SCR_GET_PC_ATK'], [_myOwner_3218, "Magic"])[0], _selfMATK_3218);
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _ownerMATK_3218));
      lua_call(G.str['SetExProp'], [_buff, "FIREFOX_MATK", _ownerMATK_3218]);
      lua_call(G.str['Invalidate'], [_self, "MINMATK"]);
      lua_call(G.str['Invalidate'], [_self, "MAXMATK"]);
      lua_call(G.str['Invalidate'], [_self, "MATK"]);
      return [];
    })
    G.str['SCR_PC_FireFox_Summon_LEAVE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ownerMATK_3222 = lua_call(G.str['GetExProp'], [_buff, "FIREFOX_MATK"])[0];
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _ownerMATK_3222));
      return [];
    })
    G.str['SCR_PC_FireFox_Summon_RATETABLE'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      
      return [];
    })
    G.str['SCR_PC_PiedPiper_Summon_ENTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _myOwner_3224 = null;
      var var_3225 = 1, stop_3225 = 10;
      for (; var_3225 <= stop_3225; var_3225++) {
        var _i_3225 = var_3225;
        lua_call(G.str['sleep'], [100]);
        if (!lua_eq(lua_call(G.str['GetOwner'], [_self])[0], null)) {
          _myOwner_3224 = lua_call(G.str['GetOwner'], [_self])[0];
        }
      }
      var _selfPATK_3224 = lua_divide((lua_add(lua_call(G.str['TryGetProp'], [_self, "MINPATK"])[0], lua_call(G.str['TryGetProp'], [_self, "MAXPATK"])[0])), 2);
      var _ownerPATK_3224 = lua_subtract(lua_call(G.str['SCR_GET_PC_ATK'], [_myOwner_3224, "Melee"])[0], _selfPATK_3224);
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _ownerPATK_3224));
      lua_call(G.str['SetExProp'], [_buff, "PIEDPIPER_MOUSE_PATK", _ownerPATK_3224]);
      lua_call(G.str['Invalidate'], [_self, "MINPATK"]);
      lua_call(G.str['Invalidate'], [_self, "MAXPATK"]);
      lua_call(G.str['Invalidate'], [_self, "PATK"]);
      return [];
    })
    G.str['SCR_PC_PiedPiper_Summon_LEAVE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ownerPATK_3228 = lua_call(G.str['GetExProp'], [_buff, "PIEDPIPER_MOUSE_PATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _ownerPATK_3228));
      return [];
    })
    G.str['SCR_PC_PiedPiper_Summon_RATETABLE'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      
      return [];
    })
    G.str['SCR_PC_PiedPiper_WHITE_Summon_ENTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _myOwner_3230 = null;
      var var_3231 = 1, stop_3231 = 10;
      for (; var_3231 <= stop_3231; var_3231++) {
        var _i_3231 = var_3231;
        lua_call(G.str['sleep'], [100]);
        if (!lua_eq(lua_call(G.str['GetOwner'], [_self])[0], null)) {
          _myOwner_3230 = lua_call(G.str['GetOwner'], [_self])[0];
        }
      }
      var _selfPATK_3230 = lua_divide((lua_add(lua_call(G.str['TryGetProp'], [_self, "MINPATK"])[0], lua_call(G.str['TryGetProp'], [_self, "MAXPATK"])[0])), 2);
      var _ownerPATK_3230 = lua_subtract(lua_call(G.str['SCR_GET_PC_ATK'], [_myOwner_3230, "Melee"])[0], _selfPATK_3230);
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _ownerPATK_3230));
      lua_call(G.str['SetExProp'], [_buff, "PIEDPIPER_WHITE_MOUSE_PATK", _ownerPATK_3230]);
      lua_call(G.str['Invalidate'], [_self, "MINPATK"]);
      lua_call(G.str['Invalidate'], [_self, "MAXPATK"]);
      lua_call(G.str['Invalidate'], [_self, "PATK"]);
      return [];
    })
    G.str['SCR_PC_PiedPiper_WHITE_Summon_LEAVE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ownerPATK_3234 = lua_call(G.str['GetExProp'], [_buff, "PIEDPIPER_WHITE_MOUSE_PATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _ownerPATK_3234));
      return [];
    })
    G.str['SCR_PC_PiedPiper_WHITE_Summon_RATETABLE'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 1));
      lua_call(G.str['SetMultipleHitCount'], [_ret, 2]);
      return [];
    })
    G.str['SCR_PC_Summon_ENTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _myOwner_3236 = null;
      var var_3237 = 1, stop_3237 = 10;
      for (; var_3237 <= stop_3237; var_3237++) {
        var _i_3237 = var_3237;
        lua_call(G.str['sleep'], [100]);
        if (!lua_eq(lua_call(G.str['GetOwner'], [_self])[0], null)) {
          _myOwner_3236 = lua_call(G.str['GetOwner'], [_self])[0];
        }
      }
      var _addFactorRate_3236 = 0;
      var _addCON_3236 = 0;
      if (!lua_eq(_myOwner_3236, null)) {
        if (lua_eq(lua_tableget(_myOwner_3236, 'ClassName'), 'PC')) {
          var _ownerLv_3241 = lua_call(G.str['TryGetProp'], [_myOwner_3236, "Lv"])[0];
          if (lua_eq(_ownerLv_3241, null)) {
            _ownerLv_3241 = 1;
          }
          var _ownerMNA_3241 = lua_call(G.str['TryGetProp'], [_myOwner_3236, "MNA"])[0];
          if (lua_eq(_ownerMNA_3241, null)) {
            _ownerMNA_3241 = 1;
          }
          _addFactorRate_3236 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_divide(_ownerMNA_3241, (lua_add(_ownerLv_3241, 1)))), 100)])[0];
          if (lua_lt(_addFactorRate_3236, 0)) {
            _addFactorRate_3236 = 0;
          }
          _addFactorRate_3236 = lua_divide(_addFactorRate_3236, 100);
          _addCON_3236 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_addCON_3236, (lua_multiply(_ownerMNA_3241, 0.75)))])[0];
        }
      }
      lua_tableset(_self, 'SkillFactorRate_RATE_BM', lua_add(lua_tableget(_self, 'SkillFactorRate_RATE_BM'), _addFactorRate_3236));
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _addCON_3236));
      lua_call(G.str['SetExProp'], [_buff, "ADD_FACTOR_RATE", _addFactorRate_3236]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_CON", _addCON_3236]);
      lua_call(G.str['Invalidate'], [_self, "SkillFactorRate"]);
      lua_call(G.str['Invalidate'], [_self, "CON"]);
      lua_call(G.str['Invalidate'], [_self, "MHP"]);
      lua_call(G.str['AddHP'], [_self, lua_tableget(_self, 'MHP')]);
      return [];
    })
    G.str['SCR_PC_Summon_LEAVE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addFactorRate_3245 = lua_call(G.str['GetExProp'], [_buff, "ADD_FACTOR_RATE"])[0];
      var _addCON_3245 = lua_call(G.str['GetExProp'], [_buff, "ADD_CON"])[0];
      lua_tableset(_self, 'SkillFactorRate_RATE_BM', lua_subtract(lua_tableget(_self, 'SkillFactorRate_RATE_BM'), _addFactorRate_3245));
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _addCON_3245));
      return [];
    })
    G.str['SCR_PC_Summon_RATETABLE'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _equipRatio_3246 = 0;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Ability_buff_PC_SummonBoss'])[0], 'YES')) {
        _equipRatio_3246 = 1.0;
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Ability_buff_PC_Summon'])[0], 'YES')) {
        _equipRatio_3246 = 0.5;
      }
      if (!lua_eq(_equipRatio_3246, 0)) {
        var _itemMATK_3249 = 0;
        var _owner_3249 = lua_call(G.str['GetOwner'], [_from])[0];
        if (!lua_eq(_owner_3249, null)) {
          if (lua_eq(lua_tableget(_owner_3249, 'ClassName'), "PC")) {
            var _rItem_3251 = lua_call(G.str['GetEquipItem'], [_owner_3249, 'RH'])[0];
            if (!lua_eq(_rItem_3251, null)) {
              _itemMATK_3249 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_rItem_3251, 'MATK'), _equipRatio_3246)])[0];
            }
            lua_tableset(_rateTable, 'AddAtkDamage', lua_add(lua_tableget(_rateTable, 'AddAtkDamage'), _itemMATK_3249));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_PC_SummonBoss'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ["SCR_PC_Summon_ENTER", _self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_PC_SummonBoss'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_PC_Summon_LEAVE'], [_self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_PC_SummonBoss'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      lua_call(G.str['SCR_PC_Summon_RATETABLE'], [_self, _from, _skill, _atk, _ret, _rateTable, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_PC_FireFox_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ["SCR_PC_FireFox_Summon_ENTER", _self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_PC_FireFox_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_PC_FireFox_Summon_LEAVE'], [_self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_PC_FireFox_Summon'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      lua_call(G.str['SCR_PC_FireFox_Summon_RATETABLE'], [_self, _from, _skill, _atk, _ret, _rateTable, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_PC_PiedPiper_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ["SCR_PC_PiedPiper_Summon_ENTER", _self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_PC_PiedPiper_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_PC_PiedPiper_Summon_LEAVE'], [_self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_PC_PiedPiper_Summon'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      lua_call(G.str['SCR_PC_PiedPiper_Summon_RATETABLE'], [_self, _from, _skill, _atk, _ret, _rateTable, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_PC_PiedPiper_WHITE_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ["SCR_PC_PiedPiper_WHITE_Summon_ENTER", _self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_PC_PiedPiper_WHITE_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_PC_PiedPiper_WHITE_Summon_LEAVE'], [_self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_PC_PiedPiper_WHITE_Summon'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      lua_call(G.str['SCR_PC_PiedPiper_WHITE_Summon_RATETABLE'], [_self, _from, _skill, _atk, _ret, _rateTable, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_buff_PC_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ["SCR_PC_Summon_ENTER", _self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_buff_PC_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_PC_Summon_LEAVE'], [_self, _buff, _arg1, _arg2, _over]);
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_PC_Summon'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      lua_call(G.str['SCR_PC_Summon_RATETABLE'], [_self, _from, _skill, _atk, _ret, _rateTable, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_Weakness_Melee'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDMDEF_3268 = lua_multiply(lua_tableget(_self, 'MDEF'), 2);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_MDEF", _ADDMDEF_3268]);
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3268));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_Weakness_Melee'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDMDEF_3269 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_MDEF"])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3269));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_Weakness_Missile'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDMDEF_3270 = lua_multiply(lua_tableget(_self, 'MDEF'), 2);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_MDEF", _ADDMDEF_3270]);
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3270));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_Weakness_Missile'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDMDEF_3271 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_MDEF"])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3271));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_Weakness_Magic'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3272 = lua_multiply(lua_tableget(_self, 'DEF'), 2);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_DEF", _ADDDEF_3272]);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3272));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_Weakness_Magic'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3273 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3273));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_Weakness_Attribute'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3274 = lua_multiply(lua_tableget(_self, 'DEF'), 2);
      var _ADDMDEF_3274 = lua_multiply(lua_tableget(_self, 'MDEF'), 2);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_DEF", _ADDDEF_3274]);
      lua_call(G.str['SetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_MDEF", _ADDMDEF_3274]);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3274));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3274));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_Weakness_Attribute'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ADDDEF_3275 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_DEF"])[0];
      var _ADDMDEF_3275 = lua_call(G.str['GetExProp'], [_buff, "ABILITY_WEAKNESS_MELEE_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _ADDDEF_3275));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _ADDMDEF_3275));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ability_Detecting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Ability_Detecting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 100, 'ENEMY', 1, 1]); var _fndList_3277 = tmp[0]; var _fndCount_3277 = tmp[1]; tmp = null;
      if (!lua_eq(_fndCount_3277, null)) {
        var var_3279 = 1, stop_3279 = lua_assertfloat(_fndCount_3277);
        for (; var_3279 <= stop_3279; var_3279++) {
          var _i_3279 = var_3279;
          if (!lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_fndList_3277, _i_3279), "UC_Detected_Debuff"])[0], 'YES')) {
            lua_call(G.str['AddBuff'], [lua_tableget(_fndList_3277, _i_3279), lua_tableget(_fndList_3277, _i_3279), 'UC_Detected_Debuff', 1, 1, 10000]);
          }
          if (((lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_fndList_3277, _i_3279), "Cloaking_Buff"])[0], 'YES') || lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_fndList_3277, _i_3279), "Burrow_Rogue"])[0], 'YES')) || lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_fndList_3277, _i_3279), "WideMiasma_Buff"])[0], 'YES'))) {
            lua_call(G.str['RemoveBuff'], [lua_tableget(_fndList_3277, _i_3279), "Cloaking_Buff"]);
            lua_call(G.str['RemoveBuff'], [lua_tableget(_fndList_3277, _i_3279), "Burrow_Rogue"]);
            lua_call(G.str['RemoveBuff'], [lua_tableget(_fndList_3277, _i_3279), "WideMiasma_Buff"]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ability_Detecting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_Tower_Setting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_Tower_Setting_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_OccupationBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3286 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3286, 0)) {
        return [];
      } else {
        var _two_OverTime_3288 = 300;
        var _three_OverTime_3288 = 600;
        lua_call(G.str['SetExProp'], [_buff, "ADD_TWOOVERTIME", _two_OverTime_3288]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_THREEOVERTIME", _three_OverTime_3288]);
        var _caster_3288 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_3288, null)) {
          var _zoneClsName_3289 = lua_call(G.str['GetZoneName'], [_caster_3288])[0];
          lua_call(G.str['SetExProp_Str'], [_buff, "OCCUPATION_BUFF_APPLY_ZONE", _zoneClsName_3289]);
          if (lua_eq(_over, 1)) {
            lua_call(G.str['SendAddOnMsg'], [_self, 'NOTICE_Dm_GuildColony', lua_call(G.str['ScpArgMsg'], ["GUILD_COLONY_MSG_OCCUPATION_BUFF_1{over}{buff}", "over", _over, "buff", lua_tableget(_buff, 'Name')])[0], 15]);
          } else if (lua_eq(_over, 2)) {
            lua_call(G.str['SendAddOnMsg'], [_self, 'NOTICE_Dm_GuildColony', lua_call(G.str['ScpArgMsg'], ["GUILD_COLONY_MSG_OCCUPATION_BUFF_2{over}{buff}", "over", _over, "buff", lua_tableget(_buff, 'Name')])[0], 15]);
          } else {
            lua_call(G.str['SendAddOnMsg'], [_self, 'NOTICE_Dm_GuildColony', lua_call(G.str['ScpArgMsg'], ["GUILD_COLONY_MSG_OCCUPATION_BUFF_2{over}{buff}", "over", _over, "buff", lua_tableget(_buff, 'Name')])[0], 15]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_OccupationBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3293 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3293, 0)) {
        return [0];
      } else {
        var _zoneClsName_3295 = lua_call(G.str['GetZoneName'], [_self])[0];
        var _occupationGuild_3295 = lua_call(G.str['GetColonyOccupationGuild'], [_zoneClsName_3295])[0];
        if ((lua_eq(_occupationGuild_3295, null) || lua_eq(_occupationGuild_3295, "None"))) {
          return [0];
        } else {
          var _guildObj_3297 = lua_call(G.str['GetGuildObj'], [_self])[0];
          if (lua_eq(lua_call(G.str['IsSameObject'], [_occupationGuild_3295, _guildObj_3297])[0], 0)) {
            return [0];
          } else {
            var _buffApplyZone_3299 = lua_call(G.str['GetExProp_Str'], [_buff, "OCCUPATION_BUFF_APPLY_ZONE"])[0];
            if (!lua_eq(_buffApplyZone_3299, _zoneClsName_3295)) {
              return [0];
            } else {
              var _two_OverTime_3301 = lua_call(G.str['GetExProp'], [_buff, "ADD_TWOOVERTIME"])[0];
              var _three_OverTime_3301 = lua_call(G.str['GetExProp'], [_buff, "ADD_THREEOVERTIME"])[0];
              var _diff_3301 = lua_call(G.str['GetColonyOccupationTimeDiff'], [_zoneClsName_3295])[0];
              if (lua_eq(_over, 1)) {
                if (lua_lte(_two_OverTime_3301, _diff_3301)) {
                  lua_call(G.str['AddBuff'], [_self, _self, 'GuildColony_OccupationBuff', 1, 0, 0, 1]);
                  lua_call(G.str['PlayEffect'], [_self, 'F_cleric_dodola_line', 0.8, 'BOT']);
                  lua_call(G.str['PlayEffect'], [_self, 'F_lineup020_blue_mint', 0.6, 'BOT']);
                }
              } else if (lua_eq(_over, 2)) {
                if (lua_lte(_three_OverTime_3301, _diff_3301)) {
                  lua_call(G.str['AddBuff'], [_self, _self, 'GuildColony_OccupationBuff', 1, 0, 0, 1]);
                  lua_call(G.str['PlayEffect'], [_self, 'F_cleric_dodola_line', 0.8, 'BOT']);
                  lua_call(G.str['PlayEffect'], [_self, 'F_lineup020_blue_mint', 0.6, 'BOT']);
                }
              }
              return [1];
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_OccupationBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_BossMonsterBuff_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3307 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3307, 0)) {
        return [];
      } else {
        lua_call(G.str['PlayEffect'], [_self, 'F_levitation005_ice', 1.5, 'BOT']);
        lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic027_navy_line', 0.8, 'BOT']);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_BossMonsterBuff_DEF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3310 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3310, 0)) {
        return [0];
      } else {
        var _zoneClsName_3312 = lua_call(G.str['GetZoneName'], [_self])[0];
        var _bossKillGuild_3312 = lua_call(G.str['GetColonyWarBossKillGuild'], [_zoneClsName_3312])[0];
        var _guildObj_3312 = lua_call(G.str['GetGuildObj'], [_self])[0];
        if (lua_eq(lua_call(G.str['IsSameObject'], [_bossKillGuild_3312, _guildObj_3312])[0], 0)) {
          return [0];
        } else {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GuildColony_OccupationBuff'])[0], 'YES')) {
            return [0];
          } else {
            return [1];
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_BossMonsterBuff_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_InvincibleBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_3318 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_3318, null)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GuildColony_InvincibleDeBuff'])[0], 'NO')) {
          tmp = lua_call(G.str['GetPos'], [_self]); var _x_3320 = tmp[0]; var _y_3320 = tmp[1]; var _z_3320 = tmp[2]; tmp = null;
          lua_call(G.str['SetExProp_Pos'], [_self, "COLONY_ENTER_POS", _x_3320, _y_3320, _z_3320]);
          lua_call(G.str['AddBuff'], [_caster_3318, _self, 'Safe', 0, 0, 0, 1]);
          lua_call(G.str['SetSafe'], [_self, 1]);
          lua_call(G.str['SetDiminishingImmune'], [_self]);
          lua_call(G.str['EnableIgnoreOBB'], [_self, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_InvincibleBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3321 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3321, 0)) {
        return [0];
      } else {
        tmp = lua_call(G.str['GetExProp_Pos'], [_self, "COLONY_ENTER_POS"]); var _pos_x_3323 = tmp[0]; var _pos_y_3323 = tmp[1]; var _pos_z_3323 = tmp[2]; tmp = null;
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_3323 = tmp[0]; var _y_3323 = tmp[1]; var _z_3323 = tmp[2]; tmp = null;
        var _dist_3323 = lua_call(G.str['SCR_POINT_DISTANCE'], [_x_3323, _z_3323, _pos_x_3323, _pos_z_3323])[0];
        if ((((((!lua_eq(_dist_3323, 0) || lua_eq(lua_call(G.str['IsJumping'], [_self])[0], 1)) || lua_eq(lua_call(G.str['IsUsingNormalSkill'], [_self])[0], 1)) || lua_eq(lua_call(G.str['IsUsingSkill'], [_self])[0], 1)) || lua_eq(lua_call(G.str['IsChasingSkill'], [_self])[0], 1)) || lua_lt(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], lua_add(lua_divide(lua_call(G.str['GetUseSkillStartTime'], [_self])[0], 1000), 1)))) {
          return [0];
        } else {
          return [1];
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_InvincibleBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'Safe']);
      lua_call(G.str['SetSafe'], [_self, 0]);
      lua_call(G.str['SetDiminishingDeimmune'], [_self]);
      lua_call(G.str['EnableIgnoreOBB'], [_self, 0]);
      var _location_check_3326 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3326, 1)) {
        var _caster_3327 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_3327, null)) {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GuildColony_InvincibleDeBuff'])[0], 'NO')) {
            lua_call(G.str['AddBuff'], [_caster_3327, _self, 'GuildColony_InvincibleDeBuff', 1, 0, 0, 1]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_InvincibleDeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GuildColony_InvincibleBuff'])[0], 'NO')) {
        var _safeRemainTime_3331 = 5;
        lua_call(G.str['SetExProp'], [_buff, "SAFE_REMAIN_TIME", _safeRemainTime_3331]);
        lua_call(G.str['AddBuff'], [_self, _self, 'Safe', 1, 0, 5000, 1]);
        lua_call(G.str['SetInvincibleSec'], [_self, 5]);
        lua_call(G.str['SetDiminishingImmune'], [_self]);
        lua_call(G.str['EnableIgnoreOBB'], [_self, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_InvincibleDeBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3332 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3332, 0)) {
        return [0];
      } else {
        var _safeRemainTime_3334 = lua_call(G.str['GetExProp'], [_buff, "SAFE_REMAIN_TIME"])[0];
        if ((lua_lte(_safeRemainTime_3334, 5) && lua_lt(1, _safeRemainTime_3334))) {
          _safeRemainTime_3334 = lua_subtract(_safeRemainTime_3334, 1);
          lua_call(G.str['SetExProp'], [_buff, "SAFE_REMAIN_TIME", _safeRemainTime_3334]);
        } else if (lua_lte(_safeRemainTime_3334, 1)) {
          _safeRemainTime_3334 = 1000;
          lua_call(G.str['SetExProp'], [_buff, "SAFE_REMAIN_TIME", _safeRemainTime_3334]);
          lua_call(G.str['SetDiminishingDeimmune'], [_self]);
          lua_call(G.str['EnableIgnoreOBB'], [_self, 0]);
        }
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_InvincibleDeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'Safe']);
      lua_call(G.str['SetSafe'], [_self, 0]);
      lua_call(G.str['SetDiminishingDeimmune'], [_self]);
      lua_call(G.str['EnableIgnoreOBB'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ADDCHECKON_GuildColony_InvincibleBuff'] = (function (_self, _buff, _targetBuffName, _from) {
      var tmp;
      if (lua_eq(_from, null)) {
        return [1];
      }
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_from])[0])) {
        return [1];
      }
      var _targetBuffCls_3338 = lua_call(G.str['GetClass'], ["Buff", _targetBuffName])[0];
      if (lua_eq(_targetBuffCls_3338, null)) {
        return [1];
      }
      if (lua_eq(lua_tableget(_targetBuffCls_3338, 'Group1'), "Debuff")) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GuildColony_OccupationBuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _buff_name_3344 = 'GuildColony_OccupationBuff';
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, _buff_name_3344])[0], "YES")) {
        var _over_3345 = lua_call(G.str['GetBuffOver'], [_self, _buff_name_3344])[0];
        var _reductionRate_3345 = 0.2;
        if (lua_eq(_over_3345, 2)) {
          _reductionRate_3345 = 0.25;
        } else if (lua_eq(_over_3345, 3)) {
          _reductionRate_3345 = 0.3;
        }
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_3345]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GuildColony_BossMonsterBuff_DEF'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _buff_name_3348 = 'GuildColony_BossMonsterBuff_DEF';
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, _buff_name_3348])[0], "YES")) {
        var _reductionRate_3349 = 0.3;
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_3349]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_EnhancerDestroyBuff_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3350 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3350, 0)) {
        return [];
      } else {
        var _caster_3352 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_3352, null)) {
          var _zoneClsName_3353 = lua_call(G.str['GetZoneName'], [_caster_3352])[0];
          var _occupationGuild_3353 = lua_call(G.str['GetColonyOccupationGuild'], [_zoneClsName_3353])[0];
          if (lua_eq(_occupationGuild_3353, null)) {
            lua_call(G.str['SetExProp_Str'], [_buff, "OCCUPATION_GUILD", "Not_Yet"]);
          } else {
            lua_call(G.str['SetExProp_Str'], [_buff, "OCCUPATION_GUILD"].concat(lua_call(G.str['GetIESID'], [_occupationGuild_3353])));
          }
          lua_call(G.str['SetExProp_Str'], [_buff, "ENHANCER_DESTROY_BUFF_APPLY_ZONE", _zoneClsName_3353]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_EnhancerDestroyBuff_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3356 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3356, 0)) {
        return [0];
      } else {
        var _zoneClsName_3358 = lua_call(G.str['GetZoneName'], [_self])[0];
        var _buffApplyZone_3358 = lua_call(G.str['GetExProp_Str'], [_buff, "ENHANCER_DESTROY_BUFF_APPLY_ZONE"])[0];
        if (!lua_eq(_buffApplyZone_3358, _zoneClsName_3358)) {
          return [0];
        } else {
          var _occupationGuildID_3360 = lua_call(G.str['GetExProp_Str'], [_buff, "OCCUPATION_GUILD"])[0];
          var _nowOccupationGuild_3360 = lua_call(G.str['GetColonyOccupationGuild'], [_zoneClsName_3358])[0];
          var _nowOccupationGuildID_3360;
          if (lua_eq(_nowOccupationGuild_3360, null)) {
            _nowOccupationGuildID_3360 = "Not_Yet";
          } else {
            _nowOccupationGuildID_3360 = lua_call(G.str['GetIESID'], [_nowOccupationGuild_3360])[0];
          }
          if (!lua_eq(_occupationGuildID_3360, _nowOccupationGuildID_3360)) {
            return [0];
          } else {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GuildColony_OccupationBuff'])[0], 'YES')) {
              return [0];
            } else {
              tmp = lua_call(G.str['GetEnhancerDestroyGuildList'], [_zoneClsName_3358]); var _list_3366 = tmp[0]; var _cnt_3366 = tmp[1]; tmp = null;
              var _over_3366 = 0;
              var var_3367 = 1, stop_3367 = lua_assertfloat(_cnt_3366);
              for (; var_3367 <= stop_3367; var_3367++) {
                var _i_3367 = var_3367;
                if (lua_eq(lua_call(G.str['IsSameObject'], [lua_tableget(_list_3366, _i_3367)].concat(lua_call(G.str['GetGuildObj'], [_self])))[0], 1)) {
                  _over_3366 = lua_add(_over_3366, 1);
                }
              }
              if (lua_lt(_over_3366, 1)) {
                return [0];
              } else {
                return [1];
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_EnhancerDestroyBuff_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_buff_basic050_circle_loop"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_EnhancerDestroyBuff_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3373 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3373, 0)) {
        return [];
      } else {
        var _caster_3375 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_3375, null)) {
          var _zoneClsName_3376 = lua_call(G.str['GetZoneName'], [_caster_3375])[0];
          var _occupationGuild_3376 = lua_call(G.str['GetColonyOccupationGuild'], [_zoneClsName_3376])[0];
          if (lua_eq(_occupationGuild_3376, null)) {
            lua_call(G.str['SetExProp_Str'], [_buff, "OCCUPATION_GUILD", "Not_Yet"]);
          } else {
            lua_call(G.str['SetExProp_Str'], [_buff, "OCCUPATION_GUILD"].concat(lua_call(G.str['GetIESID'], [_occupationGuild_3376])));
          }
          lua_call(G.str['SetExProp_Str'], [_buff, "ENHANCER_DESTROY_BUFF_APPLY_ZONE", _zoneClsName_3376]);
          var _mspdadd_3376 = 5;
          lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_3376));
          lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_3376]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_EnhancerDestroyBuff_2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3379 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3379, 0)) {
        return [0];
      } else {
        var _zoneClsName_3381 = lua_call(G.str['GetZoneName'], [_self])[0];
        var _buffApplyZone_3381 = lua_call(G.str['GetExProp_Str'], [_buff, "ENHANCER_DESTROY_BUFF_APPLY_ZONE"])[0];
        if (!lua_eq(_buffApplyZone_3381, _zoneClsName_3381)) {
          return [0];
        } else {
          var _occupationGuildID_3383 = lua_call(G.str['GetExProp_Str'], [_buff, "OCCUPATION_GUILD"])[0];
          var _nowOccupationGuild_3383 = lua_call(G.str['GetColonyOccupationGuild'], [_zoneClsName_3381])[0];
          var _nowOccupationGuildID_3383;
          if (lua_eq(_nowOccupationGuild_3383, null)) {
            _nowOccupationGuildID_3383 = "Not_Yet";
          } else {
            _nowOccupationGuildID_3383 = lua_call(G.str['GetIESID'], [_nowOccupationGuild_3383])[0];
          }
          if (!lua_eq(_occupationGuildID_3383, _nowOccupationGuildID_3383)) {
            return [0];
          } else {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GuildColony_OccupationBuff'])[0], 'YES')) {
              return [0];
            } else {
              tmp = lua_call(G.str['GetEnhancerDestroyGuildList'], [_zoneClsName_3381]); var _list_3389 = tmp[0]; var _cnt_3389 = tmp[1]; tmp = null;
              var _over_3389 = 0;
              var var_3390 = 1, stop_3390 = lua_assertfloat(_cnt_3389);
              for (; var_3390 <= stop_3390; var_3390++) {
                var _i_3390 = var_3390;
                if (lua_eq(lua_call(G.str['IsSameObject'], [lua_tableget(_list_3389, _i_3390)].concat(lua_call(G.str['GetGuildObj'], [_self])))[0], 1)) {
                  _over_3389 = lua_add(_over_3389, 1);
                }
              }
              if (lua_lt(_over_3389, 1)) {
                return [0];
              } else {
                return [1];
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_EnhancerDestroyBuff_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_3395 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_3395));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GuildColony_EnhancerDestroyBuff_2'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _increaseRate_3396 = 0.3;
      var _buff_name_3396 = 'GuildColony_EnhancerDestroyBuff_2';
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, _buff_name_3396])[0], "YES")) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _increaseRate_3396));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_rootcrystal_Buff_spd'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3398 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3398, 0)) {
        return [];
      } else {
        var _moveSpeed_3400 = 60;
        lua_call(G.str['SetExProp'], [_buff, "SET_FIXMSPD", _moveSpeed_3400]);
        lua_tableset(_self, 'FIXMSPD_BM', lua_add(lua_tableget(_self, 'FIXMSPD_BM'), _moveSpeed_3400));
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_rootcrystal_Buff_spd'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3401 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3401, 0)) {
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_rootcrystal_Buff_spd'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fixMSPD_3404 = lua_call(G.str['GetExProp'], [_buff, "SET_FIXMSPD"])[0];
      lua_tableset(_self, 'FIXMSPD_BM', lua_subtract(lua_tableget(_self, 'FIXMSPD_BM'), _fixMSPD_3404));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_rootcrystal_Buff_hpsp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3405 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3405, 0)) {
        return [];
      } else {
        var _healCalc1_3407 = 0.3;
        var _healCalc2_3407 = 500;
        var _healHp_3407 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), _healCalc1_3407)])[0];
        var _healSp_3407 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MSP'), _healCalc1_3407)])[0];
        lua_call(G.str['Heal'], [_self, _healHp_3407, 0]);
        lua_call(G.str['HealSP'], [_self, _healSp_3407, 0]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_HPSP", _healCalc2_3407]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_rootcrystal_Buff_hpsp'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3408 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3408, 0)) {
        return [0];
      } else {
        var _healCalc2_3410 = lua_call(G.str['GetExProp'], [_buff, "ADD_HPSP"])[0];
        lua_call(G.str['Heal'], [_self, _healCalc2_3410, 0]);
        lua_call(G.str['HealSP'], [_self, _healCalc2_3410, 0]);
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_rootcrystal_Buff_hpsp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_rootcrystal_Buff_atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3412 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3412, 0)) {
        return [];
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_rootcrystal_Buff_atk'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3414 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3414, 0)) {
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_rootcrystal_Buff_atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GuildColony_rootcrystal_Buff_atk'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _increaseRate_3418 = 0.5;
      var _buff_name_3418 = 'GuildColony_rootcrystal_Buff_atk';
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, _buff_name_3418])[0], "YES")) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _increaseRate_3418));
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, _buff_name_3418])[0], "YES")) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _increaseRate_3418));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuildColony_rootcrystal_Buff_def'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _location_check_3421 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3421, 0)) {
        return [];
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GuildColony_rootcrystal_Buff_def'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _location_check_3423 = lua_call(G.str['IsJoinColonyWarMap'], [_self])[0];
      if (lua_eq(_location_check_3423, 0)) {
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuildColony_rootcrystal_Buff_def'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GuildColony_rootcrystal_Buff_def'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _reductionRate_3427 = 0.5;
      var _buff_name_3427 = 'GuildColony_rootcrystal_Buff_def';
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, _buff_name_3427])[0], "YES")) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_3427]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, _buff_name_3427])[0], "YES")) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_3427]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1710_Holiday'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _rootingChance_3430 = 1000;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), _rootingChance_3430));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ENTER_Event_1710_Holiday", _rootingChance_3430]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1710_Holiday'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _rootingChance_3431 = lua_call(G.str['GetExProp'], [_buff, "ADD_ENTER_Event_1710_Holiday"])[0];
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), _rootingChance_3431));
      return [];
    })
    G.str['SCR_BUFF_ENTER_RootCrystalMoveSpeed'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RootCrystalMoveSpeed'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Colletor_Etc_Low'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _drop_sObj_3434 = lua_call(G.str['GetSessionObject'], [_self, 'ssn_drop'])[0];
      lua_tableset(_drop_sObj_3434, 'Etc_Low_BN', lua_add(lua_tableget(_drop_sObj_3434, 'Etc_Low_BN'), 5));
      lua_call(G.str['SaveSessionObject'], [_self, _drop_sObj_3434]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Colletor_Etc_Low'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _drop_sObj_3435 = lua_call(G.str['GetSessionObject'], [_self, 'ssn_drop'])[0];
      lua_tableset(_drop_sObj_3435, 'Etc_Low_BN', lua_subtract(lua_tableget(_drop_sObj_3435, 'Etc_Low_BN'), 5));
      lua_call(G.str['SaveSessionObject'], [_self, _drop_sObj_3435]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TagTaggerChange'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'TagPlayer']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TagTaggerChange'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'TagTagger', 1, 0, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TagTagger'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TagTagger'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _player_ssn_3439 = lua_call(G.str['GetSessionObject'], [_self, 'ssn_tag_player'])[0];
      if (!lua_eq(_player_ssn_3439, null)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'TagPlayer', 1, 0, 0, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_TagPlayer'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TagPlayer'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Treasuremon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), (lua_multiply((lua_subtract(_arg1, 1)), 15))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Treasuremon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), (lua_multiply((lua_subtract(_arg1, 1)), 15))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FeverTime'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRate_3445 = 1;
      var _caster_3445 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_3445, null)) {
        var __JollyRoger_3446 = lua_call(G.str['GetSkill'], [_caster_3445, "Corsair_JollyRoger"])[0];
        if (!lua_eq(__JollyRoger_3446, null)) {
          _addRate_3445 = lua_tableget(__JollyRoger_3446, 'Level');
        }
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _addRate_3445, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FeverTime'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Born'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetHittable'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Born'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetHittable'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_CharExpRate'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_CharExpRate'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fishing_SpreadBait'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "FishingSpreadBait", _arg2]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fishing_SpreadBait'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "FishingSpreadBait"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fishing_Fire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fishing_Fire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fishing_SpreadBait_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fishingPlace_3457 = lua_call(G.str['GetExArgObject'], [_self, "MyFishingPlace"])[0];
      if (!lua_eq(_fishingPlace_3457, null)) {
        var _effectName_3458 = lua_call(G.str['GetExProp_Str'], [_fishingPlace_3457, "FishingSpreadBaitEffect"])[0];
        if ((lua_eq(_effectName_3458, null) || lua_eq(_effectName_3458, "None"))) {
          _effectName_3458 = "F_fish_foreshadow_blue";
        }
        lua_call(G.str['AttachEffect'], [_self, _effectName_3458, 4.0, "BOT"]);
        lua_call(G.str['SetExProp_Str'], [_buff, "EFFECT_NAME", _effectName_3458]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fishing_SpreadBait_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _effectName_3460 = lua_call(G.str['GetExProp_Str'], [_buff, "EFFECT_NAME"])[0];
      if (!lua_eq(_effectName_3460, null)) {
        lua_call(G.str['DetachEffect'], [_self, _effectName_3460]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ChallengeMode_Player'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _level_3462 = lua_call(G.str['GetExProp'], [_self, "ChallengeMode_Level"])[0];
      tmp = lua_call(G.str['GetClassList'], ["challenge_mode"]); var _clsList_3462 = tmp[0]; var _cnt_3462 = tmp[1]; tmp = null;
      var _lootingChangeBonus_3462 = lua_call(G.str['GetClassByNameFromList'], [_clsList_3462, lua_concat("LootingChangeBonus_Lv", _level_3462)])[0];
      var _rootingChance_3462 = lua_call(G.str['TryGet'], [_lootingChangeBonus_3462, "Value"])[0];
      lua_call(G.str['SetExProp'], [_buff, "CHALLENGE_MODE_PLAYER_BUFF", _rootingChance_3462]);
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), _rootingChance_3462));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ChallengeMode_Player'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _rootingChance_3463 = lua_call(G.str['GetExProp'], [_buff, "CHALLENGE_MODE_PLAYER_BUFF"])[0];
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), _rootingChance_3463));
      return [];
    })
    G.str['SCR_BUFF_ENTER_EVENT_1805_CHILDREN'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EVENT_1805_CHILDREN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EVENT_1805_CHILDREN'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_REMAINTIME_IES_APPLYTIME_SET'] = (function (_self, _buff, _RemainTime) {
      var tmp;
      var _buffIES_3468 = lua_call(G.str['GetClass'], ['Buff', lua_tableget(_buff, 'ClassName')])[0];
      if (lua_lt(lua_tableget(_buffIES_3468, 'ApplyTime'), _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), lua_tableget(_buffIES_3468, 'ApplyTime')]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Safe'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Safe'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemDEFUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemDEFUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemSTRUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemSTRUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemCONUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemCONUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemAGIUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemAGIUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemINTUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemINTUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HealSP1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HealSP1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_3483 = 10;
      lua_call(G.str['HealSP'], [_self, _heal_3483, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HealSP1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Haste'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Haste'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_RedOx'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_RedOx'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_RedOx'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HealHP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healHp_3490 = lua_multiply(_arg1, 7);
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3490 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3490, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3490, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_HealHP_Dot'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _arg1, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HealHP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HealSP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healSp_3497 = lua_multiply(_arg1, 7);
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3497 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3497, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['HealSP'], [_self, _healSp_3497, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_HealSP_Dot'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['HealSP'], [_self, _arg1, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HealSP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HealSP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healSp_3502 = lua_multiply(_arg1, 7);
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3502 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3502, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['HealSP'], [_self, _healSp_3502, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_HealSP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['HealSP'], [_self, _arg1, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HealSP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HealHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healHp_3507 = lua_multiply(_arg1, 7);
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3507 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3507, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3507, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_HealHP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _arg1, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HealHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HealHPSP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healHp_3514 = _arg1;
      var _healSp_3514 = _arg1;
      if (lua_lt(0, _arg2)) {
        _healSp_3514 = _arg2;
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3514 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3514, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3514 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3514, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3514, 0]);
      lua_call(G.str['HealSP'], [_self, _healSp_3514, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_HealHPSP_Dot'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healHp_3518 = _arg1;
      var _healSp_3518 = _arg1;
      if (lua_lt(0, _arg2)) {
        _healSp_3518 = _arg2;
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3518 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3518, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3518 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3518, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3518, 0]);
      lua_call(G.str['HealSP'], [_self, _healSp_3518, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HealHPSP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_007_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_007_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_035_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_035_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_011pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_011pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_011_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_set_011_buff']);
      lua_tableset(_self, 'Velnias_Atk_BM', lua_add(lua_tableget(_self, 'Velnias_Atk_BM'), 157));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_011_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Velnias_Atk_BM', lua_subtract(lua_tableget(_self, 'Velnias_Atk_BM'), 157));
      return [];
    })
    G.str['SCR_BUFF_ENTER_campfire_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_campfire_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 45, 'ALL', 1]); var _list_3532 = tmp[0]; var _cnt_3532 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_3532)) {
        var _i_3533;
        var var_3534 = 1, stop_3534 = lua_assertfloat(_cnt_3532);
        for (; var_3534 <= stop_3534; var_3534++) {
          var _i_3534 = var_3534;
          if (!lua_eq(lua_tableget(lua_tableget(_list_3532, _i_3534), 'ClassName'), 'PC')) {
            if (lua_eq(lua_tableget(lua_tableget(_list_3532, _i_3534), 'ClassName'), 'bonfire_1')) {
              var _addRhp_3537 = lua_multiply(lua_tableget(_self, 'RHP'), 0.5);
              lua_call(G.str['Heal'], [_self, _addRhp_3537, 0]);
              var _addRsp_3537 = lua_multiply(lua_tableget(_self, 'RSP'), 0.5);
              lua_call(G.str['HealSP'], [_self, _addRsp_3537, 0]);
              var _addRsta_3537 = lua_tableget(_self, 'Sta_Recover');
              lua_call(G.str['AddStamina'], [_self, _addRsta_3537]);
              return [1];
            }
          }
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_campfire_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SHD03_104_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Heal'], [_self, 40, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SHD03_104_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['Heal'], [_self, 40, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SHD03_104_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_CooltimeDown'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetClassList'], ['CoolDown']); var _clsList_3542 = tmp[0]; var _cnt_3542 = tmp[1]; tmp = null;
      if (lua_eq(null, _clsList_3542)) {
        return [];
      }
      var var_3544 = 0, stop_3544 = lua_assertfloat(lua_subtract(_cnt_3542, 1));
      for (; var_3544 <= stop_3544; var_3544++) {
        var _i_3544 = var_3544;
        var _pCls_3545 = lua_call(G.str['GetClassByIndexFromList'], [_clsList_3542, _i_3544])[0];
        var _cooldown_3545 = lua_call(G.str['GetCoolDown'], [_self, lua_tableget(_pCls_3545, 'ClassName')])[0];
        if (lua_lt(0, _cooldown_3545)) {
          if (!lua_eq(lua_call(G.str['TryGetProp'], [_pCls_3545, "ForceReset"])[0], "NO")) {
            lua_call(G.str['AddCoolDown'], [_self, lua_tableget(_pCls_3545, 'ClassName'), lua_unm(_cooldown_3545)]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_CooltimeDown'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_squire_food1_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _selfMHP_3549 = lua_subtract(lua_call(G.str['TryGetProp'], [_self, "MHP"])[0], lua_call(G.str['TryGetProp'], [_self, "MHP_BM"])[0]);
      var _addMhp_3549 = lua_multiply(lua_tableget(_self, 'MHP'), (lua_add(0.075, lua_multiply(_arg1, 0.025))));
      _addMhp_3549 = lua_tablegetcall(G.str['math'], 'floor', [_addMhp_3549])[0];
      lua_call(G.str['SetExProp'], [_buff, "SQUIRE_FOOD_ADD_MHP", _addMhp_3549]);
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _addMhp_3549));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_squire_food1_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMhp_3550 = lua_call(G.str['GetExProp'], [_buff, "SQUIRE_FOOD_ADD_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _addMhp_3550));
      return [];
    })
    G.str['SCR_BUFF_ENTER_squire_food2_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _selfMSP_3551 = lua_subtract(lua_call(G.str['TryGetProp'], [_self, "MSP"])[0], lua_call(G.str['TryGetProp'], [_self, "MSP_BM"])[0]);
      var _addMsp_3551 = lua_multiply(_selfMSP_3551, (lua_add(0.075, lua_multiply(_arg1, 0.025))));
      _addMsp_3551 = lua_tablegetcall(G.str['math'], 'floor', [_addMsp_3551])[0];
      lua_call(G.str['SetExProp'], [_buff, "SQUIRE_FOOD_ADD_MSP", _addMsp_3551]);
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _addMsp_3551));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_squire_food2_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMsp_3552 = lua_call(G.str['GetExProp'], [_buff, "SQUIRE_FOOD_ADD_MSP"])[0];
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _addMsp_3552));
      return [];
    })
    G.str['SCR_BUFF_ENTER_squire_food3_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRhptime_3553 = lua_multiply(_arg1, 1000);
      lua_call(G.str['SetExProp'], [_buff, "SQUIRE_FOOD_ADD_RHPTIME", _addRhptime_3553]);
      lua_tableset(_self, 'RHPTIME_BM', lua_add(lua_tableget(_self, 'RHPTIME_BM'), _addRhptime_3553));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_squire_food3_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRhptime_3554 = lua_call(G.str['GetExProp'], [_buff, "SQUIRE_FOOD_ADD_RHPTIME"])[0];
      lua_tableset(_self, 'RHPTIME_BM', lua_subtract(lua_tableget(_self, 'RHPTIME_BM'), _addRhptime_3554));
      return [];
    })
    G.str['SCR_BUFF_ENTER_squire_food4_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRsptime_3555 = lua_multiply(_arg1, 1000);
      lua_call(G.str['SetExProp'], [_buff, "SQUIRE_FOOD_ADD_RSPTIME", _addRsptime_3555]);
      lua_tableset(_self, 'RSPTIME_BM', lua_add(lua_tableget(_self, 'RSPTIME_BM'), _addRsptime_3555));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_squire_food4_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRsptime_3556 = lua_call(G.str['GetExProp'], [_buff, "SQUIRE_FOOD_ADD_RSPTIME"])[0];
      lua_tableset(_self, 'RSPTIME_BM', lua_subtract(lua_tableget(_self, 'RSPTIME_BM'), _addRsptime_3556));
      return [];
    })
    G.str['SCR_BUFF_ENTER_squire_food5_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addSr_3557 = lua_add(0.5, lua_multiply((lua_subtract(_arg1, 5)), 0.5));
      _addSr_3557 = lua_tablegetcall(G.str['math'], 'floor', [_addSr_3557])[0];
      lua_call(G.str['SetExProp'], [_buff, "SQUIRE_FOOD_ADD_SR", _addSr_3557]);
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), _addSr_3557));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_squire_food5_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addSr_3558 = lua_call(G.str['GetExProp'], [_buff, "SQUIRE_FOOD_ADD_SR"])[0];
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _addSr_3558));
      return [];
    })
    G.str['SCR_BUFF_ENTER_squire_food6_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addSdr_3559 = lua_add(0.5, lua_multiply((lua_subtract(_arg1, 5)), 0.5));
      _addSdr_3559 = lua_tablegetcall(G.str['math'], 'floor', [_addSdr_3559])[0];
      lua_call(G.str['SetExProp'], [_buff, "SQUIRE_FOOD_ADD_SDR", _addSdr_3559]);
      lua_tableset(_self, 'SDR_BM', lua_add(lua_tableget(_self, 'SDR_BM'), _addSdr_3559));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_squire_food6_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addSdr_3560 = lua_call(G.str['GetExProp'], [_buff, "SQUIRE_FOOD_ADD_SDR"])[0];
      lua_tableset(_self, 'SDR_BM', lua_subtract(lua_tableget(_self, 'SDR_BM'), _addSdr_3560));
      return [];
    })
    G.str['SCR_BUFF_ENTER_cosair_scanable_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_cosair_scanable_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_subweapon_metaldetector'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_3563 = tmp[0]; var _y_3563 = tmp[1]; var _z_3563 = tmp[2]; tmp = null;
      tmp = lua_call(G.str['SelectObjectPos'], [_self, _x_3563, _y_3563, _z_3563, 60, 'ALL']); var _fndList_3563 = tmp[0]; var _fndCount_3563 = tmp[1]; tmp = null;
      var var_3564 = 1, stop_3564 = lua_assertfloat(_fndCount_3563);
      for (; var_3564 <= stop_3564; var_3564++) {
        var _i_3564 = var_3564;
        var _obj_3565 = lua_tableget(_fndList_3563, _i_3564);
        if (lua_eq(lua_tableget(_obj_3565, 'ClassName'), "Skl_ScanTrigger")) {
          var _genID_3566 = lua_call(G.str['GetGenTypeID'], [_obj_3565])[0];
          var _npcState_3566 = lua_call(G.str['GetMapNPCState'], [_self, _genID_3566])[0];
          if (lua_lte(0, _npcState_3566)) {
            lua_call(G.str['RunScript'], ['SCR_SCOUT_SCAN_TX', _self, _obj_3565, _genID_3566]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_subweapon_metaldetector'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_subweapon_dumbbell'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addStr_3569 = lua_multiply(3, _over);
      var _addSta_3569 = lua_multiply(2, _over);
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SwellRightArm_Buff'])[0], 'YES')) {
        _addSta_3569 = lua_multiply(_addSta_3569, 0.5);
      }
      lua_call(G.str['SetExProp'], [_buff, "DUMBBELL_ADDSTR", _addStr_3569]);
      lua_call(G.str['SetExProp'], [_buff, "DUMBBELL_ADDSTA", _addSta_3569]);
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _addStr_3569));
      lua_tableset(_self, 'MaxSta_BM', lua_subtract(lua_tableget(_self, 'MaxSta_BM'), _addSta_3569));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_subweapon_dumbbell'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addStr_3571 = lua_call(G.str['GetExProp'], [_buff, "DUMBBELL_ADDSTR"])[0];
      var _addSta_3571 = lua_call(G.str['GetExProp'], [_buff, "DUMBBELL_ADDSTA"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _addStr_3571));
      lua_tableset(_self, 'MaxSta_BM', lua_add(lua_tableget(_self, 'MaxSta_BM'), _addSta_3571));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_cmine_red_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 20));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_cmine_red_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 20));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_cmine_blue_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 8));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 8));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_cmine_blue_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 8));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 8));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_cmine_yellow_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_cmine_yellow_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_cmine_yellow_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_toyhammer_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_toyhammer_debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        return [0];
      }
      if (lua_eq(_over, 10)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_toyhammer_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(9, _over)) {
        lua_call(G.str['PlayEffect'], [_self, "F_archer_explosiontrap_hit_explosion", 1, 1, 'BOT']);
        var _caster_3585 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _bombDamage_3585 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(lua_tableget(_caster_3585, 'MINPATK'), lua_tableget(_caster_3585, 'MAXPATK'))), lua_call(G.str['IMCRandomFloat'], [2, 2.5])[0])])[0], 5);
        var _bombRange_3585 = 30;
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_3585, _self, _bombRange_3585, 'ENEMY']); var _objList_3585 = tmp[0]; var _objCount_3585 = tmp[1]; tmp = null;
        var var_3586 = 1, stop_3586 = lua_assertfloat(_objCount_3585);
        for (; var_3586 <= stop_3586; var_3586++) {
          var _i_3586 = var_3586;
          var _obj_3587 = lua_tableget(_objList_3585, _i_3586);
          lua_call(G.str['TakeDamage'], [_caster_3585, _obj_3587, "None", _bombDamage_3585, "Melee", "None", "Melee", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['RemoveBuff'], [_obj_3587, "item_toyhammer_debuff"]);
          break;
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_013pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_013pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_013_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "set_013_buff_over", _over]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_013_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_shovel_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _item_3592 = lua_call(G.str['GetMaterialItem'], [_self])[0];
      lua_call(G.str['CREATE_DROP_ITEM'], [_self, _item_3592, _self]);
      lua_call(G.str['AddAchievePoint'], [_self, "Shovel", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_shovel_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_016pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_016pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_016_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_set_016_buff']);
      lua_call(G.str['HealSP'], [_self, 40, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_set_016_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HealSP'], [_self, 40, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_016_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_BLK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_BLK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_CRTATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_CRTATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_MHR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHR_BM', lua_add(lua_tableget(_self, 'MHR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_MHR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHR_BM', lua_subtract(lua_tableget(_self, 'MHR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_armorBreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_armorBreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_drop_inceaseMoney'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "MoneyCount", _arg1]);
      lua_call(G.str['SetExProp'], [_buff, "MoneyRatio", _arg2]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_drop_inceaseMoney'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_wizardSlayer'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_wizardSlayer']);
      var _addMdef_3609 = lua_tablegetcall(G.str['math'], 'floor', [lua_tableget(_self, 'Lv')])[0];
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addMdef_3609));
      lua_call(G.str['SetExProp'], [_buff, "wizardSlayer", _addMdef_3609]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_wizardSlayer'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMdef_3610 = lua_call(G.str['GetExProp'], [_buff, "wizardSlayer"])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _addMdef_3610));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_temere'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_temere']);
      var _value_3611 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MDEF'), 2)])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _value_3611));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _value_3611));
      lua_call(G.str['SetExProp'], [_buff, "item_temere", _value_3611]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_temere'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _value_3612 = lua_call(G.str['GetExProp'], [_buff, "item_temere"])[0];
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _value_3612));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _value_3612));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_poison']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _arg1, "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_poison_fast'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_poison']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_poison_fast'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_3617 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_3617, null)) {
        _caster_3617 = _self;
      }
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _arg1, "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_poison_fast'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_laideka'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 15));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_laideka'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 15));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_electricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_electricShock']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_electricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _arg1, "Lightning", "Magic", "Magic", G.str['HIT_LIGHTNING'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_electricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_magicAmulet_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_magicAmulet_1']);
      var _addDef_3625 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'DEF'), 2)])[0];
      var _addMdef_3625 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MDEF'), 2)])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addDef_3625));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _addMdef_3625));
      lua_call(G.str['SetExProp'], [_buff, "magicAmulet_1_DEF", _addDef_3625]);
      lua_call(G.str['SetExProp'], [_buff, "magicAmulet_1_MDEF", _addMdef_3625]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_magicAmulet_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDef_3626 = lua_call(G.str['GetExProp'], [_buff, "magicAmulet_1_DEF"])[0];
      var _addMdef_3626 = lua_call(G.str['GetExProp'], [_buff, "magicAmulet_1_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _addDef_3626));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addMdef_3626));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_magicAmulet_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_magicAmulet_4']);
      lua_call(G.str['Heal'], [_self, _arg1, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_magicAmulet_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Heal'], [_self, _arg1, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_magicAmulet_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_magicAmulet_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_magicAmulet_3']);
      var _sp_3630 = lua_subtract(lua_tableget(_self, 'SP'), _arg1);
      if (lua_lt(_sp_3630, 0)) {
        lua_tableset(_self, 'SP', 0);
      } else {
        lua_tableset(_self, 'SP', _sp_3630);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_magicAmulet_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_magicAmulet_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_magicAmulet_2']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_magicAmulet_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_linne'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lte(15, _over)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_linne']);
        lua_call(G.str['GIVE_REWARD'], [_self, "ITEM_LINNE", "Drop"]);
        lua_call(G.str['RemoveBuff'], [_self, 'item_linne']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_linne'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_cicel'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lte(8, _over)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_cicel2']);
        lua_call(G.str['AddBuff'], [_self, _self, 'item_cicel2', 1, 0, 30000, 1]);
        lua_call(G.str['RemoveBuff'], [_self, 'item_cicel']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_cicel'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_cicel2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 235));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 10));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 88));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_cicel2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'item_cicel']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_cicel2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 235));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 10));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 88));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_effigyCount'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, 'effigyCount_Bonus', _arg1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_effigyCount'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'effigyCount_Bonus']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_019_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_019_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_SR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_SR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SummonOrb_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SummonOrb_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Dead'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_GMboots'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_Bonus', lua_add(lua_tableget(_self, 'MSPD_Bonus'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_GMboots'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_Bonus', lua_subtract(lua_tableget(_self, 'MSPD_Bonus'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_NECK04_103'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _curRhp_3655 = lua_subtract(lua_tableget(_self, 'RHP'), lua_tableget(_self, 'RHP_BM'));
      lua_call(G.str['SetExProp'], [_self, "RHP_NECK04_103", _curRhp_3655]);
      var _addMhr_3655 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_curRhp_3655, 0.4)])[0];
      lua_call(G.str['SetExProp'], [_self, "MHR_NECK04_103", _addMhr_3655]);
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), _curRhp_3655));
      lua_tableset(_self, 'MHR_BM', lua_add(lua_tableget(_self, 'MHR_BM'), _addMhr_3655));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_NECK04_103'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRhp_3656 = lua_call(G.str['GetExProp'], [_self, "RHP_NECK04_103"])[0];
      var _addMhr_3656 = lua_call(G.str['GetExProp'], [_self, "MHR_NECK04_103"])[0];
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), _addRhp_3656));
      lua_tableset(_self, 'MHR_BM', lua_subtract(lua_tableget(_self, 'MHR_BM'), _addMhr_3656));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_speedUp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMspd_3657 = lua_call(G.str['GetCashValue'], [_self, "speedUp"])[0];
      lua_tableset(_self, 'MSPD_Bonus', lua_add(lua_tableget(_self, 'MSPD_Bonus'), _addMspd_3657));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_speedUp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMspd_3658 = lua_call(G.str['GetCashValue'], [_self, "speedUp"])[0];
      lua_tableset(_self, 'MSPD_Bonus', lua_subtract(lua_tableget(_self, 'MSPD_Bonus'), _addMspd_3658));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_Nexon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_add(lua_tableget(_self, 'RSta_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_Nexon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_subtract(lua_tableget(_self, 'RSta_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_boostToken'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_add(lua_tableget(_self, 'RSta_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_boostToken'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_subtract(lua_tableget(_self, 'RSta_BM'), 500));
      if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        lua_call(G.str['SendSysMsg'], [_self, "Premium_boostToken_EndMsg"]);
        lua_call(G.str['PremiumItemMongoLog'], [_self, "BoostToken", "End", 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_boostToken02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_add(lua_tableget(_self, 'RSta_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_boostToken02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_subtract(lua_tableget(_self, 'RSta_BM'), 2000));
      if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        lua_call(G.str['SendSysMsg'], [_self, "Premium_boostToken_EndMsg"]);
        lua_call(G.str['PremiumItemMongoLog'], [_self, "BoostToken", "End", 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_boostToken03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_add(lua_tableget(_self, 'RSta_BM'), 4000));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_boostToken03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_subtract(lua_tableget(_self, 'RSta_BM'), 4000));
      if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        lua_call(G.str['SendSysMsg'], [_self, "Premium_boostToken_EndMsg"]);
        lua_call(G.str['PremiumItemMongoLog'], [_self, "BoostToken", "End", 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_boostToken04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSta_BM', lua_subtract(lua_tableget(_self, 'RSta_BM'), 500));
      if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        lua_call(G.str['SendSysMsg'], [_self, "Premium_boostToken_EndMsg"]);
        lua_call(G.str['PremiumItemMongoLog'], [_self, "BoostToken", "End", 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Guild_Academy_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Guild_Academy_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Guild_Forge_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addValue_3674 = lua_multiply(_over, 110);
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK_BM", _addValue_3674]);
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _addValue_3674));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Guild_Forge_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addValue_3675 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK_BM"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _addValue_3675));
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Guild_ShieldCharger_buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _shieldValue_3676 = lua_call(G.str['GetShield'], [_self])[0];
      if (lua_lte(_shieldValue_3676, 0)) {
        return [0];
      }
      lua_call(G.str['SetBuffArg'], [_self, _buff, _shieldValue_3676, 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_CRTHR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_CRTHR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_PATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_PATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_ResFire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_ResFire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_ResIce'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_ResIce'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_ResPoison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_ResPoison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_ResEarth'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResEarth_BM', lua_add(lua_tableget(_self, 'ResEarth_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_ResEarth'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResEarth_BM', lua_subtract(lua_tableget(_self, 'ResEarth_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_ResLightning'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_ResLightning'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_MDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_MDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_MATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_MATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_024'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(99, _over)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'item_set_024_active', 1, 0, 10000]);
        lua_call(G.str['RemoveBuff'], [_self, 'item_set_024']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_024'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_024_active'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAtk_3699 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.08)])[0];
      lua_call(G.str['SetExProp'], [_buff, "ITEM_SET_024_ADDATK", _addAtk_3699]);
      lua_tableset(_self, 'Holy_Atk_BM', lua_add(lua_tableget(_self, 'Holy_Atk_BM'), _addAtk_3699));
      lua_tableset(_self, 'Dark_Atk_BM', lua_add(lua_tableget(_self, 'Dark_Atk_BM'), _addAtk_3699));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_set_024_active'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'item_set_024']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_024_active'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAtk_3701 = lua_call(G.str['GetExProp'], [_buff, "ITEM_SET_024_ADDATK"])[0];
      lua_tableset(_self, 'Holy_Atk_BM', lua_subtract(lua_tableget(_self, 'Holy_Atk_BM'), _addAtk_3701));
      lua_tableset(_self, 'Dark_Atk_BM', lua_subtract(lua_tableget(_self, 'Dark_Atk_BM'), _addAtk_3701));
      lua_call(G.str['AddBuff'], [_self, _self, 'item_set_024']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_NECK03_106'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), lua_multiply(6, _over)));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), lua_multiply(6, _over)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_NECK03_106'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), lua_multiply(6, _over)));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), lua_multiply(6, _over)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TSW03_111_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['GIVE_BUFF_SHIELD'], [_self, _buff, 2380]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TSW03_111_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TAKE_BUFF_SHIELD'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SWD03_110_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(4, _over)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'SWD03_110_active_Buff', 1, 0, 30000]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SWD03_110_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SWD03_110_active_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'SWD03_110_Buff']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SWD03_110_active_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TSP03_106_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(9, _over)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'TSP03_106_Active_Debuff', 1, 0, 10000]);
        lua_call(G.str['RemoveBuff'], [_self, 'TSP03_106_Debuff']);
      }
      if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        lua_call(G.str['AddStamina'], [_self, -1000]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TSP03_106_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TSP03_106_Active_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TSP03_106_Active_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MAC03_110_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 84));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MAC03_110_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 84));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_EffigyBonus1_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_EffigyBonus1_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TBW03_109_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), lua_multiply(8, _over)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TBW03_109_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), lua_multiply(8, _over)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_indunFreeEnter'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_indunFreeEnter'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MAC04_102_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _jobObj_3725 = lua_call(G.str['GetJobObject'], [_self])[0];
      if (lua_eq(lua_tableget(_jobObj_3725, 'CtrlType'), 'Cleric')) {
        lua_tableset(_self, 'Holy_Atk_BM', lua_add(lua_tableget(_self, 'Holy_Atk_BM'), 50));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MAC04_102_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _jobObj_3727 = lua_call(G.str['GetJobObject'], [_self])[0];
      if (lua_eq(lua_tableget(_jobObj_3727, 'CtrlType'), 'Cleric')) {
        lua_tableset(_self, 'Holy_Atk_BM', lua_subtract(lua_tableget(_self, 'Holy_Atk_BM'), 50));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_AriesAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'AriesAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'AriesAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_AriesAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'AriesAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'AriesAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_SlashAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SlashAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'SlashAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_SlashAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SlashAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'SlashAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_StrikeAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'StrikeAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'StrikeAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_StrikeAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'StrikeAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'StrikeAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_MissileAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MissileAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'MissileAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_MissileAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MissileAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'MissileAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_FireAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FireAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'FireAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_FireAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FireAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'FireAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_IceAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'IceAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_IceAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'IceAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_PoisonAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PoisonAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'PoisonAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_PoisonAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PoisonAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'PoisonAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_LightningAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LightningAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'LightningAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_LightningAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LightningAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'LightningAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_EarthAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'EarthAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'EarthAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_EarthAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'EarthAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'EarthAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HolyAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'HolyAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'HolyAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HolyAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'HolyAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'HolyAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_DarkAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkAtkFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_DarkAtk_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkAtkFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkAtkFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_AriesDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'AriesDefFactor_PC_BM', lua_add(lua_tableget(_self, 'AriesDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_AriesDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'AriesDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'AriesDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_SlashDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SlashDefFactor_PC_BM', lua_add(lua_tableget(_self, 'SlashDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_SlashDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SlashDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'SlashDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_StrikeDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'StrikeDefFactor_PC_BM', lua_add(lua_tableget(_self, 'StrikeDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_StrikeDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'StrikeDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'StrikeDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_MissileDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MissileDefFactor_PC_BM', lua_add(lua_tableget(_self, 'MissileDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_MissileDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MissileDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'MissileDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_FireDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FireDefFactor_PC_BM', lua_add(lua_tableget(_self, 'FireDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_FireDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FireDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'FireDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_IceDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_add(lua_tableget(_self, 'IceDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_IceDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'IceDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_PoisonDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PoisonDefFactor_PC_BM', lua_add(lua_tableget(_self, 'PoisonDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_PoisonDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PoisonDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'PoisonDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_LightningDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LightningDefFactor_PC_BM', lua_add(lua_tableget(_self, 'LightningDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_LightningDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LightningDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'LightningDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_EarthDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'EarthDefFactor_PC_BM', lua_add(lua_tableget(_self, 'EarthDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_EarthDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'EarthDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'EarthDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_HolyDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'HolyDefFactor_PC_BM', lua_add(lua_tableget(_self, 'HolyDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_HolyDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'HolyDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'HolyDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_DarkDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_DarkDef_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, (lua_divide(_arg1, 100)))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Event160218_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 50));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Event160218_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 50));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1709_NewField_Coupon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 50));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_1709_NewField_Coupon'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SCR_BUFF_UPDATE_REMAINTIME_IES_APPLYTIME_SET'], [_self, _buff, _RemainTime]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1709_NewField_Coupon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 50));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1709_NewField_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_3778 = 3;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_3778));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD_Event_1709_NewField_Potion_Buff", _mspdadd_3778]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_1709_NewField_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SCR_BUFF_UPDATE_REMAINTIME_IES_APPLYTIME_SET'], [_self, _buff, _RemainTime]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1709_NewField_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_3780 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD_Event_1709_NewField_Potion_Buff"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_3780));
      return [];
    })
    G.str['SCR_BUFF_ENTER_EVENT_1712_XMAS_FIRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EVENT_1712_XMAS_FIRE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SCR_BUFF_UPDATE_REMAINTIME_IES_APPLYTIME_SET'], [_self, _buff, _RemainTime]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EVENT_1712_XMAS_FIRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Item_magicAmulet_22_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHR_BM', lua_add(lua_tableget(_self, 'MHR_BM'), 152));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Item_magicAmulet_22_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHR_BM', lua_subtract(lua_tableget(_self, 'MHR_BM'), 152));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Item_magicAmulet_23_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_3786 = lua_multiply(lua_tableget(_self, 'DEF'), 0.5);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_3786));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_3786]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Item_magicAmulet_23_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_3787 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_3787));
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Whole_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _arg1));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Whole_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _arg1));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Whole_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _arg1));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Whole_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _arg1));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_pet_penguin_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 30));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_pet_penguin_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 30));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_pet_parrotbill_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), 114));
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), 85));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_pet_parrotbill_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), 114));
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), 85));
      return [];
    })
    G.str['SCR_BUFF_ENTER_pet_Lesserpanda_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), 25));
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_pet_Lesserpanda_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), 25));
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_ENTER_pet_rocksodon_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 600));
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), 400));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_pet_rocksodon_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 600));
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), 400));
      return [];
    })
    G.str['SCR_BUFF_ENTER_pet_PetHanaming_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'Forester_Atk_BM', lua_add(lua_tableget(_self, 'Forester_Atk_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_pet_PetHanaming_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'Forester_Atk_BM', lua_subtract(lua_tableget(_self, 'Forester_Atk_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_NECK01_145_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), 0.25));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NECK01_145_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), 0.25));
      return [];
    })
    G.str['SCR_BUFF_ENTER_NECK01_146_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_add(lua_tableget(_self, 'IceDefFactor_PC_BM'), 0.05));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NECK01_146_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'IceDefFactor_PC_BM'), 0.05));
      return [];
    })
    G.str['SCR_BUFF_ENTER_NECK01_147_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'MissileDefFactor_PC_BM', lua_add(lua_tableget(_self, 'MissileDefFactor_PC_BM'), 0.25));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NECK01_147_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'MissileDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'MissileDefFactor_PC_BM'), 0.25));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRC01_140_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, 0.05)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRC01_140_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, 0.05)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRC01_141_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_add(lua_tableget(_self, 'IceDefFactor_PC_BM'), lua_multiply(_over, 0.025)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRC01_141_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'IceDefFactor_PC_BM'), lua_multiply(_over, 0.025)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRC01_142_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MissileDefFactor_PC_BM', lua_add(lua_tableget(_self, 'MissileDefFactor_PC_BM'), lua_multiply(_over, 0.1)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRC01_142_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MissileDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'MissileDefFactor_PC_BM'), lua_multiply(_over, 0.1)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRC02_120_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, 0.05)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRC02_120_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, 0.05)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_NECK02_123_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), 0.1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NECK02_123_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), 0.1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRC02_121_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_add(lua_tableget(_self, 'IceDefFactor_PC_BM'), lua_multiply(_over, 0.05)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRC02_121_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'IceDefFactor_PC_BM'), lua_multiply(_over, 0.05)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_NECK02_124_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_add(lua_tableget(_self, 'IceDefFactor_PC_BM'), 0.1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NECK02_124_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'IceDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'IceDefFactor_PC_BM'), 0.1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRC03_109_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, 0.075)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRC03_109_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), lua_multiply(_over, 0.075)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_NECK03_107_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_add(lua_tableget(_self, 'DarkDefFactor_PC_BM'), 0.15));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NECK03_107_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      lua_tableset(_self, 'DarkDefFactor_PC_BM', lua_subtract(lua_tableget(_self, 'DarkDefFactor_PC_BM'), 0.15));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_WDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _arg1));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_WDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _arg1));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_WholeATK_Gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 125));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 125));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_WDEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 125));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 125));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_ATK_Gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _arg1));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), (lua_subtract(_arg1, 6))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_ATK_Gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _arg1));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), (lua_subtract(_arg1, 6))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_SPUP_Gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _arg1));
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), 415));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_SPUP_Gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _arg1));
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), 415));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_WholeDEF_gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _arg1));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), (lua_multiply(_arg1, 0.02))));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), (lua_multiply(_arg1, 0.02))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_WholeDEF_gimmick01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _arg1));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), (lua_multiply(_arg1, 0.02))));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), (lua_multiply(_arg1, 0.02))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Alche_Restore'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _arg1));
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), lua_multiply(_arg1, 0.25)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Alche_Restore'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _arg1));
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), lua_multiply(_arg1, 0.25)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_SongPyeon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), 5000));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 5000));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_SongPyeon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), 5000));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 5000));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_LargeSongPyeon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_LargeSongPyeon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Largehoney_Songpyeon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Largehoney_Songpyeon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Pumkincandy'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _arg1));
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _arg1));
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _arg1));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _arg1));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_Pumkincandy'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        if (lua_lt(5300000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 600000, 0, 1]);
        } else if (lua_lt(5030000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 642800, 0, 1]);
        } else if (lua_lt(4670000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 692300, 0, 1]);
        } else if (lua_lt(4310000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 750000, 0, 1]);
        } else if (lua_lt(3950000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 818100, 0, 1]);
        } else if (lua_lt(3590000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 900000, 0, 1]);
        } else if (lua_lt(3230000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 999000, 0, 1]);
        } else if (lua_lt(2870000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 1124000, 0, 1]);
        } else if (lua_lt(2510000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 1284000, 0, 1]);
        } else if (lua_lt(2150000, _RemainTime)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Event_Pumkincandy', 5, 0, 1490000, 0, 1]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Pumkincandy'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _arg1));
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _arg1));
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _arg1));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _arg1));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161110_candy'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161110_candy'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161110_vitamin'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healHp_3860 = _arg1;
      var _healSp_3860 = lua_divide(_arg1, 3);
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3860 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3860, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3860 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3860, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3860, 0]);
      lua_call(G.str['HealSP'], [_self, _healSp_3860, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161110_vitamin'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healHp_3863 = _arg1;
      var _healSp_3863 = lua_divide(_arg1, 3);
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3863 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3863, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3863 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3863, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3863, 0]);
      lua_call(G.str['HealSP'], [_self, _healSp_3863, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161110_vitamin'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161110_chocolate'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161110_chocolate'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161215'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161215_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161215_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_3872 = lua_call(G.str['SCR_BUFF_UPDATE_Event_161215'], [_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over])[0];
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161215_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161215_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161215_2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_3875 = lua_call(G.str['SCR_BUFF_UPDATE_Event_161215'], [_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over])[0];
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161215_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161215_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 1));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161215_3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_3878 = lua_call(G.str['SCR_BUFF_UPDATE_Event_161215'], [_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over])[0];
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161215_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 1));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161215_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 1000));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161215_4'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_3881 = lua_call(G.str['SCR_BUFF_UPDATE_Event_161215'], [_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over])[0];
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161215_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 1000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_161215_5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 3));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_161215_5'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_3884 = lua_call(G.str['SCR_BUFF_UPDATE_Event_161215'], [_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over])[0];
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_161215_5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 3));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Heal100HP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healHp_3886 = lua_multiply(lua_tableget(_self, 'MHP'), (lua_divide(_arg1, 100)));
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3886 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3886, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _healHp_3886, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_Heal100HP_Dot'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healHp_3889 = lua_multiply(lua_tableget(_self, 'MHP'), (lua_divide(_arg1, 100)));
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3889 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3889, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      _healHp_3889 = lua_divide(_healHp_3889, 5);
      lua_call(G.str['Heal'], [_self, _healHp_3889, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Heal100HP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_Heal100SP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healSp_3893 = lua_multiply(lua_tableget(_self, 'MSP'), (lua_divide(_arg1, 100)));
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3893 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3893, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['HealSP'], [_self, _healSp_3893, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_Heal100SP_Dot'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healSp_3895 = lua_multiply(lua_tableget(_self, 'MSP'), (lua_divide(_arg1, 100)));
      if (lua_lt(0, lua_tableget(_self, 'SPPotion_BM'))) {
        _healSp_3895 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healSp_3895, (lua_add(1, lua_divide(lua_tableget(_self, 'SPPotion_BM'), 100))))])[0];
      }
      _healSp_3895 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_healSp_3895, 5)])[0];
      lua_call(G.str['HealSP'], [_self, _healSp_3895, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_Heal100SP_Dot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_ThanksgivingDay'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_ThanksgivingDay'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_038_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _Maxhp_3900 = lua_tableget(_self, 'MHP');
      var _healcount_3900 = 5;
      lua_call(G.str['Heal'], [_self, lua_multiply(_Maxhp_3900, 0.02), 0]);
      _healcount_3900 = lua_subtract(_healcount_3900, 1);
      lua_call(G.str['SetBuffArgs'], [_buff, _Maxhp_3900, _healcount_3900, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_item_set_038_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _Maxhp_3901 = tmp[0]; var _healcount_3901 = tmp[1]; tmp = null;
      if (lua_lte(1, _healcount_3901)) {
        lua_call(G.str['Heal'], [_self, lua_multiply(_Maxhp_3901, 0.02), 0]);
        _healcount_3901 = lua_subtract(_healcount_3901, 1);
        lua_call(G.str['SetBuffArgs'], [_buff, _Maxhp_3901, _healcount_3901, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_038_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_Fortunecookie_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Premium_Fortunecookie_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_Fortunecookie_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_Fortunecookie_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Premium_Fortunecookie_2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_Fortunecookie_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 2));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_Fortunecookie_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 3));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Premium_Fortunecookie_3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_Fortunecookie_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 3));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_Fortunecookie_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 1000));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Premium_Fortunecookie_4'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_Fortunecookie_4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 1000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Premium_Fortunecookie_5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 5));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Premium_Fortunecookie_5'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Premium_Fortunecookie_5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 5));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_039pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetBuffArg'], [_self, _buff, _arg1, 0]);
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_item_set_039pre_buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _arg1_3925 = tmp[0]; var _arg2_3925 = tmp[1]; tmp = null;
      if (lua_eq(_arg2_3925, 5)) {
        lua_call(G.str['SetBuffArg'], [_self, _buff, _arg1_3925, 0]);
        lua_call(G.str['PlayEffect'], [_target, "F_explosion065_violet", 1, 1, 'BOT']);
        var _bombDamage_3926 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(1000, lua_call(G.str['IMCRandomFloat'], [1, 3])[0])])[0];
        lua_call(G.str['TakeDadak'], [_self, _target, "None", _bombDamage_3926, 0.1, "Melee", "Magic", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_item_set_039pre_buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'item_set_039pre_buff'])[0], 'YES')) {
        if (lua_lte(lua_tableget(_ret, 'Damage'), 0)) {
          return [];
        }
        if ((!lua_eq(_skill, null) && !lua_eq(_buff, null))) {
          if (!lua_eq("Default", lua_call(G.str['TryGetProp'], [_skill, "ClassName"])[0])) {
            tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _arg1_3931 = tmp[0]; var _arg2_3931 = tmp[1]; tmp = null;
            _arg2_3931 = lua_add(_arg2_3931, 1);
            lua_call(G.str['SetBuffArg'], [_self, _buff, _arg1_3931, _arg2_3931]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_039pre_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_039_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_039_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Penalty'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_3935 = lua_tableget(_self, 'DEF');
      var _mdefadd_3935 = lua_tableget(_self, 'MDEF');
      var _mhp_3935 = lua_tableget(_self, 'MHP');
      lua_tableset(_self, 'DEF_BM', lua_add(lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_3935), 1));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_3935), 1));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhp_3935), 1));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_3935]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_3935]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _mhp_3935]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Penalty'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_3936 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_3936 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mhp_3936 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_3936), 1));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_3936), 1));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_add(lua_tableget(_self, 'MHP_BM'), _mhp_3936), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Rice_Soup'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_Rice_Soup'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Rice_Soup'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_LargeRice_Soup'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_LargeRice_Soup'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(1800000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 1800000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_LargeRice_Soup'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 4));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_041_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_041_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_042_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_042_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_item_set_043_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_item_set_043_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_RedOrb_GM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 20));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 20));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, -50]);
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), 1));
      lua_call(G.str['SetExProp'], [_buff, "ADD_SR", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_RedOrb_GM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 20));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 20));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, 50]);
      var _addsr_3952 = lua_call(G.str['GetExProp'], [_buff, "ADD_SR"])[0];
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _addsr_3952));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drug_DotHealHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healHp_3953 = lua_multiply(_arg1, 7);
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _healHp_3953 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healHp_3953, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _arg1, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Drug_DotHealHP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Restoration_Buff"])[0], 'YES')) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 1.3)])[0];
      }
      if (lua_lt(0, lua_tableget(_self, 'HPPotion_BM'))) {
        _arg1 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, (lua_add(1, lua_divide(lua_tableget(_self, 'HPPotion_BM'), 100))))])[0];
      }
      lua_call(G.str['Heal'], [_self, _arg1, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drug_DotHealHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Transform_GM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(_arg1, 1)) {
        G.str['montype'] = 'Peaceful';
      } else if (lua_eq(_arg1, 2)) {
        G.str['montype'] = 'Monster';
      }
      lua_call(G.str['SetCurrentFaction'], [_self, G.str['montype']]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_Transform_GM'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL'], [_self, "Debuff", 3]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Transform_GM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'GM_BUFF_DEF']);
      lua_call(G.str['RemoveBuff'], [_self, 'GM_BUFF_MHP']);
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL'], [_self, "Debuff", 3]);
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 1]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      lua_call(G.str['ClearScpObjectList'], [_self, 'Event_Transform_GM']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_WeddingCake'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 3));
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_WeddingCake'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(3600000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 3600000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_WeddingCake'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 3));
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Donnes_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Event_Donnes_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(7200000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 7200000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Donnes_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_BUFF_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _arg1));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_BUFF_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _arg1));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_BUFF_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _arg1));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_BUFF_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _arg1));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_BUFF_MHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_BUFF_MHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_STACK_MATK_PRE'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'STACK_MATK'])[0], "NO")) {
        lua_call(G.str['AddBuff'], [_self, _self, 'STACK_MATK', 1, 0, 10000, 1]);
        return [1];
      }
      var _buffOver_3979 = lua_call(G.str['GetBuffOver'], [_self, 'STACK_MATK'])[0];
      if (lua_lte(50, _buffOver_3979)) {
        return [1];
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'STACK_MATK', 1, 0, 10000, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_STACK_MATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMATK_3983 = 0;
      var _bonusMATK_3983 = 0;
      if (lua_lte(50, _over)) {
        _over = 50;
        _bonusMATK_3983 = 250;
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      var _addMATK_3983 = lua_add((lua_multiply(2, _over)), _bonusMATK_3983);
      _addMATK_3983 = lua_tablegetcall(G.str['math'], 'floor', [_addMATK_3983])[0];
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _addMATK_3983));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _addMATK_3983]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STACK_MATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMATK_3985 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _addMATK_3985));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SHOCK_BOOM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_SHOCK_BOOM'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      tmp = lua_call(G.str['SelectObject'], [_self, 60, "ENEMY"]); var _list_3987 = tmp[0]; var _cnt_3987 = tmp[1]; tmp = null;
      if (lua_lt(_cnt_3987, 1)) {
        return [1];
      }
      if (lua_lt(10, _cnt_3987)) {
        _cnt_3987 = 10;
      }
      var _ratio_3987 = lua_multiply(_cnt_3987, 200);
      var _skill_3987 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (lua_eq(_skill_3987, null)) {
        return [1];
      }
      if ((lua_lte(lua_call(G.str['IMCRandom'], [1, 10000])[0], _ratio_3987) && !lua_eq(lua_tableget(_skill_3987, 'ClassName'), 'Default'))) {
        var _damage_3992 = lua_call(G.str['IMCRandom'], [2000, 3000])[0];
        var var_3993 = 1, stop_3993 = lua_assertfloat(_cnt_3987);
        for (; var_3993 <= stop_3993; var_3993++) {
          var _i_3993 = var_3993;
          var _target_3994 = lua_tableget(_list_3987, _i_3993);
          lua_call(G.str['PlayEffect'], [_target_3994, "F_explosion065_violet", 1, 1, 'BOT']);
          lua_call(G.str['TakeDamage'], [_self, _target_3994, "None", _damage_3992, "Melee", "Magic", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SHOCK_BOOM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Res_TS_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Res_TS_ATK'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _attrList_3997 = lua_newtable(['Fire', 'Ice', 'Lightning', 'Poison', 'Dark', 'Holy', 'Earth', 'Soul']);
      var var_3998 = 1, stop_3998 = lua_assertfloat(lua_len(_attrList_3997));
      for (; var_3998 <= stop_3998; var_3998++) {
        var _i_3998 = var_3998;
        var _resValue_3999 = lua_call(G.str['TryGetProp'], [_from, lua_concat("Res", lua_tableget(_attrList_3997, _i_3998))])[0];
        if (lua_eq(_resValue_3999, null)) {
          _resValue_3999 = 0;
        }
        if (lua_lt(0, _resValue_3999)) {
          var _addLimit_4001 = 300;
          if (lua_lt(_addLimit_4001, _resValue_3999)) {
            _resValue_3999 = _addLimit_4001;
          }
          lua_tableset(_rateTable, lua_concat("AddAttributeDamage", lua_tableget(_attrList_3997, _i_3998)), lua_add(lua_tableget(_rateTable, lua_concat("AddAttributeDamage", lua_tableget(_attrList_3997, _i_3998))), _resValue_3999));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Res_TS_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DFFENCE_SHIELD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDEF_4004 = 0;
      var _bonusDEF_4004 = 0;
      if (lua_lte(50, _over)) {
        _over = 50;
        _bonusDEF_4004 = 500;
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      var _addDEF_4004 = lua_add((lua_multiply(10, _over)), _bonusDEF_4004);
      _addDEF_4004 = lua_tablegetcall(G.str['math'], 'floor', [_addDEF_4004])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _addDEF_4004));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addDEF_4004));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _addDEF_4004]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DFFENCE_SHIELD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDEF_4006 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addDEF_4006));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _addDEF_4006));
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_DFFENCE_SHIELD_PRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _buffOver_4007 = lua_call(G.str['GetBuffOver'], [_self, 'DFFENCE_SHIELD'])[0];
      if (lua_lte(50, _buffOver_4007)) {
        return [1];
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'DFFENCE_SHIELD', 1, 0, 10000, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_FISH_RHP_RSP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_4009 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      if (lua_eq(_lv_4009, null)) {
        _lv_4009 = 1;
      }
      var _addRHP_4009 = lua_add(1, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_lv_4009, 1)])[0]);
      var _addRSP_4009 = lua_add(1, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_lv_4009, 0.25)])[0]);
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), _addRHP_4009));
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), _addRSP_4009));
      lua_call(G.str['SetExProp'], [_buff, "ADD_RHP", _addRHP_4009]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_RSP", _addRSP_4009]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FISH_RHP_RSP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addRHP_4011 = lua_call(G.str['GetExProp'], [_buff, "ADD_RHP"])[0];
      var _addRSP_4011 = lua_call(G.str['GetExProp'], [_buff, "ADD_RSP"])[0];
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), _addRHP_4011));
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), _addRSP_4011));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_Steam_Wedding'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_Steam_Wedding'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BATTLE_BUFF_01_DRUG'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _arg1));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _arg1));
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_arg1, 2)])[0]));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, -80]);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_arg1, 30)])[0]));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BATTLE_BUFF_01_DRUG'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _arg1));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _arg1));
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_arg1, 2)])[0]));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, 80]);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_arg1, 30)])[0]));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_BATTLE_BUFF_01_DRUG'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "BATTLE_BUFF_01_DRUG"])[0], "YES")) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.05]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cotume_DMG_Rate_Down_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cotume_DMG_Rate_Down_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cotume_DMG_Rate_Down_5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cotume_DMG_Rate_Down_5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Cotume_DMG_Rate_Down_3'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Cotume_DMG_Rate_Down_3"])[0], "YES")) {
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.03]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Cotume_DMG_Rate_Down_5'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Cotume_DMG_Rate_Down_5"])[0], "YES")) {
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.05]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CARD_DMG_Rate_Down_10'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CARD_DMG_Rate_Down_10'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_CARD_DMG_Rate_Down_10'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "CARD_DMG_Rate_Down_10"])[0], "YES")) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ITEM_Solmiki_armorbreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4032 = 0.2;
      var _mdefadd_4032 = 0.2;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_4032));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_4032));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_4032]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_4032]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ITEM_Solmiki_armorbreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4033 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_4033 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_4033));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_4033));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CARD_Haste'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 4));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CARD_Haste'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 4));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CARD_ElectricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_EFFECT', 0, null, 'item_electricShock']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CARD_ElectricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4037 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4037, null)) {
        return [0];
      }
      lua_call(G.str['TakeDamage'], [_caster_4037, _self, "None", _arg1, "Lightning", "Magic", "AbsoluteDamage", G.str['HIT_LIGHTNING'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CARD_ElectricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Elements'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _list_4040 = lua_newtable(['Fire', 'Ice', 'Lightning', 'Earth']);
      var _ran_4040 = lua_tableget(_list_4040, lua_call(G.str['IMCRandom'], [1, 4])[0]);
      if (lua_eq(_ran_4040, 'Fire')) {
        lua_call(G.str['PlayEffect'], [_self, 'F_lineup022_red', 1, 'BOT']);
        lua_call(G.str['AddBuff'], [_self, _self, "GIMMICK_Drug_Elements_Fire_Atk", _arg1, 0, 120000, 1]);
      } else if (lua_eq(_ran_4040, 'Ice')) {
        lua_call(G.str['PlayEffect'], [_self, 'F_lineup022_dark_blue2', 1, 'BOT']);
        lua_call(G.str['AddBuff'], [_self, _self, "GIMMICK_Drug_Elements_Ice_Atk", _arg1, 0, 120000, 1]);
      } else if (lua_eq(_ran_4040, 'Lightning')) {
        lua_call(G.str['PlayEffect'], [_self, 'F_lineup022_violet', 1, 'BOT']);
        lua_call(G.str['AddBuff'], [_self, _self, "GIMMICK_Drug_Elements_Lightning_Atk", _arg1, 0, 120000, 1]);
      } else if (lua_eq(_ran_4040, 'Earth')) {
        lua_call(G.str['PlayEffect'], [_self, 'F_lineup022_yellow', 1, 'BOT']);
        lua_call(G.str['AddBuff'], [_self, _self, "GIMMICK_Drug_Elements_Earth_Atk", _arg1, 0, 120000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Elements'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "GIMMICK_Drug_Elements_Fire_Atk"])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, "GIMMICK_Drug_Elements_Fire_Atk"]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "GIMMICK_Drug_Elements_Ice_Atk"])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, "GIMMICK_Drug_Elements_Ice_Atk"]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "GIMMICK_Drug_Elements_Lightning_Atk"])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, "GIMMICK_Drug_Elements_Lightning_Atk"]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "GIMMICK_Drug_Elements_Earth_Atk"])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, "GIMMICK_Drug_Elements_Earth_Atk"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Elements_Fire_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Fire_Atk_BM', lua_add(lua_tableget(_self, 'Fire_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Elements_Fire_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Fire_Atk_BM', lua_subtract(lua_tableget(_self, 'Fire_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Elements_Ice_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Ice_Atk_BM', lua_add(lua_tableget(_self, 'Ice_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Elements_Ice_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Ice_Atk_BM', lua_subtract(lua_tableget(_self, 'Ice_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Elements_Lightning_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Lightning_Atk_BM', lua_add(lua_tableget(_self, 'Lightning_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Elements_Lightning_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Lightning_Atk_BM', lua_subtract(lua_tableget(_self, 'Lightning_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Elements_Earth_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Earth_Atk_BM', lua_add(lua_tableget(_self, 'Earth_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Elements_Earth_Atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Earth_Atk_BM', lua_subtract(lua_tableget(_self, 'Earth_Atk_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Curse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Curse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_GIMMICK_Drug_Curse'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if ((!lua_eq(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        if ((((lua_eq(lua_call(G.str['IsBuffApplied'], [_target, "GIMMICK_Drug_Curse_Fire_buff"])[0], "NO") && lua_eq(lua_call(G.str['IsBuffApplied'], [_target, "GIMMICK_Drug_Curse_Ice_buff"])[0], "NO")) && lua_eq(lua_call(G.str['IsBuffApplied'], [_target, "GIMMICK_Drug_Curse_Poison_buff"])[0], "NO")) && lua_eq(lua_call(G.str['IsBuffApplied'], [_target, "GIMMICK_Drug_Curse_Lightning_buff"])[0], "NO"))) {
          var _result_4062 = lua_call(G.str['IMCRandom'], [1, 100])[0];
          if (lua_lte(_result_4062, 10)) {
            var _list_4063 = lua_newtable(['Fire', 'Ice', 'Poison', 'Lightning']);
            var _ran_4063 = lua_tableget(_list_4063, lua_call(G.str['IMCRandom'], [1, 4])[0]);
            if (lua_eq(_ran_4063, 'Fire')) {
              lua_call(G.str['AddBuff'], [_self, _target, 'GIMMICK_Drug_Curse_Fire_buff', 7500, 0, 6000, 1]);
            } else if (lua_eq(_ran_4063, 'Ice')) {
              lua_call(G.str['AddBuff'], [_self, _target, 'GIMMICK_Drug_Curse_Ice_buff', 7500, 0, 6000, 1]);
            } else if (lua_eq(_ran_4063, 'Poison')) {
              lua_call(G.str['AddBuff'], [_self, _target, 'GIMMICK_Drug_Curse_Poison_buff', 7500, 0, 6000, 1]);
            } else if (lua_eq(_ran_4063, 'Lightning')) {
              lua_call(G.str['AddBuff'], [_self, _target, 'GIMMICK_Drug_Curse_Lightning_buff', 7500, 0, 6000, 1]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Curse_Fire_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4068 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4068, null)) {
        _caster_4068 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4068, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Fire", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_fire036", 0.4]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIMMICK_Drug_Curse_Fire_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4070 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4070, null)) {
        _caster_4070 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4070, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Fire", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_fire036", 0.4]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Curse_Fire_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Curse_Ice_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4073 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4073, null)) {
        _caster_4073 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4073, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Ice", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_spread_out037_violet_ice_leaf", 0.6]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIMMICK_Drug_Curse_Ice_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4075 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4075, null)) {
        _caster_4075 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4075, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Ice", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_spread_out037_violet_ice_leaf", 0.6]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Curse_Ice_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Curse_Poison_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4078 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4078, null)) {
        _caster_4078 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4078, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Poison", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_explosion054_green", 1.5]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIMMICK_Drug_Curse_Poison_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4080 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4080, null)) {
        _caster_4080 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4080, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Poison", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_explosion054_green", 1.5]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Curse_Poison_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Curse_Lightning_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4083 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4083, null)) {
        _caster_4083 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4083, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Lightning", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_burstup048_rize", 0.7]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIMMICK_Drug_Curse_Lightning_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4085 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_4085, null)) {
        _caster_4085 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_4085, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 5), lua_divide(_arg1, 3)])[0], "Lightning", "None", "AbsoluteDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      lua_call(G.str['PlayEffect'], [_self, "F_burstup048_rize", 0.7]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Curse_Lightning'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_Drug_Regeneration'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_Drug_Regeneration'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Item_BLOCK_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _arg2));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Item_BLOCK_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _arg2));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CRIDR_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), lua_multiply(_arg2, _over)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CRIDR_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), lua_multiply(_arg2, _over)));
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_MASINIOSRAPIER_PRE'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _buffRatio_4094 = lua_call(G.str['IMCRandom'], [1, 100])[0];
      var _skill_4094 = lua_call(G.str['GetClassByType'], ['Skill', _sklID])[0];
      var _buffOver_4094;
      if ((((lua_eq(lua_tableget(_skill_4094, 'ClassName'), 'Normal_Attack') || lua_eq(lua_tableget(_skill_4094, 'ClassName'), 'Common_DaggerAries')) || lua_lte(_damage, 0)) || lua_lt(15, _buffRatio_4094))) {
        return [1];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_STACK_CRIATK'])[0], 'NO') && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_5ATTACK'])[0], 'NO'))) {
        lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOSRAPIER_STACK_CRIATK', 1, 60, 10000, 1]);
        return [1];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_5ATTACK'])[0], 'NO')) {
        _buffOver_4094 = lua_call(G.str['GetBuffOver'], [_self, 'MASINIOSRAPIER_STACK_CRIATK'])[0];
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_5ATTACK'])[0], 'YES')) {
        return [1];
      }
      if ((lua_lte(4, _buffOver_4094) && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_5ATTACK'])[0], 'NO'))) {
        lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOSRAPIER_5ATTACK', 1, 0, 0, 1]);
        lua_call(G.str['RemoveBuff'], [_self, 'MASINIOSRAPIER_STACK_CRIATK']);
        return [1];
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_5ATTACK'])[0], 'YES')) {
        return [1];
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOSRAPIER_STACK_CRIATK', 1, 60, 10000, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_MASINIOSRAPIER_STACK_CRIATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), lua_multiply(_arg2, _over)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MASINIOSRAPIER_STACK_CRIATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), lua_multiply(_arg2, _over)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MASINIOSRAPIER_5ATTACK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_MASINIOSRAPIER_5ATTACK'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_tableget(_skill, 'ClassName'), 'Normal_Attack') && lua_true(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOSRAPIER_5ATTACK'])[0]))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 4.0));
        lua_call(G.str['SetMultipleHitCount'], [_ret, 5]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MASINIOSRAPIER_5ATTACK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_MASINIOSTHSPEAR_PRE'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _buffRatio_4107 = lua_call(G.str['IMCRandom'], [1, 10000])[0];
      if (((lua_lte(_damage, 0) || lua_lt(1000, _buffRatio_4107)) || lua_eq(lua_call(G.str['IsBuffApplied'], [_target, 'Penetrate_DEF_Debuff'])[0], 'YES'))) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_target, 'Penetrate_Debuff'])[0], 'NO')) {
        lua_call(G.str['AddBuff'], [_self, _target, 'Penetrate_Debuff', 1, 0, 20000, 1]);
        return [1];
      }
      var _buffOver_4107 = lua_call(G.str['GetBuffOver'], [_target, 'Penetrate_Debuff'])[0];
      if ((lua_lte(10, _buffOver_4107) && lua_eq(lua_call(G.str['IsBuffApplied'], [_target, 'Penetrate_DEF_Debuff'])[0], 'NO'))) {
        lua_call(G.str['AddBuff'], [_self, _target, 'Penetrate_DEF_Debuff', 1, 0, 10000, 1]);
        lua_call(G.str['AddBuff'], [_self, _target, 'Slow_Debuff', 1, 0, 10000, 1]);
        lua_call(G.str['RemoveBuff'], [_target, 'Penetrate_Debuff']);
        return [1];
      }
      lua_call(G.str['AddBuff'], [_self, _target, 'Penetrate_Debuff', 1, 0, 20000, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Penetrate_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['AddStamina'], [_self, -1500]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Penetrate_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Penetrate_DEF_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 800));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Penetrate_DEF_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 800));
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_MASINIOS_ROD_PRE'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _buffRatio_4116 = lua_call(G.str['IMCRandom'], [1, 100])[0];
      if (((lua_lt(_sklID, 1000) || lua_lte(_damage, 0)) || lua_lt(10, _buffRatio_4116))) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOS_ROD_Buff'])[0], 'NO')) {
        lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOS_ROD_Buff', 1, 0, 10000, 1]);
        return [1];
      }
      var _buffOver_4116 = lua_call(G.str['GetBuffOver'], [_self, 'MASINIOS_ROD_Buff'])[0];
      if (lua_lte(10, _buffOver_4116)) {
        return [1];
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOS_ROD_Buff', 1, 0, 10000, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_MASINIOS_ROD_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MNA_ITEM_BM', lua_add(lua_tableget(_self, 'MNA_ITEM_BM'), (lua_multiply(5, _over))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MASINIOS_ROD_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MNA_ITEM_BM', lua_subtract(lua_tableget(_self, 'MNA_ITEM_BM'), (lua_multiply(5, _over))));
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_MASINIOS_THSWORD_PRE'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      tmp = lua_call(G.str['SelectObject'], [_self, 60, "ENEMY"]); var _list_4122 = tmp[0]; var _cnt_4122 = tmp[1]; tmp = null;
      if (lua_lt(_cnt_4122, 1)) {
        return [1];
      }
      if (lua_lt(10, _cnt_4122)) {
        _cnt_4122 = 10;
      }
      var _ratio_4122 = lua_multiply(_cnt_4122, 100);
      if (lua_lt(_ratio_4122, lua_call(G.str['IMCRandom'], [1, 10000])[0])) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOS_THSWORD_OVER'])[0], 'NO')) {
        lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOS_THSWORD_BUFF', 1, 0, 5000, 1]);
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOS_THSWORD_BUFF'])[0], 'YES')) {
          var _buffOver_4128 = lua_call(G.str['GetBuffOver'], [_self, 'MASINIOS_THSWORD_BUFF'])[0];
          if ((lua_lte(5, _buffOver_4128) && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MASINIOS_THSWORD_OVER'])[0], 'NO'))) {
            lua_call(G.str['RemoveBuff'], [_self, 'MASINIOS_THSWORD_BUFF']);
            lua_call(G.str['AddBuff'], [_self, _self, 'MASINIOS_THSWORD_OVER', 1, 0, 10000, 1]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_MASINIOS_THSWORD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MASINIOS_THSWORD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MASINIOS_THSWORD_OVER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 120));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), 2));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 2000));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 400));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MASINIOS_THSWORD_OVER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 120));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), 2));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 2000));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 400));
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_MASINIOS_MACE'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _skill_4134 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (lua_eq(_skill_4134, null)) {
        return [1];
      }
      var _ratio_4134 = lua_call(G.str['IMCRandom'], [1, 10000])[0];
      if (((!lua_eq(lua_tableget(_target, 'RaceType'), 'Item') && lua_lte(_ratio_4134, 3000)) && !lua_eq(lua_tableget(_skill_4134, 'ClassName'), 'Default'))) {
        lua_call(G.str['TakeDadak'], [_self, _target, "None", 2000, 0.25, "Lightning", "Magic", "TrueDamage", G.str['HIT_LIGHTNING'], G.str['HITRESULT_NO_HITSCP']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_CARD_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddShield'], [_self, _arg2]);
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_CARD_Shield'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _shieldValue_4139 = lua_call(G.str['GetShield'], [_self])[0];
      if (lua_lte(_shieldValue_4139, 0)) {
        return [0];
      }
      lua_call(G.str['SetBuffArg'], [_self, _buff, _shieldValue_4139, 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CARD_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _currentShield_4141 = lua_call(G.str['GetShield'], [_self])[0];
      lua_call(G.str['AddShield'], [_self, lua_unm(_currentShield_4141)]);
      lua_call(G.str['RemoveBuff'], [_self, "CARD_Shield"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_DRUG_LOOTINGCHANCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DRUG_LOOTINGCHANCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_STATUE_LOOTINGCHANCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STATUE_LOOTINGCHANCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SNOW_FLOWER_EFFECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['OverrideSurfaceType'], [_self, 'snow_flower']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SNOW_FLOWER_EFFECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['OverrideSurfaceType'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PET_GOLD_DOG_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Holy_Atk_BM', lua_add(lua_tableget(_self, 'Holy_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PET_GOLD_DOG_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Holy_Atk_BM', lua_subtract(lua_tableget(_self, 'Holy_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Demon_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Demon_DMG_DOWN_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(30000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 30000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Demon_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_MIX_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_MIX_DMG_DOWN_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(30000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 30000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_MIX_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Bug_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Bug_DMG_DOWN_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(30000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 30000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Bug_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Plant_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Plant_DMG_DOWN_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(30000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 30000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Plant_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Wild_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Wild_DMG_DOWN_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(30000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 30000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Wild_DMG_DOWN_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Demon_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Demon_DMG_UP_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(10000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Demon_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_MIX_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_MIX_DMG_UP_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(10000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_MIX_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Bug_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Bug_DMG_UP_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(10000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Bug_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Plant_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Plant_DMG_UP_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(10000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Plant_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENETER_Potion_Wild_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Potion_Wild_DMG_UP_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(10000, _RemainTime)) {
        lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), 10000]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Potion_Wild_DMG_UP_Buff'] = (function (_self, _buff, _target, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GOOD_STAMP_EFFECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['OverrideSurfaceType'], [_self, 'good_stamp']);
      lua_call(G.str['PlayEffect'], [_self, "F_pc_welldone_ground", 1.5, 1.5, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GOOD_STAMP_EFFECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['OverrideSurfaceType'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_COSTUME_VELCOFFER_SET'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_COSTUME_VELCOFFER_SET'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_STATUE_LOOTINGCHANCE_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STATUE_LOOTINGCHANCE_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_STATUE_LOOTINGCHANCE_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), 300));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STATUE_LOOTINGCHANCE_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), 300));
      return [];
    })
    G.str['SCR_BUFF_ENTER_STATUE_LOOTINGCHANCE_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STATUE_LOOTINGCHANCE_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), 500));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BEAUTY_HAIR_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddLimitationSkillList'], [_self, "Normal_Attack"]);
      lua_call(G.str['EnableItemUse'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BEAUTY_HAIR_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _zoneCheck_4201 = lua_call(G.str['GetZoneName'], [_self])[0];
      if (lua_eq(_zoneCheck_4201, "c_barber_dress")) {
        return [1];
      } else {
        lua_call(G.str['RemoveBuff'], [_self, "BEAUTY_HAIR_BUFF"]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BEAUTY_HAIR_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      lua_call(G.str['EnableItemUse'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_BEAUTY_HAIR_BUY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 1));
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BEAUTY_HAIR_BUY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BEAUTY_HAIR_BUY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 1));
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), 50));
      if (lua_lt(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 1000)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'BEAUTY_HAIR_BUY_BUFF2', 1, 0, 86400000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ALONE_DUNGEON_FIRST_BUFF_PRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ALONE_DUNGEON_FIRST_BUFF'])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, 'ALONE_DUNGEON_FIRST_BUFF_PRE']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ALONE_DUNGEON_FIRST_BUFF_PRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4211 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_4211, null)) {
        var _pad_4212 = lua_call(G.str['GetPadByBuff'], [_caster_4211, _buff])[0];
        if (!lua_eq(_pad_4212, null)) {
          tmp = lua_call(G.str['GetPadObjectList'], [_pad_4212]); var _checkList_4213 = tmp[0]; var _cnt_4213 = tmp[1]; tmp = null;
          var var_4214 = 1, stop_4214 = lua_assertfloat(_cnt_4213);
          for (; var_4214 <= stop_4214; var_4214++) {
            var _i_4214 = var_4214;
            if ((lua_eq(lua_tableget(lua_tableget(_checkList_4213, _i_4214), 'Name'), lua_tableget(_self, 'Name')) && lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 1))) {
              lua_call(G.str['AddBuff'], [_self, _self, 'ALONE_DUNGEON_FIRST_BUFF', 1, 0, 3600000, 1]);
              break;
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ALONE_DUNGEON_FIRST_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_add(lua_tableget(_self, 'LootingChance_BM'), 100));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), 5000));
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), 1000));
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), 500));
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), 300));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ALONE_DUNGEON_FIRST_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'LootingChance_BM', lua_subtract(lua_tableget(_self, 'LootingChance_BM'), 100));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), 5000));
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), 1000));
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), 500));
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), 300));
      return [];
    })
    G.str['SCR_BUFF_ENTER_pet_Lesserpanda_gray_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 25));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 25));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_pet_Lesserpanda_gray_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 25));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 25));
      return [];
    })
    G.str['SCR_BUFF_ENTER_PET_GORO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Widling_Atk_BM', lua_add(lua_tableget(_self, 'Widling_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PET_GORO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Widling_Atk_BM', lua_subtract(lua_tableget(_self, 'Widling_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BEAUTY_HAIR_BUY_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'BEAUTY_HAIR_BUY_BUFF'])[0], "YES")) {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BEAUTY_HAIR_BUY_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BEAUTY_HAIR_BUY_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Stoup_Exp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BonusExp_BM', lua_add(lua_tableget(_self, 'BonusExp_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Stoup_Exp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BonusExp_BM', lua_subtract(lua_tableget(_self, 'BonusExp_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Calm'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 80));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Calm'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 80));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bube_Holy1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bube_Holy1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bube_Holy2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bube_Holy2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bube_Holy4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 7));
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bube_Holy4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 7));
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ATKUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), (lua_multiply(_arg1, 5))));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ATKUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), (lua_multiply(_arg1, 5))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ZACHA4F_MQ_05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_4239 = _over;
      var _atkadd_4239 = lua_multiply(lua_tableget(_self, 'MAXATK'), (lua_add(0.2, lua_multiply(_lv_4239, 0.01))));
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_4239));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINATK", _atkadd_4239]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ZACHA4F_MQ_05'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_zachariel_35')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ZACHA4F_MQ_05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_4243 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINATK"])[0];
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkadd_4243));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ZACHA1F_SQ_03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ZACHA1F_SQ_03'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_04_4245 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'ZACHA1F_SQ_04'])[0];
      var _result_05_4245 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'ZACHA1F_SQ_05'])[0];
      if ((lua_eq(_result_04_4245, 'PROGRESS') || lua_eq(_result_05_4245, 'PROGRESS'))) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_zachariel_32')) {
          return [1];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ZACHA1F_SQ_03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ZACHA4F_SQ_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 10));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ZACHA4F_SQ_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_zachariel_35')) {
        lua_call(G.str['AttachEffect'], [_self, 'I_cleric_skl_Ironskin_mash', 1, "BOT"]);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ZACHA4F_SQ_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 10));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SIAU15_R_MQ'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SIAU15_R_MQ'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'HP'), lua_tableget(_self, 'MHP'))) {
        lua_call(G.str['AddHP'], [_self, lua_tableget(_self, 'MHP')]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SIAU15_R_MQ'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SIAU15_R_MQ_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SIAU15_R_MQ_PC'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_siauliai_15_re')) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SIAU15_R_MQ_PC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE576_MQ_07_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAPLE576_MQ_07_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_chapel_57_6')) {
        if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
          lua_tableset(_self, 'StrArg1', 'd_chapel_57_6');
          lua_call(G.str['AttachEffect'], [_self, 'F_light048_blue', 1.5, "MID", 0]);
          if (lua_lt(_RemainTime, 1000)) {
            lua_tableset(_self, 'StrArg1', 'None');
          } else {
            return [1];
          }
        }
      }
      lua_call(G.str['DetachEffect'], [_self, 'F_light048_blue']);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE576_MQ_07_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE577_MQ_06_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_cleric_oobe_loop_follow', 2.5, "BOT", 0]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 105.0, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAPLE577_MQ_06_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_chapel_57_7')) {
        if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
          if (lua_eq(lua_call(G.str['IsSafe'], [_self])[0], 'NO')) {
            lua_call(G.str['SetSafe'], [_self, 1]);
            lua_call(G.str['AttachEffect'], [_self, 'I_cleric_oobe_loop_follow', 2.5, "BOT", 0]);
            return [1];
          } else {
            return [1];
          }
        }
      }
      lua_call(G.str['DetachEffect'], [_self, 'I_cleric_oobe_loop_follow']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 255.0, 1, 1]);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE577_MQ_06_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetSafe'], [_self, 0]);
      lua_call(G.str['DetachEffect'], [_self, 'I_cleric_oobe_loop_follow']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 255.0, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FTOWER44_MQ_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FTOWER44_MQ_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_4278 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "FTOWER44_MQ_01"])[0];
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_firetower_44')) {
        if (lua_eq(_result_4278, "PROGRESS")) {
          return [1];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FTOWER44_MQ_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN21_MQ07_THORNDRUG'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_THORN21_MQ07_THORNDRUG'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_thorn_21')) {
        if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
          var _buff_Result_4286 = lua_call(G.str['GetBuffByName'], [_self, 'Rage_Rockto_spd_down'])[0];
          if (lua_eq(_buff_Result_4286, null)) {
            return [1];
          } else if (lua_eq(lua_tableget(_buff_Result_4286, 'ClassName'), "Rage_Rockto_spd_down")) {
            lua_call(G.str['RemoveBuff'], [_self, "Rage_Rockto_spd_down"]);
            return [1];
          }
        }
      }
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere007_mash']);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN21_MQ07_THORNDRUG'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere007_mash']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ZACHA2F_MQ04_MONSTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ZACHA2F_MQ04_MONSTER'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_zachariel_33')) {
        lua_call(G.str['PlayEffect'], [_self, 'F_smoke072_sviolet', 0.3, 1, "BOT"]);
        if (lua_eq(lua_tableget(_self, 'ClassName'), "Karas")) {
          lua_call(G.str['SetCurrentFaction'], [_self, "Monster_Chaos1"]);
        } else if (lua_eq(lua_tableget(_self, 'ClassName'), "zinutekas")) {
          lua_call(G.str['SetCurrentFaction'], [_self, "Monster_Chaos2"]);
        }
        return [1];
      }
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke072_sviolet']);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ZACHA2F_MQ04_MONSTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke072_sviolet']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GELE574_MQ_04_BOSS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Monster']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GELE574_MQ_04_BOSS'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_gele_57_4')) {
        if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
          if (lua_lt(lua_tableget(_self, 'HP'), lua_tableget(_self, 'MHP'))) {
            var _heal_4300 = lua_divide(lua_tableget(_self, 'MHP'), 20);
            lua_call(G.str['Heal'], [_self, _heal_4300, 0]);
            return [1];
          } else {
            return [0];
          }
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GELE574_MQ_04_BOSS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_WUGU4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_4303 = _arg1;
      var _mspdadd_4303 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_add(0.85, lua_multiply(_lv_4303, 0.02))));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4303));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_4303]);
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_poison']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_WUGU4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4304 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4304));
      lua_call(G.str['SetEmoticon'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_SCOUT4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_SCOUT4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ['JOB_SCOUT4_1_DEAD', _self]);
      return [];
    })
    G.str['JOB_SCOUT4_1_DEAD'] = (function (_self) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
        lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 50, 1, 0.5]);
        lua_call(G.str['PlayEffect'], [_self, 'F_burstup007_smoke1', 0.3]);
        lua_call(G.str['sleep'], [500]);
        if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
          lua_call(G.str['Kill'], [_self]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_ROGUE4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke002_bluegreen', 1, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_ROGUE4_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke002_bluegreen', 1, 'TOP']);
      lua_call(G.str['RandomMove'], [_self, 30]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_ROGUE4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_SQUIRE4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_SQUIRE4_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_M_GELE_START'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_M_GELE_START'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_M_GELE_MAGI'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_M_GELE_MAGI'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_REQ_SEMPLE_04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 150));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 150));
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), 150));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REQ_SEMPLE_04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 150));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 150));
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), 150));
      return [];
    })
    G.str['SCR_BUFF_ENTER_REQ_SEMPLE_05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REQ_SEMPLE_05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_ROGUE4_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_ROGUE4_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_ROGUE4_1_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'E_buff_Stun', 3, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_ROGUE4_1_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['RandomMove'], [_self, 30]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_ROGUE4_1_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'E_buff_Stun']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE577_MQ_08'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlaySound'], [_self, 'chapel_bell_sound_01']);
      lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_!", lua_call(G.str['ScpArgMsg'], ["CHAPLE577_MQ_08"])[0], 3]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE577_MQ_08'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GELE573_MQ_04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Neutral']);
      lua_call(G.str['ClearBTree'], [_self]);
      lua_tableset(_self, 'NumArg1', 1);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GELE573_MQ_04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _tobt_4331 = lua_call(G.str['CreateBTree'], ['BasicMonster'])[0];
      lua_call(G.str['SetBTree'], [_self, _tobt_4331]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Monster']);
      lua_tableset(_self, 'NumArg1', 0);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GELE573_MQ_04_HOLY'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_bg_pattern004']);
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke130_blue_loop2']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GELE573_MQ_04_HOLY'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'ON', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN20_MQ_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'E_buff_Stun', 2, 'TOP']);
      lua_call(G.str['PlayAnim'], [_self, "STUN", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN20_MQ_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'E_buff_Stun']);
      lua_call(G.str['PlayAnim'], [_self, "ASTD", 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE575_MQ_06'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke038_blue', 1]);
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 255, 180, 1, 3]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE575_MQ_06'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke038_blue']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE575_MQ_06_BOMB'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'COMMON_BUFF_DEAD', 1, 0, 6560, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE575_MQ_06_BOMB'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 120, 'Monster']); var _list_4339 = tmp[0]; var _cnt_4339 = tmp[1]; tmp = null;
      var _i_4339;
      var _angle_4339 = lua_newtable();
      if (!lua_eq(_cnt_4339, 0)) {
        var var_4341 = 1, stop_4341 = lua_assertfloat(_cnt_4339);
        for (; var_4341 <= stop_4341; var_4341++) {
          var _i_4341 = var_4341;
          lua_tableset(_angle_4339, _i_4341, lua_call(G.str['GetAngleTo'], [lua_tableget(_list_4339, _i_4341), _self])[0]);
          lua_call(G.str['KnockDown'], [lua_tableget(_list_4339, _i_4341), _self, 100, lua_multiply(lua_tableget(_angle_4339, _i_4341), 2), 45, 0, 2, 3]);
        }
      }
      lua_call(G.str['PlayEffect'], [_self, 'F_light016', 2]);
      lua_call(G.str['Dead'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_COMMON_BUFF_DEAD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_COMMON_BUFF_DEAD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Dead'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE575_MQ_07'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "CHAPLE575_MQ_07", lua_tableget(_self, 'MSPD')]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAPLE575_MQ_07'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'Altarcrystal_N1']); var _list_4346 = tmp[0]; var _cnt_4346 = tmp[1]; tmp = null;
      var _i_4346;
      if (!lua_eq(_cnt_4346, 0)) {
        if (lua_lt(0, lua_tableget(_self, 'MSPD'))) {
          var _pc_mon_4348 = lua_call(G.str['GetScpObjectList'], [_self, 'CHAPLE575_MQ_07'])[0];
          if (!lua_eq(lua_len(_pc_mon_4348), 0)) {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'CHAPLE575_MQ_07_01'])[0], 'NO')) {
              lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [lua_tableget(_pc_mon_4348, 1), 'SSN_CHAPLE575_MQ_07', 'QuestInfoValue1', 10]);
            }
          }
          lua_tableset(_self, 'MSPD', lua_subtract(lua_tableget(_self, 'MSPD'), 2.5));
          return [1];
        } else {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'CHAPLE575_MQ_07_01'])[0], 'NO')) {
            lua_call(G.str['AttachEffect'], [_self, 'F_ground017_loop', 1, 'BOT']);
            lua_call(G.str['AddBuff'], [_self, _self, 'CHAPLE575_MQ_07_01', 1, 0, 0, 1]);
            lua_call(G.str['RemoveBuff'], [_self, 'CHAPLE575_MQ_07']);
          }
        }
      } else {
        lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
        lua_call(G.str['RemoveBuff'], [_self, 'CHAPLE575_MQ_07']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE575_MQ_07'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD', lua_call(G.str['GetExProp'], [_buff, "CHAPLE575_MQ_07"])[0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE575_MQ_07_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAPLE575_MQ_07_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'Altarcrystal_N1']); var _list_4356 = tmp[0]; var _cnt_4356 = tmp[1]; tmp = null;
      var _i_4356;
      if (!lua_eq(_cnt_4356, 0)) {
        return [1];
      } else {
        lua_call(G.str['RemoveBuff'], [_self, 'CHAPLE575_MQ_07_01']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE575_MQ_07_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HUEVILLAGE_58_2_SQ02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke009_green', 1.0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HUEVILLAGE_58_2_SQ02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 180, 'ALL']); var _fndList_4361 = tmp[0]; var _fndCount_4361 = tmp[1]; tmp = null;
      var _i_4361;
      var var_4362 = 1, stop_4362 = lua_assertfloat(_fndCount_4361);
      for (; var_4362 <= stop_4362; var_4362++) {
        var _i_4362 = var_4362;
        if (lua_eq(lua_tableget(lua_tableget(_fndList_4361, _i_4362), 'ClassName'), 'PC')) {
          var _result_4364 = lua_call(G.str['SCR_QUEST_CHECK'], [lua_tableget(_fndList_4361, _i_4362), 'HUEVILLAGE_58_2_SQ02'])[0];
          if (lua_eq(_result_4364, 'PROGRESS')) {
            lua_call(G.str['InsertHate'], [_self, lua_tableget(_fndList_4361, _i_4362), 1]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HUEVILLAGE_58_2_SQ02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE577_HOLY_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_cleric_oobe_loop_levitation1', 1, 1, 'MID', 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE577_HOLY_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_cleric_oobe_loop_levitation1']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE576_MQ_08'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE576_MQ_08'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE576_MQ_06'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAPLE576_MQ_06'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_4372 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CHAPLE576_MQ_06'])[0];
      if (!lua_eq(_result_4372, 'PROGRESS')) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_chapel_57_6')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE576_MQ_06'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAPLE576_MQ_06_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAPLE576_MQ_06_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_4378 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CHAPLE576_MQ_06'])[0];
      if (!lua_eq(_result_4378, 'PROGRESS')) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_chapel_57_6')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAPLE576_MQ_06_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_scroll", lua_call(G.str['ScpArgMsg'], ["CHAPLE577_MQ_06_1_BUFFEND_MSG"])[0], 10]);
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 1]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      lua_call(G.str['ClearScpObjectList'], [_self, 'CHAPLE576_MQ_06']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HUEVILLAGE_58_3_MQ04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_archer_scarecrow_loop_ground', 1.0]);
      var _mspdadd_4383 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.40);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4383));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_4383]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HUEVILLAGE_58_3_MQ04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      var _mspdadd_4384 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4384));
      return [];
    })
    G.str['SCR_BUFF_ENTER_REMAIN37_MQ05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'WlkMSPD', 65);
      lua_call(G.str['AttachEffect'], [_self, 'F_fire027_2', 0.6, 1, "MID", 1]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 100, 100, 255, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_REMAIN37_MQ05'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var __pc_4386 = lua_call(G.str['GetTopHatePointChar'], [_self])[0];
      if (lua_eq(__pc_4386, null)) {
        lua_call(G.str['RandomMove'], [_self, 50]);
        return [1];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REMAIN37_MQ05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_REMAIN37_SQ03_ITEM_02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_REMAIN37_SQ03_ITEM_02'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var __pc_4390 = lua_call(G.str['GetTopHatePointChar'], [_self])[0];
      if (lua_eq(__pc_4390, null)) {
        return [0];
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'REMAIN37_SQ03_ITEM_02', 1, 0, 10000, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REMAIN37_SQ03_ITEM_02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_REMAIN38_SQ03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 10, 0, 60000, 1]);
      lua_call(G.str['AttachEffect'], [_self, 'F_fire027_2', 0.6, 1, "MID", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REMAIN38_SQ03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_fire027_2']);
      lua_call(G.str['RemoveBuff'], [_self, 'HPLock']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_REMAIN38_SQ04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 10, 0, 60000, 1]);
      lua_call(G.str['AttachEffect'], [_self, 'F_fire027_2', 0.6, 1, "MID", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REMAIN38_SQ04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_fire027_2']);
      lua_call(G.str['RemoveBuff'], [_self, 'HPLock']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_REMAIN38_MQ03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_fire027_2', 1.5, 1, "MID", 1]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 100, 100, 255, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_REMAIN38_MQ03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Dead'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH59_SQ_12'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_ground001_yellow_loop', 1.5, 1, "MID", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH59_SQ_12'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SIAULIAI_46_4_MQ_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_honey']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SIAULIAI_46_4_MQ_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SIAULIAI_46_3_MQ_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_smell']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SIAULIAI_46_3_MQ_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHATHEDRAL56_MQ07_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 120, 255, 180, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHATHEDRAL56_MQ07_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4406 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _dam_4406 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MHP'), 100)])[0];
      lua_call(G.str['TakeDamage'], [_caster_4406, _self, "None", _dam_4406, "Melee", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHATHEDRAL56_MQ07_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIVEDAMAGE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIVEDAMAGE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4409 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _dam_4409 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MHP'), 10)])[0];
      lua_call(G.str['TakeDamage'], [_caster_4409, _self, "None", _dam_4409, "Melee", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIVEDAMAGE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MINE_1_CRYSTAL_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_quest_question_mark']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MINE_1_CRYSTAL_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_01_PCSTACK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_01_PCSTACK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'id_catacomb_01')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_01_PCSTACK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_01_SPIRIT_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_01_SPIRIT_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'id_catacomb_01')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_01_SPIRIT_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_01_SPIRIT_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['UnHideNPC'], [_self, "CATACOMB_01_SPIRIT_03"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_01_SPIRIT_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'id_catacomb_01')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_01_SPIRIT_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideNPC'], [_self, "CATACOMB_01_SPIRIT_03"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_01_EVILAURA_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4428 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), (lua_multiply(_over, 0.1)))])[0];
      var _mdefadd_4428 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), (lua_multiply(_over, 0.1)))])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_4428));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4428));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_4428]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_4428]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_01_EVILAURA_01_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4429 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_4429 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_4429));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4429));
      return [];
    })
    G.str['SCR_BUFF_ENTER_STARTOWER_60_1_REGRAVITY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_STARTOWER_60_1_REGRAVITY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_startower_60_1')) {
        tmp = lua_call(G.str['SelectObject'], [_self, 200, 'ALL', 1]); var _list_4432 = tmp[0]; var _cnt_4432 = tmp[1]; tmp = null;
        var _i_4432;
        var var_4433 = 1, stop_4433 = lua_assertfloat(_cnt_4432);
        for (; var_4433 <= stop_4433; var_4433++) {
          var _i_4433 = var_4433;
          if (lua_lte(1, _cnt_4432)) {
            if (!lua_eq(lua_tableget(lua_tableget(_list_4432, _i_4433), 'ClassName'), 'PC')) {
              if (lua_eq(lua_tableget(lua_tableget(_list_4432, _i_4433), 'Faction'), 'Neutral')) {
                if (lua_eq(lua_tableget(lua_tableget(_list_4432, _i_4433), 'Dialog'), 'STARTOWER_60_1_DAILY_BOX')) {
                  lua_call(G.str['PlayEffectLocal'], [lua_tableget(_list_4432, _i_4433), _self, 'F_buff_basic011_green', 1.5, null, 'BOT']);
                }
              }
            }
          }
        }
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STARTOWER_60_1_REGRAVITY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_STARTOWER_60_1_AI_02_TIME_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STARTOWER_60_1_AI_02_TIME_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _my_Owner_4442 = lua_call(G.str['GetOwner'], [_self])[0];
      if (!lua_eq(_my_Owner_4442, null)) {
        lua_call(G.str['SendAddOnMsg'], [_my_Owner_4442, "NOTICE_Dm_!", lua_call(G.str['ScpArgMsg'], ["STARTOWER_60_1_AI_02_TIME_BUFF_MSG1"])[0], 5]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_38_2_SQ_05_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_38_2_SQ_05_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _hover_4445 = lua_call(G.str['GetScpObjectList'], [_self, 'CATACOMB_38_2_SQ_05_SCP_MON'])[0];
      if (!lua_eq(lua_len(_hover_4445), 0)) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_38_2_SQ_05_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hover_4448 = lua_call(G.str['GetScpObjectList'], [_self, 'CATACOMB_38_2_SQ_05_SCP_MON'])[0];
      if (!lua_eq(lua_len(_hover_4448), 0)) {
        var _i_4449;
        var var_4450 = 1, stop_4450 = lua_assertfloat(lua_len(_hover_4448));
        for (; var_4450 <= stop_4450; var_4450++) {
          var _i_4450 = var_4450;
          var _PC_Owner_4451 = lua_call(G.str['GetScpObjectList'], [lua_tableget(_hover_4448, _i_4450), 'CATACOMB_38_2_SQ_05_SCP_OWNER'])[0];
          if (!lua_eq(lua_tableget(_PC_Owner_4451, 1), null)) {
            lua_call(G.str['AddScpObjectList'], [lua_tableget(_PC_Owner_4451, 1), 'CATACOMB_38_2_SQ_05_SCP_PC', _self]);
            lua_call(G.str['HoverAround'], [lua_tableget(_hover_4448, _i_4450), lua_tableget(_PC_Owner_4451, 1), 15, 1, 1.0, 1]);
            lua_call(G.str['SetNoDamage'], [lua_tableget(_hover_4448, _i_4450), 1]);
          }
          lua_tableset(lua_tableget(_hover_4448, _i_4450), 'NumArg1', 0);
          lua_call(G.str['ClearScpObjectList'], [_self, 'CATACOMB_38_2_SQ_05_SCP_MON']);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_38_2_SQ_06_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_38_2_SQ_06_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 100, 'ALL']); var _list_4454 = tmp[0]; var _Cnt_4454 = tmp[1]; tmp = null;
      var _i_4454;
      var var_4455 = 1, stop_4455 = lua_assertfloat(_Cnt_4454);
      for (; var_4455 <= stop_4455; var_4455++) {
        var _i_4455 = var_4455;
        if (!lua_eq(lua_tableget(lua_tableget(_list_4454, _i_4455), 'ClassName'), 'PC')) {
          if (lua_eq(lua_tableget(lua_tableget(_list_4454, _i_4455), 'Enter'), 'CATACOMB_38_2_SQ_06_TRUTHEYES')) {
            lua_call(G.str['SetNoDamage'], [_self, 0]);
            lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
            return [1];
          }
        }
      }
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      lua_call(G.str['ObjectColorBlend'], [_self, 10.0, 130.0, 255.0, 180.0, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_38_2_SQ_06_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_38_2_SQ_05_NO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_38_2_SQ_05_NO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg2', 0);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_02_SQ_07_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_4462 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MINPATK'), 0.5)])[0];
      var _matkadd_4462 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MINMATK'), 0.5)])[0];
      var _defadd_4462 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.5)])[0];
      var _mdefadd_4462 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.5)])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_4462));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_4462));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_4462));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4462));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_4462]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_4462]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_4462]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_4462]);
      lua_call(G.str['AttachEffect'], [_self, 'F_circle002', 5.0, "MID"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_02_SQ_07_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_4463 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_4463 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      var _defadd_4463 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_4463 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_4463));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_4463));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_4463));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4463));
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_STARTOWER_60_1_CANDLESTICK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4464 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.5)])[0];
      var _mdefadd_4464 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.5)])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_4464));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4464));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_4464]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_4464]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_STARTOWER_60_1_CANDLESTICK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4465 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_4465 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_4465));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4465));
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_ROGUE_6_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_ROGUE_6_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Stun_Quest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Stun_Quest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_KATYN_10_MQ_05_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KATYN_10_MQ_05_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'NumArg1'), 1)) {
        lua_tableset(_self, 'NumArg1', 0);
        lua_call(G.str['ClearEffect'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_KATYN_10_MQ_06_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KATYN_10_MQ_06_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_KATYN_12_MQ_07_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KATYN_12_MQ_07_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_2_CRYOMANCER_3_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_4477 = 30;
      lua_tableset(_self, 'Ice_Def_BM', lua_add(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_4477));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ICE", _resiceadd_4477]);
      lua_call(G.str['AttachEffect'], [_self, 'F_light055_blue', 2.5, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_2_CRYOMANCER_3_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_4478 = lua_call(G.str['GetExProp'], [_buff, "ADD_ICE"])[0];
      lua_tableset(_self, 'Ice_Def_BM', lua_subtract(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_4478));
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_2_PSYCHOKINO_3_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_2_PSYCHOKINO_3_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_2_WUGUSHI_4_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_2_WUGUSHI_4_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_WARLOCK_7_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_spread_in008_dark', 0.7, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_WARLOCK_7_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_FEATHERFOOT_7_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke019_dark_loop', 0.6, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_FEATHERFOOT_7_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_FENCER_7_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_FENCER_7_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ORCHARD_34_1_SQ_4_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ORCHARD_34_1_SQ_4_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Dialog', 'None');
      lua_call(G.str['KILL_BLEND'], [_self, 2, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_RUNECASTER_NPC_3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RUNECASTER_NPC_3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PRISON_78_MQ_7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      lua_call(G.str['AttachEffect'], [_self, 'I_sphere008_boss_barrier_mash_loop', 5.5, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PRISON_78_MQ_7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere008_boss_barrier_mash_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PRISON_80_MQ_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke011_blue', 2.0, 'MID']);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PRISON_80_MQ_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_prison_80')) {
        if (lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
          var _result_4498 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'PRISON_80_MQ_2'])[0];
          if (lua_eq(_result_4498, 'PROGRESS')) {
            if (lua_eq(lua_call(G.str['GetCurrentFaction'], [_self])[0], 'Law')) {
              lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
            }
            return [1];
          }
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PRISON_80_MQ_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke011_blue']);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['ClearScpObjectList'], [_self, 'PRISON_80_MQ_2_SCPMON']);
      var __obj_4501 = lua_call(G.str['GetScpObjectList'], [_self, 'PRISON_80_MQ_2_SCPOBJ'])[0];
      if (lua_lte(1, lua_len(__obj_4501))) {
        var _i_4502;
        var var_4503 = 1, stop_4503 = lua_assertfloat(lua_len(__obj_4501));
        for (; var_4503 <= stop_4503; var_4503++) {
          var _i_4503 = var_4503;
          lua_call(G.str['Kill'], [lua_tableget(__obj_4501, _i_4503)]);
        }
      }
      lua_call(G.str['PlayEffect'], [_self, 'I_smoke058_violet', 2.0, null, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PRISON_80_MQ_7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      lua_call(G.str['AttachEffect'], [_self, 'I_sphere008_boss_barrier_mash_loop', 5.5, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PRISON_80_MQ_7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg2', lua_add(lua_tableget(_self, 'NumArg2'), 1));
      if (lua_eq(lua_tableget(_self, 'NumArg1'), 1)) {
        if (lua_lte(15, lua_tableget(_self, 'NumArg2'))) {
          lua_call(G.str['SetNoDamage'], [_self, 1]);
          lua_call(G.str['AttachEffect'], [_self, 'I_sphere008_boss_barrier_mash_loop', 5.5, 'MID']);
          lua_tableset(_self, 'NumArg1', 0);
          lua_tableset(_self, 'NumArg2', 0);
          var __zoneID_4508 = lua_call(G.str['GetZoneInstID'], [_self])[0];
          tmp = lua_call(G.str['GetLayerPCList'], [__zoneID_4508].concat(lua_call(G.str['GetLayer'], [_self]))); var _list_4508 = tmp[0]; var _cnt_4508 = tmp[1]; tmp = null;
          if (lua_lte(1, _cnt_4508)) {
            var _i_4509;
            var var_4510 = 1, stop_4510 = lua_assertfloat(_cnt_4508);
            for (; var_4510 <= stop_4510; var_4510++) {
              var _i_4510 = var_4510;
              if (lua_eq(lua_tableget(lua_tableget(_list_4508, _i_4510), 'ClassName'), 'PC')) {
                lua_call(G.str['SendAddOnMsg'], [lua_tableget(_list_4508, _i_4510), "NOTICE_Dm_!", lua_call(G.str['ScpArgMsg'], ["PRISON_80_MQ_7_TRACK_MSG2"])[0], 2]);
              }
            }
          }
        }
      } else {
        if (lua_lte(7, lua_tableget(_self, 'NumArg2'))) {
          lua_call(G.str['SetNoDamage'], [_self, 0]);
          lua_call(G.str['DetachEffect'], [_self, 'I_sphere008_boss_barrier_mash_loop']);
          lua_tableset(_self, 'NumArg1', 1);
          lua_tableset(_self, 'NumArg2', 0);
          var __zoneID_4514 = lua_call(G.str['GetZoneInstID'], [_self])[0];
          tmp = lua_call(G.str['GetLayerPCList'], [__zoneID_4514].concat(lua_call(G.str['GetLayer'], [_self]))); var _list_4514 = tmp[0]; var _cnt_4514 = tmp[1]; tmp = null;
          if (lua_lte(1, _cnt_4514)) {
            var _i_4515;
            var var_4516 = 1, stop_4516 = lua_assertfloat(_cnt_4514);
            for (; var_4516 <= stop_4516; var_4516++) {
              var _i_4516 = var_4516;
              if (lua_eq(lua_tableget(lua_tableget(_list_4514, _i_4516), 'ClassName'), 'PC')) {
                lua_call(G.str['SendAddOnMsg'], [lua_tableget(_list_4514, _i_4516), "NOTICE_Dm_scroll", lua_call(G.str['ScpArgMsg'], ["PRISON_80_MQ_7_TRACK_MSG3"])[0], 2]);
              }
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PRISON_80_MQ_7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere008_boss_barrier_mash_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PRISON_82_MQ_8_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var __effect_list_4520 = lua_newtable([lua_newtable([8.0, 'BOT']), lua_newtable([4.0, 'MID'])]);
      var __effect_4520 = lua_newtable();
      if ((lua_eq(lua_tableget(_self, 'ClassName'), 'Templeslave_sword_blue') || lua_eq(lua_tableget(_self, 'ClassName'), 'Templeslave_mage_blue'))) {
        __effect_4520 = lua_tableget(__effect_list_4520, 1);
      } else {
        __effect_4520 = lua_tableget(__effect_list_4520, 2);
      }
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      lua_call(G.str['AttachEffect'], [_self, 'F_circle002', lua_tableget(__effect_4520, 1), lua_tableget(__effect_4520, 2)]);
      lua_call(G.str['FlyMath'], [_self, 50, 1.5, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PRISON_82_MQ_8_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      lua_call(G.str['DetachEffect'], [_self, 'F_circle002']);
      lua_call(G.str['PlayEffect'], [_self, 'I_explosion014_white', 1.2, null, 'MID']);
      if (lua_eq(lua_tableget(_self, 'Faction'), 'Monster')) {
        lua_call(G.str['Kill'], [_self]);
      } else {
        lua_call(G.str['Dead'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_PRISON_78_MQ_3_ITEM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PRISON_78_MQ_3_ITEM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_lineup020_blue_mint', 0.6, null, 'BOT']);
      lua_call(G.str['KILL_BLEND'], [_self, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ORCHARD_34_3_SQ_13_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke009_green', 2.0, 'BOT']);
      lua_call(G.str['ObjectColorBlend'], [_self, 155.0, 255.0, 155.0, 255.0, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ORCHARD_34_3_SQ_13_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke009_green']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 255.0, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_3_OBJ_19_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_light028_blue', 1.2, null, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_3_OBJ_19_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_1_SQ_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_light004_blue', 5.0, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_1_SQ_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_light004_blue']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_1_SQ_6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_1_SQ_6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _result1_4535 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CASTLE_20_1_SQ_6'])[0];
      if (lua_eq(_result1_4535, 'PROGRESS')) {
        var var_4537 = 1, stop_4537 = 4;
        for (; var_4537 <= stop_4537; var_4537++) {
          var _i_4537 = var_4537;
          if (lua_eq(lua_call(G.str['isHideNPC'], [_self, lua_concat('CASTLE_20_1_OBJ_6_', _i_4537)])[0], 'NO')) {
            var var_4540 = 1, stop_4540 = 4;
            for (; var_4540 <= stop_4540; var_4540++) {
              var _j_4540 = var_4540;
              lua_call(G.str['UnHideNPC'], [_self, lua_concat('CASTLE_20_1_OBJ_6_', _j_4540)]);
            }
            lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_scroll", lua_call(G.str['ScpArgMsg'], ["CASTLE_20_1_SQ_2_BUFF_MSG1"])[0], 5]);
            return [];
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_4_SQ_5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CASTLE_20_4_SQ_5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _zon_Obj_4543 = lua_call(G.str['GetLayerObject'], [_self])[0];
      if (!lua_eq(_zon_Obj_4543, null)) {
        var _zoneID_4544 = lua_call(G.str['GetZoneInstID'], [_self])[0];
        tmp = lua_call(G.str['GetLayerAliveMonList'], [_zoneID_4544].concat(lua_call(G.str['GetLayer'], [_self]))); var _list_4544 = tmp[0]; var _cnt_4544 = tmp[1]; tmp = null;
        if (lua_lte(1, _cnt_4544)) {
          var var_4546 = 1, stop_4546 = lua_assertfloat(_cnt_4544);
          for (; var_4546 <= stop_4546; var_4546++) {
            var _i_4546 = var_4546;
            if (lua_eq(lua_tableget(lua_tableget(_list_4544, _i_4546), 'ClassName'), 'Shardstatue_black')) {
              return [1];
            }
          }
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_4_SQ_5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_4_SQ_7_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CASTLE_20_4_SQ_7_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_smoke015_green', 1.0, null, 'BOT']);
      tmp = lua_call(G.str['SelectObject'], [_self, 300, 'ALL', 1]); var _list_4551 = tmp[0]; var _cnt_4551 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_4551)) {
        var var_4553 = 1, stop_4553 = lua_assertfloat(_cnt_4551);
        for (; var_4553 <= stop_4553; var_4553++) {
          var _i_4553 = var_4553;
          if (lua_eq(lua_tableget(lua_tableget(_list_4551, _i_4553), 'ClassName'), 'PC')) {
            var _buff1_4555 = lua_call(G.str['GetBuffByName'], [lua_tableget(_list_4551, _i_4553), 'CASTLE_20_4_SQ_7_BUFF_2'])[0];
            var _buff2_4555 = lua_call(G.str['GetBuffByName'], [lua_tableget(_list_4551, _i_4553), 'CASTLE_20_4_SQ_7_BUFF_3'])[0];
            if ((lua_eq(_buff1_4555, null) && lua_eq(_buff2_4555, null))) {
              lua_call(G.str['AddBuff'], [lua_tableget(_list_4551, _i_4553), lua_tableget(_list_4551, _i_4553), 'CASTLE_20_4_SQ_7_BUFF_2', 1, 0, 10000, 1]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_4_SQ_7_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_4_SQ_7_BUFF_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CASTLE_20_4_SQ_7_BUFF_2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_castle_20_4')) {
          var _result1_4561 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CASTLE_20_4_SQ_7'])[0];
          if (lua_eq(_result1_4561, 'PROGRESS')) {
            lua_call(G.str['TakeDamage'], [_self, _self, "None", 289, "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
            return [1];
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_4_SQ_7_BUFF_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE_20_4_SQ_7_BUFF_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _buff1_4564 = lua_call(G.str['GetBuffByName'], [_self, 'CASTLE_20_4_SQ_7_BUFF_2'])[0];
      if (!lua_eq(_buff1_4564, null)) {
        lua_call(G.str['RemoveBuff'], [_self, 'CASTLE_20_4_SQ_7_BUFF_2']);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CASTLE_20_4_SQ_7_BUFF_3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buff1_4566 = lua_call(G.str['GetBuffByName'], [_self, 'CASTLE_20_4_SQ_7_BUFF_2'])[0];
      if (!lua_eq(_buff1_4566, null)) {
        lua_call(G.str['RemoveBuff'], [_self, 'CASTLE_20_4_SQ_7_BUFF_2']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE_20_4_SQ_7_BUFF_3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_MIKO_SIAULIAI_46_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_light089_green', 1.0, null, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_MIKO_SIAULIAI_46_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FTOWER_69_2_G3_BUFF_RED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_levitation005_dark_red_attach', 1.5, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FTOWER_69_2_G3_BUFF_RED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_levitation005_dark_red_attach']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FTOWER_69_2_G3_BUFF_BLUE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_levitation005_dark_blue_attach', 1.5, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FTOWER_69_2_G3_BUFF_BLUE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_levitation005_dark_blue_attach']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FTOWER_69_2_G4_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_light104_yellow_loop', 3.0, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FTOWER_69_2_G4_BUFF_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_light104_yellow_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FTOWER_69_2_G4_BUFF_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['UnHideNPC'], [_self, 'FTOWER_69_2_G4_3_GAP']);
      lua_call(G.str['AttachEffect'], [_self, 'I_light017_yellow', 15.0, 'MID']);
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 60));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 60));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 45));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FTOWER_69_2_G4_BUFF_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideNPC'], [_self, 'FTOWER_69_2_G4_3_GAP']);
      lua_call(G.str['DetachEffect'], [_self, 'I_light017_yellow']);
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 60));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 60));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 45));
      return [];
    })
    G.str['SCR_BUFF_ENTER_QUEST_HOLD_MOVE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_QUEST_HOLD_MOVE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH59_SQ_12_NPC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_levitation008_yellow', 2, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FLASH59_SQ_12_NPC'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_levitation008_yellow', 2, 'MID']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH59_SQ_12_NPC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_KILLING_PLACE_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_KILLING_PLACE_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 150, 'Monster']); var _list_4585 = tmp[0]; var _cnt_4585 = tmp[1]; tmp = null;
      var _i_4585;
      if (lua_lt(0, _cnt_4585)) {
        var var_4587 = 1, stop_4587 = lua_assertfloat(_cnt_4585);
        for (; var_4587 <= stop_4587; var_4587++) {
          var _i_4587 = var_4587;
          lua_call(G.str['PlayEffect'], [lua_tableget(_list_4585, _i_4587), 'F_explosion023', 0.5]);
          lua_call(G.str['TakeDamage'], [_self, lua_tableget(_list_4585, _i_4587), "None", 99999, "Fire", "None", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KILLING_PLACE_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_RUNAWAY_MONSTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), lua_multiply(10, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RUNAWAY_MONSTER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_multiply(10, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHATHEDRAL56_MQ03_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHATHEDRAL56_MQ03_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_4593 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CHATHEDRAL56_MQ03'])[0];
      if (!lua_eq(_result_4593, 'PROGRESS')) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_cathedral_56')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHATHEDRAL56_MQ03_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GELE574_MQ_05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 1, 0, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GELE574_MQ_05'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'HP'), 20)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'Stun', 1, 0, 3000, 1]);
        lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 1, 0, 3000, 1]);
        lua_call(G.str['AddBuff'], [_self, _self, 'GELE574_MQ_05_2', 1, 0, 0, 1]);
        lua_call(G.str['AddHP'], [_self, lua_divide(lua_tableget(_self, 'MHP'), 2)]);
        lua_call(G.str['ClearBTree'], [_self]);
        lua_call(G.str['RunSimpleAIOnly'], [_self, 'GELE574_MQ_05_AI']);
        lua_tableset(_self, 'NumArg4', 1553);
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GELE574_MQ_05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'HPLock']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM51_SQ_1_SPEED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PILGRIM51_SQ_1_SPEED'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 10));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM51_SQ_1_SPEED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN19_GATE1_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4605 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4605));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_4605]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_THORN19_GATE1_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 70, "Melee", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN19_GATE1_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4607 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4607));
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN19_GATE2_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4608 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4608));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_4608]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_THORN19_GATE2_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 70, "Poison", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN19_GATE2_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4610 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4610));
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN19_GATE3_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4611 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4611));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_4611]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_THORN19_GATE3_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 70, "Dark", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN19_GATE3_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4613 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4613));
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM47_CRYST08'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Neutral']);
      lua_call(G.str['ClearBTree'], [_self]);
      lua_tableset(_self, 'NumArg1', 1);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM47_CRYST08'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _tobt_4615 = lua_call(G.str['CreateBTree'], ['BasicMonster'])[0];
      lua_call(G.str['SetBTree'], [_self, _tobt_4615]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Monster']);
      lua_tableset(_self, 'NumArg1', 0);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM47_SQ_090_EFF_DEL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke130_blue_loop2']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM47_SQ_090_EFF_DEL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke130_blue_loop2']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM50_SQ_028'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke038_blue', 1.5]);
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 255, 180, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM50_SQ_028'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke038_blue']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM50_SQ_028_BOOM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'PILGRIM50_SQ_028_BUFF_DEAD', 1, 0, 6560, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM50_SQ_028_BOOM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _pc_mon_4621 = lua_call(G.str['GetScpObjectList'], [_self, 'PILGRIM50_SQ_028'])[0];
      if (!lua_eq(lua_len(_pc_mon_4621), 0)) {
        lua_call(G.str['KnockDown'], [_self, lua_tableget(_pc_mon_4621, 1), 250, lua_call(G.str['GetAngleTo'], [_self, lua_tableget(_pc_mon_4621, 1)])[0], 45, 0.5]);
        lua_call(G.str['PlayEffect'], [_self, 'F_light016', 1]);
      } else {
        lua_call(G.str['KnockDown'], [_self, _self, 250, 0, 45, 0.5]);
        lua_call(G.str['PlayEffect'], [_self, 'F_light016', 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM50_SQ_028_BUFF_DEAD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM50_SQ_028_BUFF_DEAD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Dead'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_NEXTNUMBER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIMMICK_NEXTNUMBER'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddHP'], [_self, 50]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_NEXTNUMBER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHATHEDRAL56_SQ04_HEAL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHATHEDRAL56_SQ04_HEAL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddHP'], [_self, 30]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHATHEDRAL56_SQ04_HEAL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHATHEDRAL54_MQ04_PART2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHATHEDRAL54_MQ04_PART2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 70, 'Altarcrystal_N1']); var _list_4633 = tmp[0]; var _cnt_4633 = tmp[1]; tmp = null;
      var _i_4633;
      if (!lua_eq(_cnt_4633, 0)) {
        var _pc_mon_4634 = lua_call(G.str['GetScpObjectList'], [_self, 'CHATHEDRAL54_MQ04_PART2'])[0];
        if (!lua_eq(lua_len(_pc_mon_4634), 0)) {
          lua_call(G.str['PlayEffect'], [_self, 'F_archer_sightshoot_shot_light', 1, 1, 'MID']);
        }
      } else {
        lua_call(G.str['RemoveBuff'], [_self, 'CHATHEDRAL54_MQ04_PART2']);
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHATHEDRAL54_MQ04_PART2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATHEDRAL54_SQ04_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_stitch']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATHEDRAL54_SQ04_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideEmoticon'], [_self, 'I_emo_stitch']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HAUBERK_HOVER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hover_4640 = lua_call(G.str['GetScpObjectList'], [_self, 'HAUBERK_HOVER'])[0];
      if (lua_eq(lua_len(_hover_4640), 0)) {
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_4641 = tmp[0]; var _y_4641 = tmp[1]; var _z_4641 = tmp[2]; tmp = null;
        var _mon_4641 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'HiddenTrigger6', _x_4641, _y_4641, _z_4641, lua_call(G.str['GetDirectionByAngle'], [_self])[0], 'Neutral', 1])[0];
        lua_call(G.str['SetOwner'], [_mon_4641, _self, 1]);
        lua_call(G.str['AddScpObjectList'], [_self, 'HAUBERK_HOVER', _mon_4641]);
        lua_call(G.str['AttachEffect'], [_mon_4641, 'F_light055_black', 2, 'TOP']);
        lua_call(G.str['HoverAround'], [_mon_4641, _self, 10, 1, 2, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HAUBERK_HOVER'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HAUBERK_HOVER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hover_4644 = lua_call(G.str['GetScpObjectList'], [_self, 'HAUBERK_HOVER'])[0];
      if (!lua_eq(lua_len(_hover_4644), 0)) {
        var _i_4645;
        var var_4646 = 1, stop_4646 = lua_assertfloat(lua_len(_hover_4644));
        for (; var_4646 <= stop_4646; var_4646++) {
          var _i_4646 = var_4646;
          lua_call(G.str['Kill'], [lua_tableget(_hover_4644, _i_4646)]);
        }
      }
      return [];
    })
    G.str['SCR_HAUBERK_HOVER_RERUN'] = (function (_self) {
      var tmp;
      var __pc_4648 = lua_call(G.str['GetOwner'], [_self])[0];
      if (!lua_eq(__pc_4648, null)) {
        lua_call(G.str['AddBuff'], [__pc_4648, __pc_4648, 'HAUBERK_HOVER', 1, 0, 0, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_VPRISON512_MQ_03_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_VPRISON512_MQ_03_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var __pc_4651 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_4651, null)) {
        if (lua_lt(200, lua_call(G.str['GetDistance'], [__pc_4651, _self])[0])) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VPRISON512_MQ_03_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var __pc_4654 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_4654, null)) {
        if (lua_lt(180, lua_call(G.str['GetDistance'], [__pc_4654, _self])[0])) {
          return [0];
        }
        var _msg_4655 = lua_newtable(['VPRISON512_MQ_03_DEBUFF_1', 'VPRISON512_MQ_03_DEBUFF_2', 'VPRISON512_MQ_03_DEBUFF_3', 'VPRISON512_MQ_03_DEBUFF_4', 'VPRISON512_MQ_03_DEBUFF_5']);
        var _quest_ssn_4655 = lua_call(G.str['GetSessionObject'], [__pc_4654, 'SSN_VPRISON512_MQ_03'])[0];
        lua_call(G.str['ShowBalloonText'], [__pc_4654, lua_tableget(_msg_4655, lua_add(lua_tableget(_quest_ssn_4655, 'QuestInfoValue1'), 1)), 5]);
        lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [__pc_4654, 'SSN_VPRISON512_MQ_03', 'QuestInfoValue1', 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SIAULIAI_50_MON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_infection']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SIAULIAI_50_MON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideEmoticon'], [_self, 'I_emo_infection']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_VPRISON515_MQ_03_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_cleric_bakarine_loop', 1.5, 'MID']);
      lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 10, 0, 60000, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_VPRISON515_MQ_03_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetHpPercent'], [_self])[0], 0.4)) {
        if (lua_eq(lua_tableget(_self, 'NumArg1'), 0)) {
          lua_tableset(_self, 'NumArg1', 1553);
          var __pc_4662 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          if (!lua_eq(__pc_4662, null)) {
            lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [__pc_4662, 'SSN_VPRISON515_MQ_03', 'QuestInfoValue1', 1]);
            lua_call(G.str['SetCurrentFaction'], [_self, 'Neutral']);
            lua_call(G.str['ClearBTree'], [_self]);
            lua_call(G.str['RunSimpleAIOnly'], [_self, 'VPRISON515_MQ_03_AI']);
          }
        }
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VPRISON515_MQ_03_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_cleric_bakarine_loop']);
      lua_call(G.str['RemoveBuff'], [_self, 'HPLock']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_VPRISON515_MQ_04_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_cleric_bakarine_loop', 1.5, 'MID']);
      lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 10, 0, 60000, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_VPRISON515_MQ_04_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetHpPercent'], [_self])[0], 0.2)) {
        if (lua_eq(lua_tableget(_self, 'NumArg1'), 0)) {
          lua_tableset(_self, 'NumArg1', 1553);
          var __pc_4668 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          if (!lua_eq(__pc_4668, null)) {
            lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [__pc_4668, 'SSN_VPRISON515_MQ_04', 'QuestInfoValue1', 1]);
            lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
            lua_call(G.str['ClearBTree'], [_self]);
            lua_call(G.str['StopMove'], [_self]);
            lua_call(G.str['RunScript'], ["VPRISON515_MQ_04_AI_1_RUN", _self]);
          }
        }
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VPRISON515_MQ_04_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_cleric_bakarine_loop']);
      lua_call(G.str['RemoveBuff'], [_self, 'HPLock']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FARM47_1_SQ_030'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "FARM47_1_SQ_030", lua_tableget(_self, 'MSPD')]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FARM47_1_SQ_030'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'Skill_poison_pot']); var _list_4672 = tmp[0]; var _cnt_4672 = tmp[1]; tmp = null;
      var _i_4672;
      if (!lua_eq(_cnt_4672, 0)) {
        if (lua_lt(0, lua_tableget(_self, 'MSPD'))) {
          var _pc_mon_4674 = lua_call(G.str['GetScpObjectList'], [_self, 'FARM47_1_SQ_030'])[0];
          if (!lua_eq(lua_len(_pc_mon_4674), 0)) {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'FARM47_1_SQ_030_01'])[0], 'NO')) {
              lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [lua_tableget(_pc_mon_4674, 1), 'SSN_FARM47_1_SQ_030', 'QuestInfoValue1'].concat(lua_call(G.str['IMCRandom'], [10, 100])));
            }
          }
          lua_tableset(_self, 'MSPD', lua_subtract(lua_tableget(_self, 'MSPD'), 2.5));
          return [1];
        } else {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'FARM47_1_SQ_030_01'])[0], 'NO')) {
            lua_call(G.str['AttachEffect'], [_self, 'F_ground017_loop', 1, 'BOT']);
            lua_call(G.str['AddBuff'], [_self, _self, 'FARM47_1_SQ_030_01', 1, 0, 0, 1]);
            lua_call(G.str['RemoveBuff'], [_self, 'FARM47_1_SQ_030']);
          }
        }
      } else {
        lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
        lua_call(G.str['RemoveBuff'], [_self, 'FARM47_1_SQ_030']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FARM47_1_SQ_030'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD', lua_call(G.str['GetExProp'], [_buff, "FARM47_1_SQ_030"])[0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FARM47_1_SQ_030_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FARM47_1_SQ_030_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'Skill_poison_pot']); var _list_4682 = tmp[0]; var _cnt_4682 = tmp[1]; tmp = null;
      var _i_4682;
      if (!lua_eq(_cnt_4682, 0)) {
        return [1];
      } else {
        lua_call(G.str['RemoveBuff'], [_self, 'FARM47_1_SQ_030_01']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FARM47_1_SQ_030_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FARM47_MAGIC_FAKE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Neutral']);
      lua_call(G.str['ClearBTree'], [_self]);
      lua_tableset(_self, 'NumArg1', 1);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FARM47_MAGIC_FAKE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _tobt_4687 = lua_call(G.str['CreateBTree'], ['BasicMonster'])[0];
      lua_call(G.str['SetBTree'], [_self, _tobt_4687]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Monster']);
      lua_tableset(_self, 'NumArg1', 0);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FARM47_2_SQ_060_EFF_DEL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke130_blue_loop2']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM47_SQ_090_EFF_DEL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke130_blue_loop2']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_BOSS_RAGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atk_add_4690 = lua_multiply(_arg1, 15);
      var _def_add_4690 = lua_multiply(_arg1, 5);
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _atk_add_4690));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _atk_add_4690));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _def_add_4690));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _def_add_4690));
      lua_call(G.str['SetExProp'], [_buff, "BOSS_RAGE_ATK_ADD", _atk_add_4690]);
      lua_call(G.str['SetExProp'], [_buff, "BOSS_RAGE_DEF_ADD", _def_add_4690]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BOSS_RAGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atk_add_4691 = lua_call(G.str['GetExProp'], [_buff, "BOSS_RAGE_ATK_ADD"])[0];
      var _def_add_4691 = lua_call(G.str['GetExProp'], [_buff, "BOSS_RAGE_DEF_ADD"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _atk_add_4691));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _atk_add_4691));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _def_add_4691));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _def_add_4691));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_VELNIASP54_MON_RAGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VELNIASP54_MON_RAGEE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDERF592_TYPEA_MONKILL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDERF592_TYPEA_MONKILL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_circle020_light', 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDERF592_TYPEA_MONKILL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDERF592_TYPEA_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'MSPD_BM'), 70)) {
        var _addSPD_4698 = lua_subtract(70, lua_tableget(_self, 'MSPD_BM'));
        lua_call(G.str['SetExProp'], [_buff, "ADD_SPD", _addSPD_4698]);
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addSPD_4698));
      }
      lua_call(G.str['AttachEffect'], [_self, 'I_cleric_oobe_loop_levitation1', 3]);
      lua_call(G.str['InvalidateStates'], [_self]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 145, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDERF592_TYPEA_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      lua_call(G.str['DetachEffect'], [_self, 'I_cleric_oobe_loop_levitation1']);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_SPD"])[0]));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDERF592_TYPEC_FIRE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_4700 = tmp[0]; var _y_4700 = tmp[1]; var _z_4700 = tmp[2]; tmp = null;
      var _mon_4700 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'HiddenTrigger6', _x_4700, _y_4700, _z_4700, lua_call(G.str['GetDirectionByAngle'], [_self])[0], 'Neutral', 1, G.str['FD_UNDERF592_TYPEC_FIRE_BUFF_RUN']])[0];
      lua_call(G.str['SetOwner'], [_mon_4700, _self, 1]);
      lua_call(G.str['AttachEffect'], [_mon_4700, 'F_light055_black', 2, 'TOP']);
      lua_call(G.str['HoverAround'], [_mon_4700, _self, 10, 1, 2, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDERF592_TYPEC_FIRE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['FD_UNDERF592_TYPEC_FIRE_BUFF_RUN'] = (function (_mon) {
      var tmp;
      lua_tableset(_mon, 'SimpleAI', 'FD_UNDERF592_TYPEC_FIRE_BUFF_RUN');
      lua_tableset(_mon, 'Name', 'UnvisibleName');
      return [];
    })
    G.str['FD_UNDERF592_TYPEC_FIRE_BUFF_AI'] = (function (_self) {
      var tmp;
      var __pc_4703 = lua_call(G.str['GetOwner'], [_self])[0];
      if (lua_eq(__pc_4703, null)) {
        lua_call(G.str['Kill'], [_self]);
      } else {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [__pc_4703, 'FD_UNDERF592_TYPEC_FIRE_BUFF'])[0], 'NO')) {
          lua_call(G.str['Kill'], [_self]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDERF593_TYPEC_STONE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Neutral']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDERF593_TYPEC_STONE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _zon_Obj_4708 = lua_call(G.str['GetLayerObject'], [_self])[0];
      if (lua_eq(lua_tableget(_zon_Obj_4708, 'UNDERF593_TOTAL_CONTROL'), 0)) {
        lua_tableset(_zon_Obj_4708, 'UNDERF593_TOTAL_CONTROL', 1);
      }
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 0]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Monster']);
      lua_call(G.str['SCR_DUNGEON_NOTICE'], [_self, 'scroll', 'UNDERF593_TYPED_EXIT', 5]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDERF593_TYPEA_ICEBLAST'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_spread_in021_ice', 10]);
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_4710 = tmp[0]; var _y_4710 = tmp[1]; var _z_4710 = tmp[2]; tmp = null;
      var _range_4710 = lua_call(G.str['SCR_POINT_DISTANCE'], [_x_4710, _z_4710, -270, -1066])[0];
      lua_call(G.str['Move3DByTime'], [_self, -270, -72, -1066, lua_divide((lua_divide(_range_4710, 100)), 1.5), 1, 1]);
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDERF593_TYPEA_ICEBLAST'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_spread_in021_ice']);
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SSN_UNDERF592_TYPEB_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SSN_UNDERF592_TYPEB_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERF591_TYPEB_RUMBLE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDERF591_TYPEB_RUMBLE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 500, 'Monster']); var _list_4715 = tmp[0]; var _cnt_4715 = tmp[1]; tmp = null;
      var _i_4715;
      if (lua_lt(0, _cnt_4715)) {
        var var_4717 = 1, stop_4717 = lua_assertfloat(_cnt_4715);
        for (; var_4717 <= stop_4717; var_4717++) {
          var _i_4717 = var_4717;
          lua_call(G.str['InsertHate'], [_self, lua_tableget(_list_4715, _i_4717), 50]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERF591_TYPEB_RUMBLE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Neutral']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERF591_TYPEB_RUMBLE_SUCC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDERF591_TYPEB_RUMBLE_SUCC'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'HP'), lua_tableget(_self, 'MHP'))) {
        lua_call(G.str['Heal'], [_self, (lua_divide(lua_tableget(_self, 'MHP'), 110)), 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERF591_TYPEB_RUMBLE_SUCC'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FARM47_3_SQ_050'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "FARM47_3_SQ_050", lua_tableget(_self, 'MSPD')]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FARM47_3_SQ_050'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'Skill_poison_pot']); var _list_4725 = tmp[0]; var _cnt_4725 = tmp[1]; tmp = null;
      var _i_4725;
      if (!lua_eq(_cnt_4725, 0)) {
        if (lua_lt(0, lua_tableget(_self, 'MSPD'))) {
          var _pc_mon_4727 = lua_call(G.str['GetScpObjectList'], [_self, 'FARM47_3_SQ_050'])[0];
          if (!lua_eq(lua_len(_pc_mon_4727), 0)) {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'FARM47_3_SQ_050_01'])[0], 'NO')) {
              lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [lua_tableget(_pc_mon_4727, 1), 'SSN_FARM47_3_SQ_050', 'QuestInfoValue1'].concat(lua_call(G.str['IMCRandom'], [10, 100])));
            }
          }
          lua_tableset(_self, 'MSPD', lua_subtract(lua_tableget(_self, 'MSPD'), 2.5));
          return [1];
        } else {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'FARM47_3_SQ_050_01'])[0], 'NO')) {
            lua_call(G.str['AttachEffect'], [_self, 'F_ground017_loop', 1, 'BOT']);
            lua_call(G.str['AddBuff'], [_self, _self, 'FARM47_3_SQ_050_01', 1, 0, 0, 1]);
            lua_call(G.str['RemoveBuff'], [_self, 'FARM47_3_SQ_050']);
          }
        }
      } else {
        lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
        lua_call(G.str['RemoveBuff'], [_self, 'FARM47_3_SQ_050']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FARM47_3_SQ_050'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD', lua_call(G.str['GetExProp'], [_buff, "FARM47_3_SQ_050"])[0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FARM47_3_SQ_050_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FARM47_3_SQ_050_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'Skill_poison_pot']); var _list_4735 = tmp[0]; var _cnt_4735 = tmp[1]; tmp = null;
      var _i_4735;
      if (!lua_eq(_cnt_4735, 0)) {
        return [1];
      } else {
        lua_call(G.str['RemoveBuff'], [_self, 'FARM47_3_SQ_050_01']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FARM47_3_SQ_050_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CMINE8_ANTIPOISON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CMINE8_ANTIPOISON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_VPRISON513_MQ_03_HAUBERK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_light075_yellow_loop', 5, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VPRISON513_MQ_03_HAUBERK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_light075_yellow_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_NPC_RETURN_CREATE_POS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'NPC_RETURN_CREATE_POS'])[0], 'NO')) {
        var _addspd_4744 = lua_add(lua_tableget(_self, 'MSPD'), 30);
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addspd_4744));
        lua_call(G.str['SetExProp'], [_buff, "NPC_RETURN_CREATE_POS", _addspd_4744]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_NPC_RETURN_CREATE_POS'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetTacticsArgFloat'], [_self, G.str['x'], G.str['y'], G.str['z'], G.str['angle']]); var _x_4745 = tmp[0]; var _y_4745 = tmp[1]; var _z_4745 = tmp[2]; var _angle_4745 = tmp[3]; tmp = null;
      if (lua_lt(10, lua_call(G.str['GetDistFromPos'], [_self, lua_tableget(_self, 'CreateX'), lua_tableget(_self, 'CreateY'), lua_tableget(_self, 'CreateZ')])[0])) {
        lua_call(G.str['MoveEx'], [_self, lua_tableget(_self, 'CreateX'), lua_tableget(_self, 'CreateY'), lua_tableget(_self, 'CreateZ'), 1]);
      } else {
        lua_call(G.str['PlayAnim'], [_self, 'STD', 1]);
        lua_call(G.str['SetDirectionByAngle'], [_self, _angle_4745]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NPC_RETURN_CREATE_POS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'NPC_RETURN_CREATE_POS'])[0], 'YES')) {
        var _addspd_4749 = lua_call(G.str['GetExProp'], [_self, 'NPC_RETURN_CREATE_POS'])[0];
        lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addspd_4749));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH60_SQ_05_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4750 = lua_multiply(lua_tableget(_self, 'DEF'), 0.7);
      var _spdadd_4750 = lua_add(lua_tableget(_self, 'MSPD_BM'), 20);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_4750));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _spdadd_4750));
      lua_call(G.str['SetExProp'], [_buff, "FLASH60_SQ_05_DEF", _defadd_4750]);
      lua_call(G.str['SetExProp'], [_buff, "FLASH60_SQ_05_SPD", _spdadd_4750]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH60_SQ_05_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_4751 = lua_call(G.str['GetExProp'], [_buff, "FLASH60_SQ_05_DEF"])[0];
      var _spdadd_4751 = lua_call(G.str['GetExProp'], [_buff, "FLASH60_SQ_05_SPD"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_4751));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _spdadd_4751));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN39_2_SQ05_TARGET'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_sys_target_pc2', 5, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN39_2_SQ05_TARGET'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH61_SQ_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FLASH61_SQ_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_4755 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if ((lua_eq(lua_call(G.str['IsDead'], [_caster_4755])[0], 0) || !lua_eq(_caster_4755, null))) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH61_SQ_02_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH60_SQ_09_CK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FLASH60_SQ_09_CK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_spark012_leaf', 2, 1, 'MID']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH60_SQ_09_CK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH63_SQ_02_CK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke008_red', 1, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FLASH63_SQ_02_CK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 300, 'Silvertransporter_m_Quest']); var _list_4763 = tmp[0]; var _cnt_4763 = tmp[1]; tmp = null;
      var _i_4763;
      var var_4764 = 1, stop_4764 = lua_assertfloat(_cnt_4763);
      for (; var_4764 <= stop_4764; var_4764++) {
        var _i_4764 = var_4764;
        lua_call(G.str['InsertHate'], [_self, lua_tableget(_list_4763, _i_4764), 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH63_SQ_02_CK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke008_red']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FTOWER611_TYPE_A_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FTOWER611_TYPE_A_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'FD_FTOWER611_TYPE_A_BUFF'])[0], 'NO')) {
        if (lua_lte(10, lua_call(G.str['GetBuffOver'], [_self, 'FD_FTOWER611_TYPE_A_DEBUFF'])[0])) {
          lua_call(G.str['AddBuff'], [_self, _self, 'FD_FTOWER611_TYPE_A_FLASH', 1, 0, 0, 1]);
        } else {
          lua_call(G.str['ShowBalloonText'], [_self, "FD_FTOWER611_TYPE_A_DEBUFF", 5]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FTOWER611_TYPE_A_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FTOWER611_TYPE_A_FLASH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Stonize", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FTOWER611_TYPE_A_FLASH'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buff_cnt_4774 = lua_call(G.str['GetExProp'], [_buff, "FD_FTOWER611_TYPE_A_FLASH"])[0];
      if (lua_lte(_buff_cnt_4774, 10)) {
        lua_call(G.str['SetExProp'], [_buff, "FD_FTOWER611_TYPE_A_FLASH", lua_add(_buff_cnt_4774, 1)]);
        return [1];
      } else if (lua_lt(10, _buff_cnt_4774)) {
        if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
          lua_call(G.str['RunScript'], ['FD_FTOWER611_TYPE_A_FLASH_REMOVE', _self]);
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FTOWER611_TYPE_A_FLASH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Stonize", 0]);
      return [];
    })
    G.str['FD_FTOWER611_TYPE_A_FLASH_REMOVE'] = (function (_self) {
      var tmp;
      lua_call(G.str['UIOpenToPC'], [_self, 'fullblack', 1]);
      lua_call(G.str['sleep'], [1000]);
      lua_call(G.str['SetPos'], [_self, -295, 177, -2160]);
      lua_call(G.str['UIOpenToPC'], [_self, 'fullblack', 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_THORN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buff_4781 = lua_call(G.str['GetBuffByName'], [_self, "THORN_BUFF"])[0];
      var _buff_stack_4781 = lua_call(G.str['GetOver'], [_buff_4781])[0];
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 50, "Monster"]); var _list_4781 = tmp[0]; var _cnt_4781 = tmp[1]; tmp = null;
      var var_4782 = 1, stop_4782 = lua_assertfloat(_cnt_4781);
      for (; var_4782 <= stop_4782; var_4782++) {
        var _i_4782 = var_4782;
        if (((lua_eq(lua_tableget(lua_tableget(_list_4781, _i_4782), 'ClassName'), "npc_bramble_root") || lua_eq(lua_tableget(lua_tableget(_list_4781, _i_4782), 'ClassName'), "npc_bramble_root_s")) || lua_eq(lua_tableget(lua_tableget(_list_4781, _i_4782), 'ClassName'), "npc_bramble_root_m"))) {
          lua_call(G.str['AddBuff'], [_self, _self, 'THORN_BUFF', 1, 0, 0, 1]);
          return [1];
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ROKAS_ICE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ROKAS_ICE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PROOF_PRIST_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PROOF_PRIST_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER612_T01_NPC_BLUE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FIRETOWER612_T01_NPC_BLUE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healsp_4791 = lua_divide(lua_tableget(_self, 'MSP'), 100);
      if (lua_lt(_healsp_4791, 3)) {
        _healsp_4791 = 3;
      }
      lua_call(G.str['HealSP'], [_self, _healsp_4791, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER612_T01_NPC_BLUE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER612_T01_NPC_RED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FIRETOWER612_T01_NPC_RED'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_4795 = lua_divide(lua_tableget(_self, 'MHP'), 100);
      if (lua_lt(_heal_4795, 5)) {
        _heal_4795 = 5;
      }
      lua_call(G.str['Heal'], [_self, _heal_4795, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER612_T01_NPC_RED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER612_T01_NPC_YLL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FIRETOWER612_T01_NPC_YLL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        var _sta_4800 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
        if (lua_lt(_sta_4800, 2)) {
          _sta_4800 = 2;
        }
        lua_call(G.str['AddStamina'], [_self, _sta_4800]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER612_T01_NPC_YLL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PARTY_Q8_CRYSTAL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PARTY_Q8_CRYSTAL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PARTY_Q8_CRYSTAL_FIND'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PARTY_Q8_CRYSTAL_FIND'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER611_T02_ROMER_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FIRETOWER611_T02_ROMER_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_smoke124_blue2', 0.2, 'TOP']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER611_T02_ROMER_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER611_T02_ROMER_CK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER611_T02_ROMER_CK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER612_GEN_NORTH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 300, 'PC']); var _list_4812 = tmp[0]; var _cnt_4812 = tmp[1]; tmp = null;
      var _pc_cnt_4812;
      var _add_4812;
      var _add_half_4812;
      if (lua_lte(_cnt_4812, 5)) {
        _pc_cnt_4812 = 1;
      } else if ((lua_lt(6, _cnt_4812) && lua_lte(_cnt_4812, 10))) {
        _pc_cnt_4812 = 2;
      } else if (lua_lt(10, _cnt_4812)) {
        _pc_cnt_4812 = 3;
      }
      _add_4812 = lua_add((lua_multiply(10, _over)), (lua_multiply(10, _pc_cnt_4812)));
      _add_half_4812 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_add_4812, 4)])[0];
      var _i_4812;
      var _mon_4812 = lua_newtable();
      var var_4816 = 1, stop_4816 = lua_assertfloat(_add_4812);
      for (; var_4816 <= stop_4816; var_4816++) {
        var _i_4816 = var_4816;
        if (lua_lte(_i_4816, _add_half_4812)) {
          lua_tableset(_mon_4812, _i_4816, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(-2055, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(1567, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4812, _i_4816), 600]);
        } else if ((lua_lt(_add_half_4812, _i_4816) && lua_lte(_i_4816, (lua_multiply(_add_half_4812, 2))))) {
          lua_tableset(_mon_4812, _i_4816, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(-2280, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(1359, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4812, _i_4816), 600]);
        } else if ((lua_lt((lua_multiply(_add_half_4812, 2)), _i_4816) && lua_lte(_i_4816, (lua_multiply(_add_half_4812, 3))))) {
          lua_tableset(_mon_4812, _i_4816, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(-2051, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(1116, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4812, _i_4816), 600]);
        } else if (lua_lt((lua_multiply(_add_half_4812, 3)), _i_4816)) {
          lua_tableset(_mon_4812, _i_4816, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(-1841, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(1359, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4812, _i_4816), 600]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FIRETOWER612_GEN_NORTH'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lte(5, lua_call(G.str['GetBuffOver'], [_self, 'FD_FIRETOWER612_GEN_NORTH'])[0])) {
        return [0];
      } else {
        if (lua_lt(lua_tableget(_self, 'NumArg4'), 60)) {
          lua_tableset(_self, 'NumArg4', lua_add(lua_tableget(_self, 'NumArg4'), 1));
        } else {
          lua_call(G.str['AddBuff'], [_self, _self, 'FD_FIRETOWER612_GEN_NORTH', 1, 0, 0, 1]);
          lua_tableset(_self, 'NumArg4', 0);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER612_GEN_NORTH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_FIRETOWER612_GEN_SOUTH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 300, 'PC']); var _list_4828 = tmp[0]; var _cnt_4828 = tmp[1]; tmp = null;
      var _pc_cnt_4828;
      var _add_4828;
      var _add_half_4828;
      if (lua_lte(_cnt_4828, 5)) {
        _pc_cnt_4828 = 1;
      } else if ((lua_lt(6, _cnt_4828) && lua_lte(_cnt_4828, 10))) {
        _pc_cnt_4828 = 2;
      } else if (lua_lt(10, _cnt_4828)) {
        _pc_cnt_4828 = 3;
      }
      _add_4828 = lua_add((lua_multiply(10, _over)), (lua_multiply(10, _pc_cnt_4828)));
      _add_half_4828 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_add_4828, 4)])[0];
      var _i_4828;
      var _mon_4828 = lua_newtable();
      var var_4832 = 1, stop_4832 = lua_assertfloat(_add_4828);
      for (; var_4832 <= stop_4832; var_4832++) {
        var _i_4832 = var_4832;
        if (lua_lte(_i_4832, _add_half_4828)) {
          lua_tableset(_mon_4828, _i_4832, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(1698, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(-1328, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4828, _i_4832), 600]);
        } else if ((lua_lt(_add_half_4828, _i_4832) && lua_lte(_i_4832, (lua_multiply(_add_half_4828, 2))))) {
          lua_tableset(_mon_4828, _i_4832, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(1469, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(-1570, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4828, _i_4832), 600]);
        } else if ((lua_lt((lua_multiply(_add_half_4828, 2)), _i_4832) && lua_lte(_i_4832, (lua_multiply(_add_half_4828, 3))))) {
          lua_tableset(_mon_4828, _i_4832, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(1683, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(-1774, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4828, _i_4832), 600]);
        } else if (lua_lt((lua_multiply(_add_half_4828, 3)), _i_4832)) {
          lua_tableset(_mon_4828, _i_4832, lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'FD_Glyquare', lua_add(1918, lua_call(G.str['IMCRandom'], [-100, 100])[0]), 205, lua_add(-1562, lua_call(G.str['IMCRandom'], [-100, 100])[0]), lua_call(G.str['IMCRandom'], [-135, 180])[0], 'Monster', lua_call(G.str['IMCRandom'], [182, 185])[0], G.str['FD_FIRETOWER612_T02_MONSTER_AI_RUN_1']])[0]);
          lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4828, _i_4832), 600]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_FIRETOWER612_GEN_SOUTH'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lte(5, lua_call(G.str['GetBuffOver'], [_self, 'FD_FIRETOWER612_GEN_SOUTH'])[0])) {
        return [0];
      } else {
        if (lua_lt(lua_tableget(_self, 'NumArg4'), 60)) {
          lua_tableset(_self, 'NumArg4', lua_add(lua_tableget(_self, 'NumArg4'), 1));
        } else {
          lua_call(G.str['AddBuff'], [_self, _self, 'FD_FIRETOWER612_GEN_SOUTH', 1, 0, 0, 1]);
          lua_tableset(_self, 'NumArg4', 0);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_FIRETOWER612_GEN_SOUTH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDERF591_TYPED_LAMP_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetFixAnim'], [_self, 'ON']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDERF591_TYPED_LAMP_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _mon_list_4845 = lua_newtable(['FD_woodgoblin_black', 'FD_Bushspider_purple', 'FD_pappus_kepa_purple']);
      var _i_4845;
      var _x_4845 = 1;
      var _y_4845 = 2;
      var _z_4845 = 3;
      var _mon_4845 = lua_newtable();
      var _list_4845 = lua_call(G.str['GetCellCoord'], [_self, 'cardinal_far', 0])[0];
      var _zoneID_4845 = lua_call(G.str['GetZoneInstID'], [_self])[0];
      var _mon_add_4845 = lua_newtable();
      var _mon_addp_4845 = lua_newtable();
      var var_4846 = 1, stop_4846 = 4;
      for (; var_4846 <= stop_4846; var_4846++) {
        var _i_4846 = var_4846;
        if (lua_eq(lua_call(G.str['IsValidPos'], [_zoneID_4845, lua_tableget(_list_4845, _x_4845), lua_tableget(_list_4845, _y_4845), lua_tableget(_list_4845, _z_4845)])[0], 'YES')) {
          lua_tableset(_mon_4845, _i_4846, lua_call(G.str['CREATE_MONSTER_EX'], [_self, lua_tableget(_mon_list_4845, lua_call(G.str['IMCRandom'], [1, 3])[0]), lua_tableget(_list_4845, _x_4845), lua_tableget(_list_4845, _y_4845), lua_tableget(_list_4845, _z_4845), 0, 'Monster', 0, G.str['FD_UNDERF591_TYPED_LAMP_BUFF_RUN']])[0]);
          if (!lua_eq(lua_tableget(_mon_4845, _i_4846), null)) {
            lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_4845, _i_4846), 120, 1]);
            if (!lua_eq(lua_tableget(_mon_4845, _i_4846), null)) {
              if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'FD_UNDERF591_TYPED_LAMP_BUFF'])[0], 'YES')) {
                if (lua_eq(_arg1, 2)) {
                  lua_tableset(_mon_add_4845, _i_4846, lua_call(G.str['CREATE_MONSTER_EX'], [_self, lua_tableget(_mon_list_4845, lua_call(G.str['IMCRandom'], [1, 3])[0]), lua_add(lua_tableget(_list_4845, _x_4845), 10), lua_tableget(_list_4845, _y_4845), lua_add(lua_tableget(_list_4845, _z_4845), 10), 0, 'Monster', 0, G.str['FD_UNDERF591_TYPED_LAMP_BUFF_RUN']])[0]);
                  if (!lua_eq(lua_tableget(_mon_add_4845, _i_4846), null)) {
                    lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_add_4845, _i_4846), 120, 1]);
                  }
                } else if (lua_eq(_arg1, 3)) {
                  lua_tableset(_mon_add_4845, _i_4846, lua_call(G.str['CREATE_MONSTER_EX'], [_self, lua_tableget(_mon_list_4845, lua_call(G.str['IMCRandom'], [1, 3])[0]), lua_add(lua_tableget(_list_4845, _x_4845), 10), lua_tableget(_list_4845, _y_4845), lua_add(lua_tableget(_list_4845, _z_4845), 10), 0, 'Monster', 0, G.str['FD_UNDERF591_TYPED_LAMP_BUFF_RUN']])[0]);
                  if (!lua_eq(lua_tableget(_mon_add_4845, _i_4846), null)) {
                    lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_add_4845, _i_4846), 120, 1]);
                    lua_tableset(_mon_addp_4845, _i_4846, lua_call(G.str['CREATE_MONSTER_EX'], [_self, lua_tableget(_mon_list_4845, lua_call(G.str['IMCRandom'], [1, 3])[0]), lua_subtract(lua_tableget(_list_4845, _x_4845), 10), lua_tableget(_list_4845, _y_4845), lua_subtract(lua_tableget(_list_4845, _z_4845), 10), 0, 'Monster', 0, G.str['FD_UNDERF591_TYPED_LAMP_BUFF_RUN']])[0]);
                    lua_call(G.str['SetLifeTime'], [lua_tableget(_mon_addp_4845, _i_4846), 120, 1]);
                  }
                }
              }
            }
          }
        }
        _x_4845 = lua_add(_x_4845, 3);
        _y_4845 = lua_add(_y_4845, 3);
        _z_4845 = lua_add(_z_4845, 3);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDERF591_TYPED_LAMP_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetFixAnim'], [_self, 'OFF']);
      lua_call(G.str['DetachEffect'], [_self, 'F_fire007']);
      return [];
    })
    G.str['FD_UNDERF591_TYPED_LAMP_BUFF_RUN'] = (function (_mon) {
      var tmp;
      lua_tableset(_mon, 'SimpleAI', 'FD_UNDERF591_TYPED_LAMP_BUFF');
      lua_tableset(_mon, 'BTree', 'None');
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER66_MQ6_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDER66_MQ6_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER66_MQ6_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH_58_COLLECTOR_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_light013_spark', 3, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FLASH_58_COLLECTOR_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke124_blue2', 0.5, 'BOT']);
      lua_call(G.str['AddStamina'], [_self, -300]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH_58_COLLECTOR_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 25000]);
      lua_call(G.str['RemoveEffect'], [_self, 'F_smoke124_blue2', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH_58_SQ_SVTRIGAILA'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_light013_spark_blue_2', 3, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH_58_SQ_SVTRIGAILA'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_MONSTER_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dam_4866 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MHP'), 10)])[0];
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _dam_4866, "Poison", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 20));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_MONSTER_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 20));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_PC_BUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 30));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 30));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 30));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_PC_BUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 30));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 30));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 30));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_MONSTER_DEBUFF02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HIDDEN_EVENT_MONSTER_DEBUFF02'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _dam_4871 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MHP'), 10)])[0];
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _dam_4871, "Poison", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_MONSTER_DEBUFF02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_PC_BUFF04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 10));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HIDDEN_EVENT_PC_BUFF04'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healHp_4874 = 10;
      lua_call(G.str['AddHP'], [_self, _healHp_4874]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_PC_BUFF04'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 10));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 10));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_PC_BUFF02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HIDDEN_EVENT_PC_BUFF02'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healHp_4877 = 25;
      lua_call(G.str['AddHP'], [_self, _healHp_4877]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_PC_BUFF02'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_PC_BUFF03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 15));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 15));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 45));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 45));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_PC_BUFF03'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 15));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 15));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 45));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 45));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HIDDEN_EVENT_PC_BUFF05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 70));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 70));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HIDDEN_EVENT_PC_BUFF05'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 70));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 70));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FLASH64_SQ_07_BORNFIRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'ON', 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FLASH64_SQ_07_BORNFIRE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'STD', 1]);
      lua_call(G.str['DetachEffect'], [_self, 'F_fire021']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM51_SQ_ATK_UP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 30));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM51_SQ_ATK_UP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 30));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_M_CHAPEL_STR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4887 = 20;
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _add_4887));
      lua_call(G.str['SetExProp'], [_buff, "M_CHAPEL_STR", _add_4887]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_M_CHAPEL_STR'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4888 = lua_call(G.str['GetExProp'], [_buff, "M_CHAPEL_STR"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _add_4888));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_M_CHAPEL_CON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4889 = 30;
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _add_4889));
      lua_call(G.str['SetExProp'], [_buff, "M_CHAPEL_CON", _add_4889]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_M_CHAPEL_CON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4890 = lua_call(G.str['GetExProp'], [_buff, "M_CHAPEL_CON"])[0];
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _add_4890));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_M_CHAPEL_INT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4891 = 20;
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _add_4891));
      lua_call(G.str['SetExProp'], [_buff, "M_CHAPEL_INT", _add_4891]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_M_CHAPEL_INT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4892 = lua_call(G.str['GetExProp'], [_buff, "M_CHAPEL_INT"])[0];
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _add_4892));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_M_CHAPEL_AGL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4893 = 20;
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _add_4893));
      lua_call(G.str['SetExProp'], [_buff, "M_CHAPEL_AGL", _add_4893]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_M_CHAPEL_AGL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_4894 = lua_call(G.str['GetExProp'], [_buff, "M_CHAPEL_AGL"])[0];
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _add_4894));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER67_MAGIC_DEVICE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4895 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4895));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_4895]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER67_MAGIC_DEVICE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_4896 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_4896));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERF592_TYPEC_DEFENCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDERF592_TYPEC_DEFENCE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_underfortress_59_2')) {
        if (lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
          var _healsp_4900 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MSP'), 130)])[0];
          lua_call(G.str['HealSP'], [_self, _healsp_4900, 0]);
          return [1];
        } else {
          return [0];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERF592_TYPEC_DEFENCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERF593_TYPEF_DEFENCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDERF593_TYPEF_DEFENCE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_underfortress_59_3')) {
        if (lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
          var _healsp_4906 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MSP'), 130)])[0];
          lua_call(G.str['HealSP'], [_self, _healsp_4906, 0]);
          return [1];
        } else {
          return [0];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERF593_TYPEF_DEFENCE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM311_SQ_02_ITEM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var __pc_4909 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_4909, null)) {
        var _mon_ssn_4910 = lua_call(G.str['GetSessionObject'], [_self, 'SSN_PILGRIM311_SQ_02_MON'])[0];
        if (lua_eq(_mon_ssn_4910, null)) {
          lua_call(G.str['CreateSessionObject'], [_self, 'SSN_PILGRIM311_SQ_02_MON']);
        }
        var _pc_list_4910 = lua_call(G.str['GetScpObjectList'], [_self, 'PILGRIM311_SQ_02_ITEM'])[0];
        var _i_4910;
        var var_4912 = 1, stop_4912 = lua_assertfloat(lua_len(_pc_list_4910));
        for (; var_4912 <= stop_4912; var_4912++) {
          var _i_4912 = var_4912;
          if (lua_eq(lua_call(G.str['IsSameActor'], [lua_tableget(_pc_list_4910, _i_4912), __pc_4909])[0], 'YES')) {
            return [];
          }
        }
        lua_call(G.str['AddScpObjectList'], [_self, 'PILGRIM311_SQ_02_ITEM', __pc_4909]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM311_SQ_02_ITEM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mon_ssn_4915 = lua_call(G.str['GetSessionObject'], [_self, 'SSN_PILGRIM311_SQ_02_MON'])[0];
      if (!lua_eq(_mon_ssn_4915, null)) {
        lua_call(G.str['DestroySessionObject'], [_self, _mon_ssn_4915]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER65_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, "Neutral"]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER65_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER_68_MQ030'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "UNDER_68_MQ030", lua_tableget(_self, 'MSPD')]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDER_68_MQ030'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'npc_orb1_Q']); var _list_4920 = tmp[0]; var _cnt_4920 = tmp[1]; tmp = null;
      var _i_4920;
      if (!lua_eq(_cnt_4920, 0)) {
        var var_4922 = 1, stop_4922 = lua_assertfloat(_cnt_4920);
        for (; var_4922 <= stop_4922; var_4922++) {
          var _i_4922 = var_4922;
          var _pc_mon_4923 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER_68_MQ030'])[0];
          if (!lua_eq(lua_len(_pc_mon_4923), 0)) {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'UNDER_68_MQ030'])[0], 'YES')) {
              lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [lua_tableget(_pc_mon_4923, 1), 'SSN_UNDERFORTRESS_68_MQ030', 'QuestInfoValue1'].concat(lua_call(G.str['IMCRandom'], [5, 10])));
              var _skill_4925 = lua_call(G.str['GetNormalSkill'], [_self])[0];
              lua_call(G.str['ForceDamage'], [_self, _skill_4925, lua_tableget(_list_4920, _i_4922), _self, 0, 'HIT_REFLECT', 'HITRESULT_BLOW', 'I_force023_fire', 1, 'arrow_cast', null, 1, 'arrow_blow', 'SLOW', 40, 1, 0, 0, 0, 1, 1]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER_68_MQ030'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD', lua_call(G.str['GetExProp'], [_buff, "UNDER_68_MQ030"])[0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER_68_MQ030_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDER_68_MQ030_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'bones']); var _list_4928 = tmp[0]; var _cnt_4928 = tmp[1]; tmp = null;
      var _i_4928;
      if (!lua_eq(_cnt_4928, 0)) {
        return [1];
      } else {
        lua_call(G.str['RemoveBuff'], [_self, 'UNDER_68_MQ030_01']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER_68_MQ030_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_ground017_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM312_SQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_cleric_bakarine_loop', 1.5, 'MID']);
      lua_call(G.str['AddBuff'], [_self, _self, 'HPLock', 1, 0, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PILGRIM312_SQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetHpPercent'], [_self])[0], 0.2)) {
        if (lua_eq(lua_tableget(_self, 'NumArg1'), 0)) {
          lua_tableset(_self, 'NumArg1', 1553);
          lua_call(G.str['SetBuffRemainTime'], [_self, 'PILGRIM312_SQ_04_BUFF', 0]);
          var __pc_4935 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          if (!lua_eq(__pc_4935, null)) {
            lua_call(G.str['ObjectColorBlend'], [_self, 15, 15, 15, 255, 1, 3]);
            lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [__pc_4935, 'SSN_PILGRIM312_SQ_04', 'QuestInfoValue1', 1]);
            lua_call(G.str['SCR_SENDMSG_CNT'], [__pc_4935, 'SSN_PILGRIM312_SQ_04', 'scroll', 'PILGRIM312_SQ_04_01_B01', 1, 2]);
            lua_call(G.str['AttachEffect'], [_self, 'F_pattern007_dark_loop', 2]);
            lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
            lua_call(G.str['ClearBTree'], [_self]);
            lua_call(G.str['SetLifeTime'], [_self, 10, 1]);
          }
        }
        return [1];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM312_SQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_cleric_bakarine_loop']);
      lua_call(G.str['RemoveBuff'], [_self, 'HPLock']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM_36_2_FIRELORD_HP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_4938 = lua_divide(lua_tableget(_self, 'MHP'), 10);
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_4938));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _mhpadd_4938]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM_36_2_FIRELORD_HP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_4939 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_4939));
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM_48_SQ_030_BEGINNER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 7));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 7));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM_48_SQ_030_BEGINNER'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 7));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 7));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TWO_HOUR_TIME_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TWO_HOUR_TIME_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ORCHARD342_STUN'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ORCHARD342_STUN'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_4945 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      lua_call(G.str['InsertHate'], [_self, _caster_4945, 9999]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ORCHARD342_TRANSFORM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ORCHARD342_TRANSFORM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_4947 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'ORCHARD_342_SQ_02'])[0];
      if (!lua_eq(_result_4947, 'PROGRESS')) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_orchard_34_2')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ORCHARD342_TRANSFORM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, 'ALL']); var _list_4951 = tmp[0]; var _cnt_4951 = tmp[1]; tmp = null;
      var _i_4951;
      lua_call(G.str['PlayEffect'], [_self, 'F_smoke037', 0.5, 'MID']);
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 1]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      var var_4952 = 1, stop_4952 = lua_assertfloat(_cnt_4951);
      for (; var_4952 <= stop_4952; var_4952++) {
        var _i_4952 = var_4952;
        if ((lua_eq(lua_tableget(lua_tableget(_list_4951, _i_4952), 'ClassName'), 'ferret_folk') || lua_eq(lua_tableget(lua_tableget(_list_4951, _i_4952), 'ClassName'), 'ferret_loader'))) {
          lua_call(G.str['InsertHate'], [lua_tableget(_list_4951, _i_4952), _self, 9999]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ORCHARD342_WOOD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic004_red', 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ORCHARD342_WOOD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_2_CLERIC_CURED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_2_CLERIC_CURED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_2_SADHU_SOUL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke009_green', 1, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_2_SADHU_SOUL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke009_green']);
      var __pc_4960 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_4960, null)) {
        var _quest_ssn_4961 = lua_call(G.str['GetSessionObject'], [__pc_4960, 'SSN_JOB_2_SADHU4'])[0];
        lua_tableset(_quest_ssn_4961, 'Step1', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_2_BARBARIAN_ACID'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, 'BARBARIAN_ACID_ATK', lua_tableget(_self, 'Lv')]);
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), lua_tableget(_self, 'Lv')));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_2_BARBARIAN_ACID'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAtk_4963 = lua_call(G.str['GetExProp'], [_buff, 'BARBARIAN_ACID_ATK'])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _addAtk_4963));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_DARK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_4964 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MAXPATK'), 0.1)])[0];
      var _matkadd_4964 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MAXMATK'), 0.1)])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_4964));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_4964));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_4964]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_4964]);
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic004_red', 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_DARK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_4965 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_4965 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_4965));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_4965));
      lua_call(G.str['AddBuff'], [_self, _self, 'FD_CASTLE671_DARK_BUFF_R', 1, 0, 1800000, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_DARK_BUFF_R'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_DARK_BUFF_R'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_STATUE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_ground017_loop', 1, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_STATUE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_CONTROL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_CONTROL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_BOOK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_BOOK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_DOLL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_sphere009_violet', 1]);
      var _defadd_4974 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.5)])[0];
      var _mdefadd_4974 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.5)])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_4974));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4974));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_4974]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_4974]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_DOLL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere009_violet']);
      var _defadd_4975 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_4975 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_4975));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_4975));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SIAU15RE_SQ_03_ITEM_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'FreeForAll']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 100, 100, 255, 1, 2, 0, 1]);
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 200, 'Monster']); var _list_4976 = tmp[0]; var _cnt_4976 = tmp[1]; tmp = null;
      if (!lua_eq(_cnt_4976, 0)) {
        lua_call(G.str['AddScpObjectList'], [lua_tableget(_list_4976, 1), 'SIAU15RE_SQ_03_ITEM_01', _self]);
        lua_call(G.str['InsertHate'], [_self, lua_tableget(_list_4976, 1), 99999]);
        return [];
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SIAU15RE_SQ_03_ITEM_01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _mon_list_4978 = lua_call(G.str['GetScpObjectList'], [_self, 'SIAU15RE_SQ_03_ITEM_01'])[0];
      if (lua_eq(lua_len(_mon_list_4978), 0)) {
        var _caster_4979 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_4979, null)) {
          if (lua_lte(lua_call(G.str['GetDistance'], [_self, _caster_4979])[0], 200)) {
            lua_call(G.str['InsertHate'], [_self, _caster_4979, 1]);
          } else {
            return [0];
          }
        } else {
          return [0];
        }
      } else {
        lua_call(G.str['InsertHate'], [_self, lua_tableget(_mon_list_4978, 1), 99999]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SIAU15RE_SQ_03_ITEM_01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Monster']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 5, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_RED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic023_red_fire', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_SOUL_RED'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_4987 = lua_divide(lua_tableget(_self, 'MHP'), 100);
      if (lua_lt(_heal_4987, 5)) {
        _heal_4987 = 5;
      }
      lua_call(G.str['Heal'], [_self, _heal_4987, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_RED'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_BLUE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic018_blue_fire', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_SOUL_BLUE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healsp_4991 = lua_divide(lua_tableget(_self, 'MSP'), 100);
      if (lua_lt(_healsp_4991, 3)) {
        _healsp_4991 = 3;
      }
      lua_call(G.str['HealSP'], [_self, _healsp_4991, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_BLUE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_YELLOW'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic021_yellow_fire', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_SOUL_YELLOW'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _sta_4995 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
      if (lua_lt(_sta_4995, 2)) {
        _sta_4995 = 2;
      }
      lua_call(G.str['AddStamina'], [_self, _sta_4995]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_YELLOW'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_ALL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic034_pink', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_SOUL_ALL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_4999 = lua_divide(lua_tableget(_self, 'MHP'), 100);
      if (lua_lt(_heal_4999, 5)) {
        _heal_4999 = 5;
      }
      var _healsp_4999 = lua_divide(lua_tableget(_self, 'MSP'), 100);
      if (lua_lt(_healsp_4999, 3)) {
        _healsp_4999 = 3;
      }
      var _sta_4999 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
      if (lua_lt(_sta_4999, 2)) {
        _sta_4999 = 2;
      }
      lua_call(G.str['Heal'], [_self, _heal_4999, 0]);
      lua_call(G.str['HealSP'], [_self, _healsp_4999, 0]);
      lua_call(G.str['AddStamina'], [_self, _sta_4999]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_ALL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_CONTROL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_CONTROL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ShowBalloonText'], [_self, 'FD_CASTLE672_SOUL_DLG', 3]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_SOUL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_5007 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_5007, null)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_SOUL_STACK_CD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_SOUL_STACK_CD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_RED_GHOST'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_RED_GHOST'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_BLUE_GHOST'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_BLUE_GHOST'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_GHOST_COUNT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_GHOST_COUNT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN633_MQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BRACKEN633_MQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_explosion080_ice', 0.2, "MID"]);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 10, "Ice", "None", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN633_MQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_WARP_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_ground131_loop', 2, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_WARP_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'FD_CASTLE672_WARP_BUFF_CD', 1, 0, 300000, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_WARP_BUFF_CD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_WARP_BUFF_CD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_WARP_ACCEPT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_light006_blue', 2, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_WARP_ACCEPT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_light006_blue']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_BOX_REWARD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_BOX_REWARD'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_castle_67_2')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_BOX_REWARD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_BOX_ALREADY'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_BOX_ALREADY'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PRISON622_SQ_02_ITEM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_light004_blue', 5, 'MID']);
      if (!lua_eq(lua_call(G.str['GetBuffCaster'], [_buff])[0], null)) {
        tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 200, 'Monster']); var _list_5035 = tmp[0]; var _cnt_5035 = tmp[1]; tmp = null;
        if (lua_lte(2, _cnt_5035)) {
          var _i_5036;
          var __pc_5036 = lua_call(G.str['GetScpObjectList'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], 'PRISON622_SQ_02_ITEM'])[0];
          var var_5037 = 1, stop_5037 = lua_assertfloat(_cnt_5035);
          for (; var_5037 <= stop_5037; var_5037++) {
            var _i_5037 = var_5037;
            if (lua_lt(_i_5037, 3)) {
              if (!lua_eq(lua_len(__pc_5036), 0)) {
                lua_call(G.str['InsertHate'], [lua_tableget(_list_5035, _i_5037), lua_tableget(__pc_5036, 1), 1]);
              }
            } else {
              break;
            }
          }
        } else {
          var _mon_cnt_5042 = lua_subtract(2, _cnt_5035);
          if (lua_eq(_mon_cnt_5042, 0)) {
            _mon_cnt_5042 = 2;
          }
          var _mon_list_5042 = lua_newtable(['Sec_goblin_archer_blue', 'Goblin_Spear_blue']);
          tmp = lua_call(G.str['CREATE_MONSTER_CELL'], [_self, lua_tableget(_mon_list_5042, lua_call(G.str['IMCRandom'], [1, 2])[0]), G.str['pc'], 'Siege1', _mon_cnt_5042, 20, 'Monster', G.str['PRISON622_SQ_02_ITEM_MON']]); var __list_5042 = tmp[0]; var __cnt_5042 = tmp[1]; tmp = null;
          if (!lua_eq(__cnt_5042, null)) {
            var _i_5044;
            var __pc_5044 = lua_call(G.str['GetScpObjectList'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], 'PRISON622_SQ_02_ITEM'])[0];
            if (!lua_eq(lua_len(__pc_5044), null)) {
              var var_5046 = 1, stop_5046 = lua_assertfloat(__cnt_5042);
              for (; var_5046 <= stop_5046; var_5046++) {
                var _i_5046 = var_5046;
                lua_call(G.str['InsertHate'], [lua_tableget(__list_5042, _i_5046), lua_tableget(__pc_5044, 1), 1]);
                lua_call(G.str['SetLifeTime'], [lua_tableget(__list_5042, _i_5046), 120]);
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PRISON622_SQ_02_ITEM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_light004_blue']);
      return [];
    })
    G.str['PRISON622_SQ_02_ITEM_MON'] = (function (_mon) {
      var tmp;
      lua_tableset(_mon, 'Lv', lua_tableget(_mon, 'Level'));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_VINE_PROTECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_ground12_red', 3]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_VINE_PROTECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_ground12_red']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE671_BOOK_PROTECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_ground12_red', 0.5]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE671_BOOK_PROTECT'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_ground12_red']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_RED_EXPLOSION'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_levitation005_dark_red', 4]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_RED_EXPLOSION'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_levitation005_dark_red']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_BLUE_EXPLOSION'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_levitation005_dark_blue', 4]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_BLUE_EXPLOSION'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_levitation005_dark_blue']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_GHOST_ON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_GHOST_ON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_83_MQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke008_red', 2, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_83_MQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_CASTLE672_BOX_BUFFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_CASTLE672_BOX_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_castle_67_2')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_CASTLE672_BOX_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBAY642_SQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBAY642_SQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_abbey_64_2')) {
        lua_call(G.str['TakeDamage'], [_self, _self, "None", 70, "Poison", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['PlayEffect'], [_self, 'F_explosion009_green2', 0.6, "TOP"]);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBAY642_SQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBAY643_MQ3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "I_sphere006_mash", 3]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBAY643_MQ3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _Quest_5073 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "ABBAY_64_3_MQ030"])[0];
      if (lua_eq(_Quest_5073, "PROGRESS")) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_abbey_64_3')) {
          return [1];
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBAY643_MQ3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_sphere006_mash"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERFORTRESS_68_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERFORTRESS_68_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERFORTRESS_68_2_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERFORTRESS_68_2_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDERFORTRESS_68_2_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDERFORTRESS_68_2_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY642_MQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY642_MQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_abbey_64_2')) {
        lua_call(G.str['TakeDamage'], [_self, _self, "None", 70, "Poison", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['PlayEffect'], [_self, 'F_fire018_purple', 1, "TOP"]);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY642_MQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY642_MQ4_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY642_MQ4_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _Quest_5091 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "ABBAY_64_2_MQ040"])[0];
      if (lua_eq(_Quest_5091, 'PROGRESS')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY642_MQ4_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY642_MQ4_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY642_MQ4_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _Quest_5096 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "ABBAY_64_2_MQ040"])[0];
      if (lua_eq(_Quest_5096, 'PROGRESS')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY642_MQ4_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CMINE66_1_MONWEAK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg1', lua_multiply(lua_tableget(_self, 'Lv'), 10));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), (lua_multiply(lua_tableget(_self, 'Lv'), 10))));
      if (lua_lte((lua_multiply(lua_tableget(_self, 'MHP'), 0.7)), lua_tableget(_self, 'HP'))) {
        lua_tableset(_self, 'HP', (lua_multiply(lua_tableget(_self, 'MHP'), 0.7)));
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CMINE66_1_MONWEAK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'I_smoke013_dark', 0.5, 'TOP']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CMINE66_1_MONWEAK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), lua_tableget(_self, 'NumArg1')));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_33_DEADBODY'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_33_DEADBODY'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GR_FD_UNDER_1_S9_BOSS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Stonize", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GR_FD_UNDER_1_S9_BOSS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Stonize", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GR_KATYN_1_S7_BOX_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GR_KATYN_1_S7_BOX_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_rokas_24')) {
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GR_KATYN_1_S7_BOX_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER301_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_5113 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MAXPATK'), 0.1)])[0];
      var _matkadd_5113 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MAXMATK'), 0.1)])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_5113));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_5113));
      lua_call(G.str['AttachEffect'], [_self, 'F_circle002', 1.0, "TOP"]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_5113]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_5113]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDER301_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "d_underfortress_30_1")) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER301_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_5117 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_5117 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_5117));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_5117));
      lua_call(G.str['DetachEffect'], [_self, 'F_circle002']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE70_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_5118 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.1)])[0];
      var _mdefadd_5118 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.1)])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_5118));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5118));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_5118]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_5118]);
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic034_pink', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE70_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_tableland_70")) {
        var _heal_5120 = lua_divide(lua_tableget(_self, 'MHP'), 100);
        if (lua_lt(_heal_5120, 5)) {
          _heal_5120 = 5;
        }
        lua_call(G.str['Heal'], [_self, _heal_5120, 0]);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE70_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_5123 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_5123 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_5123));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5123));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE72_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_5124 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.1)])[0];
      var _mdefadd_5124 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.1)])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_5124));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5124));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_5124]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_5124]);
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic034_pink', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE72_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_tableland_72")) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE72_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_5128 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_5128 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_5128));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5128));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE73_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_5129 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.1)])[0];
      var _mdefadd_5129 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.1)])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_5129));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5129));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_5129]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_5129]);
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic034_pink', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE73_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_tableland_73")) {
        var _healsp_5131 = lua_divide(lua_tableget(_self, 'MSP'), 100);
        if (lua_lt(_healsp_5131, 3)) {
          _healsp_5131 = 3;
        }
        var _sta_5131 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
        if (lua_lt(_sta_5131, 2)) {
          _sta_5131 = 2;
        }
        lua_call(G.str['HealSP'], [_self, _healsp_5131, 0]);
        lua_call(G.str['AddStamina'], [_self, _sta_5131]);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE73_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_5135 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_5135 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_5135));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5135));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE74_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic034_pink', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE74_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_tableland_74")) {
        var _heal_5138 = lua_divide(lua_tableget(_self, 'MHP'), 100);
        if (lua_lt(_heal_5138, 5)) {
          _heal_5138 = 5;
        }
        var _healsp_5138 = lua_divide(lua_tableget(_self, 'MSP'), 100);
        if (lua_lt(_healsp_5138, 3)) {
          _healsp_5138 = 3;
        }
        var _sta_5138 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
        if (lua_lt(_sta_5138, 2)) {
          _sta_5138 = 2;
        }
        lua_call(G.str['Heal'], [_self, _heal_5138, 0]);
        lua_call(G.str['HealSP'], [_self, _healsp_5138, 0]);
        lua_call(G.str['AddStamina'], [_self, _sta_5138]);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE74_GIMMICK_REWARD_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GIMMICK_TRANSFORM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GIMMICK_TRANSFORM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _zone_5145 = lua_call(G.str['GetZoneName'], [_self])[0];
      var _city_5145 = lua_call(G.str['GetClass'], ["Map", _zone_5145])[0];
      if ((lua_eq(lua_tableget(_city_5145, 'MapType'), 'City') || lua_eq(_zone_5145, 'guild_agit_1'))) {
        return [1];
      } else {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GIMMICK_TRANSFORM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_smoke037', 0.5, 'MID']);
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 0]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLELAND_FORZEN_MANA'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLELAND_FORZEN_MANA'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE70_STUN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, "Neutral"]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE70_STUN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE71_SUBQ7ITEM2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE71_SUBQ7ITEM2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_levitation014', 0.5, 'BOT']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE71_SUBQ7ITEM2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE72_SUBQ6ITEM1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE72_SUBQ6ITEM1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE72_SUBQ6ITEM1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY_35_3_SUMMON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY_35_3_SUMMON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE73_SUBQ5_ICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5162 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.5);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5162));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5162]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE73_SUBQ5_ICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(0, lua_call(G.str['GetLayer'], [_self])[0])) {
        lua_call(G.str['TakeDamage'], [_self, _self, "None", 100, "Ice", "None", "TrueDamage", G.str['HIT_ICE'], G.str['HITRESULT_BLOW']]);
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE73_SUBQ5_ICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5165 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5165));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE73_SUBQ6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'TABLE73_SUBQ5_ICE_BUFF'])[0], 'YES')) {
        lua_call(G.str['RemoveBuff'], [_self, "TABLE73_SUBQ5_ICE_BUFF"]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE73_SUBQ6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE73_SUBQ6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GT_STAGE_3_ATK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetLayerPCList'], [_self]); var _list_5170 = tmp[0]; var _cnt_5170 = tmp[1]; tmp = null;
      if (lua_lt(0, _cnt_5170)) {
        var _i_5171;
        var var_5172 = 1, stop_5172 = lua_assertfloat(_cnt_5170);
        for (; var_5172 <= stop_5172; var_5172++) {
          var _i_5172 = var_5172;
          lua_call(G.str['SendAddOnMsg'], [lua_tableget(_list_5170, _i_5172), "NOTICE_Dm_scroll", lua_concat(lua_tableget(_self, 'Name'), lua_concat(" ", lua_concat(lua_call(G.str['GetTeamName'], [_self])[0], lua_call(G.str['ScpArgMsg'], ["GT_STAGE_3_ATK_BUFF"])[0]))), 5]);
        }
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'SoulDuel_ATK', 1, 0, 30000, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GT_STAGE_3_ATK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'mission_groundtower_1')) {
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GT_STAGE_3_ATK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'SoulDuel_ATK']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE74_SUBQ7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE74_SUBQ7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 150, "ALL", 1]); var _obj_list_5179 = tmp[0]; var _obj_cnt_5179 = tmp[1]; tmp = null;
      if (lua_lte(1, _obj_cnt_5179)) {
        var var_5181 = 1, stop_5181 = lua_assertfloat(_obj_cnt_5179);
        for (; var_5181 <= stop_5181; var_5181++) {
          var _i_5181 = var_5181;
          if (lua_eq(lua_tableget(lua_tableget(_obj_list_5179, _i_5181), 'ClassName'), "npc_rokas_6")) {
            if (lua_eq(lua_tableget(lua_tableget(_obj_list_5179, _i_5181), 'SimpleAI'), "TABLE74_SUBQ7_NPC_AI")) {
              var _quest_r_5184 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "TABLELAND_74_SQ8"])[0];
              if (!lua_eq(_quest_r_5184, "COMPLETE")) {
                return [1];
              }
            }
          }
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE74_SUBQ7_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_KATYN_45_3_SQ_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'E_light001_circle']);
      lua_call(G.str['AttachEffect'], [_self, 'E_light001_circle', 3, 'Bottom']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_KATYN_45_3_SQ_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _result_5188 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'KATYN_45_3_SQ_4'])[0];
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_katyn_45_3')) {
        lua_call(G.str['RemoveBuff'], [_self, 'KATYN_45_3_SQ_BUFF']);
      }
      if (lua_eq(_result_5188, 'PROGRESS')) {
        return [0];
      } else if (lua_eq(_result_5188, 'SUCCESS')) {
        return [0];
      } else if (lua_eq(_result_5188, 'COMPLETE')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KATYN_45_3_SQ_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'E_light001_circle']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE74_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE74_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE74_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE71_SUBQ4_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE71_SUBQ4_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, "ALL"]); var _obj_list_5198 = tmp[0]; var _cnt_5198 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5198)) {
        var var_5200 = 1, stop_5200 = lua_assertfloat(_cnt_5198);
        for (; var_5200 <= stop_5200; var_5200++) {
          var _i_5200 = var_5200;
          if (lua_eq(lua_tableget(lua_tableget(_obj_list_5198, _i_5200), 'ClassName'), "HiddenTrigger4")) {
            if (lua_eq(lua_tableget(lua_tableget(_obj_list_5198, _i_5200), 'Dialog'), "TABLE71_POINT1")) {
              lua_call(G.str['PlayEffectLocal'], [lua_tableget(_obj_list_5198, _i_5200), _self, "F_circle019", 0.5]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE71_SUBQ4_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE71_SUBQ4_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE71_SUBQ4_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, "ALL"]); var _obj_list_5206 = tmp[0]; var _cnt_5206 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5206)) {
        var var_5208 = 1, stop_5208 = lua_assertfloat(_cnt_5206);
        for (; var_5208 <= stop_5208; var_5208++) {
          var _i_5208 = var_5208;
          if (lua_eq(lua_tableget(lua_tableget(_obj_list_5206, _i_5208), 'ClassName'), "HiddenTrigger4")) {
            if (lua_eq(lua_tableget(lua_tableget(_obj_list_5206, _i_5208), 'Dialog'), "TABLE71_POINT2")) {
              lua_call(G.str['PlayEffectLocal'], [lua_tableget(_obj_list_5206, _i_5208), _self, "F_circle019", 0.5]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE71_SUBQ4_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE71_SUBQ4_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE71_SUBQ4_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, "ALL"]); var _obj_list_5214 = tmp[0]; var _cnt_5214 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5214)) {
        var var_5216 = 1, stop_5216 = lua_assertfloat(_cnt_5214);
        for (; var_5216 <= stop_5216; var_5216++) {
          var _i_5216 = var_5216;
          if (lua_eq(lua_tableget(lua_tableget(_obj_list_5214, _i_5216), 'ClassName'), "HiddenTrigger4")) {
            if (lua_eq(lua_tableget(lua_tableget(_obj_list_5214, _i_5216), 'Dialog'), "TABLE71_POINT3")) {
              lua_call(G.str['PlayEffectLocal'], [lua_tableget(_obj_list_5214, _i_5216), _self, "F_circle019", 0.5]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE71_SUBQ4_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CORAL_35_2_BINDING'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _count_5221 = lua_call(G.str['GetScpObjectList'], [_self, 'CORAL_35_2_BINDING'])[0];
      if (lua_eq(lua_len(_count_5221), 0)) {
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_5222 = tmp[0]; var _y_5222 = tmp[1]; var _z_5222 = tmp[2]; tmp = null;
        var _mon_5222 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'HiddenTrigger6', _x_5222, _y_5222, _z_5222, lua_call(G.str['GetDirectionByAngle'], [_self])[0], 'Neutral', null])[0];
        lua_call(G.str['AddScpObjectList'], [_self, 'CORAL_35_2_BINDING', _mon_5222]);
        lua_call(G.str['AttachEffect'], [_mon_5222, 'F_ground007', 10, 'BOT']);
      }
      lua_call(G.str['AttachEffect'], [_self, 'I_chain004_mash_loop', 4, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CORAL_35_2_BINDING'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _count_5223 = lua_call(G.str['GetScpObjectList'], [_self, 'CORAL_35_2_BINDING'])[0];
      var _i_5223;
      if (lua_lt(0, lua_len(_count_5223))) {
        var var_5225 = 1, stop_5225 = lua_assertfloat(lua_len(_count_5223));
        for (; var_5225 <= stop_5225; var_5225++) {
          var _i_5225 = var_5225;
          if (lua_eq(lua_tableget(lua_tableget(_count_5223, _i_5225), 'ClassName'), 'HiddenTrigger6')) {
            lua_call(G.str['DetachEffect'], [lua_tableget(_count_5223, _i_5225), 'F_ground007']);
            lua_call(G.str['Kill'], [lua_tableget(_count_5223, _i_5225)]);
          }
        }
      }
      var _checkQ1_5223 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CORAL_35_2_SQ_1'])[0];
      if (lua_eq(_checkQ1_5223, 'PROGRESS')) {
        lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [_self, "SSN_CORAL_35_2_SQ_1", "QuestInfoValue1", 1]);
      }
      lua_call(G.str['DetachEffect'], [_self, 'I_chain004_mash_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CORAL_35_2_SUMMON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CORAL_35_2_SUMMON'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CORAL_35_2_BINDING_R'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_chain004_mash_loop', 4, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CORAL_35_2_BINDING_R'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_chain004_mash_loop']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM41_2_DARKAURA'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke019_dark_loop', 0.5, 1, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM41_2_DARKAURA'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_smoke101_dark', 2, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_PILGRIM41_4_MONWEAK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg1', lua_multiply(lua_tableget(_self, 'Lv'), 10));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), (lua_multiply(lua_tableget(_self, 'Lv'), 10))));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PILGRIM41_4_MONWEAK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'I_smoke013_dark', 0.5, 'TOP']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PILGRIM41_4_MONWEAK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), lua_tableget(_self, 'NumArg1')));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CORAL_32_2_SQ_6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_5238 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MAXPATK'), 0.1)])[0];
      var _matkadd_5238 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MAXMATK'), 0.1)])[0];
      var _defadd_5238 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'DEF'), 0.1)])[0];
      var _mdefadd_5238 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MDEF'), 0.1)])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_5238));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_5238));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_5238));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5238));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_5238]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_5238]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_5238]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_5238]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CORAL_32_2_SQ_6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_coral_32_2")) {
        if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
          return [1];
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CORAL_32_2_SQ_6_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_5244 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_5244 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      var _defadd_5244 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_5244 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_5244));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_5244));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_5244));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_5244));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CORAL_32_2_SQ_8_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CORAL_32_2_SQ_8_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER30_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER30_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_underfortress_30_2')) {
        tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 190, "HiddenTrigger6"]); var _obj_5249 = tmp[0]; var _cnt_5249 = tmp[1]; tmp = null;
        if (lua_lte(1, _cnt_5249)) {
          var var_5251 = 1, stop_5251 = lua_assertfloat(_cnt_5249);
          for (; var_5251 <= stop_5251; var_5251++) {
            var _i_5251 = var_5251;
            if (lua_eq(lua_tableget(lua_tableget(_obj_5249, _i_5251), 'ClassName'), "HiddenTrigger6")) {
              if (lua_eq(lua_tableget(lua_tableget(_obj_5249, _i_5251), 'Tactics'), "UNDER302_EVENT1_MON")) {
                lua_call(G.str['PlayEffect'], [_self, "F_hit_poison_hit_green", 1, 0, null, "MID"]);
                lua_call(G.str['TakeDamage'], [_self, _self, "None", 100, "Poison", "None", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
                return [1];
              }
            }
          }
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER30_2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER30_2_CHECK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hover_5256 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_2_EVENT1_MON_BUFF'])[0];
      if (lua_lte(lua_len(_hover_5256), 0)) {
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_5257 = tmp[0]; var _y_5257 = tmp[1]; var _z_5257 = tmp[2]; tmp = null;
        var _mon_5257 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'HiddenTrigger2', _x_5257, _y_5257, _z_5257, lua_call(G.str['GetDirectionByAngle'], [_self])[0], 'Neutral', 1, G.str['UNDER30_2_EVENT1_HOVER_SET']])[0];
        lua_call(G.str['AddScpObjectList'], [_self, 'UNDER30_2_EVENT1_MON_BUFF', _mon_5257]);
        lua_call(G.str['AttachEffect'], [_mon_5257, 'F_circle002', 2.0, 'TOP']);
        lua_call(G.str['SetNoDamage'], [_mon_5257, 1]);
        lua_call(G.str['HoverAround'], [_mon_5257, _self, 20, 1, 2.0, 1]);
        lua_call(G.str['SetOwner'], [_mon_5257, _self, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER30_2_CHECK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_underfortress_30_2')) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "FD_UNDER30_2_BUFF"])[0], 'YES')) {
          lua_call(G.str['RemoveBuff'], [_self, "FD_UNDER30_2_BUFF"]);
        }
      }
      var _hover_5258 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_2_EVENT1_MON_BUFF'])[0];
      if (lua_lte(lua_len(_hover_5258), 0)) {
        return [0];
      } else {
        var _have_hover_5262;
        var var_5263 = 1, stop_5263 = lua_assertfloat(lua_len(_hover_5258));
        for (; var_5263 <= stop_5263; var_5263++) {
          var _i_5263 = var_5263;
          _have_hover_5262 = lua_tableget(_hover_5258, _i_5263);
        }
        tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 300, "HiddenTrigger6"]); var _obj_5262 = tmp[0]; var _cnt_5262 = tmp[1]; tmp = null;
        if (lua_lte(1, _cnt_5262)) {
          var var_5266 = 1, stop_5266 = lua_assertfloat(_cnt_5262);
          for (; var_5266 <= stop_5266; var_5266++) {
            var _i_5266 = var_5266;
            if (lua_eq(lua_tableget(lua_tableget(_obj_5262, _i_5266), 'ClassName'), "HiddenTrigger6")) {
              if (lua_eq(lua_tableget(lua_tableget(_obj_5262, _i_5266), 'Tactics'), "UNDER302_EVENT1_MON")) {
                if (lua_lt(lua_tableget(lua_tableget(_obj_5262, _i_5266), 'NumArg2'), 1)) {
                  lua_tableset(lua_tableget(_obj_5262, _i_5266), 'NumArg2', lua_add(lua_tableget(lua_tableget(_obj_5262, _i_5266), 'NumArg2'), 1));
                  var _skill_5270 = lua_call(G.str['GetNormalSkill'], [_have_hover_5262])[0];
                  lua_call(G.str['DetachEffect'], [_have_hover_5262, 'F_circle002']);
                  lua_call(G.str['ForceDamage'], [_have_hover_5262, _skill_5270, lua_tableget(_obj_5262, _i_5266), _have_hover_5262, 0, 'MOTION', 'BLOW', 'F_circle002', 0.3, 'arrow_cast', 'F_explosion004_mint', 1, 'arrow_blow', 'SLOW', 140, 1, 0, 0, 0, 1, 1]);
                  lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_Clear", lua_call(G.str['ScpArgMsg'], ["UNDER30_2_EVENT1_MSG1"])[0], 5]);
                  lua_call(G.str['Kill'], [_have_hover_5262]);
                }
              }
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER30_2_CHECK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hover_5271 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_2_EVENT1_MON_BUFF'])[0];
      if (lua_lt(0, lua_len(_hover_5271))) {
        var var_5273 = 1, stop_5273 = lua_assertfloat(lua_len(_hover_5271));
        for (; var_5273 <= stop_5273; var_5273++) {
          var _i_5273 = var_5273;
          lua_call(G.str['DetachEffect'], [lua_tableget(_hover_5271, _i_5273), 'F_circle002']);
          lua_call(G.str['Kill'], [lua_tableget(_hover_5271, _i_5273)]);
        }
      }
      return [];
    })
    G.str['UNDER30_2_EVENT1_HOVER_SET'] = (function (_self) {
      var tmp;
      lua_tableset(_self, 'Name', "UnvisibleName");
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER30_3_LIGHT_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER30_3_LIGHT_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER30_3_LIGHT_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER302_DOLL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_sphere009_violet', 1]);
      var _mspdadd_5279;
      if (lua_eq(lua_tableget(_self, 'ClassName'), "saltisdaughter_green")) {
        _mspdadd_5279 = 25;
      }
      if ((lua_eq(lua_tableget(_self, 'ClassName'), "Colifly_mage_black") || lua_eq(lua_tableget(_self, 'ClassName'), "Colifly_bow_black"))) {
        _mspdadd_5279 = 15;
      }
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 75));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 100));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5279));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", G.str['defadd']]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", G.str['mdefadd']]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5279]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER302_DOLL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere009_violet']);
      var _mspdadd_5282 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 75));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 100));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5282));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER303_EVENT2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      var _obj_5283 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_EFFECT_MON1'])[0];
      if (lua_lt(0, lua_len(_obj_5283))) {
        var var_5285 = 1, stop_5285 = lua_assertfloat(lua_len(_obj_5283));
        for (; var_5285 <= stop_5285; var_5285++) {
          var _i_5285 = var_5285;
          lua_call(G.str['AttachEffect'], [lua_tableget(_obj_5283, _i_5285), "F_levitation032_red_loop", 3, 1, "BOT"]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER303_EVENT2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _mon_5287 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_MON_LIST'])[0];
      if (lua_lte(lua_len(_mon_5287), 0)) {
        lua_call(G.str['SetNoDamage'], [_self, 0]);
        tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL", 1]); var _pc_list_5288 = tmp[0]; var _cnt_5288 = tmp[1]; tmp = null;
        if (lua_lt(0, _cnt_5288)) {
          var var_5290 = 1, stop_5290 = lua_assertfloat(_cnt_5288);
          for (; var_5290 <= stop_5290; var_5290++) {
            var _i_5290 = var_5290;
            if (lua_eq(lua_tableget(lua_tableget(_pc_list_5288, _i_5290), 'ClassName'), "PC")) {
              lua_call(G.str['SendAddOnMsg'], [lua_tableget(_pc_list_5288, _i_5290), "NOTICE_Dm_Clear", lua_call(G.str['ScpArgMsg'], ["UNDER30_3_EVENT2_BUFF_REMOVE"])[0], 5]);
            }
          }
        }
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER303_EVENT2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg1', 0);
      var _obj_5293 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_EFFECT_MON1'])[0];
      if (lua_lt(0, lua_len(_obj_5293))) {
        var var_5295 = 1, stop_5295 = lua_assertfloat(lua_len(_obj_5293));
        for (; var_5295 <= stop_5295; var_5295++) {
          var _i_5295 = var_5295;
          lua_call(G.str['PlayEffect'], [_self, "F_levitation032_red", 1, 1, "BOT"]);
          lua_call(G.str['DetachEffect'], [lua_tableget(_obj_5293, _i_5295), "F_levitation032_red_loop"]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER303_EVENT2_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      var _obj_5297 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_EFFECT_MON2'])[0];
      if (lua_lt(0, lua_len(_obj_5297))) {
        var var_5299 = 1, stop_5299 = lua_assertfloat(lua_len(_obj_5297));
        for (; var_5299 <= stop_5299; var_5299++) {
          var _i_5299 = var_5299;
          lua_call(G.str['AttachEffect'], [lua_tableget(_obj_5297, _i_5299), "F_levitation032_red_loop", 3, 1, "BOT"]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER303_EVENT2_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _mon_5301 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_MON_LIST2'])[0];
      if (lua_lte(lua_len(_mon_5301), 0)) {
        lua_call(G.str['SetNoDamage'], [_self, 0]);
        tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL", 1]); var _pc_list_5302 = tmp[0]; var _cnt_5302 = tmp[1]; tmp = null;
        if (lua_lt(0, _cnt_5302)) {
          var var_5304 = 1, stop_5304 = lua_assertfloat(_cnt_5302);
          for (; var_5304 <= stop_5304; var_5304++) {
            var _i_5304 = var_5304;
            if (lua_eq(lua_tableget(lua_tableget(_pc_list_5302, _i_5304), 'ClassName'), "PC")) {
              lua_call(G.str['SendAddOnMsg'], [lua_tableget(_pc_list_5302, _i_5304), "NOTICE_Dm_Clear", lua_call(G.str['ScpArgMsg'], ["UNDER30_3_EVENT2_BUFF_REMOVE"])[0], 5]);
            }
          }
        }
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER303_EVENT2_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg1', 0);
      var _obj_5307 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_EFFECT_MON2'])[0];
      if (lua_lt(0, lua_len(_obj_5307))) {
        var var_5309 = 1, stop_5309 = lua_assertfloat(lua_len(_obj_5307));
        for (; var_5309 <= stop_5309; var_5309++) {
          var _i_5309 = var_5309;
          lua_call(G.str['PlayEffect'], [_self, "F_levitation032_red", 1, 1, "BOT"]);
          lua_call(G.str['DetachEffect'], [lua_tableget(_obj_5307, _i_5309), "F_levitation032_red_loop"]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_MAPLE_25_3_SQ_90_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MAPLE_25_3_SQ_90_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MAPLE_25_3_SQ_90_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_KATYN10_RP_1_MONBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_light080_blue_loop_attach', 1, 1, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_KATYN10_RP_1_MONBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var __pc_5315 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_5315, null)) {
        if (lua_lt(lua_call(G.str['GetDistance'], [_self, __pc_5315])[0], 200)) {
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KATYN10_RP_1_MONBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_light080_blue_loop_attach']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_KATYN10_RP_1_PCBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_KATYN10_RP_1_PCBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_5320 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'KATYN10_RP_1'])[0];
      if (lua_eq(_result_5320, 'PROGRESS')) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_katyn_10')) {
          return [1];
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_KATYN10_RP_1_PCBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER303_EVENT2_CHECK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER303_EVENT2_CHECK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_underfortress_30_1')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER303_EVENT2_CHECK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER303_EVENT2_REWARD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 85));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 85));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", G.str['patkadd']]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", G.str['matkadd']]);
      var _hover_5330 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_BUFF_MON'])[0];
      if (lua_lte(lua_len(_hover_5330), 0)) {
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_5331 = tmp[0]; var _y_5331 = tmp[1]; var _z_5331 = tmp[2]; tmp = null;
        var _mon_5331 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'HiddenTrigger6', _x_5331, _y_5331, _z_5331, lua_call(G.str['GetDirectionByAngle'], [_self])[0], 'Neutral', 1, G.str['UNDER30_2_EVENT1_HOVER_SET']])[0];
        lua_call(G.str['AddScpObjectList'], [_self, 'UNDER30_3_EVENT2_BUFF_MON', _mon_5331]);
        lua_call(G.str['AttachEffect'], [_mon_5331, 'F_light055_orange', 2, 1, 'TOP']);
        lua_call(G.str['SetNoDamage'], [_mon_5331, 1]);
        lua_call(G.str['HoverAround'], [_mon_5331, _self, 20, 1, 2.0, 1]);
        lua_call(G.str['SetOwner'], [_mon_5331, _self, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER303_EVENT2_REWARD'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healsp_5332 = lua_divide(lua_tableget(_self, 'MSP'), 100);
      if (lua_lt(lua_tableget(_self, 'SP'), lua_tableget(_self, 'MSP'))) {
        if (lua_lt(_healsp_5332, 3)) {
          _healsp_5332 = 3;
        }
        lua_call(G.str['HealSP'], [_self, _healsp_5332, 0]);
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_underfortress_30_3')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER303_EVENT2_REWARD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 85));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 85));
      var _hover_5336 = lua_call(G.str['GetScpObjectList'], [_self, 'UNDER30_3_EVENT2_BUFF_MON'])[0];
      if (lua_lte(0, lua_len(_hover_5336))) {
        var var_5338 = 1, stop_5338 = lua_assertfloat(lua_len(_hover_5336));
        for (; var_5338 <= stop_5338; var_5338++) {
          var _i_5338 = var_5338;
          lua_call(G.str['DetachEffect'], [lua_tableget(_hover_5336, _i_5338), "F_light055_orange"]);
          lua_call(G.str['Kill'], [lua_tableget(_hover_5336, _i_5338)]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_UNDER301_EVENT_FAIL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_UNDER301_EVENT_FAIL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_explosion026_rize_red1", 1]);
      lua_call(G.str['TakeDamage'], [_self, lua_tableget(G.str['obj_list'], G.str['i']), "None", 50, "Melee", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_UNDER301_EVENT_FAIL_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN42_1_SOUL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BRACKEN42_1_SOUL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_smoke026_blue', 0.3, 'BOT']);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN42_1_SOUL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN42_2_SLEEP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN42_2_SLEEP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LIMESTONE_52_1_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LIMESTONE_52_1_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_25_4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'E_light001_circle']);
      lua_call(G.str['AttachEffect'], [_self, 'E_light001_circle', 3, 'Bottom']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_25_4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "id_catacomb_25_4")) {
        if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
          var _heal_5353 = lua_divide(lua_tableget(_self, 'MHP'), 100);
          var _healsp_5353 = lua_divide(lua_tableget(_self, 'MSP'), 100);
          var _sta_5353 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
          if (lua_lt(_heal_5353, 5)) {
            _heal_5353 = 5;
          }
          lua_call(G.str['Heal'], [_self, _heal_5353, 0]);
          if (lua_lt(_healsp_5353, 3)) {
            _healsp_5353 = 3;
          }
          lua_call(G.str['HealSP'], [_self, _healsp_5353, 0]);
          if (lua_lt(_sta_5353, 2)) {
            _sta_5353 = 2;
          }
          lua_call(G.str['AddStamina'], [_self, _sta_5353]);
          return [1];
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_25_4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'E_light001_circle']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_MAPLE_25_3_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic023_red_fire', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MAPLE_25_3_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_5361 = lua_divide(lua_tableget(_self, 'MHP'), 100);
      if (lua_lt(_heal_5361, 5)) {
        _heal_5361 = 5;
      }
      lua_call(G.str['Heal'], [_self, _heal_5361, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MAPLE_25_3_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MAPLE_25_3_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic018_blue_fire', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MAPLE_25_3_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healsp_5365 = lua_divide(lua_tableget(_self, 'MSP'), 100);
      if (lua_lt(_healsp_5365, 3)) {
        _healsp_5365 = 3;
      }
      lua_call(G.str['HealSP'], [_self, _healsp_5365, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MAPLE_25_3_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MAPLE_25_3_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic021_yellow_fire', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MAPLE_25_3_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _sta_5369 = lua_divide(lua_tableget(_self, 'MaxSta'), 100);
      if (lua_lt(_sta_5369, 2)) {
        _sta_5369 = 2;
      }
      lua_call(G.str['AddStamina'], [_self, _sta_5369]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MAPLE_25_3_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LIMESTONE_52_3_PROTECTION'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_light055_blue', 4, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LIMESTONE_52_3_PROTECTION'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_light055_blue']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_LIMESTONE_52_4_HOLYCHARM'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_light029_mint', 1, null, 'MID']);
      lua_call(G.str['AttachEffect'], [_self, 'I_sphere009_green', 1, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_LIMESTONE_52_4_HOLYCHARM'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var __pc_5375 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_5375, null)) {
        if (lua_lt(200, lua_call(G.str['GetDistance'], [__pc_5375, _self])[0])) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LIMESTONE_52_4_HOLYCHARM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var __pc_5378 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(__pc_5378, null)) {
        if (lua_lt(180, lua_call(G.str['GetDistance'], [__pc_5378, _self])[0])) {
          return [0];
        }
        var _follower_5379 = lua_call(G.str['GetScpObjectList'], [__pc_5378, 'LIMESTONE_52_4_MQ_1'])[0];
        var _i_5379;
        if (lua_lt(0, lua_len(_follower_5379))) {
          var var_5382 = 1, stop_5382 = lua_assertfloat(lua_len(_follower_5379));
          for (; var_5382 <= stop_5382; var_5382++) {
            var _i_5382 = var_5382;
            if (lua_eq(lua_tableget(lua_tableget(_follower_5379, _i_5382), 'ClassName'), 'mon_kupole_4')) {
              lua_call(G.str['LookAt'], [lua_tableget(_follower_5379, _i_5382), _self]);
              lua_call(G.str['PlayAnim'], [lua_tableget(_follower_5379, _i_5382), 'atk']);
              var _skill_5384 = lua_call(G.str['GetNormalSkill'], [_self])[0];
              lua_call(G.str['ForceDamage'], [_self, _skill_5384, lua_tableget(_follower_5379, _i_5382), _self, 0, 'MOTION', 'BLOW', 'I_force013_dark', 1, 'arrow_cast', 'I_force080_green_blue', 1, 'arrow_blow', 'SLOW', 50, 1, 0, 0, 0, 1, 1]);
            }
          }
        }
        var _msg_5379 = lua_newtable(['LIMESTONE_52_4_MQ_5_DEBUFF_1', 'LIMESTONE_52_4_MQ_5_DEBUFF_2', 'LIMESTONE_52_4_MQ_5_DEBUFF_3', 'LIMESTONE_52_4_MQ_5_DEBUFF_4', 'LIMESTONE_52_4_MQ_5_DEBUFF_5']);
        var _quest_ssn_5379 = lua_call(G.str['GetSessionObject'], [__pc_5378, 'SSN_LIMESTONE_52_4_MQ_5'])[0];
        lua_call(G.str['ShowBalloonText'], [__pc_5378, lua_tableget(_msg_5379, lua_add(lua_tableget(_quest_ssn_5379, 'QuestInfoValue1'), 1)), 5]);
        lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [__pc_5378, 'SSN_LIMESTONE_52_4_MQ_5', 'QuestInfoValue1', 1]);
      }
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere009_green']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_MISSION_UPHILL_GIMMICK_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_archer_scarecrow_loop_ground', 1.0]);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MISSION_UPHILL_GIMMICK_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MISSION_UPHILL_GIMMICK_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_wizard_slow_shot_ground', 4, 1, "TOP"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MISSION_UPHILL_GIMMICK_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearEffect'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GT24_POISON_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke009_green', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GT24_POISON_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_5390 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _over_5390 = lua_call(G.str['GetBuffOver'], [_self, lua_tableget(_buff, 'ClassName')])[0];
      var _damage_5390 = lua_multiply(lua_multiply(lua_tableget(_self, 'MHP'), _over_5390), 0.05);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _damage_5390, "Poison", "None", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      if (lua_lt(5, _over_5390)) {
        tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 150, 'Law']); var _list_5391 = tmp[0]; var _cnt_5391 = tmp[1]; tmp = null;
        if (lua_lt(0, _cnt_5391)) {
          var _i_5392;
          var var_5393 = 1, stop_5393 = lua_assertfloat(_cnt_5391);
          for (; var_5393 <= stop_5393; var_5393++) {
            var _i_5393 = var_5393;
            if (lua_eq(lua_call(G.str['IsSameActor'], [_self, lua_tableget(_list_5391, _i_5393)])[0], 'NO')) {
              lua_call(G.str['AddBuff'], [lua_tableget(_list_5391, _i_5393), lua_tableget(_list_5391, _i_5393), 'GT24_POISON_DEBUFF', 1, 0, 10000, 1]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GT24_POISON_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke009_green']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GT34_FROSTBITE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var __buff_5397 = lua_call(G.str['GetOver'], [_buff])[0];
      var _red_5397 = lua_subtract(255, (lua_multiply(__buff_5397, 2)));
      var _green_5397 = lua_subtract(255, __buff_5397);
      lua_call(G.str['ObjectColorBlend'], [_self, _red_5397, _green_5397, 255, 255, 1, 1]);
      lua_call(G.str['AttachEffect'], [_self, 'F_hit_ice', 1, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GT34_FROSTBITE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _stack_5398 = 100;
      var _mon_5398 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_lt(lua_call(G.str['GetOver'], [_buff])[0], _stack_5398)) {
        if (!lua_eq(_mon_5398, null)) {
          if (lua_eq(lua_call(G.str['IsMoving'], [_self])[0], 1)) {
            lua_call(G.str['AddBuff'], [_self, _self, 'GT34_FROSTBITE_DEBUFF', 100, 0, 30000, -2]);
          }
        }
      } else if (lua_lte(_stack_5398, lua_call(G.str['GetOver'], [_buff])[0])) {
        if (!lua_eq(_mon_5398, null)) {
          lua_call(G.str['AddBuff'], [_mon_5398, _self, 'GT34_CRYSTALLIZATION_DEBUFF', 1, 0, 30000, 1]);
        } else {
          lua_call(G.str['AddBuff'], [_self, _self, 'GT34_CRYSTALLIZATION_DEBUFF', 1, 0, 30000, 1]);
        }
        lua_call(G.str['RemoveBuff'], [_self, 'GT34_FROSTBITE_DEBUFF']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GT34_FROSTBITE_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GT34_CRYSTALLIZATION_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_explosion086_ice', 0.5, 'MID']);
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GT34_CRYSTALLIZATION_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GT34_CRYSTALLIZATION_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Freeze", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GT39_ZOMBILIZATION_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_tableset(_self, 'NumArg4', 0);
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 100, 200, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GT39_ZOMBILIZATION_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _list_5410 = lua_call(G.str['GetScpObjectList'], [_self, 'GT39_ZOMBILIZATION_ARG'])[0];
      if (!lua_eq(lua_len(_list_5410), 0)) {
        if (lua_lt(lua_tableget(_self, 'NumArg4'), 7)) {
          lua_tableset(_self, 'NumArg4', lua_add(lua_tableget(_self, 'NumArg4'), 1));
        } else if (lua_lte(7, lua_tableget(_self, 'NumArg4'))) {
          tmp = lua_call(G.str['GetPos'], [_self]); var _x_5413 = tmp[0]; var _y_5413 = tmp[1]; var _z_5413 = tmp[2]; tmp = null;
          var _mon_5413 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'Hiddennpc_move', _x_5413, _y_5413, _z_5413, lua_call(G.str['GetDirectionByAngle'], [_self])[0], 'Monster', 1, G.str['GT39_MAKE_ZOMBIE_RUN']])[0];
          lua_call(G.str['AddScpObjectList'], [_mon_5413, 'GT39_MAKE_ZOMBIE_ARG', lua_tableget(_list_5410, 1)]);
          lua_call(G.str['Dead'], [_self]);
        }
      } else {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GT39_ZOMBILIZATION_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      return [];
    })
    G.str['GT39_MAKE_ZOMBIE_RUN'] = (function (_mon) {
      var tmp;
      lua_tableset(_mon, 'Name', 'UnvisibleName');
      lua_tableset(_mon, 'SimpleAI', 'GT39_MAKE_ZOMBIE_AI');
      lua_tableset(_mon, 'HPCount', 5);
      lua_tableset(_mon, 'MSPD_BM', 80);
      return [];
    })
    G.str['GT39_MAKE_ZOMBIE_AI_1'] = (function (_self) {
      var tmp;
      var _tgt_pc_5417 = lua_call(G.str['GetScpObjectList'], [_self, 'GT39_MAKE_ZOMBIE_ARG'])[0];
      if (lua_eq(lua_len(_tgt_pc_5417), 0)) {
        lua_call(G.str['Kill'], [_self]);
      }
      var __pc_5417 = lua_tableget(_tgt_pc_5417, 1);
      if (lua_lt(15, lua_call(G.str['GetDistance'], [_self, __pc_5417])[0])) {
        lua_call(G.str['MoveToTarget'], [_self, __pc_5417, 1]);
        return [1];
      } else {
        var _damage_5420 = lua_multiply(lua_tableget(__pc_5417, 'MHP'), 0.15);
        lua_call(G.str['PlayEffect'], [_self, 'F_explosion026_rize_red2', 1, 'MID']);
        lua_call(G.str['KnockDown'], [__pc_5417, _self, 190, lua_call(G.str['GetAngleTo'], [_self, __pc_5417])[0], 45, 1]);
        lua_call(G.str['TakeDamage'], [_self, __pc_5417, "None", _damage_5420, "Dark", "None", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['Kill'], [_self]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_GT23_SoulDuel_ATK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 155, 255, 155, 255, 1, 1]);
      lua_call(G.str['AddBuff'], [_self, _self, 'SoulDuel_ATK', 1, 0, 10000, 1]);
      lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_scroll", lua_call(G.str['ScpArgMsg'], ["GTOWER23_DEAD_MSG_1"])[0], 5]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GT23_SoulDuel_ATK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GT23_SoulDuel_ATK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      lua_call(G.str['RemoveBuff'], [_self, 'SoulDuel_ATK']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN432_SUBQ_MON_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN432_SUBQ_MON_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN433_SUBQ3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "I_smoke007_green", 1, "MID", 0, 0, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BRACKEN433_SUBQ3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_5427 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'BRACKEN43_3_SQ4'])[0];
      if (!lua_eq(_result_5427, 'PROGRESS')) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_bracken_43_3')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN433_SUBQ3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_smoke007_green"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN433_SUBQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN433_SUBQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN434_SUBQ_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BRACKEN434_SUBQ_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buff_5435 = lua_call(G.str['GetBuffByName'], [_self, "BRACKEN434_SUBQ_BUFF1"])[0];
      if (!lua_eq(_buff_5435, null)) {
        var _buff_stack_5436 = lua_call(G.str['GetOver'], [_buff_5435])[0];
        if (lua_lt(_buff_stack_5436, 5)) {
          lua_call(G.str['PlayEffect'], [_self, "F_light015_violet2", 1, "BOT"]);
          lua_call(G.str['AddBuff'], [_self, _self, "BRACKEN434_SUBQ_BUFF1", 1, 0, 8000, 1]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN434_SUBQ_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BRACKEN431_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_bg_light008_yellow2", 1, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BRACKEN431_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'NumArg2'), 4)) {
        lua_tableset(_self, 'NumArg2', lua_add(lua_tableget(_self, 'NumArg2'), 1));
      } else {
        lua_call(G.str['PlayEffect'], [_self, "F_bg_light008_yellow2", 1, "BOT"]);
        lua_tableset(_self, 'NumArg2', 0);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BRACKEN431_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DCAPITAL_20_5_SQ_60_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DCAPITAL_20_5_SQ_60_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DCAPITAL_20_5_SQ_90_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DCAPITAL_20_5_SQ_90_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DCAPITAL_20_6_SQ_80_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DCAPITAL_20_6_SQ_80_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DCAPITAL_20_6_SQ_100_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DCAPITAL_20_6_SQ_100_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WHITETREES23_1_SQ06_IMPETUS'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke013_dark3', 1, "MID"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WHITETREES23_1_SQ06_IMPETUS'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_smoke013_dark3"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_WHITETREES23_1_SQ12_BOSSHP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WHITETREES23_1_SQ12_BOSSHP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(0.9, lua_call(G.str['GetHpPercent'], [_self])[0])) {
        G.str['d_hp'] = lua_multiply(lua_divide(lua_tableget(_self, 'MHP'), 5), 2);
        lua_call(G.str['AddHP'], [_self, lua_unm(G.str['d_hp'])]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WHITETREES23_1_SQ12_BOSSHP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_NECROMANCER7_1_ITEM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_force019_pink', 2, "BOT"]);
      lua_call(G.str['AttachEffect'], [_self, 'F_ground12_red', 2, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_NECROMANCER7_1_ITEM_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_force019_pink"]);
      lua_call(G.str['DetachEffect'], [_self, "F_ground12_red"]);
      lua_call(G.str['Kill'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_NECROMANCER7_1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_force036_green', 5, "MID"]);
      lua_call(G.str['AttachEffect'], [_self, 'F_ground008_green', 3, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_NECROMANCER7_1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_NECROMANCER7_1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_spread_out037_violet_ice_leaf", 2.5, 1, "MID", 1]);
      lua_call(G.str['DetachEffect'], [_self, "I_force036_green"]);
      lua_call(G.str['DetachEffect'], [_self, "F_ground008_green"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1705_Schwarzereiter_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_5463 = 3000;
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_5463));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1705_Schwarzereiter_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_5464 = 3000;
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_5464));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Haste_Buff_Evnet'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5465 = 8;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5465));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD_Haste_Buff_Evnet", _mspdadd_5465]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Haste_Buff_Evnet'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5466 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD_Haste_Buff_Evnet"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5466));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1705_Corsair_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5467 = 5;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5467));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD_Event_1705_Corsair_Potion_Buff", _mspdadd_5467]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1705_Corsair_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5468 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD_Event_1705_Corsair_Potion_Buff"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5468));
      return [];
    })
    G.str['SCR_BUFF_ENTER_AroundHealHP_Dot_Event'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        return [];
      }
      lua_call(G.str['SCR_AROUNDHEAL_BUFF_UPDATE'], [_self, 50, 'HP', 600, 5]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AroundHealHP_Dot_Event'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        return [1];
      }
      lua_call(G.str['SCR_AROUNDHEAL_BUFF_UPDATE'], [_self, 50, 'HP', 600, 5]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AroundHealHP_Dot_Event'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_AroundHealSP_Dot_Event'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        return [];
      }
      lua_call(G.str['SCR_AROUNDHEAL_BUFF_UPDATE'], [_self, 50, 'SP', 200, 5]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AroundHealSP_Dot_Event'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        return [1];
      }
      lua_call(G.str['SCR_AROUNDHEAL_BUFF_UPDATE'], [_self, 50, 'SP', 200, 5]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AroundHealSP_Dot_Event'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_AROUNDHEAL_BUFF_UPDATE'] = (function (_self, _dist, _healtype, _healValue, _maxhealCount) {
      var tmp;
      tmp = lua_call(G.str['GetWorldObjectList'], [_self, "PC", _dist]); var _objList_5479 = tmp[0]; var _objCnt_5479 = tmp[1]; tmp = null;
      if (lua_eq(_healtype, 'HP')) {
        lua_call(G.str['Heal'], [_self, _healValue, 0]);
      } else if (lua_eq(_healtype, 'SP')) {
        lua_call(G.str['HealSP'], [_self, _healValue, 0]);
      }
      if (lua_lt(0, _objCnt_5479)) {
        var _pcList_5482 = lua_newtable();
        var var_5483 = 1, stop_5483 = lua_assertfloat(_objCnt_5479);
        for (; var_5483 <= stop_5483; var_5483++) {
          var _i_5483 = var_5483;
          var _obj_5484 = lua_tableget(_objList_5479, _i_5483);
          if ((lua_eq(lua_tableget(_obj_5484, 'ClassName'), 'PC') && lua_eq(lua_call(G.str['IsSameActor'], [_self, _obj_5484])[0], 'NO'))) {
            lua_tableset(_pcList_5482, lua_add(lua_len(_pcList_5482), 1), _obj_5484);
          }
        }
        if (lua_lt(0, lua_len(_pcList_5482))) {
          var _maxIndex_5486 = lua_len(_pcList_5482);
          var var_5487 = 1, stop_5487 = lua_assertfloat(lua_subtract(_maxIndex_5486, 1));
          for (; var_5487 <= stop_5487; var_5487++) {
            var _i_5487 = var_5487;
            var var_5489 = lua_assertfloat(lua_add(_i_5487, 1)), stop_5489 = lua_assertfloat(_maxIndex_5486);
            for (; var_5489 <= stop_5489; var_5489++) {
              var _x_5489 = var_5489;
              if (lua_lt(lua_divide(lua_tableget(lua_tableget(_pcList_5482, _x_5489), 'HP'), lua_tableget(lua_tableget(_pcList_5482, _x_5489), 'MHP')), lua_divide(lua_tableget(lua_tableget(_pcList_5482, _i_5487), 'HP'), lua_tableget(lua_tableget(_pcList_5482, _i_5487), 'MHP')))) {
                var _obj_5491 = lua_tableget(_pcList_5482, _i_5487);
                lua_tableset(_pcList_5482, _i_5487, lua_tableget(_pcList_5482, _x_5489));
                lua_tableset(_pcList_5482, _x_5489, _obj_5491);
              }
            }
          }
          if (lua_lt(0, lua_len(_pcList_5482))) {
            var _pcCount_5492 = 0;
            var var_5493 = 1, stop_5493 = lua_assertfloat(lua_len(_pcList_5482));
            for (; var_5493 <= stop_5493; var_5493++) {
              var _i_5493 = var_5493;
              if (lua_lt(_pcCount_5492, _maxhealCount)) {
                if (lua_eq(_healtype, 'HP')) {
                  lua_call(G.str['Heal'], [lua_tableget(_pcList_5482, _i_5493), _healValue, 0]);
                } else if (lua_eq(_healtype, 'SP')) {
                  lua_call(G.str['HealSP'], [lua_tableget(_pcList_5482, _i_5493), _healValue, 0]);
                }
              } else {
                break;
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_WARLOCK_8_1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_WARLOCK_8_1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
        lua_call(G.str['PlayEffect'], [_self, "F_spread_in005_dark", 0.5, 0, "BOT"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_FEATHERFOOT_8_DEBUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_pattern007_dark_loop", 1.5, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_FEATHERFOOT_8_DEBUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_FEATHERFOOT_8_DEBUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_hit003_light_dark_blue", 0.7, 0, "BOT"]);
      lua_call(G.str['DetachEffect'], [_self, "F_pattern007_dark_loop"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_FEATHERFOOT_8_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_FEATHERFOOT_8_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_circle020_light", 2.5, 1, "BOT", 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_FEATHERFOOT_8_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_1_DAOSHI_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_ground008_red", 3, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_1_DAOSHI_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_burstup027_fire1", 6, 1, "BOT", 1]);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 50, "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_1_DAOSHI_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_ground008_red"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_1_DAOSHI_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_ground008_blue", 3, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_1_DAOSHI_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_explosion080_ice", 1.9, 1, "BOT", 1]);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 50, "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_1_DAOSHI_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_ground008_blue"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_1_DAOSHI_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_ground008_yellow", 3, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_1_DAOSHI_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, "F_rize012_green_water", 1, 1, "BOT", 1]);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 50, "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_1_DAOSHI_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_ground008_yellow"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_3_DRUID_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_smoke019_dark_loop", 0.5, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_3_DRUID_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_smoke019_dark_loop"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_ENCHANTER_8_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_ENCHANTER_8_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_INQUGITOR_8_1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_smoke143_dark_red_loop", 0.8, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_INQUGITOR_8_1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_smoke143_dark_red_loop"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_MUSKETEER_8_1_BUFF_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_MUSKETEER_8_1_BUFF_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LIMESTONECAVE_52_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LIMESTONECAVE_52_1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_MFL_NODAMAGE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MFL_NODAMAGE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HT_3CMLAKE_84_BUCKET2_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_light013_spark', 3, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HT_3CMLAKE_84_BUCKET2_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke124_blue2', 0.5, 'BOT']);
      lua_call(G.str['AddStamina'], [_self, -500]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HT_3CMLAKE_84_BUCKET2_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveEffect'], [_self, 'F_smoke124_blue2', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HT_KLAPEDA_CAT_EMOTION'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_emoticon002', 3, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HT_KLAPEDA_CAT_EMOTION'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HT_KLAPEDA_CAT_EMOTION'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon002', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HT_CATACOMB_04_SKULL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_emoticon006', 3, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HT_CATACOMB_04_SKULL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HT_CATACOMB_04_SKULL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon006', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_LOWLV_EYEOFBAIGA_SQ_40_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LOWLV_EYEOFBAIGA_SQ_40_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LOWLV_EYEOFBAIGA_SQ_50_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke038_blue', 1]);
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 255, 180, 1, 3]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_LOWLV_EYEOFBAIGA_SQ_50_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_5541 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'LOWLV_EYEOFBAIGA_SQ_50'])[0];
      var _pc_layer_5541 = lua_call(G.str['GetLayer'], [_self])[0];
      if (lua_eq(_result_5541, 'PROGRESS')) {
        if (!lua_eq(_pc_layer_5541, 0)) {
          return [1];
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LOWLV_EYEOFBAIGA_SQ_50_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke038_blue']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE281_HIDDENQ1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE281_HIDDENQ1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE281_HIDDENQ1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE281_HIDDENQ1_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE281_HIDDENQ1_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE281_HIDDENQ1_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TABLE281_HIDDENQ1_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TABLE281_HIDDENQ1_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TABLE281_HIDDENQ1_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GR_CHAPEL_1_S7_RN_BOSS_RAGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patk_add_5556 = lua_multiply(lua_multiply(lua_tableget(_self, 'PATK_BM'), _over), 0.02);
      var _matk_add_5556 = lua_multiply(lua_multiply(lua_tableget(_self, 'MATK_BM'), _over), 0.01);
      var _mdef_add_5556 = lua_multiply(lua_multiply(lua_tableget(_self, 'MDEF_BM'), _over), 0.01);
      var _def_add_5556 = lua_multiply(lua_multiply(lua_tableget(_self, 'DEF_BM'), _over), 0.02);
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patk_add_5556));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matk_add_5556));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdef_add_5556));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _def_add_5556));
      lua_call(G.str['SetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_PATK", _patk_add_5556]);
      lua_call(G.str['SetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_MATK", _matk_add_5556]);
      lua_call(G.str['SetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_MDEF", _mdef_add_5556]);
      lua_call(G.str['SetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_DEF", _def_add_5556]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GR_CHAPEL_1_S7_RN_BOSS_RAGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patk_add_5557 = lua_call(G.str['GetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_PATK"])[0];
      var _matk_add_5557 = lua_call(G.str['GetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_MATK"])[0];
      var _mdef_add_5557 = lua_call(G.str['GetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_MDEF"])[0];
      var _def_add_5557 = lua_call(G.str['GetExProp'], [_buff, "GR_CHAPEL_1_S7_RAGE_DEF"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patk_add_5557));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matk_add_5557));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdef_add_5557));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _def_add_5557));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GR_CHAPEL_1_S7_RN_BOSS_HEAL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GR_CHAPEL_1_S7_RN_BOSS_HEAL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetHpPercent'], [_self])[0], 1)) {
        var _healHp_5560 = lua_multiply(lua_tableget(_self, 'MHP'), 0.04);
        lua_call(G.str['AddHP'], [_self, _healHp_5560]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GR_CHAPEL_1_S7_RN_BOSS_HEAL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GR_CHAPEL_1_S7_RN_BOSS_RECALL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GR_CHAPEL_1_S7_RN_BOSS_RECALL'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 300, 'PC']); var _list_5563 = tmp[0]; var _cnt_5563 = tmp[1]; tmp = null;
      if (lua_lt(0, _cnt_5563)) {
        var _i_5564;
        var var_5565 = 1, stop_5565 = lua_assertfloat(_cnt_5563);
        for (; var_5565 <= stop_5565; var_5565++) {
          var _i_5565 = var_5565;
          if (lua_eq(_i_5565, 3)) {
            return [1];
          }
          tmp = lua_call(G.str['GetPos'], [lua_tableget(_list_5563, _i_5565)]); var _x_5566 = tmp[0]; var _y_5566 = tmp[1]; var _z_5566 = tmp[2]; tmp = null;
          var _mon_5566 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'HiddenTrigger6', _x_5566, _y_5566, _z_5566, 0, 'Neutral', 1, G.str['GR_CHAPEL_1_S7_RN_BOSS_RECALL_RUN']])[0];
          lua_call(G.str['AddScpObjectList'], [_self, 'BOSS_RECALL', _mon_5566]);
          lua_call(G.str['AddScpObjectList'], [_mon_5566, 'BOSS_RECALL', _self]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GR_CHAPEL_1_S7_RN_BOSS_RECALL'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['GR_CHAPEL_1_S7_RN_BOSS_RECALL_RUN'] = (function (_mon) {
      var tmp;
      lua_tableset(_mon, 'SimpleAI', 'GR_CHAPEL_1_S7_RN_BOSS_RECALL_RUN_1');
      return [];
    })
    G.str['GR_CHAPEL_1_S7_RN_BOSS_RECALL_IN'] = (function (_self) {
      var tmp;
      var _obj_5570 = lua_call(G.str['GetScpObjectList'], [_self, 'BOSS_RECALL'])[0];
      var _boss_5570 = null;
      if (lua_eq(lua_len(_obj_5570), 0)) {
        lua_call(G.str['Kill'], [_self]);
      } else {
        _boss_5570 = lua_tableget(_obj_5570, 1);
      }
      if (lua_lt(lua_tableget(_self, 'NumArg4'), 6)) {
        lua_tableset(_self, 'NumArg4', lua_add(lua_tableget(_self, 'NumArg4'), 1));
        return [0];
      }
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 100, 'PC']); var _list_5570 = tmp[0]; var _cnt_5570 = tmp[1]; tmp = null;
      var _zoneID_5570 = lua_call(G.str['GetZoneInstID'], [_self])[0];
      if (lua_lt(0, _cnt_5570)) {
        var _i_5574;
        var var_5575 = 1, stop_5575 = lua_assertfloat(_cnt_5570);
        for (; var_5575 <= stop_5575; var_5575++) {
          var _i_5575 = var_5575;
          tmp = lua_call(G.str['GetActorByDirAnglePos'], [_self, lua_call(G.str['GetDirectionByAngle'], [_boss_5570])[0], 50]); var _x_5576 = tmp[0]; var _y_5576 = tmp[1]; var _z_5576 = tmp[2]; tmp = null;
          if (lua_eq(lua_call(G.str['IsValidPos'], [_zoneID_5570, _x_5576, _y_5576, _z_5576])[0], 'YES')) {
            if ((!lua_eq(lua_tableget(_list_5570, _i_5575), null) && !lua_eq(lua_call(G.str['IsDead'], [lua_tableget(_list_5570, _i_5575)])[0], 1))) {
              lua_call(G.str['SetPos'], [lua_tableget(_list_5570, _i_5575), _x_5576, lua_add(_y_5576, 25), _z_5576]);
            }
          }
        }
      }
      lua_call(G.str['Kill'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_MISSION_GELE_01_S5_WHIRLWIND'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'HIT', 1]);
      lua_call(G.str['SpinObject'], [_self, 0, -1, 0.15, 0.1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MISSION_GELE_01_S5_WHIRLWIND'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 1]);
      lua_call(G.str['SpinObject'], [_self, 0, 0, 0, 2]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HT2_ORCHARD_32_3_FRUITS_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_emoticon004', 3, 'TOP']);
      lua_call(G.str['AddStamina'], [_self, -2000]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HT2_ORCHARD_32_3_FRUITS_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HT2_ORCHARD_32_3_FRUITS_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon004', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HT2_MAPLE_25_1_BONFIRE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, lua_concat('I_emoticon00', lua_call(G.str['IMCRandom'], [2, 6])[0]), 2, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HT2_MAPLE_25_1_BONFIRE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HT2_MAPLE_25_1_BONFIRE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon002', 1]);
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon003', 1]);
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon004', 1]);
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon005', 1]);
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon006', 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_CASTLE_01_RN_STONE_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GM_CASTLE_01_RN_STONE_1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, lua_tableget(_buff, 'ClassName')])[0], 'YES')) {
        var _over_5589 = lua_call(G.str['GetBuffOver'], [_self, lua_tableget(_buff, 'ClassName')])[0];
        if (lua_lte(_over_5589, 1)) {
          return [0];
        }
        lua_call(G.str['AddBuff'], [_self, _self, lua_tableget(_buff, 'ClassName'), 1, 0, 0, -1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_CASTLE_01_RN_STONE_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_CASTLE_01_RN_STONE_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Stonize", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_CASTLE_01_RN_STONE_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "Stonize", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_CASTLE_01_RN_DETECTOR_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _switch_5594 = lua_call(G.str['GetExProp'], [_self, 'ON_TRG'])[0];
      if ((lua_eq(_switch_5594, 0) || lua_eq(_switch_5594, null))) {
        lua_call(G.str['AttachEffect'], [_self, 'F_light055_green', 5, 'MID']);
      } else if (lua_eq(_switch_5594, '1')) {
        lua_call(G.str['AttachEffect'], [_self, 'F_light055_red', 5, 'MID']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_CASTLE_01_RN_DETECTOR_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_light055_red']);
      lua_call(G.str['DetachEffect'], [_self, 'F_light055_green']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN39_2_SQ07_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke009_green', 1.0, 'BOT']);
      lua_call(G.str['ObjectColorBlend'], [_self, 155.0, 255.0, 155.0, 255.0, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_THORN39_2_SQ07_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _over_5599 = lua_call(G.str['GetBuffOver'], [_self, lua_tableget(_buff, 'ClassName')])[0];
      var _damage_5599 = lua_multiply(lua_multiply(lua_tableget(_self, 'MHP'), _over_5599), 0.05);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", _damage_5599, "Poison", "None", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      if (lua_lte(5, _over_5599)) {
        lua_call(G.str['RemoveBuff'], [_self, 'THORN39_2_SQ07_DEBUFF']);
        lua_call(G.str['AddBuff'], [_self, _self, 'THORN39_2_SQ07_DEBUFF', 1, 0, 20000, 1]);
        return [1];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN39_2_SQ07_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'I_smoke009_green']);
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 255.0, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_THORN39_1_SQ04_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_THORN39_1_SQ04_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHATHEDRAL54_HQ1_UNLOCK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHATHEDRAL54_HQ1_UNLOCK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Cryomancer_Freeze"])[0], "YES")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHATHEDRAL54_HQ1_UNLOCK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHATHEDRAL54_HQ1_PRE_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_smoke011_blue", 1, "MID"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHATHEDRAL54_HQ1_PRE_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _pc_sObj_5609 = lua_call(G.str['GetSessionObject'], [_self, "SSN_CHATHEDRAL54_HQ1_UNLOCK"])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "campfire_Buff"])[0], "YES")) {
        if (!lua_eq(_pc_sObj_5609, null)) {
          tmp = lua_call(G.str['GetWorldObjectList'], [_self, "MON", 100]); var _obj_5611 = tmp[0]; var _list_5611 = tmp[1]; tmp = null;
          if (lua_lte(1, _list_5611)) {
            var var_5613 = 1, stop_5613 = lua_assertfloat(_list_5611);
            for (; var_5613 <= stop_5613; var_5613++) {
              var _i_5613 = var_5613;
              if (lua_eq(lua_tableget(lua_tableget(_obj_5611, _i_5613), 'ClassName'), "npc_saule_female_1")) {
                if (lua_eq(lua_tableget(lua_tableget(_obj_5611, _i_5613), 'Dialog'), "CHATHEDRAL54_SQ01_PART1")) {
                  lua_tableset(_pc_sObj_5609, 'Goal1', 1);
                  lua_call(G.str['SaveSessionObject'], [_self, _pc_sObj_5609]);
                  lua_call(G.str['Chat'], [lua_tableget(_obj_5611, _i_5613)].concat(lua_call(G.str['ScpArgMsg'], ['CHATHEDRAL54_HIDDENQ1_MSG2'])));
                  lua_call(G.str['ShowBalloonText'], [_self, "CHATHEDRAL54_HIDDENQ1_DLG1", 5]);
                  return [0];
                }
              }
            }
            return [0];
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHATHEDRAL54_HQ1_PRE_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_smoke011_blue"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB382_HIDDEN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB382_HIDDEN_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HT3_SIAULIAI_46_4_DRUM_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_emoticon004', 3, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HT3_SIAULIAI_46_4_DRUM_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HT3_SIAULIAI_46_4_DRUM_DEBUFF01'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveEffect'], [_self, 'I_emoticon004']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UNDER68_MQ4_ITEM1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UNDER68_MQ4_ITEM1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UNDER68_MQ4_ITEM1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_RCG_RAVAGE_HOST_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SoulDuel_DEF'])[0], 'NO')) {
        lua_call(G.str['AddBuff'], [_self, _self, 'SoulDuel_DEF', 100, 0, 15000, 1]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'RCG_RAVAGE_HOST_2'])[0], 'NO')) {
        lua_call(G.str['AddBuff'], [_self, _self, 'RCG_RAVAGE_HOST_2', 100, 0, 15000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RCG_RAVAGE_HOST_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SoulDuel_DEF'])[0], 'YES')) {
        lua_call(G.str['RemoveBuff'], [_self, 'SoulDuel_DEF']);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_RCG_RAVAGE_HOST_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 250, 'PC']); var _list_5631 = tmp[0]; var _cnt_5631 = tmp[1]; tmp = null;
      var __pc_5631;
      if (lua_lt(0, _cnt_5631)) {
        var _i_5632;
        var var_5633 = 1, stop_5633 = lua_assertfloat(_cnt_5631);
        for (; var_5633 <= stop_5633; var_5633++) {
          var _i_5633 = var_5633;
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_list_5631, _i_5633), 'RCG_RAVAGE_HOST_2'])[0], 'NO')) {
            lua_call(G.str['AddBuff'], [_self, lua_tableget(_list_5631, _i_5633), 'RCG_RAVAGE_HOST_2', 100, 0, 10000, 1]);
            __pc_5631 = lua_tableget(_list_5631, _i_5633);
            break;
          }
        }
      }
      if (!lua_eq(__pc_5631, null)) {
        var _zoneID_5636 = lua_call(G.str['GetZoneInstID'], [_self])[0];
        tmp = lua_call(G.str['GetLayerPCList'], [_zoneID_5636].concat(lua_call(G.str['GetLayer'], [_self]))); var _l_list_5636 = tmp[0]; var _l_cnt_5636 = tmp[1]; tmp = null;
        if (lua_lt(0, _l_cnt_5636)) {
          var _i_5637;
          var var_5638 = 1, stop_5638 = lua_assertfloat(_l_cnt_5636);
          for (; var_5638 <= stop_5638; var_5638++) {
            var _i_5638 = var_5638;
            lua_call(G.str['SendAddOnMsg'], [lua_tableget(_l_list_5636, _i_5638), "NOTICE_Dm_scroll", lua_concat(lua_tableget(__pc_5631, 'Name'), lua_call(G.str['ScpArgMsg'], ["RCG_RAVAGE_HOST_2_MSG"])[0]), 10]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RCG_RAVAGE_HOST_2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'RCG_RAVAGE_HOST_2'])[0], 'YES')) {
        lua_call(G.str['RemoveBuff'], [_self, 'RCG_RAVAGE_HOST_2']);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CASTLE203_KQ_1_CHARGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _cnt_5642 = lua_call(G.str['GetOver'], [_buff])[0];
      lua_call(G.str['SendAddOnMsg'], [_self, 'NOTICE_Dm_scroll', lua_concat(_cnt_5642, lua_concat(' / 15 {nl}', lua_call(G.str['ScpArgMsg'], ['KQ_BUFFGETHER_MSG_PRG_1'])[0])), 8]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CASTLE203_KQ_1_CHARGE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_5643 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'CASTLE203_KQ_1'])[0];
      if ((lua_eq(_result_5643, 'PROGRESS') || lua_eq(_result_5643, 'SUCCESS'))) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CASTLE203_KQ_1_CHARGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FTOWER691_KQ_1_CHARGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _cnt_5646 = lua_call(G.str['GetOver'], [_buff])[0];
      lua_call(G.str['SendAddOnMsg'], [_self, 'NOTICE_Dm_scroll', lua_concat(_cnt_5646, lua_concat(' / 15 {nl}', lua_call(G.str['ScpArgMsg'], ['KQ_BUFFGETHER_MSG_PRG_1'])[0])), 8]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FTOWER691_KQ_1_CHARGE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _result_5647 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'FTOWER691_KQ_1'])[0];
      if ((lua_eq(_result_5647, 'PROGRESS') || lua_eq(_result_5647, 'SUCCESS'))) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FTOWER691_KQ_1_CHARGE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FANTASYLIB481_SQ_1_SIGN'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'I_smoke_red2_loop', 2, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FANTASYLIB481_SQ_1_SIGN'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_85_MQ_09_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SkillCancel'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_85_MQ_09_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_85_SQ_02_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_light094_blue_loop2', 3, 'TOP']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_85_SQ_02_STUN'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_light094_blue_loop2']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_85_SQ_02_FRENZY'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_5656 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_5656, null)) {
        lua_call(G.str['InsertHate'], [_self, _caster_5656, 99999]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_F_3CMLAKE_85_SQ_02_FRENZY'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_5658 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_5658, null)) {
        if (lua_lte(lua_call(G.str['GetDistance'], [_self, _caster_5658])[0], 200)) {
          lua_call(G.str['InsertHate'], [_self, _caster_5658, 9999]);
          return [1];
        } else {
          return [0];
        }
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_85_SQ_02_FRENZY'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_86_MQ_03_TRANSFORM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_F_3CMLAKE_86_MQ_03_TRANSFORM'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_5665 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'F_3CMLAKE_86_MQ_03'])[0];
      if (((lua_eq(_result_5665, 'IMPPOSIBLE') || lua_eq(_result_5665, 'POSSIBLE')) || lua_eq(_result_5665, 'COMPLETE'))) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_3cmlake_86')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_86_MQ_03_TRANSFORM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 1]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_86_MQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_86_MQ_04_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_3CMLAKE_86_MQ_04_TRANSFORM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_F_3CMLAKE_86_MQ_04_TRANSFORM'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [0];
      }
      var _result_5673 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'F_3CMLAKE_86_MQ_04'])[0];
      if (((lua_eq(_result_5673, 'IMPPOSIBLE') || lua_eq(_result_5673, 'POSSIBLE')) || lua_eq(_result_5673, 'COMPLETE'))) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'f_3cmlake_86')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_3CMLAKE_86_MQ_04_TRANSFORM'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, 'ASTD', 1]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      lua_call(G.str['TransformToMonster'], [_self, "None", "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_80_HASTE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_80_HASTE'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _ZoneNameCheck_5679 = lua_call(G.str['GetZoneName'], [_self])[0];
      if (((lua_eq(_ZoneNameCheck_5679, 'd_catacomb_80_1') || lua_eq(_ZoneNameCheck_5679, 'd_catacomb_80_2')) || lua_eq(_ZoneNameCheck_5679, 'd_catacomb_80_3'))) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_80_HASTE'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_80_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_80_ATK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _ZoneNameCheck_5683 = lua_call(G.str['GetZoneName'], [_self])[0];
      if (((lua_eq(_ZoneNameCheck_5683, 'd_catacomb_80_1') || lua_eq(_ZoneNameCheck_5683, 'd_catacomb_80_2')) || lua_eq(_ZoneNameCheck_5683, 'd_catacomb_80_3'))) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_80_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CATACOMB_80_MATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHR_BM', lua_add(lua_tableget(_self, 'MHR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CATACOMB_80_MATK'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _ZoneNameCheck_5687 = lua_call(G.str['GetZoneName'], [_self])[0];
      if (((lua_eq(_ZoneNameCheck_5687, 'd_catacomb_80_1') || lua_eq(_ZoneNameCheck_5687, 'd_catacomb_80_2')) || lua_eq(_ZoneNameCheck_5687, 'd_catacomb_80_3'))) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CATACOMB_80_MATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MHR_BM', lua_subtract(lua_tableget(_self, 'MHR_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1706_Doppelsoeldner_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 100));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1706_Doppelsoeldner_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 100));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Event_1706_Monk_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 100));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Event_1706_Monk_Potion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 100));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_3CMLAKE262_SQ11_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 66.0, 252.0, 233.0, 255.0, 1, 1]);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 20));
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), 20));
      lua_call(G.str['AttachEffect'], [_self, 'F_drop_water001_alpha', 1, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_3CMLAKE262_SQ11_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['TakeDamage'], [_self, _self, "None", 100, "Melee", "None", "AbsoluteDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_3CMLAKE262_SQ11_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_drop_water001_alpha']);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 20));
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_ENTER_F_CO_OP_FINAL_MSPD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5697 = 100;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5697));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5697]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_F_CO_OP_FINAL_MSPD'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5698 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5698));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_STARTOWER762_EVENT2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_STARTOWER762_EVENT2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_STARTOWER762_EVENT4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FD_STARTOWER762_EVENT4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_startower_76_2')) {
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_STARTOWER762_EVENT4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FD_STARTOWER762_EVENT4_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_explosion026_rize_green', 0.5, 'TOP']);
      var _mspdadd_5706 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.50);
      var _patkadd_5706 = (lua_divide(lua_tableget(_self, 'Lv'), 3));
      var _matkadd_5706 = (lua_divide(lua_tableget(_self, 'Lv'), 3));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5706));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_5706));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_5706));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5706]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_5706]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_5706]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FD_STARTOWER762_EVENT4_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5707 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      var _patkadd_5707 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_5707 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5707));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_5707));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_5707));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_1_SUBQ2_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_1_SUBQ2_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_1_SUBQ2_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['KILL_BLEND'], [_self, 2, 1]);
      lua_call(G.str['PlayEffect'], [_self, "I_smoke054_white", 2, 1, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_1_SUBQ6_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_1_SUBQ6_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_1_SUBQ6_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ3_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ3_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_whitetrees_22_3")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ3_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _quest_5717 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "WTREES22_3_SQ3"])[0];
      tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL"]); var _list_5717 = tmp[0]; var _cnt_5717 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5717)) {
        var var_5719 = 1, stop_5719 = lua_assertfloat(_cnt_5717);
        for (; var_5719 <= stop_5719; var_5719++) {
          var _i_5719 = var_5719;
          if (lua_eq(lua_tableget(lua_tableget(_list_5717, _i_5719), 'ClassName'), "npc_foot_hold")) {
            if (lua_eq(lua_tableget(lua_tableget(_list_5717, _i_5719), 'Dialog'), "WTREES22_3_SUBQ3_NPC1")) {
              lua_call(G.str['PlayAnimLocal'], [lua_tableget(_list_5717, _i_5719), _self, "pull", 1]);
            }
          }
        }
      }
      if (lua_eq(_quest_5717, "PROGRESS")) {
        lua_call(G.str['UnHideNPC'], [_self, "WTREES22_3_SUBQ3_SUBNPC1"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ3_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ3_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_whitetrees_22_3")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ3_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _quest_5727 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "WTREES22_3_SQ3"])[0];
      tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL"]); var _list_5727 = tmp[0]; var _cnt_5727 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5727)) {
        var var_5729 = 1, stop_5729 = lua_assertfloat(_cnt_5727);
        for (; var_5729 <= stop_5729; var_5729++) {
          var _i_5729 = var_5729;
          if (lua_eq(lua_tableget(lua_tableget(_list_5727, _i_5729), 'ClassName'), "npc_foot_hold")) {
            if (lua_eq(lua_tableget(lua_tableget(_list_5727, _i_5729), 'Dialog'), "WTREES22_3_SUBQ3_NPC2")) {
              lua_call(G.str['PlayAnimLocal'], [lua_tableget(_list_5727, _i_5729), _self, "pull", 1]);
            }
          }
        }
      }
      if (lua_eq(_quest_5727, "PROGRESS")) {
        lua_call(G.str['UnHideNPC'], [_self, "WTREES22_3_SUBQ3_SUBNPC2"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ3_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ3_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_whitetrees_22_3")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ3_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _quest_5737 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "WTREES22_3_SQ3"])[0];
      tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL"]); var _list_5737 = tmp[0]; var _cnt_5737 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5737)) {
        var var_5739 = 1, stop_5739 = lua_assertfloat(_cnt_5737);
        for (; var_5739 <= stop_5739; var_5739++) {
          var _i_5739 = var_5739;
          if (lua_eq(lua_tableget(lua_tableget(_list_5737, _i_5739), 'ClassName'), "npc_foot_hold")) {
            if (lua_eq(lua_tableget(lua_tableget(_list_5737, _i_5739), 'Dialog'), "WTREES22_3_SUBQ3_NPC3")) {
              lua_call(G.str['PlayAnimLocal'], [lua_tableget(_list_5737, _i_5739), _self, "pull", 1]);
            }
          }
        }
      }
      if (lua_eq(_quest_5737, "PROGRESS")) {
        lua_call(G.str['UnHideNPC'], [_self, "WTREES22_3_SUBQ3_SUBNPC3"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ3_BUFF4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ3_BUFF4'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_whitetrees_22_3")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ3_BUFF4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _quest_5747 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "WTREES22_3_SQ3"])[0];
      tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL"]); var _list_5747 = tmp[0]; var _cnt_5747 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5747)) {
        var var_5749 = 1, stop_5749 = lua_assertfloat(_cnt_5747);
        for (; var_5749 <= stop_5749; var_5749++) {
          var _i_5749 = var_5749;
          if (lua_eq(lua_tableget(lua_tableget(_list_5747, _i_5749), 'ClassName'), "npc_foot_hold")) {
            if (lua_eq(lua_tableget(lua_tableget(_list_5747, _i_5749), 'Dialog'), "WTREES22_3_SUBQ3_NPC4")) {
              lua_call(G.str['PlayAnimLocal'], [lua_tableget(_list_5747, _i_5749), _self, "pull", 1]);
            }
          }
        }
      }
      if (lua_eq(_quest_5747, "PROGRESS")) {
        lua_call(G.str['UnHideNPC'], [_self, "WTREES22_3_SUBQ3_SUBNPC4"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ3_BUFF5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ3_BUFF5'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_whitetrees_22_3")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ3_BUFF5'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _quest_5757 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "WTREES22_3_SQ3"])[0];
      tmp = lua_call(G.str['SelectObject'], [_self, 300, "ALL"]); var _list_5757 = tmp[0]; var _cnt_5757 = tmp[1]; tmp = null;
      if (lua_lte(1, _cnt_5757)) {
        var var_5759 = 1, stop_5759 = lua_assertfloat(_cnt_5757);
        for (; var_5759 <= stop_5759; var_5759++) {
          var _i_5759 = var_5759;
          if (lua_eq(lua_tableget(lua_tableget(_list_5757, _i_5759), 'ClassName'), "npc_foot_hold")) {
            if (lua_eq(lua_tableget(lua_tableget(_list_5757, _i_5759), 'Dialog'), "WTREES22_3_SUBQ3_NPC5")) {
              lua_call(G.str['PlayAnimLocal'], [lua_tableget(_list_5757, _i_5759), _self, "pull", 1]);
            }
          }
        }
      }
      if (lua_eq(_quest_5757, "PROGRESS")) {
        lua_call(G.str['UnHideNPC'], [_self, "WTREES22_3_SUBQ3_SUBNPC5"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ5_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ5_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ5_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WTREES22_3_SUBQ7_DEVICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WTREES22_3_SUBQ7_DEVICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _quest_5768 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, "WTREES22_3_SQ7"])[0];
      if (lua_eq(_quest_5768, "PROGRESS")) {
        tmp = lua_call(G.str['SelectObject'], [_self, 200, "ALL", 1]); var _list_5769 = tmp[0]; var _cnt_5769 = tmp[1]; tmp = null;
        if (lua_lt(0, _cnt_5769)) {
          var var_5771 = 1, stop_5771 = lua_assertfloat(_cnt_5769);
          for (; var_5771 <= stop_5771; var_5771++) {
            var _i_5771 = var_5771;
            if (lua_eq(lua_tableget(lua_tableget(_list_5769, _i_5771), 'ClassName'), "prison_device_1")) {
              if (lua_eq(lua_tableget(lua_tableget(_list_5769, _i_5771), 'Dialog'), "WTREES22_3_SUBQ7_DEVICENPC")) {
                lua_call(G.str['PlayEffectLocal'], [lua_tableget(_list_5769, _i_5771), _self, "F_light028_blue2", 1.5, null, "TOP"]);
              }
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WTREES22_3_SUBQ7_DEVICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_4_SUBQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_smoke019_dark_loop", 0.4, "MID"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_4_SUBQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_4_SUBQ4_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_smoke019_dark_loop"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, 'F_smoke011_blue', 2.0, 'MID']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 99999]);
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_abbey_22_5')) {
        var _result1_5784 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'ABBEY22_5_SQ5'])[0];
        var _result2_5784 = lua_call(G.str['SCR_QUEST_CHECK'], [_self, 'ABBEY22_5_SQ7'])[0];
        if (lua_eq(_result1_5784, 'PROGRESS')) {
          if (lua_eq(lua_call(G.str['GetCurrentFaction'], [_self])[0], 'Law')) {
            lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
          }
          return [1];
        } else if (lua_eq(_result2_5784, 'PROGRESS')) {
          if (lua_eq(lua_call(G.str['GetCurrentFaction'], [_self])[0], 'Law')) {
            lua_call(G.str['SetCurrentFaction'], [_self, 'Peaceful']);
          }
          return [1];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ5_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_smoke011_blue']);
      lua_call(G.str['SetCurrentFaction'], [_self, 'Law']);
      var __obj_5789 = lua_call(G.str['GetScpObjectList'], [_self, 'ABBEY22_5_SUBQ5_SCPOBJ'])[0];
      if (lua_lte(1, lua_len(__obj_5789))) {
        var _i_5790;
        var var_5791 = 1, stop_5791 = lua_assertfloat(lua_len(__obj_5789));
        for (; var_5791 <= stop_5791; var_5791++) {
          var _i_5791 = var_5791;
          lua_call(G.str['Kill'], [lua_tableget(__obj_5789, _i_5791)]);
        }
      }
      lua_call(G.str['PlayEffect'], [_self, 'I_smoke058_violet', 2.0, null, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ10_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "I_emo_confuse", 2, "TOP"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ10_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ10_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_emo_confuse"]);
      lua_call(G.str['KILL_BLEND'], [_self, 1, 1]);
      lua_call(G.str['StopMove'], [_self]);
      lua_call(G.str['StopAnim'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ10_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_ground008_red", 2, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ10_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ10_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_ground008_red"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ12_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ12_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ12_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ14_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ14_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "ABBEY22_5_SUBQ14_BUFF3"])[0], "NO")) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "ABBEY22_5_SUBQ14_BUFF2"])[0], "NO")) {
          if (lua_lt(lua_tableget(_self, 'NumArg1'), 120)) {
            lua_tableset(_self, 'NumArg1', lua_add(lua_tableget(_self, 'NumArg1'), 1));
          } else if (lua_lte(120, lua_tableget(_self, 'NumArg1'))) {
            lua_call(G.str['AddBuff'], [_self, _self, "ABBEY22_5_SUBQ14_BUFF2", 1, 0, 0, 1]);
            lua_tableset(_self, 'NumArg1', 0);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ14_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ14_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_5809 = 1.2;
      var _defadd_5809 = 1.2;
      var _mdefadd_5809 = 1.2;
      lua_tableset(_self, 'ATKRate', lua_add(lua_tableget(_self, 'ATKRate'), _atkadd_5809));
      lua_tableset(_self, 'DEFRate', lua_add(lua_tableget(_self, 'DEFRate'), _defadd_5809));
      lua_tableset(_self, 'MDEFRate', lua_add(lua_tableget(_self, 'MDEFRate'), _mdefadd_5809));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_5809]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_5809]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_5809]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ14_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ14_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_5811 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      var _defadd_5811 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_5811 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'ATKRate', lua_subtract(lua_tableget(_self, 'ATKRate'), _atkadd_5811));
      lua_tableset(_self, 'DEFRate', lua_subtract(lua_tableget(_self, 'DEFRate'), _defadd_5811));
      lua_tableset(_self, 'MDEFRate', lua_subtract(lua_tableget(_self, 'MDEFRate'), _mdefadd_5811));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ14_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillCancel'], [_self]);
      lua_call(G.str['PlayAnim'], [_self, "stun"]);
      lua_call(G.str['PlayEffect'], [_self, "F_rize001", 1, null, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ14_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "ABBEY22_5_SUBQ14_BUFF2"])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, "ABBEY22_5_SUBQ14_BUFF2"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ14_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ABBEY22_5_SUBQ14_BUFF4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ABBEY22_5_SUBQ14_BUFF4'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['print'], [lua_tableget(_self, 'NumArg1')]);
      if (lua_lt(lua_tableget(_self, 'NumArg1'), 180)) {
        lua_tableset(_self, 'NumArg1', lua_add(lua_tableget(_self, 'NumArg1'), 1));
      } else if (lua_lte(180, lua_tableget(_self, 'NumArg1'))) {
        if (lua_lt(lua_tableget(_self, 'NumArg2'), 1)) {
          lua_call(G.str['AttachEffect'], [_self, "F_light110_pink_ground_loop", 0.7, 1, "TOP"]);
          lua_tableset(_self, 'NumArg2', 1);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ABBEY22_5_SUBQ14_BUFF4'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ID_WHITETREES1_GIMMICK1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5822 = 3;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5822));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5822]);
      var _caster_5822 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_5822, null)) {
        _caster_5822 = _buff;
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ID_WHITETREES1_GIMMICK1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'id_whitetrees1')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ID_WHITETREES1_GIMMICK1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5827 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5827));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ID_WHITETREES1_GIMMICK2_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damage_5828 = 3000;
      lua_call(G.str['SetBuffArgs'], [_buff, _damage_5828, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ID_WHITETREES1_GIMMICK2_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'id_whitetrees1')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ID_WHITETREES1_GIMMICK2_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ID_WHITETREES1_GIMMICK3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ID_WHITETREES1_GIMMICK3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'id_whitetrees1')) {
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ID_WHITETREES1_GIMMICK3_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_SHADOWMANCER_SHADOW_TRAP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_SHADOWMANCER_SHADOW_TRAP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_SHADOWMANCER_CHANGE_SHADOW'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetShadowRender'], [_self, 0]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 0]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 2));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_SHADOWMANCER_CHANGE_SHADOW'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _layer_5841 = lua_call(G.str['GetLayer'], [_self])[0];
      if (lua_eq(_layer_5841, 0)) {
        return [0];
      } else {
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_5843 = tmp[0]; var _y_5843 = tmp[1]; var _z_5843 = tmp[2]; tmp = null;
        lua_call(G.str['PlayEffectToGround'], [_self, "F_wizard_ShadowPool_shot", _x_5843, _y_5843, _z_5843, 1, 1]);
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_SHADOWMANCER_CHANGE_SHADOW'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_5844 = tmp[0]; var _y_5844 = tmp[1]; var _z_5844 = tmp[2]; tmp = null;
      lua_call(G.str['PlayEffectToGround'], [_self, "F_arcehr_Spoliation_spread_in2", _x_5844, _y_5844, _z_5844, 1, 1]);
      lua_call(G.str['SetShadowRender'], [_self, 1]);
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 2));
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_SHADOWMANCER_Q1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _sObj_main_5845 = lua_call(G.str['GetSessionObject'], [_self, 'ssn_klapeda'])[0];
      var _failcount_5845 = lua_tableget(_sObj_main_5845, 'JOB_SHADOWMANCER_Q1_FC');
      var _mspdadd_5845 = lua_add(30, lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_failcount_5845, 10)])[0]);
      lua_tableset(_self, 'FIXMSPD_BM', _mspdadd_5845);
      lua_call(G.str['Invalidate'], [_self, 'MSPD']);
      lua_call(G.str['SetBuffArgs'], [_buff, _mspdadd_5845, 0, 0]);
      lua_call(G.str['EnableItemUse'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_SHADOWMANCER_Q1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _layer_5846 = lua_call(G.str['GetLayer'], [_self])[0];
      if (!lua_eq(_layer_5846, 0)) {
        var _sta_5847 = lua_call(G.str['GetStamina'], [_self])[0];
        var _maxsta_5847 = lua_call(G.str['GetMaxStamina'], [_self])[0];
        if (lua_lte(_sta_5847, lua_subtract(_maxsta_5847, 900))) {
          lua_call(G.str['AddStamina'], [_self, _maxsta_5847]);
        }
        return [1];
      } else {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_SHADOWMANCER_Q1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FIXMSPD_BM', 0);
      lua_call(G.str['Invalidate'], [_self, 'MSPD']);
      lua_call(G.str['EnableItemUse'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAR318_MSETP3_1_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_light096_red_loop2", 5, 1, "TOP"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAR318_MSETP3_1_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAR318_MSETP3_1_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_light096_red_loop2"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAR318_MSETP3_3_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "I_circle001", 11, 1, "BOT", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAR318_MSETP3_3_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_katyn_45_1")) {
        tmp = lua_call(G.str['GetWorldObjectList'], [_self, "MON", 60]); var _obj_5856 = tmp[0]; var _cnt_5856 = tmp[1]; tmp = null;
        var _sObj_5856 = lua_call(G.str['GetSessionObject'], [_self, "SSN_BULLETMARKER_UNLOCK"])[0];
        if (lua_lte(1, _cnt_5856)) {
          var var_5858 = 1, stop_5858 = lua_assertfloat(_cnt_5856);
          for (; var_5858 <= stop_5858; var_5858++) {
            var _i_5858 = var_5858;
            if (lua_eq(lua_tableget(lua_tableget(_obj_5856, _i_5858), 'ClassName'), "Hiddennpc_Q5")) {
              var var_5861 = 1, stop_5861 = 20;
              for (; var_5861 <= stop_5861; var_5861++) {
                var _j_5861 = var_5861;
                if (lua_eq(lua_tableget(lua_tableget(_obj_5856, _i_5858), 'Dialog'), lua_concat("HIDDEN_STONE_KATYN451_", _j_5861))) {
                  if (lua_lte(1, lua_tableget(_sObj_5856, lua_concat("Goal", _j_5861)))) {
                    var _ston_Item_5864 = lua_call(G.str['GetInvItemCount'], [_self, "HIDDEN_BULLET_MSTEP3_3_1ITEM1"])[0];
                    lua_call(G.str['PlayEffectLocal'], [lua_tableget(_obj_5856, _i_5858), _self, "I_rize010_orange", 2, 1, "MID", 1]);
                    if (lua_lt(_ston_Item_5864, 2)) {
                      lua_tableset(_sObj_5856, 'Step10', lua_add(lua_tableget(_sObj_5856, 'Step10'), 1));
                      if (lua_lte(5, lua_tableget(_sObj_5856, 'Step10'))) {
                        lua_tableset(_sObj_5856, 'Step10', 0);
                        lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_scroll", lua_call(G.str['ScpArgMsg'], ["CHAR318_MSETP3_3_EFFECT_BUFF1_MSG"])[0], 5]);
                        return [1];
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAR318_MSETP3_3_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_circle001"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAR318_MSETP3_1_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_light096_red_loop2", 5, 1, "TOP"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAR318_MSETP3_1_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAR318_MSETP3_1_EFFECT_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_light096_red_loop2"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_MATADOR1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_infection']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_MATADOR1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_MATADOR1_ITEM_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideEmoticon'], [_self, 'I_emo_infection']);
      lua_call(G.str['BT_RETURN_TO_HOME'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_MATADOR1_TRAP1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ResetHated'], [_self]);
      lua_call(G.str['ResetHateAndAttack'], [_self]);
      lua_call(G.str['CancelMonsterSkill'], [_self]);
      lua_call(G.str['SetCurrentFaction'], [_self, "Neutral"]);
      lua_tableset(_self, 'StrArg1', "NEUTRAL");
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_MATADOR1_TRAP1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['StopMove'], [_self]);
      lua_call(G.str['PlayEffect'], [_self, "F_sys_heart", 1, 1, "TOP", 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_MATADOR1_TRAP1_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'BTree', "BasicMonster");
      lua_call(G.str['BT_RETURN_TO_HOME'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_MATADOR1_TRAP2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5877 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5877));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5877]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_MATADOR1_TRAP2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_MATADOR1_TRAP2_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5879 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5879));
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_MATADOR1_ITEM_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5880 = lua_add(lua_tableget(_self, 'MSPD'), 1);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5880));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_5880]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_MATADOR1_ITEM_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, 9999]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_MATADOR1_ITEM_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_5882 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_5882));
      return [];
    })
    G.str['SCR_BUFF_ENTER_JOB_MATADOR1_ITEM_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JOB_MATADOR1_ITEM_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        if (lua_lt(lua_call(G.str['GetLayer'], [_self])[0], 1)) {
          return [0];
        } else {
          lua_call(G.str['TakeDamage'], [_self, _self, "None", 100, "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      } else if (((lua_eq(lua_tableget(_self, 'ClassName'), "stub_tree") || lua_eq(lua_tableget(_self, 'ClassName'), "TreeAmbulo")) || lua_eq(lua_tableget(_self, 'ClassName'), "Tama"))) {
        tmp = lua_call(G.str['GetLayerPCList'], [_self]); var _pc_list_5888 = tmp[0]; var _cnt_5888 = tmp[1]; tmp = null;
        if (lua_lt(0, _cnt_5888)) {
          var var_5890 = 1, stop_5890 = lua_assertfloat(_cnt_5888);
          for (; var_5890 <= stop_5890; var_5890++) {
            var _i_5890 = var_5890;
            if (lua_eq(lua_tableget(lua_tableget(_pc_list_5888, _i_5890), 'ClassName'), "PC")) {
              lua_call(G.str['SendAddOnMsg'], [lua_tableget(_pc_list_5888, _i_5890), lua_call(G.str['ScpArgMsg'], ["JOB_MATADOR1_ITEM_MSG11"])[0], 5]);
              break;
            }
          }
        }
        lua_call(G.str['Dead'], [_self]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JOB_MATADOR1_ITEM_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FRIGHT_DEBUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_5894 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_5894, null)) {
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
          lua_call(G.str['PlayPose'], [_self, 16]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_FRIGHT_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_5897 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_5897, null)) {
        var _i_5898;
        tmp = lua_call(G.str['SelectObject'], [_self, 100, "ENEMY"]); var _list_5898 = tmp[0]; var _cnt_5898 = tmp[1]; tmp = null;
        var var_5899 = 1, stop_5899 = lua_assertfloat(_cnt_5898);
        for (; var_5899 <= stop_5899; var_5899++) {
          var _i_5899 = var_5899;
          var _obj_5900 = lua_tableget(_list_5898, _i_5899);
          if (lua_eq(lua_call(G.str['IS_PC'], [_obj_5900])[0], true)) {
            lua_call(G.str['AddBuff'], [_caster_5897, _obj_5900, 'FRIGHT_DEBUFF', 1, 0, 1500, 1]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_AGARIO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SendSkillQuickSlot'], [_self, 1, 'Agario_CandyDash']);
      lua_call(G.str['ChangeNormalAttack'], [_self, "Agario_Attack"]);
      lua_call(G.str['SetCurrentFaction'], [_self, "Pvp"]);
      lua_call(G.str['BroadcastRelation'], [_self]);
      lua_call(G.str['SetDeadScript'], [_self, "SCR_AGARIO_DEAD"]);
      lua_call(G.str['EnableResurrect'], [_self, false]);
      lua_tableset(_self, 'FIXMSPD_BM', 45);
      lua_call(G.str['Invalidate'], [_self, 'MSPD']);
      var _normalAttackList_5902 = lua_newtable();
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack2");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack3");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack4");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_CandyDash");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack2");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack3");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_Attack4");
      lua_tableset(_normalAttackList_5902, lua_add(lua_len(_normalAttackList_5902), 1), "Agario_CandyDash");
      var var_5903 = 1, stop_5903 = lua_assertfloat(lua_len(_normalAttackList_5902));
      for (; var_5903 <= stop_5903; var_5903++) {
        var _i_5903 = var_5903;
        var _norm_5904 = lua_tableget(_normalAttackList_5902, _i_5903);
        lua_call(G.str['AddInstSkill'], [_self, _norm_5904]);
        var _normalSkl_5904 = lua_call(G.str['GetSkill'], [_self, _norm_5904])[0];
        if (!lua_eq(_normalSkl_5904, null)) {
          lua_call(G.str['AddLimitationSkillList'], [_self, _norm_5904]);
        }
      }
      lua_call(G.str['EnableItemUse'], [_self, 0]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['EnablePreviewSkillRange'], [_self, 1]);
      }
      lua_call(G.str['AddBuff'], [_self, _self, 'Safe', 1, 0, 30000, 1]);
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 633072, 'OUTER', 0, 1]);
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 10009, 'HELMET', 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AGARIO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_IN_EVENT_MAP'], [_self])[0], true)) {
        var _itemCount_5908 = lua_call(G.str['GetInvItemCount'], [_self, "AGARIO_CANDY_DUNGEON"])[0];
        if (!lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1)) {
          if (lua_lt(30, _itemCount_5908)) {
            lua_call(G.str['SetTitle'], [_self, _itemCount_5908]);
          } else {
            lua_call(G.str['SetTitle'], [_self, '']);
          }
          if (lua_lte(_itemCount_5908, 30)) {
            if (!lua_eq(lua_call(G.str['GetChangeNormalAttackName'], [_self])[0], "Agario_Attack")) {
              lua_call(G.str['ChangeNormalAttack'], [_self, "Agario_Attack"]);
              lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 0]);
            }
          } else if ((lua_lte(31, _itemCount_5908) && lua_lt(_itemCount_5908, 100))) {
            if (!lua_eq(lua_call(G.str['GetChangeNormalAttackName'], [_self])[0], "Agario_Attack2")) {
              lua_call(G.str['ChangeNormalAttack'], [_self, "Agario_Attack2"]);
              lua_call(G.str['AddLimitationSkillList'], [_self, "Agario_Attack2"]);
              lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 1]);
            }
          } else if ((lua_lte(100, _itemCount_5908) && lua_lt(_itemCount_5908, 150))) {
            if (!lua_eq(lua_call(G.str['GetChangeNormalAttackName'], [_self])[0], "Agario_Attack3")) {
              lua_call(G.str['ChangeNormalAttack'], [_self, "Agario_Attack3"]);
              lua_call(G.str['AddLimitationSkillList'], [_self, "Agario_Attack3"]);
              lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 1]);
            }
          } else if (lua_lte(150, _itemCount_5908)) {
            if (!lua_eq(lua_call(G.str['GetChangeNormalAttackName'], [_self])[0], "Agario_Attack4")) {
              lua_call(G.str['ChangeNormalAttack'], [_self, "Agario_Attack4"]);
              lua_call(G.str['AddLimitationSkillList'], [_self, "Agario_Attack4"]);
              lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 1]);
            }
          }
        }
        var _addValue_5908 = 0;
        if (lua_lt(_itemCount_5908, 50)) {
          
        } else if (lua_lt(_itemCount_5908, 100)) {
          _addValue_5908 = 20;
        } else if (lua_lt(_itemCount_5908, 150)) {
          _addValue_5908 = 60;
        } else {
          _addValue_5908 = 120;
        }
        var _F_MSPD_5908 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(9200, (lua_add(lua_add(_itemCount_5908, 200), _addValue_5908)))])[0];
        var _F_MSPD_BUFF_5908 = 0;
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Agario_Haste'])[0], 'YES')) {
          _F_MSPD_BUFF_5908 = lua_subtract(10, lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_addValue_5908, 15)])[0]);
        }
        lua_tableset(_self, 'FIXMSPD_BM', lua_add(_F_MSPD_5908, _F_MSPD_BUFF_5908));
        lua_call(G.str['Invalidate'], [_self, 'MSPD']);
        return [1];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AGARIO_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SendSkillQuickSlot'], [_self, 0]);
      lua_call(G.str['ChangeNormalAttack'], [_self, "None"]);
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      lua_tableset(_self, 'FIXMSPD_BM', 0);
      lua_call(G.str['Invalidate'], [_self, 'MSPD']);
      lua_call(G.str['EnableItemUse'], [_self, 1]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['EnablePreviewSkillRange'], [_self, 0]);
      }
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'OUTER', 0, 0]);
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'HELMET', 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Agario_Haste'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Agario_Haste'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Agario_silence'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ShowEmoticon'], [_self, 'I_emo_silence', 0]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Agario_silence'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideEmoticon'], [_self, 'I_emo_silence']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAR118_MSTEP2_ITEM1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SendAddOnMsg'], [_self, 'NOTICE_Dm_scroll', lua_call(G.str['ScpArgMsg'], ['RETIARII_STAMINA_CHARGE'])[0], 5]);
      lua_call(G.str['SetExProp'], [_self, "CHAR118_REST_TIME", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAR118_MSTEP2_ITEM1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _sObj_5933 = lua_call(G.str['GetSessionObject'], [_self, "SSN_RETIARII_UNLOCK"])[0];
      var _sit_Buff_5933 = lua_call(G.str['GetBuffByName'], [_self, 'SitRest'])[0];
      var _rest_Time_5933 = lua_call(G.str['GetExProp'], [_self, "CHAR118_REST_TIME"])[0];
      if (!lua_eq(_sit_Buff_5933, null)) {
        _rest_Time_5933 = lua_add(_rest_Time_5933, 1);
        lua_call(G.str['SetExProp'], [_self, "CHAR118_REST_TIME", _rest_Time_5933]);
        lua_call(G.str['PlayEffect'], [_self, "F_light013", 1, 3, "BOT"]);
        lua_call(G.str['print'], [lua_concat("rest_Time : ", _rest_Time_5933)]);
      }
      if (lua_lt(0, lua_call(G.str['GetBuffRemainTime'], [_buff])[0])) {
        if (lua_lte(60, _rest_Time_5933)) {
          lua_tableset(_sObj_5933, 'Step1', 60);
          lua_call(G.str['PlayEffect'], [_self, "F_light018", 1, 1, "BOT"]);
          lua_tableset(_sObj_5933, 'Step22', 1);
          lua_tableset(_sObj_5933, 'Step2', lua_add(lua_tableget(_sObj_5933, 'Step2'), 1));
          lua_call(G.str['SaveSessionObject'], [_self, _sObj_5933]);
          return [0];
        }
      } else if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        if (lua_lte(60, _rest_Time_5933)) {
          lua_tableset(_sObj_5933, 'Step1', 60);
        } else {
          lua_tableset(_sObj_5933, 'Step1', 50);
        }
        lua_tableset(_sObj_5933, 'Step22', 1);
        lua_tableset(_sObj_5933, 'Step2', lua_add(lua_tableget(_sObj_5933, 'Step2'), 1));
        lua_call(G.str['SaveSessionObject'], [_self, _sObj_5933]);
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAR118_MSTEP2_ITEM1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _sObj_5940 = lua_call(G.str['GetSessionObject'], [_self, "SSN_RETIARII_UNLOCK"])[0];
      var _rest_Time_5940 = lua_call(G.str['GetExProp'], [_self, "CHAR118_REST_TIME"])[0];
      if (lua_lt(0, lua_call(G.str['GetBuffRemainTime'], [_buff])[0])) {
        if (lua_lte(60, _rest_Time_5940)) {
          lua_tableset(_sObj_5940, 'Step1', 60);
        }
      } else if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        if (lua_lte(60, _rest_Time_5940)) {
          lua_tableset(_sObj_5940, 'Step1', 60);
        } else {
          lua_tableset(_sObj_5940, 'Step1', 50);
        }
        lua_tableset(_sObj_5940, 'Step22', 1);
        lua_tableset(_sObj_5940, 'Step2', lua_add(lua_tableget(_sObj_5940, 'Step2'), 1));
        lua_call(G.str['SaveSessionObject'], [_self, _sObj_5940]);
      }
      lua_call(G.str['PlayEffect'], [_self, "F_light018", 1, 1, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAR118_MSTEP2_2_ITEM1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _sObj_5946 = lua_call(G.str['GetSessionObject'], [_self, "SSN_RETIARII_UNLOCK"])[0];
      if (!lua_eq(_sObj_5946, null)) {
        if (lua_eq(lua_tableget(_sObj_5946, 'Step2'), 1)) {
          lua_tableset(_self, 'FIXMSPD_BM', 20);
        } else if (lua_eq(lua_tableget(_sObj_5946, 'Step2'), 2)) {
          lua_tableset(_self, 'FIXMSPD_BM', 23);
        } else if (lua_eq(lua_tableget(_sObj_5946, 'Step2'), 3)) {
          lua_tableset(_self, 'FIXMSPD_BM', 26);
        } else if (lua_eq(lua_tableget(_sObj_5946, 'Step2'), 4)) {
          lua_tableset(_self, 'FIXMSPD_BM', 30);
        } else if (lua_lte(5, lua_tableget(_sObj_5946, 'Step2'))) {
          lua_tableset(_self, 'FIXMSPD_BM', 35);
        }
        lua_call(G.str['InvalidateMSPD'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CHAR118_MSTEP2_2_ITEM1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "f_farm_47_1")) {
        var _sObj_5954 = lua_call(G.str['GetSessionObject'], [_self, "SSN_RETIARII_UNLOCK"])[0];
        var _ridingCompanion_5954 = lua_call(G.str['GetRidingCompanion'], [_self])[0];
        if (!lua_eq(_ridingCompanion_5954, null)) {
          lua_call(G.str['RideVehicle'], [_self, _ridingCompanion_5954, 0]);
          lua_call(G.str['SendAddOnMsg'], [_self, "NOTICE_Dm_scroll", lua_call(G.str['ScpArgMsg'], ["RETIARII_TRAINING_COMPANION_NOT"])[0], 6]);
        }
        if (lua_eq(lua_tableget(_sObj_5954, 'Step6'), 0)) {
          var _goal_group_5956 = lua_call(G.str['IMCRandom'], [1, 3])[0];
          lua_tableset(_sObj_5954, 'Step7', _goal_group_5956);
          lua_tableset(_sObj_5954, 'Step6', 1);
          var var_5957 = 1, stop_5957 = 3;
          for (; var_5957 <= stop_5957; var_5957++) {
            var _i_5957 = var_5957;
            if (lua_eq(lua_call(G.str['isHideNPC'], [_self, lua_concat("RETIARII_ENDURANDE_TRAINING_GOAL", lua_concat(_goal_group_5956, lua_concat("_", _i_5957)))])[0], "YES")) {
              lua_call(G.str['UnHideNPC'], [_self, lua_concat("RETIARII_ENDURANDE_TRAINING_GOAL", lua_concat(_goal_group_5956, lua_concat("_", _i_5957)))]);
            }
          }
        }
        return [1];
      } else {
        var _sObj_5960 = lua_call(G.str['GetSessionObject'], [_self, "SSN_RETIARII_UNLOCK"])[0];
        if (!lua_eq(_sObj_5960, null)) {
          lua_tableset(_sObj_5960, 'Step6', 0);
          var _goal_group_5961 = lua_tableget(_sObj_5960, 'Step7');
          lua_call(G.str['SaveSessionObject'], [_self, _sObj_5960]);
          lua_tableset(_self, 'FIXMSPD_BM', 0);
          lua_call(G.str['InvalidateMSPD'], [_self]);
          var var_5962 = 1, stop_5962 = 3;
          for (; var_5962 <= stop_5962; var_5962++) {
            var _i_5962 = var_5962;
            if (lua_eq(lua_call(G.str['isHideNPC'], [_self, lua_concat("RETIARII_ENDURANDE_TRAINING_GOAL", lua_concat(_goal_group_5961, lua_concat("_", _i_5962)))])[0], "NO")) {
              lua_call(G.str['HideNPC'], [_self, lua_concat("RETIARII_ENDURANDE_TRAINING_GOAL", lua_concat(_goal_group_5961, lua_concat("_", _i_5962)))]);
            }
          }
          return [0];
        }
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAR118_MSTEP2_2_ITEM1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _sObj_5965 = lua_call(G.str['GetSessionObject'], [_self, "SSN_RETIARII_UNLOCK"])[0];
      if (!lua_eq(_sObj_5965, null)) {
        lua_tableset(_sObj_5965, 'Step6', 0);
        var _goal_group_5966 = lua_tableget(_sObj_5965, 'Step7');
        lua_call(G.str['SaveSessionObject'], [_self, _sObj_5965]);
        var var_5967 = 1, stop_5967 = 3;
        for (; var_5967 <= stop_5967; var_5967++) {
          var _i_5967 = var_5967;
          if (lua_eq(lua_call(G.str['isHideNPC'], [_self, lua_concat("RETIARII_ENDURANDE_TRAINING_GOAL", lua_concat(_goal_group_5966, lua_concat("_", _i_5967)))])[0], "NO")) {
            lua_call(G.str['HideNPC'], [_self, lua_concat("RETIARII_ENDURANDE_TRAINING_GOAL", lua_concat(_goal_group_5966, lua_concat("_", _i_5967)))]);
          }
        }
      }
      lua_tableset(_self, 'FIXMSPD_BM', 0);
      lua_call(G.str['InvalidateMSPD'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CHAR118_AGILITY_TRAINING_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_exclamation']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CHAR118_AGILITY_TRAINING_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetEmoticon'], [_self, 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_EXORCIST_QUEST_ADVENTAGE_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_item_drop_line_loop_blue", 1, 1, "BOT", 5]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EXORCIST_QUEST_ADVENTAGE_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetLayer'], [_self])[0], 1)) {
        lua_call(G.str['DetachEffect'], [_self, "F_item_drop_line_loop_blue"]);
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EXORCIST_QUEST_ADVENTAGE_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_item_drop_line_loop_blue"]);
      var _sObj_5976 = lua_call(G.str['GetSessionObject'], [_self, "SSN_JOB_EXORCIST1"])[0];
      if (!lua_eq(_sObj_5976, null)) {
        lua_tableset(_sObj_5976, 'Goal2', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_EXORCIST_QUEST_ADVENTAGE_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "F_item_drop_line_loop_green", 1, 1, "BOT", 5]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EXORCIST_QUEST_ADVENTAGE_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetLayer'], [_self])[0], 1)) {
        lua_call(G.str['DetachEffect'], [_self, "F_item_drop_line_loop_green"]);
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EXORCIST_QUEST_ADVENTAGE_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "F_item_drop_line_loop_green"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_EXORCIST_MSTEP33_PENALTY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AttachEffect'], [_self, "I_smoke063_ball_dark_red_loop_mesh", 1, "TOP"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EXORCIST_MSTEP33_PENALTY_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, "I_smoke063_ball_dark_red_loop_mesh"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_MON_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GM_WHITETREES_MON_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_MON_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_MON_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_5988 = 1;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _add_5988));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _add_5988));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _add_5988]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_MON_BUFF2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _add_5989 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _add_5989));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _add_5989));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_MON_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_MON_BUFF3'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_GIMMICK_MON1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GM_WHITETREES_GIMMICK_MON1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_5993 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_5993, null)) {
        var _casterHandler_5994 = lua_call(G.str['GetMGameValue'], [_self, 'casterHandle'])[0];
        var _zoneInst_5994 = lua_call(G.str['GetZoneInstID'], [_self])[0];
        _caster_5993 = lua_call(G.str['GetByHandle'], [_zoneInst_5994, _casterHandler_5994])[0];
      }
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "mission_whitetrees_56_1")) {
        if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0)) {
          lua_call(G.str['PlayEffect'], [_self, "F_rize015_1_yellow_drop", 1, "BOT"]);
          var _buff_stack_5996 = lua_call(G.str['GetOver'], [_buff])[0];
          if (lua_eq(lua_tableget(_self, 'ClassName'), "GM_Obelisk")) {
            if (lua_lt(_buff_stack_5996, 3)) {
              lua_call(G.str['TakeDamage'], [_caster_5993, _self, "None", lua_multiply(200000, _buff_stack_5996), "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
            } else {
              lua_call(G.str['TakeDamage'], [_caster_5993, _self, "None", 700000, "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
            }
          } else {
            if (lua_lt(_buff_stack_5996, 3)) {
              lua_call(G.str['TakeDamage'], [_caster_5993, _self, "None", lua_multiply(10000, _buff_stack_5996), "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
            } else {
              lua_call(G.str['TakeDamage'], [_caster_5993, _self, "None", 150000, "Melee", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
            }
          }
        } else if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1)) {
          tmp = lua_call(G.str['SelectObjectByClassName'], [_self, 25, 'Link_stone_small']); var _obj_6003 = tmp[0]; var _obj_Cnt_6003 = tmp[1]; tmp = null;
          if (lua_lt(_obj_Cnt_6003, 1)) {
            return [0];
          }
        }
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_GIMMICK_MON1_BUFF1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_DEFFENCE_OBJ_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GM_WHITETREES_DEFFENCE_OBJ_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_DEFFENCE_OBJ_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_MON_BUFF1_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), lua_multiply(_arg1, 2)));
      var _caster_6009 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6009, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6009, 'MINMATK'), lua_tableget(_caster_6009, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GM_WHITETREES_MON_BUFF1_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "mission_whitetrees_56_1")) {
        tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_6012 = tmp[0]; var _casterMAXMATK_6012 = tmp[1]; tmp = null;
        var _caster_6012 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (lua_eq(_caster_6012, null)) {
          var _casterHandler_6013 = lua_call(G.str['GetMGameValue'], [_self, 'casterHandle'])[0];
          var _zoneInst_6013 = lua_call(G.str['GetZoneInstID'], [_self])[0];
          _caster_6012 = lua_call(G.str['GetByHandle'], [_zoneInst_6013, _casterHandler_6013])[0];
        }
        lua_call(G.str['TakeDamage'], [_caster_6012, _self, "None", lua_divide((lua_add(_casterMINMATK_6012, _casterMAXMATK_6012)), lua_call(G.str['IMCRandom'], [7, 10])[0]), "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0, 0]);
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_MON_BUFF1_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), lua_multiply(_arg1, 2)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_WHITETREES_BUFF1_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_WHITETREES_BUFF1_1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['GRB_boss_nuodai_BORN_ATTRIBUTE'] = (function (_self) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Pollen_Buff']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Pollen_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Pollen_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Pollen_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], lua_call(G.str['GetExProp'], [_self, "Pollen_Buff_Tick"])[0])) {
        return [1];
      }
      lua_call(G.str['SetExProp'], [_self, "Pollen_Buff_Tick", lua_add(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], 1)]);
      tmp = lua_call(G.str['SelectObject'], [_self, 100, 'PC', 1]); var _objList_6020 = tmp[0]; var _objCount_6020 = tmp[1]; tmp = null;
      var var_6022 = 1, stop_6022 = lua_assertfloat(_objCount_6020);
      for (; var_6022 <= stop_6022; var_6022++) {
        var _i_6022 = var_6022;
        if (lua_eq(lua_tableget(lua_tableget(_objList_6020, _i_6022), 'ClassName'), "PC")) {
          lua_call(G.str['AddBuff'], [_self, lua_tableget(_objList_6020, _i_6022), 'Pollen_Debuff']);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Pollen_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lte(50, _over)) {
        lua_call(G.str['PlayEffect'], [_self, "F_archer_explosiontrap_hit_explosion", 1, 1, 'BOT']);
        var _caster_6026 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _bombDamage_6026 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(lua_tableget(_caster_6026, 'MINPATK'), lua_tableget(_caster_6026, 'MAXPATK'))), lua_call(G.str['IMCRandomFloat'], [2, 2.5])[0])])[0], 5);
        var _bombRange_6026 = 100;
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_6026, _self, _bombRange_6026, 'ENEMY', 1]); var _objList_6026 = tmp[0]; var _objCount_6026 = tmp[1]; tmp = null;
        var var_6027 = 1, stop_6027 = lua_assertfloat(_objCount_6026);
        for (; var_6027 <= stop_6027; var_6027++) {
          var _i_6027 = var_6027;
          var _obj_6028 = lua_tableget(_objList_6026, _i_6027);
          lua_call(G.str['TakeDamage'], [_caster_6026, _obj_6028, "None", _bombDamage_6026, "Melee", "None", "Melee", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
          tmp = lua_call(G.str['GetPos'], [_caster_6026]); var _x_6028 = tmp[0]; var _y_6028 = tmp[1]; var _z_6028 = tmp[2]; tmp = null;
          var _angle_6028 = lua_call(G.str['GetAngleFromPos'], [_obj_6028, _x_6028, _z_6028])[0];
          lua_call(G.str['KnockDown'], [_obj_6028, _caster_6026, 100, _angle_6028, 40, 1, 1, 100]);
          if (!lua_eq(lua_call(G.str['IsSameObject'], [_obj_6028, _self])[0], 1)) {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_obj_6028, 'Pollen_Debuff'])[0], 'YES')) {
              lua_call(G.str['SetExProp'], [_obj_6028, "Pollen_Bomb", 1]);
              lua_call(G.str['SetExProp'], [_obj_6028, "Pollen_Bomb_Delay", lua_add(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], 1)]);
            }
          }
        }
        lua_call(G.str['RemoveBuff'], [_self, "Pollen_Debuff"]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Pollen_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "Pollen_Bomb"])[0], 1)) {
        if (lua_lt(lua_call(G.str['GetExProp'], [G.str['obj'], "Pollen_Bomb_Delay"])[0], lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0])) {
          lua_call(G.str['DelExProp'], [_self, "Pollen_Bomb"]);
          lua_call(G.str['PlayEffect'], [_self, "F_archer_explosiontrap_hit_explosion", 1, 1, 'BOT']);
          var _caster_6033 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          var _bombDamage_6033 = lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(lua_tableget(_caster_6033, 'MINPATK'), lua_tableget(_caster_6033, 'MAXPATK'))), lua_call(G.str['IMCRandomFloat'], [2, 2.5])[0])])[0], 5);
          var _bombRange_6033 = 100;
          lua_call(G.str['TakeDamage'], [_caster_6033, _self, "None", _bombDamage_6033, "Melee", "None", "Melee", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['KnockDown'], [_self, _caster_6033, 100, G.str['angle'], 40, 1, 1, 100]);
          tmp = lua_call(G.str['SelectObject'], [_self, 100, 'PC', 1]); var _objList_6033 = tmp[0]; var _objCount_6033 = tmp[1]; tmp = null;
          var var_6034 = 1, stop_6034 = lua_assertfloat(_objCount_6033);
          for (; var_6034 <= stop_6034; var_6034++) {
            var _i_6034 = var_6034;
            if (lua_eq(lua_tableget(lua_tableget(_objList_6033, _i_6034), 'ClassName'), "PC")) {
              lua_call(G.str['TakeDamage'], [_caster_6033, lua_tableget(_objList_6033, _i_6034), "None", _bombDamage_6033, "Melee", "None", "Melee", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
              tmp = lua_call(G.str['GetPos'], [_caster_6033]); var _x_6036 = tmp[0]; var _y_6036 = tmp[1]; var _z_6036 = tmp[2]; tmp = null;
              var _angle_6036 = lua_call(G.str['GetAngleFromPos'], [lua_tableget(_objList_6033, _i_6034), _x_6036, _z_6036])[0];
              lua_call(G.str['KnockDown'], [lua_tableget(_objList_6033, _i_6034), _caster_6033, 100, _angle_6036, 40, 1, 1, 100]);
              if (!lua_eq(lua_call(G.str['IsSameObject'], [lua_tableget(_objList_6033, _i_6034), _self])[0], 1)) {
                if (lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_objList_6033, _i_6034), 'Pollen_Debuff'])[0], 'YES')) {
                  lua_call(G.str['SetExProp'], [lua_tableget(_objList_6033, _i_6034), "Pollen_Bomb", 1]);
                  lua_call(G.str['SetExProp'], [lua_tableget(_objList_6033, _i_6034), "Pollen_Bomb_Delay", lua_add(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], 1)]);
                }
              }
            }
          }
        }
        lua_call(G.str['RemoveBuff'], [_self, "Pollen_Debuff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Pollen_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Pollen_Debuff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _buffCaster_6040 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(lua_call(G.str['IsSameObject'], [_target, _buffCaster_6040])[0], 1)) {
        lua_call(G.str['SubBuffOver'], [_self, lua_tableget(_buff, 'ClassName'), 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Nuodai_Poison_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "Nuodai_Poison_Debuff_Damage", lua_divide(lua_tableget(_self, 'HP'), 10)]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Nuodai_Poison_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6043 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_6043 = lua_call(G.str['GetExProp'], [_self, "Nuodai_Poison_Debuff_Damage"])[0];
      lua_call(G.str['TakeDamage'], [_caster_6043, _self, "None", _damage_6043, "Ice", "None", "TrueDamage", G.str['HIT_ICE'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Nuodai_Poison_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_raid_Silence'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_raid_Silence'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_raid_Curse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_raid_Curse'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'HP'), 1000)) {
        return [0];
      }
      var _rate_6048 = 0.05;
      var _takeHP_6048 = lua_multiply(lua_tableget(_self, 'HP'), _rate_6048);
      var _takeSP_6048 = lua_multiply(lua_tableget(_self, 'SP'), _rate_6048);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['AddSP'], [_self, lua_unm(_takeSP_6048)]);
        lua_call(G.str['AddHP'], [_self, lua_unm(_takeHP_6048)]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_raid_Curse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Mon_raid_Curse'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Mon_Raid_boss_blackGargoyle_Skill_4")) {
        lua_tableset(_ret, 'Damage', lua_multiply(lua_tableget(_ret, 'Damage'), 2));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_raid_stun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_raid_stun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_raid_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _atk_6056 = lua_divide((lua_add(lua_tableget(_self, 'MAXPATK'), lua_tableget(_self, 'MINPATK'))), 2);
      var _atkUp_6056 = lua_divide(_atk_6056, 2);
      lua_call(G.str['SetExProp'], [_buff, "ATK_UP", _atkUp_6056]);
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkUp_6056));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_raid_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkUp_6057 = lua_call(G.str['GetExProp'], [_buff, "ATK_UP"])[0];
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkUp_6057));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_RaidGimmick_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_6058 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_6058]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_6058));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_RaidGimmick_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_6059 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_6059));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_invincible'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_6060 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_6060]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_6060));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_invincible'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_6061 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_6061));
      return [];
    })
    G.str['SCR_BUFF_ADDCHECKON_Prophecy_Buff'] = (function (_self, _buff, _targetBuffName) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _buffArg1_6062 = tmp[0]; var _buffArg2_6062 = tmp[1]; tmp = null;
      if (lua_lte(_buffArg1_6062, 0)) {
        return [1];
      }
      var _targetBuffCls_6062 = lua_call(G.str['GetClass'], ["Buff", _targetBuffName])[0];
      if (lua_eq(_targetBuffCls_6062, null)) {
        return [1];
      }
      if (!lua_eq(lua_tableget(_targetBuffCls_6062, 'Group1'), "Debuff")) {
        return [1];
      }
      if (lua_eq(lua_tableget(_targetBuffCls_6062, 'Lv'), 1)) {
        lua_call(G.str['PlayEffectNode'], [_self, "E_pc_shield_square", 1.0, "Dummy_emitter"]);
        _buffArg1_6062 = lua_subtract(_buffArg1_6062, 1);
        lua_call(G.str['SetBuffArg'], [_self, _buff, _buffArg1_6062, _buffArg2_6062]);
        if (lua_lte(_buffArg1_6062, 0)) {
          lua_call(G.str['RemoveBuff'], [_self, lua_tableget(_buff, 'ClassName')]);
        }
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ADDCHECKON_BeakMask_Buff'] = (function (_self, _buff, _targetBuffName) {
      var tmp;
      var _targetBuffCls_6068 = lua_call(G.str['GetClass'], ["Buff", _targetBuffName])[0];
      if (lua_eq(_targetBuffCls_6068, null)) {
        return [1];
      }
      if (!lua_eq(lua_tableget(_targetBuffCls_6068, 'Group1'), "Debuff")) {
        return [1];
      }
      if ((lua_eq(lua_tableget(_targetBuffCls_6068, 'Lv'), 1) || lua_eq(lua_tableget(_targetBuffCls_6068, 'Lv'), 2))) {
        lua_call(G.str['PlayEffectNode'], [_self, "E_pc_shield_square", 1.0, "Dummy_emitter"]);
        return [0];
      }
      if (lua_eq(lua_tableget(_targetBuffCls_6068, 'Lv'), 3)) {
        lua_call(G.str['PlayEffectNode'], [_self, "E_pc_shield_square", 1.0, "Dummy_emitter"]);
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ADDCHECKON_Bloodletting_Buff'] = (function (_self, _buff, _targetBuffName) {
      var tmp;
      var _targetBuffCls_6073 = lua_call(G.str['GetClass'], ["Buff", _targetBuffName])[0];
      if (lua_eq(_targetBuffCls_6073, null)) {
        return [1];
      }
      if (!lua_eq(lua_tableget(_targetBuffCls_6073, 'Group1'), "Debuff")) {
        return [1];
      }
      if ((lua_eq(lua_tableget(_targetBuffCls_6073, 'Lv'), 1) || lua_eq(lua_tableget(_targetBuffCls_6073, 'Lv'), 2))) {
        lua_call(G.str['PlayEffectNode'], [_self, "E_pc_shield_square", 1.0, "Dummy_emitter"]);
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ADDCHECKON_Prevent_Buff'] = (function (_self, _buff, _targetBuffName, _from) {
      var tmp;
      if (lua_eq(_from, null)) {
        return [1];
      }
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_from])[0])) {
        return [1];
      }
      var _targetBuffCls_6077 = lua_call(G.str['GetClass'], ["Buff", _targetBuffName])[0];
      if (lua_eq(_targetBuffCls_6077, null)) {
        return [1];
      }
      if (!lua_eq(lua_tableget(_targetBuffCls_6077, 'Group1'), "Debuff")) {
        return [1];
      }
      if (lua_lte(lua_tableget(_targetBuffCls_6077, 'Lv'), 99)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ADDCHECKON_INVINCIBILITY_EXCEPT_FOR_CERTAIN_ATTACKS'] = (function (_self, _buff, _targetBuffName, _from) {
      var tmp;
      if (lua_eq(_from, null)) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_from])[0])) {
        return [1];
      }
      var _targetBuffCls_6084 = lua_call(G.str['GetClass'], ["Buff", _targetBuffName])[0];
      if (lua_eq(_targetBuffCls_6084, null)) {
        return [1];
      }
      if (lua_lte(lua_tableget(_targetBuffCls_6084, 'Lv'), 3)) {
        lua_call(G.str['PlayEffectNode'], [_self, "E_pc_shield_square", 1.0, "Dummy_emitter"]);
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_PainBarrier_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      if (!lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL'])) {
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_BLOW']);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Curse_Debuff'])[0], 'YES')) {
        lua_tableset(_ret, 'HitType', G.str['HIT_BASIC_NOT_CANCEL_CAST']);
      } else {
        lua_tableset(_ret, 'HitType', G.str['HIT_ENDURE']);
      }
      lua_tableset(_ret, 'HitDelay', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_ShieldPush_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_lt(70, lua_call(G.str['IMCRandom'], [1, 100])[0])) {
        var _key_6094 = lua_call(G.str['GetSkillSyncKey'], [_from, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_from, _key_6094]);
        tmp = lua_call(G.str['GetPos'], [_from]); var _x_6094 = tmp[0]; var _y_6094 = tmp[1]; var _z_6094 = tmp[2]; tmp = null;
        var _angle_6094 = lua_call(G.str['GetAngleFromPos'], [_self, _x_6094, _z_6094])[0];
        lua_call(G.str['KnockDown'], [_self, _from, 45, _angle_6094, 10, 3, 1, 100]);
        lua_call(G.str['EndSyncPacket'], [_from, _key_6094, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_GT_STAGE_10_ROOT'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      lua_tableset(_ret, 'ResultType', G.str['HITRESULT_BLOW']);
      lua_tableset(_ret, 'HitType', G.str['HIT_ENDURE']);
      lua_tableset(_ret, 'HitDelay', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ausirine_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
      lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
      lua_tableset(_ret, 'HitDelay', 0);
      lua_tableset(_ret, 'Damage', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Mon_Golden_Bell_Shield_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
      lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
      lua_tableset(_ret, 'HitDelay', 0);
      lua_tableset(_ret, 'Damage', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Golden_Bell_Shield_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
      lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
      lua_tableset(_ret, 'HitDelay', 0);
      lua_tableset(_ret, 'Damage', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Golden_Bell_Shield_Safety'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
      lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
      lua_tableset(_ret, 'HitDelay', 0);
      lua_tableset(_ret, 'Damage', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_CounterSpell_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'CounterSpell_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic'))) {
        lua_tableset(_ret, 'KDPower', 0);
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
        lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        lua_tableset(_ret, 'HitDelay', 0);
        lua_tableset(_ret, 'Damage', 0);
        lua_call(G.str['SetExProp'], [_from, "CHECK_SKL_KD_PROP", 1]);
        lua_call(G.str['SkillTextEffect'], [null, _self, _from, "SHOW_GUNGHO", null]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ironskin_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_tableget(_skill, 'ClassType'), "Melee")) {
        var _damReflect_6103 = lua_tableget(_self, 'DamReflect');
        var _Iron_6103 = lua_call(G.str['GetSkill'], [_self, 'Monk_IronSkin'])[0];
        if ((!lua_eq(_Iron_6103, null) && lua_lt(0, _damReflect_6103))) {
          tmp = lua_call(G.str['GetPos'], [_self]); var _x_6104 = tmp[0]; var _y_6104 = tmp[1]; var _z_6104 = tmp[2]; tmp = null;
          lua_tableset(_ret, 'KDPower', 0);
          lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
          lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
          lua_tableset(_ret, 'HitDelay', 0);
          lua_tableset(_ret, 'Damage', 0);
          var _dmgratio_6104 = lua_add(0.5, lua_multiply(lua_tableget(_Iron_6103, 'Level'), 0.1));
          var _Monk2_abil_6104 = lua_call(G.str['GetAbility'], [_self, "Monk2"])[0];
          if (!lua_eq(_Monk2_abil_6104, null)) {
            _dmgratio_6104 = lua_add(_dmgratio_6104, lua_multiply(lua_tableget(_Monk2_abil_6104, 'Level'), 0.05));
          }
          var _dmg_6104 = lua_multiply(lua_tableget(_from, 'MINPATK'), _dmgratio_6104);
          lua_call(G.str['DamageReflect'], [_self, _from, lua_tableget(_Iron_6103, 'ClassName'), _dmg_6104, "None", "Strike", "Melee", G.str['HIT_MOTION'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['PlayEffect'], [_self, 'F_sys_IronSkinblock', 0.4, 0, 0]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_HellBreath_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_tableget(_from, 'MonRank'), 'Boss')) {
        return [];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HellBreath_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), "Melee"))) {
        var _skl_6108 = lua_call(G.str['GetSkill'], [_self, 'Pyromancer_HellBreath'])[0];
        if (!lua_eq(_skl_6108, null)) {
          lua_tableset(_ret, 'KDPower', 0);
          lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
          lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
          lua_tableset(_ret, 'HitDelay', 0);
          lua_tableset(_ret, 'Damage', 0);
          lua_call(G.str['SetExProp'], [_from, "CHECK_SKL_KD_PROP", 1]);
          lua_call(G.str['SkillTextEffect'], [null, _self, _from, "SHOW_GUNGHO", null]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_todal_shield'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'ReflectShield_Buff'])[0], 'NO')) {
        var _dmg_6111 = lua_multiply(lua_tableget(_ret, 'Damage'), 0.25);
        lua_call(G.str['DamageReflect'], [_self, _from, "None", _dmg_6111, "Melee", "Melee", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_UC_petrify'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'Damage', lua_divide(lua_tableget(_ret, 'Damage'), 2));
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_WedgeFormation_buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _propValue_6113 = lua_call(G.str['GetExProp'], [_buff, 'PATK_BM'])[0];
      if ((lua_lt(0, _propValue_6113) && lua_lt(1, lua_tableget(_ret, 'Damage')))) {
        lua_call(G.str['SetRepeatlyHit'], [_ret, 'WedgeFormation_buff', 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_ReflectShield_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _spendSP_6115 = lua_multiply(lua_call(G.str['TryGetProp'], [_self, "MSP"])[0], 0.01);
      var _currentSP_6115 = lua_call(G.str['TryGetProp'], [_self, "SP"])[0];
      var _abilWizard2_6115 = lua_call(G.str['GetAbility'], [_self, "Wizard2"])[0];
      if ((!lua_eq(_abilWizard2_6115, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilWizard2_6115, "ActiveState"])[0], 1))) {
        var _reduceSP_6116 = lua_multiply(lua_call(G.str['TryGetProp'], [_self, "MNA"])[0], (lua_multiply(lua_call(G.str['TryGetProp'], [_abilWizard2_6115, "Level"])[0], 0.01)));
        _spendSP_6115 = lua_subtract(_spendSP_6115, _reduceSP_6116);
        if (lua_lte(_spendSP_6115, 1)) {
          _spendSP_6115 = 1;
        }
      }
      lua_call(G.str['SetExProp'], [_self, "REFLECTSHIELD_SPENDSP", _spendSP_6115]);
      lua_call(G.str['SetExProp'], [_self, "REFLECTSHIELD_CURRENTSP", _currentSP_6115]);
      if (lua_lt(_spendSP_6115, _currentSP_6115)) {
        if (((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'todal_shield'])[0], 'NO') && lua_eq(lua_call(G.str['IsSameActor'], [_self, _from])[0], "NO")) && lua_lt(0, lua_tableget(_ret, 'Damage')))) {
          lua_tableset(_ret, 'Damage', lua_multiply(lua_tableget(_ret, 'Damage'), 0.8));
          if (lua_lt(lua_tableget(_ret, 'Damage'), 1)) {
            lua_tableset(_ret, 'Damage', 1);
          }
          lua_tableset(_ret, 'KDPower', 0);
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Curse_Debuff'])[0], 'YES')) {
            lua_tableset(_ret, 'HitType', G.str['HIT_BASIC_NOT_CANCEL_CAST']);
          } else {
            lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
          }
          lua_tableset(_ret, 'HitDelay', 0);
          lua_call(G.str['SetExProp'], [_from, "CHECK_SKL_KD_PROP", 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_GenbuArmor_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'todal_shield'])[0], 'NO') && lua_eq(lua_call(G.str['IsSameActor'], [_self, _from])[0], "NO")) && lua_lt(0, lua_tableget(_ret, 'Damage')))) {
        if (lua_lt(lua_tableget(_ret, 'Damage'), 1)) {
          lua_tableset(_ret, 'Damage', 1);
        }
        if ((lua_eq(lua_tableget(_skill, 'Attribute'), "Ice") && lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], 10))) {
          lua_tableset(_ret, 'ResultType', G.str['HITRESULT_MISS']);
        }
        var _genbuArmorSkill_6124 = lua_call(G.str['GetSkill'], [_self, "Onmyoji_GenbuArmor"])[0];
        if (!lua_eq(_genbuArmorSkill_6124, null)) {
          var _abilDamageRate_6127 = 0;
          var _abilOnmyoji12_6127 = lua_call(G.str['GetAbility'], [_self, "Onmyoji12"])[0];
          if ((!lua_eq(_abilOnmyoji12_6127, null) && lua_eq(lua_tableget(_abilOnmyoji12_6127, 'ActiveState'), 1))) {
            _abilDamageRate_6127 = lua_multiply(lua_tableget(_abilOnmyoji12_6127, 'Level'), 0.01);
          }
          lua_tableset(_ret, 'Damage', lua_add(lua_multiply(lua_tableget(_ret, 'Damage'), (lua_subtract(0.9, (lua_multiply(lua_tableget(_genbuArmorSkill_6124, 'Level'), 0.05))))), _abilDamageRate_6127));
        }
        var _abilOnmyoji11_6124 = lua_call(G.str['GetAbility'], [_self, "Onmyoji11"])[0];
        var _remainSP_6124 = lua_call(G.str['TryGetProp'], [_self, "SP"])[0];
        if ((!lua_eq(_abilOnmyoji11_6124, null) && lua_eq(lua_tableget(_abilOnmyoji11_6124, 'ActiveState'), 1))) {
          if ((lua_eq(lua_tableget(_skill, 'ClassType'), "Melee") || lua_eq(lua_tableget(_skill, 'ClassType'), "Missile"))) {
            if (lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], lua_multiply(lua_tableget(_abilOnmyoji11_6124, 'Level'), 2))) {
              lua_tableset(_ret, 'Damage', 0);
              lua_tableset(_ret, 'ResultType', G.str['HITRESULT_DODGE']);
              lua_tableset(_ret, 'HitType', G.str['HIT_DODGE']);
              lua_tableset(_ret, 'EffectType', G.str['HITEFT_NO']);
              lua_tableset(_ret, 'HitDelay', 0);
            }
          }
        }
        lua_call(G.str['AddSP'], [_self, lua_unm(lua_tableget(_ret, 'Damage'))]);
        if (lua_lt(_remainSP_6124, lua_tableget(_ret, 'Damage'))) {
          lua_call(G.str['AddHP'], [_self, lua_unm((lua_subtract(lua_tableget(_ret, 'Damage'), _remainSP_6124)))]);
        }
        lua_tableset(_ret, 'Damage', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ability_buff_attribute'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_tableget(_skill, 'Attribute'), lua_tableget(_self, 'Attribute'))) {
        lua_call(G.str['Heal'], [_self, lua_tablegetcall(G.str['math'], 'floor', [lua_tableget(_ret, 'Damage')])[0], 0]);
        lua_tableset(_ret, 'Damage', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Cleric_Revival_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_lte(lua_tableget(_self, 'HP'), lua_tableget(_ret, 'Damage'))) {
        var _reviveSkillLv_6136 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_eq(_reviveSkillLv_6136, 0)) {
          _reviveSkillLv_6136 = 1;
        }
        lua_tableset(_ret, 'Damage', lua_subtract(lua_tableget(_self, 'HP'), 1));
        var _buffTime_6136 = lua_multiply(_reviveSkillLv_6136, 1000);
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
          _buffTime_6136 = 3000;
        }
        var _key_6136 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6136]);
        lua_call(G.str['AddBuff'], [_self, _self, 'Cleric_Revival_Leave_Buff', _reviveSkillLv_6136, 0, _buffTime_6136, 1]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6136]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_RevengedSevenfold_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((((lua_eq(lua_call(G.str['IsSameActor'], [_self, _from])[0], "NO") && lua_lt(0, lua_tableget(_ret, 'Damage'))) && lua_eq(lua_call(G.str['GetRelation'], [_self, _from])[0], "ENEMY")) && !lua_eq(lua_call(G.str['TryGetProp'], [_skill, 'ClassType'])[0], 'AbsoluteDamage'))) {
        var _caster_6140 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_6140, null)) {
          var _skill_6141 = lua_call(G.str['GetSkill'], [_caster_6140, "Kabbalist_RevengedSevenfold"])[0];
          if (!lua_eq(_skill_6141, null)) {
            var _dmg_6142 = lua_add(lua_tableget(_ret, 'Damage'), (lua_multiply(lua_tableget(_ret, 'Damage'), (lua_multiply(lua_tableget(_skill_6141, 'Level'), 0.1)))));
            lua_tableset(_ret, 'Damage', 1);
            lua_tableset(_ret, 'KDPower', 0);
            lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
            lua_tableset(_ret, 'HitDelay', 0);
            lua_call(G.str['SetExProp'], [_from, "CHECK_SKL_KD_PROP", 1]);
            lua_call(G.str['RunScript'], ["Revenged_Sync", _self, _from, _skill_6141, _dmg_6142, _ret, _caster_6140]);
            lua_call(G.str['RemoveBuff'], [_self, lua_tableget(_buff, 'ClassName')]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Subzero_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _dmg_6143 = lua_divide(lua_tableget(_ret, 'Damage'), 2);
      var _caster_6143 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _sklLv_6143 = lua_call(G.str['GetBuffArg'], [_buff])[0];
      var _FreezeRating_6143 = lua_add(10, lua_multiply(_sklLv_6143, 5));
      var _abilCryomancer9_6143 = lua_call(G.str['GetAbility'], [_caster_6143, "Cryomancer9"])[0];
      if ((!lua_eq(_abilCryomancer9_6143, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilCryomancer9_6143, "ActiveState"])[0], 1))) {
        _FreezeRating_6143 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_FreezeRating_6143, (lua_add(1, lua_multiply(lua_tableget(_abilCryomancer9_6143, 'Level'), 0.05))))])[0];
      }
      var _random_6143 = lua_call(G.str['IMCRandom'], [1, 100])[0];
      if (((((((((lua_eq(lua_tableget(_skill, 'ClassType'), "Melee") && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Hoplite_ThrouwingSpear')) && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Peltasta_ShieldLob')) && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Shinobi_Kunai')) && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Dragoon_Gae_Bulg')) && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Monk_EnergyBlast')) && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Monk_God_Finger_Flicking')) && lua_lte(_random_6143, _FreezeRating_6143)) && lua_lt(0, lua_tableget(_ret, 'Damage')))) {
        lua_tableset(_ret, 'Damage', _dmg_6143);
        lua_tableset(_ret, 'KDPower', 0);
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_caster_6143, 'Raid_Velcofer_Curse_Debuff'])[0], 'YES')) {
          lua_tableset(_ret, 'HitType', G.str['HIT_BASIC_NOT_CANCEL_CAST']);
        } else {
          lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        }
        lua_tableset(_ret, 'HitDelay', 0);
        lua_call(G.str['SetExProp'], [_from, "CHECK_SKL_KD_PROP", 1]);
        var _addDamage_6145 = 0;
        var _Cryomancer10_abil_6145 = lua_call(G.str['GetAbility'], [_caster_6143, "Cryomancer10"])[0];
        if (!lua_eq(_Cryomancer10_abil_6145, null)) {
          var _shield_6148 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
          if ((!lua_eq(_shield_6148, null) && lua_eq(lua_tableget(_shield_6148, 'ClassType'), "Shield"))) {
            _addDamage_6145 = lua_multiply(lua_multiply(lua_tableget(_shield_6148, 'DEF'), lua_tableget(_Cryomancer10_abil_6145, 'Level')), 0.5);
          }
        }
        lua_call(G.str['RunScript'], ["SubzeroShield_sync", _self, _from, _skill, lua_add(_dmg_6143, _addDamage_6145), _ret, _caster_6143]);
      } else {
        lua_tableset(_ret, 'Damage', lua_tableget(_ret, 'Damage'));
        lua_tableset(_ret, 'KDPower', 0);
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_caster_6143, 'Raid_Velcofer_Curse_Debuff'])[0], 'YES')) {
          lua_tableset(_ret, 'HitType', G.str['HIT_BASIC_NOT_CANCEL_CAST']);
        } else {
          lua_tableset(_ret, 'HitType', G.str['HIT_BASIC']);
        }
        lua_tableset(_ret, 'HitDelay', 0);
        lua_call(G.str['SetExProp'], [_from, "CHECK_SKL_KD_PROP", 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_Invocation_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetHandle'], [_from])[0], lua_call(G.str['GetExProp'], [_self, 'CASTER_HANDLE'])[0])) {
        return [];
      }
      if (!lua_eq(lua_tableget(_skill, 'ClassName'), "Warlock_Invocation")) {
        var _checkDamage_6155 = lua_tableget(_ret, 'Damage');
        if ((!lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_lt(0, lua_tableget(_self, 'HPCount')))) {
          _checkDamage_6155 = 1;
        }
        if ((lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1) || lua_lte(lua_tableget(_self, 'HP'), _checkDamage_6155))) {
          lua_call(G.str['SUMMON_INVOCATION_MONSTER'], [_from, _self, lua_tableget(_skill, 'Level')]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Ability_buff_SolidStrong'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _increaseRatio_6158 = 1.5;
      var _decreaseRatio_6158 = 0.5;
      if (lua_eq(lua_tableget(_skill, 'ClassName'), "Rogue_Backstab")) {
        lua_tableset(_ret, 'Damage', lua_multiply(lua_tableget(_ret, 'Damage'), _increaseRatio_6158));
      } else if (lua_eq(lua_tableget(_skill, 'ClassName'), "Doppelsoeldner_Cyclone")) {
        lua_tableset(_ret, 'Damage', lua_multiply(lua_tableget(_ret, 'Damage'), _decreaseRatio_6158));
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Foretell_Immune_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Foretell_Immune_Buff'])[0], 'YES') && lua_eq(lua_call(G.str['IsMoving'], [_self])[0], 1))) {
        lua_tableset(_ret, 'KDPower', 0);
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_MISS']);
        lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        lua_tableset(_ret, 'HitDelay', 0);
        lua_tableset(_ret, 'Damage', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Foretell_Magic_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Foretell_Magic_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic'))) {
        lua_tableset(_ret, 'KDPower', 0);
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
        lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        lua_tableset(_ret, 'HitDelay', 0);
        lua_tableset(_ret, 'Damage', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Foretell_Missile_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Foretell_Missile_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile'))) {
        lua_tableset(_ret, 'KDPower', 0);
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
        lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        lua_tableset(_ret, 'HitDelay', 0);
        lua_tableset(_ret, 'Damage', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Foretell_TrueDamage_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Foretell_TrueDamage_Buff'])[0], 'YES')) {
        if ((lua_eq(lua_tableget(_skill, 'ClassType'), 'TrueDamage') || lua_eq(lua_tableget(_skill, 'ClassType'), 'AbsoluteDamage'))) {
          lua_tableset(_ret, 'KDPower', 0);
          lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
          lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
          lua_tableset(_ret, 'HitDelay', 0);
          lua_tableset(_ret, 'Damage', 0);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_MissileHole_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MissileHole_Buff'])[0], 'YES') && (lua_eq(lua_tableget(_skill, 'HitType'), 'Force') || lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')))) {
        lua_tableset(_ret, 'KDPower', 0);
        lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
        lua_tableset(_ret, 'HitDelay', 0);
        lua_tableset(_ret, 'Damage', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_EpeeGarde_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'EpeeGarde_Buff'])[0], 'YES') && lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL']))) {
        var _attackType_6173 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_6174 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_6173 = lua_tableget(_rightHand_6174, 'AttackType');
        }
        if (lua_eq(_attackType_6173, 'Aries')) {
          var _sklLevel_6175 = lua_call(G.str['GetBuffArg'], [_buff])[0];
          lua_tableset(_ret, 'Damage', lua_add(lua_tableget(_ret, 'Damage'), lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_ret, 'Damage'), 0.5)])[0]));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Incineration_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _caster_6176 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6176, null)) {
        return [];
      }
      var _abil_6176 = lua_call(G.str['GetAbility'], [_caster_6176, "PlagueDoctor13"])[0];
      if ((lua_eq(_abil_6176, null) || lua_lt(lua_tableget(_ret, 'Damage'), lua_tableget(_self, 'HP')))) {
        return [];
      }
      tmp = lua_call(G.str['GetBuffListByStringProp'], [_self, "CopyAble", "YES"]); var _buffList_6176 = tmp[0]; var _listCnt_6176 = tmp[1]; tmp = null;
      tmp = lua_call(G.str['SelectObjectNear'], [_from, _self, 100, 'ENEMY']); var _objList_6176 = tmp[0]; var _objCount_6176 = tmp[1]; tmp = null;
      var _targetList_6176 = lua_newtable();
      var var_6179 = 1, stop_6179 = lua_assertfloat(_objCount_6176);
      for (; var_6179 <= stop_6179; var_6179++) {
        var _i_6179 = var_6179;
        var _obj_6180 = lua_tableget(_objList_6176, _i_6179);
        if (lua_eq('NO', lua_call(G.str['IsSameActor'], [_obj_6180, _self])[0])) {
          lua_tableset(_targetList_6176, lua_add(lua_len(_targetList_6176), 1), _obj_6180);
          if (lua_lte(lua_tableget(_abil_6176, 'Level'), lua_len(_targetList_6176))) {
            break;
          }
        }
      }
      lua_call(G.str['PlaySound'], [_from, 'skl_eff_debuff_20']);
      var var_6183 = 1, stop_6183 = lua_assertfloat(lua_len(_targetList_6176));
      for (; var_6183 <= stop_6183; var_6183++) {
        var _i_6183 = var_6183;
        var _obj_6184 = lua_tableget(_targetList_6176, _i_6183);
        var var_6185 = 1, stop_6185 = lua_assertfloat(_listCnt_6176);
        for (; var_6185 <= stop_6185; var_6185++) {
          var _j_6185 = var_6185;
          var _buff_6186 = lua_tableget(_buffList_6176, _j_6185);
          tmp = lua_call(G.str['GetBuffArg'], [_buff_6186]); var _arg1_6186 = tmp[0]; var _arg2_6186 = tmp[1]; tmp = null;
          var _buffTime_6186 = lua_call(G.str['GetBuffRemainTime'], [_buff_6186])[0];
          var _buff2_6186 = lua_call(G.str['AddBuff'], [_from, _obj_6184, lua_tableget(_buff_6186, 'ClassName'), _arg1_6186, _arg2_6186, _buffTime_6186, 1])[0];
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_EnchantLightning_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _pCls_6187 = lua_call(G.str['GetClass'], ["Skill", lua_tableget(_skill, 'ClassName')])[0];
      lua_tableset(_skill, 'Attribute', lua_tableget(_pCls_6187, 'Attribute'));
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_PatronSaint'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'PatronSaint'])[0], 'YES')) {
        var _buffTarget_6189 = lua_call(G.str['GetExProp_Str'], [_self, "SOUL_BUFF"])[0];
        if (!lua_eq(_buffTarget_6189, null)) {
          if (lua_eq(_buffTarget_6189, 'PATRON_GIVE')) {
            if ((lua_eq(_ret, null) || lua_lt(0, lua_call(G.str['GetStructIndex'], [_ret])[0]))) {
              return [];
            }
            var _caster_6191 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
            if (lua_eq(_caster_6191, null)) {
              return [];
            }
            var _dmg_6191 = lua_tableget(_ret, 'Damage');
            lua_tableset(_ret, 'Damage', 0);
            lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
            lua_tableset(_ret, 'HitType', G.str['HIT_NOHIT']);
            lua_tableset(_ret, 'EffectType', G.str['HITEFT_NO']);
            lua_tableset(_ret, 'HitDelay', 0);
            var _key_6191 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
            lua_call(G.str['StartSyncPacket'], [_self, _key_6191]);
            var _abil_6191 = lua_call(G.str['GetExProp'], [_self, "SOUL_BUFF_ABIL"])[0];
            if (!lua_eq(_abil_6191, null)) {
              _dmg_6191 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(_dmg_6191, (lua_multiply(_dmg_6191, (lua_multiply(_abil_6191, 0.05)))))])[0];
            }
            lua_call(G.str['TakeDamage'], [_from, _caster_6191, lua_tableget(_skill, 'ClassName'), _dmg_6191]);
            lua_call(G.str['EndSyncPacket'], [_self, _key_6191]);
            var _remain_6191 = lua_call(G.str['GetExProp'], [_self, "SOUL_BUFF_COUNT"])[0];
            lua_call(G.str['SetExProp'], [_self, "SOUL_BUFF_COUNT", lua_subtract(_remain_6191, 1)]);
            if (lua_lte(lua_subtract(_remain_6191, 1), 0)) {
              lua_call(G.str['RemoveBuff'], [_self, lua_tableget(_buff, 'ClassName')]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Barrier_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Barrier_Buff'])[0], 'YES')) {
        if (lua_lte(lua_tableget(_ret, 'Damage'), 0)) {
          return [1];
        }
        var _dmg_6197 = lua_tableget(_ret, 'Damage');
        var _caster_6197 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (lua_eq(_caster_6197, null)) {
          return [1];
        }
        var _Paladin9_abil_6197 = lua_call(G.str['GetAbility'], [_caster_6197, 'Paladin9'])[0];
        if (!lua_eq(_Paladin9_abil_6197, null)) {
          var _HitType_6200 = lua_call(G.str['TryGetProp'], [_skill, "HitType"])[0];
          var _ClassType_6200 = lua_call(G.str['TryGetProp'], [_skill, "ClassType"])[0];
          if ((lua_eq(_HitType_6200, 'Force') || lua_eq(_ClassType_6200, 'Missile'))) {
            _dmg_6197 = lua_subtract(_dmg_6197, (lua_multiply(_dmg_6197, (lua_multiply(lua_tableget(_Paladin9_abil_6197, 'Level'), 0.1)))));
            if (lua_lt(_dmg_6197, 0)) {
              _dmg_6197 = 0;
            }
            lua_tableset(_ret, 'Damage', lua_tablegetcall(G.str['math'], 'floor', [_dmg_6197])[0]);
          }
        }
        var _Paladin20_abil_6197 = lua_call(G.str['GetAbility'], [_caster_6197, 'Paladin20'])[0];
        var _Paladin20_ActiveState_6197 = lua_call(G.str['TryGetProp'], [_Paladin20_abil_6197, "ActiveState"])[0];
        var _damage_6197 = lua_call(G.str['GET_SKL_DAMAGE'], [_from, _caster_6197, lua_tableget(_skill, 'ClassName')])[0];
        if (((!lua_eq(_Paladin20_abil_6197, null) && lua_eq(_Paladin20_ActiveState_6197, 1)) && lua_eq(lua_call(G.str['IsBuffApplied'], [_caster_6197, 'Barrier_Buff'])[0], 'YES'))) {
          tmp = lua_call(G.str['GetPartyMemberList'], [_caster_6197, G.str['PARTY_NORMAL'], G.str['range']]); var _partyMemberList_6203 = tmp[0]; var _partyMemberCnt_6203 = tmp[1]; tmp = null;
          var var_6204 = 1, stop_6204 = lua_assertfloat((lua_subtract(_partyMemberCnt_6203, 1)));
          for (; var_6204 <= stop_6204; var_6204++) {
            var _i_6204 = var_6204;
            if (((!lua_eq(lua_tableget(_partyMemberList_6203, _i_6204), null) && lua_eq(lua_call(G.str['IsSameActor'], [_caster_6197, _self])[0], "NO")) && lua_eq(lua_call(G.str['IsDead'], [_caster_6197])[0], 0))) {
              lua_tableset(_ret, 'Damage', 0);
              lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
              lua_tableset(_ret, 'HitType', G.str['HIT_NOHIT']);
              lua_tableset(_ret, 'EffectType', G.str['HITEFT_NO']);
              lua_tableset(_ret, 'HitDelay', 0);
              lua_call(G.str['TakeDamage'], [_from, _caster_6197, lua_tableget(_skill, 'ClassName'), _damage_6197]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_ScudInstinct_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'ScudInstinct_Buff'])[0], 'YES')) {
        var _over_6208 = lua_call(G.str['GetBuffOver'], [_from, 'ScudInstinct_Buff'])[0];
        if (lua_lte(1, _over_6208)) {
          var _skill_list_6209 = lua_newtable(['Barbarian_Embowel', 'Barbarian_StompingKick', 'Barbarian_Cleave', 'Barbarian_HelmChopper', 'Barbarian_Seism', 'Barbarian_GiantSwing', 'Barbarian_Pouncing']);
          var var_6210 = 1, stop_6210 = lua_assertfloat(lua_len(_skill_list_6209));
          for (; var_6210 <= stop_6210; var_6210++) {
            var _i_6210 = var_6210;
            if (lua_eq(lua_tableget(_skill, 'ClassName'), lua_tableget(_skill_list_6209, _i_6210))) {
              if (lua_eq(lua_tableget(_skill, 'ClassName'), 'Barbarian_GiantSwing')) {
                lua_tableset(_ret, 'Damage', lua_add(lua_tableget(_ret, 'Damage'), lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_ret, 'Damage'), 0.12), _over_6208)])[0]));
              } else {
                lua_tableset(_ret, 'Damage', lua_add(lua_tableget(_ret, 'Damage'), lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_ret, 'Damage'), 0.06), _over_6208)])[0]));
              }
              lua_call(G.str['AddBuff'], [_from, _from, 'ScudInstinct_Buff', 1, 0, 0, 0]);
              return [1];
            }
          }
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Virus_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_tableget(_skill, 'ClassName'), "Wugushi_WugongGu") || lua_eq(lua_tableget(_skill, 'ClassName'), "Default"))) {
        return [];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Virus_Debuff'])[0], 'YES')) {
        var _virusMaxCount_6219 = lua_call(G.str['GetExProp'], [_buff, 'VIRUS_MAX_COUNT'])[0];
        var _virusSpreadCount_6219 = lua_call(G.str['GetExProp'], [_buff, 'VIRUS_SPREAD_COUNT'])[0];
        if (lua_lte(_virusMaxCount_6219, _virusSpreadCount_6219)) {
          return [];
        }
        var _spreadRange_6219 = 50;
        var _buffCaster_6219 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        tmp = lua_call(G.str['SelectObjectNear'], [_buffCaster_6219, _self, _spreadRange_6219, 'ENEMY']); var _list_6219 = tmp[0]; var _cnt_6219 = tmp[1]; tmp = null;
        var var_6221 = 1, stop_6221 = lua_assertfloat(_cnt_6219);
        for (; var_6221 <= stop_6221; var_6221++) {
          var _i_6221 = var_6221;
          var _obj_6222 = lua_tableget(_list_6219, _i_6221);
          if (!lua_eq(_obj_6222, null)) {
            if (lua_eq(lua_call(G.str['IsSameActor'], [_self, _obj_6222])[0], "NO")) {
              var _virus_list_6224 = lua_newtable();
              var _buff_list_6224 = lua_call(G.str['GetBuffList'], [_obj_6222])[0];
              if (lua_lte(1, lua_len(_buff_list_6224))) {
                var var_6226 = 1, stop_6226 = lua_assertfloat(lua_len(_buff_list_6224));
                for (; var_6226 <= stop_6226; var_6226++) {
                  var _j_6226 = var_6226;
                  if ((lua_eq(lua_tableget(lua_tableget(_buff_list_6224, _j_6226), 'ClassName'), 'Virus_Debuff') || lua_eq(lua_tableget(lua_tableget(_buff_list_6224, _j_6226), 'ClassName'), 'Virus_Spread_Debuff'))) {
                    lua_tableset(_virus_list_6224, lua_add(lua_len(_virus_list_6224), 1), lua_tableget(_buff_list_6224, _j_6226));
                  }
                }
              }
              if (lua_lte(1, lua_len(_virus_list_6224))) {
                var var_6230 = 1, stop_6230 = lua_assertfloat(lua_len(_virus_list_6224));
                for (; var_6230 <= stop_6230; var_6230++) {
                  var _k_6230 = var_6230;
                  var _virusCaster_6231 = lua_call(G.str['GetBuffCaster'], [lua_tableget(_virus_list_6224, _k_6230)])[0];
                  if (lua_eq(lua_call(G.str['IsSameActor'], [_buffCaster_6219, _virusCaster_6231])[0], "YES")) {
                    return [];
                  }
                }
              }
              var _buffTime_6224 = 10000;
              var _abil_6224 = lua_call(G.str['GetAbility'], [_buffCaster_6219, 'Wugushi4'])[0];
              if (!lua_eq(_abil_6224, null)) {
                _buffTime_6224 = lua_add(_buffTime_6224, lua_multiply(1000, lua_tableget(_abil_6224, 'Level')));
              }
              var _key_6224 = lua_call(G.str['GetSkillSyncKey'], [_from, _ret])[0];
              lua_call(G.str['StartSyncPacket'], [_from, _key_6224]);
              lua_call(G.str['AddBuff'], [_buffCaster_6219, _obj_6222, 'Virus_Spread_Debuff', lua_tableget(_buff, 'Lv'), 0, _buffTime_6224, 1]);
              lua_call(G.str['EndSyncPacket'], [_from, _key_6224, 0]);
              lua_call(G.str['SetExProp'], [_buff, 'VIRUS_SPREAD_COUNT', lua_add(_virusSpreadCount_6219, 1)]);
              return [];
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Boss_Reflect_attack'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'ReflectShield_Buff'])[0], 'NO')) {
        var _dmg_6235 = lua_multiply(lua_tableget(_ret, 'Damage'), 0.15);
        lua_call(G.str['DamageReflect'], [_self, _from, "None", _dmg_6235, "Melee", "Melee", "TrueDamage", G.str['HIT_REFLECT'], G.str['HITRESULT_BLOW']]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Raise_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raise_Debuff'])[0], 'YES')) {
        if (lua_lte(lua_tableget(_ret, 'Damage'), 0)) {
          return [1];
        }
        if (((lua_eq(lua_tableget(_skill, 'ClassName'), 'Hunter_Snatching') || lua_eq(lua_tableget(_skill, 'ClassName'), 'Cannoneer_ShootDown')) || lua_eq(lua_tableget(_skill, 'ClassName'), 'Musketeer_Birdfall'))) {
          var _dmg_6239 = lua_tableget(_ret, 'Damage');
          _dmg_6239 = lua_add(_dmg_6239, (lua_multiply(_dmg_6239, 0.5)));
          if (lua_lt(_dmg_6239, 0)) {
            _dmg_6239 = 0;
          }
          lua_tableset(_ret, 'Damage', lua_tablegetcall(G.str['math'], 'floor', [_dmg_6239])[0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Methadone_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      if (!lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL'])) {
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_BLOW']);
      }
      lua_tableset(_ret, 'HitType', G.str['HIT_ENDURE']);
      lua_tableset(_ret, 'HitDelay', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Invulnerable_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      if (!lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL'])) {
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_BLOW']);
      }
      lua_tableset(_ret, 'HitType', G.str['HIT_ENDURE']);
      lua_tableset(_ret, 'HitDelay', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Hallucination_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Hallucination_Buff'])[0], 'YES')) {
        var _caster_6246 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _damage_6246 = lua_call(G.str['GET_SKL_DAMAGE'], [_from, _caster_6246, lua_tableget(_skill, 'ClassName')])[0];
        var _dummyPC_6246 = lua_call(G.str['GET_TARGETLIST_DUMMYPC_FOR_EXPROP'], [_caster_6246, "EXPROP_SHADOW_DUMMYPC"])[0];
        if ((lua_eq(lua_call(G.str['IsSameActor'], [_from, _caster_6246])[0], "NO") && lua_eq(lua_call(G.str['IsDead'], [_caster_6246])[0], 0))) {
          var var_6248 = 1, stop_6248 = lua_assertfloat(lua_len(_dummyPC_6246));
          for (; var_6248 <= stop_6248; var_6248++) {
            var _i_6248 = var_6248;
            var _dummyPClist_6249 = lua_tableget(_dummyPC_6246, _i_6248);
            lua_tableset(_ret, 'Damage', 0);
            lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
            lua_tableset(_ret, 'HitType', G.str['HIT_NOHIT']);
            lua_tableset(_ret, 'EffectType', G.str['HITEFT_NO']);
            lua_tableset(_ret, 'HitDelay', 0);
            lua_call(G.str['TakeDamage'], [_from, _dummyPClist_6249, lua_tableget(_skill, 'ClassName'), _damage_6246, lua_tableget(_skill, 'Attribute'), lua_tableget(_skill, 'AttackType'), lua_tableget(_skill, 'ClassType')]);
            if (lua_eq(lua_call(G.str['IsDead'], [_dummyPClist_6249])[0], 1)) {
              lua_call(G.str['RemoveBuff'], [_self, "Hallucination_Buff"]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_BlindFaith_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'BlindFaith_Buff'])[0], 'YES')) {
        var _caster_6252 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _attackSkill_6252 = lua_call(G.str['GetSkill'], [_caster_6252, "Zealot_BlindFaith"])[0];
        if (lua_eq(lua_tableget(_skill, 'ClassName'), lua_tableget(_attackSkill_6252, 'ClassName'))) {
          return [];
        }
        var _blindFaithSP_6252 = lua_call(G.str['GetExProp'], [_buff, "BLINDFAITH_REMAINSP"])[0];
        var _damage_6252 = lua_multiply(_blindFaithSP_6252, (lua_add(2, (lua_multiply((lua_subtract(lua_tableget(_attackSkill_6252, 'Level'), 1)), 0.2)))));
        if (lua_eq(lua_call(G.str['IsSameActor'], [_caster_6252, _self])[0], "NO")) {
          lua_call(G.str['TakeDadak'], [_caster_6252, _self, lua_tableget(_attackSkill_6252, 'ClassName'), _damage_6252, 0.25, "Holy", "Melee", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_NO_HITSCP']]);
        }
        var _atkCount_6252 = lua_call(G.str['GetExProp'], [_buff, "BlindFaith_Count"])[0];
        _atkCount_6252 = lua_subtract(_atkCount_6252, 1);
        if (lua_lte(_atkCount_6252, 0)) {
          lua_call(G.str['RemoveBuff'], [_caster_6252, lua_tableget(_buff, 'ClassName')]);
        }
        lua_call(G.str['SetExProp'], [_buff, "BlindFaith_Count", _atkCount_6252]);
        var _abil_6252 = lua_call(G.str['GetAbility'], [_caster_6252, "Zealot7"])[0];
        if ((!lua_eq(_abil_6252, null) && lua_eq(lua_tableget(_abil_6252, 'ActiveState'), 1))) {
          var _abilLevel_6256 = lua_call(G.str['TryGetProp'], [_abil_6252, 'Level'])[0];
          if (lua_eq(_abilLevel_6256, null)) {
            _abilLevel_6256 = 1;
          }
          lua_call(G.str['AddBuff'], [_caster_6252, _self, "BlindFaith_Debuff", _abilLevel_6256, 0, 10000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_SnipersSerenity_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'SnipersSerenity_Buff'])[0], 'YES')) {
        var _chargingRate_6259 = lua_call(G.str['GetExProp'], [_buff, "SNIPERS_CHARGE"])[0];
        var _attackType_6259 = lua_call(G.str['GET_SKILL_ATTACKTYPE'], [_skill])[0];
        if (((lua_eq(_chargingRate_6259, 1) && lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL'])) && lua_eq(_attackType_6259, "Gun"))) {
          lua_tableset(_ret, 'Damage', lua_add(lua_tableget(_ret, 'Damage'), lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_ret, 'Damage'), 0.5)])[0]));
        }
        var _abil_6259 = lua_call(G.str['GetAbility'], [_from, 'Musketeer23'])[0];
        if (((!lua_eq(_abil_6259, null) && lua_eq(lua_tableget(_abil_6259, 'ActiveState'), 1)) && lua_eq(_attackType_6259, 'Gun'))) {
          lua_call(G.str['AddBuff'], [_from, _self, 'UC_armorbreak', 1, 0, 3000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_BlindFaith_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'BlindFaith_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL'])) {
          var _abilLevel_6264 = lua_call(G.str['GetBuffArg'], [_buff])[0];
          if (lua_eq(_abilLevel_6264, null)) {
            _abilLevel_6264 = 1;
          }
          var _addCrtDmgRate_6264 = lua_multiply(_abilLevel_6264, 0.1);
          lua_tableset(_ret, 'Damage', lua_add(lua_tableget(_ret, 'Damage'), lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_ret, 'Damage'), _addCrtDmgRate_6264)])[0]));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Skill_NoDamage_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_lt(0, lua_tableget(_ret, 'Damage'))) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Skill_NoDamage_Buff'])[0], 'YES')) {
          tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _buffLv_6268 = tmp[0]; var _buffRate_6268 = tmp[1]; tmp = null;
          if ((lua_lte(10000, _buffRate_6268) || lua_lte(lua_call(G.str['IMCRandom'], [1, 10000])[0], _buffRate_6268))) {
            lua_tableset(_ret, 'HitType', G.str['HIT_NOHIT']);
            lua_tableset(_ret, 'Damage', 0);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_DaggerGuard_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_lt(0, lua_tableget(_ret, 'Damage'))) {
        var _buffRate_6271 = 50;
        var _abilRetiarii3_6271 = lua_call(G.str['GetAbility'], [_self, "Retiarii3"])[0];
        if ((!lua_eq(_abilRetiarii3_6271, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRetiarii3_6271, "ActiveState"])[0], 1))) {
          _buffRate_6271 = lua_add(_buffRate_6271, lua_call(G.str['TryGetProp'], [_abilRetiarii3_6271, "Level"])[0]);
        }
        var _attackType_6271 = lua_call(G.str['TryGetProp'], [_skill, "AttackType"])[0];
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, "UseSubweaponDamage"])[0], "NO")) {
            var _rightHand_6274 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
            _attackType_6271 = lua_tableget(_rightHand_6274, 'AttackType');
          } else {
            var _leftHand_6275 = lua_call(G.str['GetEquipItem'], [_from, 'LH'])[0];
            _attackType_6271 = lua_tableget(_leftHand_6275, 'AttackType');
          }
        }
        var _attackTypeList_6271 = lua_newtable(["Aries", "Slash", "Strike"]);
        var _attackTypeCheck_6271 = false;
        var var_6276 = 1, stop_6276 = lua_assertfloat(lua_len(_attackTypeList_6271));
        for (; var_6276 <= stop_6276; var_6276++) {
          var _i_6276 = var_6276;
          if (lua_eq(lua_tableget(_attackTypeList_6271, _i_6276), _attackType_6271)) {
            _attackTypeCheck_6271 = true;
          }
        }
        var _abilRetiarii4_6271 = lua_call(G.str['GetAbility'], [_self, "Retiarii3"])[0];
        if ((!lua_eq(_abilRetiarii4_6271, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRetiarii4_6271, "ActiveState"])[0], 1))) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ClassType"])[0], "Missile")) {
            _attackTypeCheck_6271 = true;
            _buffRate_6271 = lua_multiply(_buffRate_6271, 0.5);
          }
        }
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "DaggerGuard_Buff"])[0], "YES")) {
          if (lua_eq(_attackTypeCheck_6271, true)) {
            if (lua_lte(lua_call(G.str['IMCRandom'], [1, 100])[0], _buffRate_6271)) {
              lua_tableset(_ret, 'Damage', 0);
              lua_tableset(_ret, 'HitType', G.str['HIT_BLOCK']);
              lua_tableset(_ret, 'ResultType', G.str['HITRESULT_BLOCK']);
              var _remain_6283 = lua_call(G.str['GetExProp'], [_self, "DAGGERGUARD_COUNT"])[0];
              lua_call(G.str['SetExProp'], [_self, "DAGGERGUARD_COUNT", lua_subtract(_remain_6283, 1)]);
              if (lua_lte(lua_subtract(_remain_6283, 1), 0)) {
                lua_call(G.str['RemoveBuff'], [_self, lua_tableget(_buff, 'ClassName')]);
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_INVINCIBILITY_EXCEPT_FOR_CERTAIN_ATTACKS'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsSameActor'], [_from, _self])[0], 'NO')) {
        lua_tableset(_ret, 'Damage', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_VitalProtection_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if (lua_lt(lua_tableget(_self, 'HP'), lua_tableget(_ret, 'Damage'))) {
        lua_call(G.str['SetExProp'], [_buff, "VITALPROTECTION_ADDHP", lua_tableget(_self, 'HP')]);
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Mergaite_Enter_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
      lua_tableset(_ret, 'HitType', G.str['HIT_SAFETY']);
      lua_tableset(_ret, 'HitDelay', 0);
      lua_tableset(_ret, 'Damage', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Marschierendeslied_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      lua_tableset(_ret, 'KDPower', 0);
      if (!lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL'])) {
        lua_tableset(_ret, 'ResultType', G.str['HITRESULT_BLOW']);
      }
      lua_tableset(_ret, 'HitType', G.str['HIT_ENDURE']);
      lua_tableset(_ret, 'HitDelay', 0);
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_HIT_Friedenslied_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      var _caster_6292 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6292, null)) {
        var _abilPiedPiper10_6293 = lua_call(G.str['GetAbility'], [_caster_6292, "PiedPiper10"])[0];
        if ((!lua_eq(_abilPiedPiper10_6293, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilPiedPiper10_6293, "ActiveState"])[0], 1))) {
          lua_tableset(_ret, 'Damage', 0);
          lua_tableset(_ret, 'ResultType', G.str['HITRESULT_NONE']);
          lua_tableset(_ret, 'HitType', G.str['HIT_NOHIT']);
          lua_tableset(_ret, 'EffectType', G.str['HITEFT_NO']);
          lua_tableset(_ret, 'HitDelay', 0);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_AFTERCALC_ATK_CriticalShot_Buff'] = (function (_self, _from, _skill, _atk, _ret, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'CriticalShot_Buff'])[0], 'YES') && lua_eq(lua_tableget(_ret, 'ResultType'), G.str['HITRESULT_CRITICAL']))) {
        var _buffOver_6296 = lua_call(G.str['GetBuffOver'], [_from, lua_tableget(_buff, 'ClassName')])[0];
        var _addDamageRate_6296 = lua_multiply(_buffOver_6296, 0.1);
        lua_tableset(_ret, 'Damage', lua_add(lua_tableget(_ret, 'Damage'), lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_ret, 'Damage'), _addDamageRate_6296)])[0]));
      }
      return [];
    })
    G.str['SCR_BUFF_DEAD_VitalProtection_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _abilRetiarii10_6297 = lua_call(G.str['GetAbility'], [_self, "Retiarii10"])[0];
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "VITALPROTECTION_TBL_COUNT"])[0], 0)) {
        if ((!lua_eq(_abilRetiarii10_6297, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRetiarii10_6297, "ActiveState"])[0], 1))) {
          var _addHP_6299 = lua_call(G.str['GetExProp'], [_buff, "VITALPROTECTION_ADDHP"])[0];
          if (lua_eq(_addHP_6299, null)) {
            _addHP_6299 = _damage;
          } else if (lua_lte(_addHP_6299, 1)) {
            _addHP_6299 = 1;
          }
          lua_call(G.str['AddHP'], [_self, _addHP_6299]);
          lua_call(G.str['AddBuff'], [_self, _self, 'VitalProtection_Leave_Buff', 1, 0, 5000, 1]);
          if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
            lua_call(G.str['SetExProp'], [_self, "VITALPROTECTION_TBL_COUNT", 1]);
          }
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_sorcerer_bat'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsDead'], [_target])[0], 0) && lua_eq(lua_call(G.str['IsSameObject'], [_self, _target])[0], 0))) {
        lua_call(G.str['ATTACK_SORCERER_BAT'], [_self, _buff, _target]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Restrain_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _arg1_6305 = tmp[0]; var _arg2_6305 = tmp[1]; tmp = null;
      var _rating_6305 = lua_multiply(_arg1_6305, 600);
      var _duration_6305 = 1000;
      var _Random_6305 = lua_call(G.str['IMCRandom'], [1, 9999])[0];
      if ((lua_lte(_Random_6305, _rating_6305) && lua_eq(lua_call(G.str['GetRelation'], [_self, _target])[0], "ENEMY"))) {
        lua_call(G.str['AddBuff'], [_self, _target, 'Restrain_Debuff', 1, 0, _duration_6305, 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Concentrate_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _skill_6307 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (((lua_eq(lua_call(G.str['GetRelation'], [_self, _target])[0], "ENEMY") && !lua_eq(lua_tableget(_skill_6307, 'ClassName'), "Default")) && (lua_eq(lua_tableget(_skill_6307, 'ClassType'), "Melee") || lua_eq(lua_tableget(_skill_6307, 'ClassType'), "Missile")))) {
        var _atkCount_6309 = lua_call(G.str['GetExProp'], [_buff, "ConcentrateCount"])[0];
        lua_call(G.str['SetExProp'], [_buff, "ConcentrateCount", lua_subtract(_atkCount_6309, 1)]);
        if (lua_lte(_atkCount_6309, 0)) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_DivineMight_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_eq(1, 1)) {
        return [1];
      }
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if (lua_lt(G.str['skillid'], 10000)) {
        return [1];
      }
      lua_call(G.str['DelExProp'], [_self, "BuffSkillLv"]);
      lua_call(G.str['DelExProp'], [_self, "isDivineMight_Debuff"]);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_DivineMight_Debuff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      lua_call(G.str['DelExProp'], [_self, "isDivineMight_Debuff"]);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Cloaking_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lt(0, _damage)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_ShinobiCloaking_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lt(0, _damage)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Double_pay_earn_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _atkCount_6321 = lua_call(G.str['GetExProp'], [_self, "DoublePayEarn"])[0];
      if (lua_eq(_atkCount_6321, 1)) {
        if (lua_lte(lua_subtract(lua_call(G.str['tonumber'], [lua_tableget(_target, 'HP')])[0], lua_call(G.str['tonumber'], [_damage])[0]), 0)) {
          lua_call(G.str['SetExProp'], [_self, "DoubbleExp", 2]);
          lua_call(G.str['SetExProp'], [_self, "DobbbleItem", 1]);
        }
        return [0];
      }
      lua_call(G.str['SetExProp'], [_self, "DoublePayEarn", lua_subtract(_atkCount_6321, 1)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Warrior_Once_Critical_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_SpiralArrow_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lt(G.str['skillid'], 100)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Fade_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_DarkSight_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Zhendu_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _PATK_6334 = lua_call(G.str['GetExProp'], [_buff, "PoisonDadak"])[0];
        var _key_6334 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6334]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", _PATK_6334, 0.01, "Poison", "Melee", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6334, 0]);
      }
      if (lua_eq(lua_call(G.str['GetExProp'], [_buff, "Zhendu_Debuff_FLAG"])[0], 0)) {
        var _abil_6335 = lua_call(G.str['GetAbility'], [_self, "Wugushi7"])[0];
        if (!lua_eq(_abil_6335, null)) {
          lua_call(G.str['AddBuff'], [_self, _target, "Zhendu_Debuff", 1, 0, 10000, 1]);
          lua_call(G.str['SetExProp'], [_buff, "Zhendu_Debuff_FLAG", 1]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Looting_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0)) {
        return [1];
      }
      if (lua_eq(_target, null)) {
        return [1];
      }
      if (((lua_eq(lua_call(G.str['IS_PC'], [_target])[0], false) && lua_eq(lua_tableget(_target, 'DebuffRank'), "Field")) || lua_eq(lua_tableget(_target, 'DebuffRank'), "Hero"))) {
        return [];
      }
      var _dropItemList_6337 = lua_call(G.str['TryGetProp'], [_target, "DropItemList"])[0];
      if ((lua_eq(_dropItemList_6337, null) || lua_eq(_dropItemList_6337, "None"))) {
        return [1];
      }
      if ((lua_eq(lua_call(G.str['GetLayer'], [_self])[0], 0) || lua_eq(lua_call(G.str['IsMissionInst'], [_self])[0], 1))) {
        var _enable_6342 = lua_call(G.str['GetExProp'], [_target, 'LOOTING_ENABLE'])[0];
        if ((lua_eq(_enable_6342, null) || lua_lt(_enable_6342, 1))) {
          var _caster_6343 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          if (lua_eq(_caster_6343, null)) {
            return [0];
          }
          var _corsair_rank_6343 = lua_call(G.str['GetJobGradeByName'], [_caster_6343, 'Char1_8'])[0];
          if ((lua_eq(_corsair_rank_6343, null) || lua_eq(_corsair_rank_6343, 0))) {
            return [0];
          }
          var _lootingRatio_6343 = lua_multiply(_corsair_rank_6343, 1250);
          if (lua_eq(lua_tableget(_target, 'MonRank'), 'Boss')) {
            _lootingRatio_6343 = lua_divide(_lootingRatio_6343, 300);
          }
          var _lootingResult_6343 = lua_call(G.str['IMCRandom'], [1, 100000])[0];
          if (lua_lt(_lootingResult_6343, _lootingRatio_6343)) {
            tmp = lua_call(G.str['GetClassList'], [lua_concat("MonsterDropItemList_", lua_tableget(_target, 'DropItemList'))]); var _clsList_6347 = tmp[0]; var _cnt_6347 = tmp[1]; tmp = null;
            if (lua_eq(_clsList_6347, null)) {
              return [];
            }
            var _list_6347 = lua_newtable();
            var _totalDropRatio_6347 = 0;
            var _money_6347 = 0;
            var _moneyCnt_6347 = 5;
            var var_6349 = 0, stop_6349 = lua_assertfloat(lua_subtract(_cnt_6347, 1));
            for (; var_6349 <= stop_6349; var_6349++) {
              var _i_6349 = var_6349;
              var _drop_6350 = lua_call(G.str['GetClassByIndexFromList'], [_clsList_6347, _i_6349])[0];
              lua_tableset(_list_6347, _i_6349, lua_newtable());
              if (!lua_eq(_drop_6350, null)) {
                lua_tableset(lua_tableget(_list_6347, _i_6349), 1, lua_tableget(_drop_6350, 'ItemClassName'));
                var _dpkAvg_6351 = 1;
                var _dropRatio_6351 = 1;
                if (lua_lt(0, lua_tableget(_drop_6350, 'DPK_Max'))) {
                  _dpkAvg_6351 = lua_divide((lua_add(lua_tableget(_drop_6350, 'DPK_Min'), lua_tableget(_drop_6350, 'DPK_Max'))), 2);
                  _dropRatio_6351 = lua_multiply((lua_divide(10000, _dpkAvg_6351)), (lua_divide(lua_tableget(_drop_6350, 'DropRatio'), 10000)));
                } else {
                  _dropRatio_6351 = lua_multiply(lua_tableget(_drop_6350, 'DropRatio'), (lua_divide(1, _dpkAvg_6351)));
                }
                if (lua_eq(lua_tableget(_drop_6350, 'GroupName'), 'Money')) {
                  _money_6347 = lua_call(G.str['IMCRandom'], [lua_tableget(_drop_6350, 'Money_Min'), lua_tableget(_drop_6350, 'Money_Max')])[0];
                  _money_6347 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_money_6347, 15)])[0];
                  if (lua_lt(_money_6347, 1)) {
                    _money_6347 = 1;
                  }
                  if (lua_lt(_money_6347, 2)) {
                    _moneyCnt_6347 = 1;
                  }
                } else {
                  if (lua_lt(1000, _dropRatio_6351)) {
                    _dropRatio_6351 = lua_multiply(_dropRatio_6351, 5);
                  } else if (lua_lt(300, _dropRatio_6351)) {
                    _dropRatio_6351 = lua_multiply(_dropRatio_6351, 2);
                  }
                }
                lua_tableset(lua_tableget(_list_6347, _i_6349), 2, lua_tablegetcall(G.str['math'], 'floor', [_dropRatio_6351])[0]);
                _totalDropRatio_6347 = lua_add(_totalDropRatio_6347, lua_tableget(lua_tableget(_list_6347, _i_6349), 2));
              }
            }
            var _resultRatio_6347 = lua_call(G.str['IMCRandom'], [1, _totalDropRatio_6347])[0];
            var _ratioRange_6347 = 0;
            var var_6360 = 0, stop_6360 = lua_assertfloat(lua_len(_list_6347));
            for (; var_6360 <= stop_6360; var_6360++) {
              var _j_6360 = var_6360;
              if (!lua_eq(lua_tableget(lua_tableget(_list_6347, _j_6360), 2), null)) {
                _ratioRange_6347 = lua_add(_ratioRange_6347, lua_tableget(lua_tableget(_list_6347, _j_6360), 2));
              }
              if ((lua_lt(0, lua_tableget(lua_tableget(_list_6347, _j_6360), 2)) && lua_lte(_resultRatio_6347, _ratioRange_6347))) {
                if (lua_eq(lua_tableget(lua_tableget(_list_6347, _j_6360), 1), 'Moneybag1')) {
                  lua_call(G.str['GIVE_REWARD_MONEY'], [_self, _self, _money_6347, _moneyCnt_6347]);
                  lua_call(G.str['SetExProp'], [_target, 'LOOTING_ENABLE', 1]);
                  lua_call(G.str['LootingDropItemMongoLog'], [_self, _target, lua_tableget(lua_tableget(_list_6347, _j_6360), 1)]);
                  lua_call(G.str['SkillTextEffect'], [null, _self, _target, 'SHOW_SKILL_EFFECT', 0, null, 'skl_looting']);
                  lua_call(G.str['PlaySound'], [_self, 'item_drop_skl_looting']);
                  break;
                } else {
                  var _itemObj_6365 = lua_call(G.str['CreateGCIES'], ['Monster', lua_tableget(lua_tableget(_list_6347, _j_6360), 1)])[0];
                  if (lua_eq(_itemObj_6365, null)) {
                    return [1];
                  }
                  tmp = lua_call(G.str['GetPos'], [_target]); var _x_6365 = tmp[0]; var _y_6365 = tmp[1]; var _z_6365 = tmp[2]; tmp = null;
                  lua_call(G.str['CreateItem'], [_self, _itemObj_6365, _x_6365, _y_6365, _z_6365, 0, 5]);
                  lua_call(G.str['SetExProp'], [_target, 'LOOTING_ENABLE', 1]);
                  lua_call(G.str['LootingDropItemMongoLog'], [_self, _target, lua_tableget(lua_tableget(_list_6347, _j_6360), 1)]);
                  lua_call(G.str['SkillTextEffect'], [null, _self, _target, 'SHOW_SKILL_EFFECT', 0, null, 'skl_looting']);
                  lua_call(G.str['PlaySound'], [_self, 'item_drop_skl_looting']);
                  break;
                }
              }
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_EnchantFire_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _skill_6367 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) || (lua_eq(lua_tableget(_skill_6367, 'ClassName'), "Wizard_EnergyBolt") && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item')))) {
        tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _enchantFireLv_6369 = tmp[0]; var _casterMATK_6369 = tmp[1]; tmp = null;
        if (lua_lt(0, _enchantFireLv_6369)) {
          var _stat_6370 = lua_multiply(_casterMATK_6369, 0.1);
          var _key_6370 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
          lua_call(G.str['StartSyncPacket'], [_self, _key_6370]);
          lua_call(G.str['TakeDadak'], [_self, _target, "None", lua_tablegetcall(G.str['math'], 'floor', [_stat_6370])[0], 0.1, "Fire", "Magic", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['EndSyncPacket'], [_self, _key_6370, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_KaguraDance_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _sklCls_6371 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      var _selfSkl_6371 = null;
      if (!lua_eq(null, _sklCls_6371)) {
        _selfSkl_6371 = lua_call(G.str['GetSkill'], [_self, lua_tableget(_sklCls_6371, 'ClassName')])[0];
      }
      if ((!lua_eq(_selfSkl_6371, null) && lua_eq(lua_tableget(_selfSkl_6371, 'ClassType'), 'Melee'))) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_target, 'Kagura_Debuff'])[0], 'YES')) {
          if ((!lua_eq(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
            var _key_6375 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
            var _sklLv_6375 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            var _damage_6375 = lua_multiply(_damage, (lua_multiply(_sklLv_6375, 0.1)));
            lua_call(G.str['StartSyncPacket'], [_self, _key_6375]);
            lua_call(G.str['TakeDadak'], [_self, _target, "None", _damage_6375, 0.15, "Holy", "Magic", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
            lua_call(G.str['EndSyncPacket'], [_self, _key_6375, 0]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Sacrament_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _skill_6376 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) || (lua_eq(lua_tableget(_skill_6376, 'ClassName'), "Wizard_EnergyBolt") && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item')))) {
        var _holyAddAttack_6378 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
          _holyAddAttack_6378 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_holyAddAttack_6378, 0.7)])[0];
        }
        _holyAddAttack_6378 = lua_call(G.str['IMCRandom'], [lua_multiply(_holyAddAttack_6378, 0.95), lua_multiply(_holyAddAttack_6378, 1.05)])[0];
        var _key_6378 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6378]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", lua_tablegetcall(G.str['math'], 'floor', [_holyAddAttack_6378])[0], 0.15, "Holy", "Magic", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6378, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_FireFoxShikigami_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _skill_6380 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (lua_eq(lua_tableget(_skill_6380, 'ClassName'), "Psychokino_GravityPole")) {
        var _key_6382 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        var _skillGravityPole_6382 = lua_call(G.str['GetSkill'], [_self, "Psychokino_GravityPole"])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6382]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", _damage, 0.15, "Fire", "Magic", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6382, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_LastRites_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _holyAddAttack_6385 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        var _myPercentHP_6385 = lua_call(G.str['GetHpPercent'], [_self])[0];
        var _checkPercentHP_6385 = 0.4;
        var _caster_6385 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_6385, null)) {
          var _abilChaplain1_6386 = lua_call(G.str['GetAbility'], [_caster_6385, "Chaplain1"])[0];
          if (!lua_eq(_abilChaplain1_6386, null)) {
            _checkPercentHP_6385 = lua_add(0.4, (lua_multiply(0.02, lua_tableget(_abilChaplain1_6386, 'Level'))));
          }
        }
        if (lua_lte(_myPercentHP_6385, _checkPercentHP_6385)) {
          _holyAddAttack_6385 = lua_multiply(_holyAddAttack_6385, 1.2);
        }
        var _key_6385 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6385]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", lua_tablegetcall(G.str['math'], 'floor', [_holyAddAttack_6385])[0], 0.05, "Holy", "Magic", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6385, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Aspergillum_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _damage_6391 = lua_call(G.str['GET_SKL_DAMAGE'], [_self, _target, 'Priest_Aspersion'])[0];
        var _key_6391 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        var _skill_6391 = lua_call(G.str['GetSkill'], [_self, 'Priest_Aspersion'])[0];
        if (!lua_eq(_skill_6391, null)) {
          lua_call(G.str['StartSyncPacket'], [_self, _key_6391]);
          lua_call(G.str['TakeDadak'], [_self, _target, 'Priest_Aspersion', _damage_6391, 0.05]);
          lua_call(G.str['EndSyncPacket'], [_self, _key_6391, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_LightningHands_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _damage_6395 = lua_call(G.str['GET_SKL_DAMAGE'], [_self, _target, 'Enchanter_LightningHands'])[0];
        var _key_6395 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        var _skill_6395 = lua_call(G.str['GetSkill'], [_self, 'Enchanter_LightningHands'])[0];
        if (!lua_eq(_skill_6395, null)) {
          lua_call(G.str['StartSyncPacket'], [_self, _key_6395]);
          lua_call(G.str['TakeDadak'], [_self, _target, 'Enchanter_LightningHands', _damage_6395, 0.15]);
          lua_call(G.str['EndSyncPacket'], [_self, _key_6395, 0]);
        }
        var _abil_Enchanter3_6395 = lua_call(G.str['GetAbility'], [_self, "Enchanter3"])[0];
        if ((!lua_eq(_abil_Enchanter3_6395, null) && lua_eq(1, lua_tableget(_abil_Enchanter3_6395, 'ActiveState')))) {
          var _abil_Enchanter3_Lv_6397 = lua_tableget(_abil_Enchanter3_6395, 'Level');
          if (lua_lte(lua_call(G.str['IMCRandom'], [1, 100])[0], _abil_Enchanter3_Lv_6397)) {
            lua_call(G.str['AddBuff'], [_self, _target, "LightningHands_Debuff", 1, 0, 10000, 1]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Merkabah_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((!lua_eq(_sklID, 100) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _abilLv_6401 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        if (lua_lt(0, _abilLv_6401)) {
          var _value_6402 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(_damage, 0.1), _abilLv_6401)])[0];
          var _key_6402 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
          lua_call(G.str['StartSyncPacket'], [_self, _key_6402]);
          lua_call(G.str['TakeDadak'], [_self, _target, "None", _value_6402, 0.1, "Holy", "Magic", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['EndSyncPacket'], [_self, _key_6402, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_item_set_007_buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _key_6405 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6405]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", 12, 0.15, "Earth", "Magic", "TrueDamage", G.str['HIT_EARTH'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6405, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_item_set_035_buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _key_6408 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6408]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", 110, 0.15, "Ice", "Magic", "TrueDamage", G.str['HIT_ICE'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6408, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_item_set_011pre_buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _result_6411 = lua_call(G.str['IMCRandom'], [1, 100])[0];
        if (lua_eq(_result_6411, 1)) {
          lua_call(G.str['AddBuff'], [_self, _self, 'item_set_011_buff']);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_item_set_013_buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _dmg_6415 = lua_call(G.str['GetExProp'], [_buff, "set_013_buff_over"])[0];
        if (lua_lt(0, _dmg_6415)) {
          var _key_6416 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
          lua_call(G.str['StartSyncPacket'], [_self, _key_6416]);
          lua_call(G.str['TakeDadak'], [_self, _target, "None", _dmg_6415, 0.15, "Earth", "Magic", "TrueDamage", G.str['HIT_EARTH'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['EndSyncPacket'], [_self, _key_6416, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_EliteMonsterBuff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _eliteMonBuffSkillCount_6417 = lua_call(G.str['GetExProp'], [_self, "EliteMonBuffSkillCount"])[0];
      var _eliteMonDebuffSkillCount_6417 = lua_call(G.str['GetExProp'], [_self, "EliteMonDebuffSkillCount"])[0];
      var _type_6417 = 0;
      if ((lua_lt(0, _eliteMonBuffSkillCount_6417) || lua_lt(0, _eliteMonDebuffSkillCount_6417))) {
        var _rnd_6418 = lua_call(G.str['IMCRandom'], [0, 99])[0];
        if (lua_lt(_rnd_6418, 25)) {
          if ((lua_lt(0, _eliteMonBuffSkillCount_6417) && lua_lt(0, _eliteMonDebuffSkillCount_6417))) {
            var _selectType_6420 = lua_call(G.str['IMCRandom'], [1, 2])[0];
            _type_6417 = _selectType_6420;
          } else if (lua_lt(0, _eliteMonBuffSkillCount_6417)) {
            _type_6417 = 1;
          } else if (lua_lt(0, _eliteMonDebuffSkillCount_6417)) {
            _type_6417 = 2;
          }
        }
      }
      if (lua_eq(_type_6417, 1)) {
        tmp = lua_call(G.str['SelectObject'], [_self, 100, "FRIEND"]); var _objList_6423 = tmp[0]; var _objCount_6423 = tmp[1]; tmp = null;
        var _buffTarget_6423 = null;
        var var_6424 = 1, stop_6424 = lua_assertfloat(lua_len(_objList_6423));
        for (; var_6424 <= stop_6424; var_6424++) {
          var _i_6424 = var_6424;
          var _obj_6425 = lua_tableget(_objList_6423, _i_6424);
          if ((!lua_eq(lua_tableget(_obj_6425, 'MonRank'), "NPC") && (lua_eq(lua_tableget(_obj_6425, 'MonRank'), "Normal") || lua_eq(lua_tableget(_obj_6425, 'MonRank'), "Elite")))) {
            if (lua_eq(lua_tableget(_obj_6425, 'Faction'), "Monster")) {
              if ((lua_eq(lua_tableget(_obj_6425, 'Size'), "S") || lua_eq(lua_tableget(_obj_6425, 'Size'), "M"))) {
                _buffTarget_6423 = _obj_6425;
              }
            }
          }
        }
        if (!lua_eq(_buffTarget_6423, null)) {
          tmp = lua_call(G.str['GetPos'], [_buffTarget_6423]); var _x_6429 = tmp[0]; var _y_6429 = tmp[1]; var _z_6429 = tmp[2]; tmp = null;
          lua_call(G.str['RunPad'], [_self, "Mon_Elite_Buff", null, _x_6429, _y_6429, _z_6429, 0, 1]);
        }
      } else if (lua_eq(_type_6417, 2)) {
        tmp = lua_call(G.str['GetPos'], [_target]); var _x_6430 = tmp[0]; var _y_6430 = tmp[1]; var _z_6430 = tmp[2]; tmp = null;
        lua_call(G.str['RunPad'], [_self, "Mon_Elite_Debuff", null, _x_6430, _y_6430, _z_6430, 0, 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Sorcerer_Obey_Status_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_ID_WHITETREES1_GIMMICK2_BUFF2'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_lt(_sklID, G.str['DEFAULT_SKILL_CLASSID']) && !lua_eq(lua_tableget(_target, 'RaceType'), 'Item'))) {
        var _buffDamage_6434 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        var _key_6434 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6434]);
        lua_call(G.str['TakeDadak'], [_self, _target, "None", lua_tablegetcall(G.str['math'], 'floor', [_buffDamage_6434])[0], 0.15, "Melee", "Magic", "TrueDamage", G.str['HIT_MAGIC'], G.str['HITRESULT_BLOW']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6434, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_UC_Cloaking_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_lt(0, _damage)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Daino_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Daino_Buff'])[0], 'YES')) {
        if ((lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_self, _sklID])[0], 1) && !lua_eq(_sklID, 100))) {
          if (lua_eq(_damage, 0)) {
            return [1];
          }
          var _abil_Kriwi21_6439 = lua_call(G.str['GetAbility'], [_self, "Kriwi21"])[0];
          if ((!lua_eq(_abil_Kriwi21_6439, null) && lua_eq(lua_tableget(_abil_Kriwi21_6439, 'ActiveState'), 1))) {
            var _skill_6441 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
            if (lua_eq(_skill_6441, null)) {
              return [1];
            }
            var _dainoSkill_6441 = lua_call(G.str['GetSkill'], [_self, "Kriwi_Daino"])[0];
            if (lua_eq(_dainoSkill_6441, null)) {
              return [1];
            }
            if (lua_eq(lua_tableget(_skill_6441, 'ClassName'), lua_tableget(_dainoSkill_6441, 'ClassName'))) {
              return [1];
            }
            lua_call(G.str['TakeDadak'], [_self, _target, lua_tableget(_dainoSkill_6441, 'ClassName'), _damage, 0.25, "Melee", "Magic", "TrueDamage"]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Raid_Velcofer_Curse_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _caster_6445 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6445, null)) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Curse_Debuff'])[0], 'NO')) {
        return [1];
      }
      var _buffOver_6445 = lua_call(G.str['GetBuffOver'], [_self, 'Raid_Velcofer_Curse_Debuff'])[0];
      if (lua_lt(_buffOver_6445, 3)) {
        return [1];
      }
      var _attackerSkill_6445 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(lua_tableget(_attackerSkill_6445, 'ClassName'), 'Default')) {
        var _key_6450 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_6450]);
        lua_call(G.str['TakeDadak'], [_caster_6445, _self, 'None', 999, 0.15, 'Dark', 'None', 'TrueDamage', G.str['HIT_DARK'], G.str['HITRESULT_NO_HITSCP']]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_6450, 0]);
        return [1];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_Kraujas_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Kraujas_Buff"])[0], "YES")) {
        var _buffRemainTime_6452 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
        if (lua_lt(1000, _buffRemainTime_6452)) {
          lua_call(G.str['AddBuff'], [_self, _self, "Kraujas_Buff", 1, 0, _buffRemainTime_6452, 1]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_GM_WHITETREES_MON_BUFF1'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _zoneID_6454 = lua_call(G.str['GetZoneInstID'], [_self])[0];
      var _zon_Obj_6454 = lua_call(G.str['GetLayerObject'], [_zoneID_6454, 0])[0];
      var _Prop_01_6454 = lua_call(G.str['GetExProp'], [_zon_Obj_6454, 'GM_WHITETREES_OBEL1'])[0];
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _arg1_6454 = tmp[0]; var _arg2_6454 = tmp[1]; tmp = null;
      var _duration_6454 = 10000;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_target, "GM_WHITETREES_MON_BUFF1_1"])[0], "NO")) {
        if (((lua_eq(_Prop_01_6454, 1) && lua_eq(lua_call(G.str['GetRelation'], [_self, _target])[0], "ENEMY")) && !lua_eq(lua_tableget(_target, 'MonRank'), "MISC"))) {
          lua_call(G.str['AddBuff'], [_self, _target, 'GM_WHITETREES_MON_BUFF1_1', 1, 0, _duration_6454, 1]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_WideMiasma_Buff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      if (lua_eq(_sklID, 30509)) {
        return [1];
      } else if (!lua_eq(_sklID, 30509)) {
        return [0];
      } else {
        return [0];
      }
      return [];
    })
    G.str['SCR_BUFF_GIVEDMG_PvP_Mine_Crossbow'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _arg1_6461 = tmp[0]; var _arg2_6461 = tmp[1]; tmp = null;
      var _duration_6461 = 10000;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_target, "PvP_Mine_Crossbow_Debuff"])[0], "NO")) {
        if ((lua_eq(lua_call(G.str['GetRelation'], [_self, _target])[0], "ENEMY") && !lua_eq(lua_tableget(_target, 'MonRank'), "MISC"))) {
          lua_call(G.str['AddBuff'], [_self, _target, 'PvP_Mine_Crossbow_Debuff', 1, 0, _duration_6461, 1]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_stun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_stun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_mon_pollution_zone'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_mon_pollution_zone'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _damage_6467 = lua_multiply(lua_tableget(_self, 'MHP'), 0.05);
      _damage_6467 = lua_tablegetcall(G.str['math'], 'floor', [_damage_6467])[0];
      if (lua_lt(_damage_6467, 1)) {
        _damage_6467 = 1;
      }
      var _caster_6467 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6467, null)) {
        lua_call(G.str['TakeDamage'], [_caster_6467, _self, "None", _damage_6467, "Poison", "Magic", "TrueDamage", "HIT_POISON", "HITRESULT_BLOW", 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_mon_pollution_zone'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_mon_PopFlower'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_mon_PopFlower'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'mon_PopFlower'])[0], 'NO') && lua_lt(0, lua_tableget(_self, 'HP')))) {
        var _caster_6473 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_6473, null)) {
          var _damage_6474 = lua_divide((lua_add(lua_tableget(_caster_6473, 'MINMATK'), lua_tableget(_caster_6473, 'MAXMATK'))), 2);
          lua_call(G.str['PlayEffect'], [_self, 'F_explosion113_leaf', 1]);
          lua_call(G.str['TakeDamage'], [_caster_6473, _self, "None", _damage_6474, "Melee", "Strike", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
          var _angle_6474 = lua_call(G.str['GetAngleFromPos'], [_caster_6473, G.str['x'], G.str['z']])[0];
          if ((!lua_eq(lua_call(G.str['GetPropType'], [_self, 'KDArmor'])[0], null) && lua_lt(lua_tableget(_self, 'KDArmor'), 900))) {
            lua_call(G.str['KnockDown'], [_self, _caster_6473, 150, _angle_6474, 60, 3]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_bound'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_bound'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_sleep'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _lv_6478 = _arg1;
      if (lua_lt(_lv_6478, 1)) {
        _lv_6478 = 1;
      } else if (lua_lte(15, _lv_6478)) {
        _lv_6478 = 15;
      }
      lua_call(G.str['SetExProp'], [_buff, "UC_sleep_COUNT", lua_add(1, _lv_6478)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_sleep'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_buff, "UC_sleep_COUNT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monster_GungHo'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6482 = (lua_add(2.5, (lua_multiply(1, _arg1))));
      var _defrate_6482 = (lua_multiply(0.005, _arg1));
      var _atkadd_6482 = (lua_add(8.2, (lua_multiply(2, _arg1))));
      var _atkrate_6482 = (lua_multiply(0.01, _arg1));
      if (lua_lt(lua_tableget(_self, 'DEF'), _defadd_6482)) {
        _defadd_6482 = lua_tableget(_self, 'DEF');
      }
      _defadd_6482 = lua_tablegetcall(G.str['math'], 'floor', [_defadd_6482])[0];
      _atkadd_6482 = lua_tablegetcall(G.str['math'], 'floor', [_atkadd_6482])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_6482));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _atkadd_6482));
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _atkrate_6482));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_6482));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6482]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_6482]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK2", _atkrate_6482]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF2", _defrate_6482]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Monster_GungHo'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monster_GungHo'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6485 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _atkadd_6485 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      var _atkrate_6485 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK2"])[0];
      var _defrate_6485 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF2"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_6485));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _atkadd_6485));
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _atkrate_6485));
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_6485));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_freeze'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_6486 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6486, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6486, 'INT'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_freeze'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _casterINT_6488 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _from_6488 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6488, null)) {
        _from_6488 = _self;
      }
      var _dot_6488 = lua_multiply(_casterINT_6488, 0.2);
      lua_call(G.str['TakeDamage'], [_from_6488, _self, "None", _dot_6488, "Ice", "Strike", "Magic", G.str['HIT_ICE'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_freeze'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_immobilize'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defencedBM_6491 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _defencedBM_6491]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _defencedBM_6491));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_immobilize'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defencedBM_6492 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _defencedBM_6492));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_petrify'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_petrify'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_silence'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_silence'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_silence_normalAttack'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_silence_normalAttack'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_confuse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        return [];
      }
      var _curFaction_6499 = lua_call(G.str['GetCurrentFaction'], [_self])[0];
      lua_call(G.str['SetExProp_Str'], [_self, '_PREV_FACTION', _curFaction_6499]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'CrazyMonster']);
      lua_call(G.str['SetTendency'], [_self, "Attack"]);
      tmp = lua_call(G.str['SelectObject'], [_self, 100, "ENEMY"]); var _list_6499 = tmp[0]; var _cnt_6499 = tmp[1]; tmp = null;
      var var_6501 = 1, stop_6501 = lua_assertfloat(_cnt_6499);
      for (; var_6501 <= stop_6501; var_6501++) {
        var _i_6501 = var_6501;
        var _obj_6502 = lua_tableget(_list_6499, _i_6501);
        if (lua_eq(lua_call(G.str['IS_PC'], [_obj_6502])[0], false)) {
          if ((!lua_eq(lua_tableget(_obj_6502, 'MonRank'), 'Boss') && !lua_eq(lua_tableget(_obj_6502, 'Faction'), "Neutral"))) {
            lua_call(G.str['ResetHateAndAttack'], [_obj_6502]);
            lua_call(G.str['InsertHate'], [_obj_6502, _self, 10000]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_confuse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _prevFaction_6505 = lua_call(G.str['GetExProp_Str'], [_self, '_PREV_FACTION'])[0];
      lua_call(G.str['SetCurrentFaction'], [_self, _prevFaction_6505]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        tmp = lua_call(G.str['SelectObject'], [_self, 100, "FRIEND"]); var _list_6506 = tmp[0]; var _cnt_6506 = tmp[1]; tmp = null;
        var var_6507 = 1, stop_6507 = lua_assertfloat(_cnt_6506);
        for (; var_6507 <= stop_6507; var_6507++) {
          var _i_6507 = var_6507;
          var _obj_6508 = lua_tableget(_list_6506, _i_6507);
          if (lua_eq(lua_call(G.str['IS_PC'], [_obj_6508])[0], false)) {
            lua_call(G.str['RemoveHate'], [_obj_6508, _self]);
          }
        }
        lua_call(G.str['ResetHateAndAttack'], [_self]);
        lua_call(G.str['InsertHate'], [_self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_bleed'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _dot_6510 = 1;
      var _caster_6510 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6510, null)) {
        _dot_6510 = lua_add(lua_add(lua_add(_dot_6510, lua_tableget(_caster_6510, 'STR')), _arg1), _arg2);
      }
      lua_call(G.str['SetExProp'], [_self, 'BLEED_DOT', _dot_6510]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_bleed'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _dot_6512 = lua_call(G.str['GetExProp'], [_self, 'BLEED_DOT'])[0];
      var _from_6512 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6512, null)) {
        _from_6512 = _self;
      }
      var _useHitTypeOverride_6512 = 1;
      lua_call(G.str['TakeDamage'], [_from_6512, _self, "None", _dot_6512, "Melee", "Aries", "TrueDamage", G.str['HIT_BLEEDING'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_bleed'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'BLEED_DOT']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_hemorrhage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _dot_6515 = 10;
      var _caster_6515 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6515, null)) {
        _dot_6515 = lua_add(lua_add(lua_add(_dot_6515, lua_tableget(_caster_6515, 'STR')), _arg1), _arg2);
      }
      lua_call(G.str['SetExProp'], [_self, 'BLEED_DOT', _dot_6515]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_hemorrhage'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _dot_6517 = lua_call(G.str['GetExProp'], [_self, 'BLEED_DOT'])[0];
      var _from_6517 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6517, null)) {
        _from_6517 = _self;
      }
      lua_call(G.str['TakeDamage'], [_from_6517, _self, "None", _dot_6517, "Melee", "Aries", "TrueDamage", G.str['HIT_BLEEDING'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_hemorrhage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'BLEED_DOT']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6520 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6520, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6520, 'MAXPATK'), lua_tableget(_caster_6520, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_poison'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMAXPATK_6522 = tmp[0]; var _casterMAXMATK_6522 = tmp[1]; tmp = null;
      var _from_6522 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6522, null)) {
        _from_6522 = _self;
      }
      var _damage_6522 = lua_divide((lua_add(_casterMAXPATK_6522, _casterMAXMATK_6522)), 4);
      lua_call(G.str['TakeDamage'], [_from_6522, _self, "None", _damage_6522, "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_poison_Weak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _totalDamage_6525 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_multiply((lua_multiply(lua_tableget(_self, 'MHP'), 0.01)), _arg1), _arg2)])[0];
      var _dot_6525 = lua_divide(_totalDamage_6525, 10);
      var _curDamage_6525 = 0;
      lua_call(G.str['SetExProp'], [_self, 'POISON_TOTAL', _totalDamage_6525]);
      lua_call(G.str['SetExProp'], [_self, 'POISON_DOT', _dot_6525]);
      lua_call(G.str['SetExProp'], [_self, 'POISON_CURRENT', _curDamage_6525]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_poison_Weak'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _totalDamage_6526 = lua_call(G.str['GetExProp'], [_self, 'POISON_TOTAL'])[0];
      var _dot_6526 = lua_call(G.str['GetExProp'], [_self, 'POISON_DOT'])[0];
      var _curDamage_6526 = lua_call(G.str['GetExProp'], [_self, 'POISON_CURRENT'])[0];
      var _from_6526 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6526, null)) {
        _from_6526 = _self;
      }
      lua_call(G.str['TakeDamage'], [_from_6526, _self, "None", _dot_6526, "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
      _curDamage_6526 = lua_add(_curDamage_6526, _dot_6526);
      lua_call(G.str['SetExProp'], [_self, 'POISON_CURRENT', _curDamage_6526]);
      if (lua_lt(_totalDamage_6526, _curDamage_6526)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_poison_Weak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'POISON_TOTAL']);
      lua_call(G.str['DelExProp'], [_self, 'POISON_DOT']);
      lua_call(G.str['DelExProp'], [_self, 'POISON_CURRENT']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_flame'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_6530 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6530, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6530, 'INT'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_flame'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _from_6532 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6532, null)) {
        _from_6532 = _self;
      }
      var _dot_6532 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lt(0, _dot_6532)) {
        lua_call(G.str['TakeDamage'], [_from_6532, _self, "None", lua_add(_dot_6532, _arg2), "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_flame'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_curse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_curse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_debrave'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _buffover_6538 = _over;
      if (lua_lte(_buffover_6538, 0)) {
        _buffover_6538 = 1;
      }
      var _patkadd_6538 = lua_multiply(_buffover_6538, 0.03);
      var _matkadd_6538 = lua_multiply(_buffover_6538, 0.03);
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_6538));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_6538));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_6538]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_6538]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_debrave'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_6540 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_6540 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_6540));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_6540));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_deprotect'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_6541 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6541, null)) {
        _caster_6541 = _self;
      }
      var _buffover_6541 = _over;
      if (lua_lte(_buffover_6541, 0)) {
        _buffover_6541 = 1;
      }
      var _defadd_6541 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'DEF'), 0.05), _buffover_6541)])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_6541));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6541]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_deprotect'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_lte(10, _over)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_deprotect'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6546 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_6546));
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      var _caster_6546 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6546, null)) {
        _caster_6546 = _self;
      }
      if (lua_lte(10, _over)) {
        lua_call(G.str['AddBuff'], [_caster_6546, _self, 'UC_armorbreak', 1, 0, 10000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_deprotect_Mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_6549 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6549));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6549]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_deprotect_Mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6550 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6550));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_armorbreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_6551 = 0.5;
      var _mdefadd_6551 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6551));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_6551));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6551]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_6551]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_armorbreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6552 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_6552 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6552));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_6552));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_infection'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_infection'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_slowdown'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _mspdadd_6555 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6555));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6555]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_slowdown'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6556 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6556));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_fear'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['AddBuff'], [G.str['caster'], _self, 'Stun', 1, 0, 1000, 1]);
      }
      var _patkadd_6557 = 0.3;
      var _matkadd_6557 = 0.3;
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_6557));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_6557));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_6557]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_6557]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_fear'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_6559 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_6559 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_6559));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_6559));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_shrinkbody'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_shrinkbody'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_swellbody'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_swellbody'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_skew'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_skew'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_shock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _intadd_6566 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'INT'), 0.5)])[0];
      var _mnaadd_6566 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MNA'), 0.5)])[0];
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_6566));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_6566));
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_6566]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_6566]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_shock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intadd_6567 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_6567 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_6567));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_6567));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_blind'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        lua_call(G.str['CancelMonsterSkill'], [_self]);
        lua_call(G.str['StopMove'], [_self]);
        lua_call(G.str['SetTendencysearchRange'], [_self, 30]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_blind'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        lua_call(G.str['SetTendencysearchRange'], [_self, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_rotten'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['SetExProp'], [_buff, "MAX_HP", lua_tableget(_self, 'MHP')]);
      lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_rotten'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        return [0];
      }
      var _addMHP_6573 = lua_multiply(lua_call(G.str['GetExProp'], [_buff, "MAX_HP"])[0], 0.01);
      if (lua_lt(_addMHP_6573, 1)) {
        _addMHP_6573 = 1;
      }
      if (lua_lt(10, lua_tableget(_self, 'MHP'))) {
        lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _addMHP_6573));
        var _before_6576 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
        lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", lua_add(_before_6576, _addMHP_6573)]);
        lua_call(G.str['Invalidate'], [_self, "MHP"]);
        if (lua_lt(lua_tableget(_self, 'MHP'), lua_tableget(_self, 'HP'))) {
          lua_call(G.str['AddHP'], [_self, lua_subtract(lua_tableget(_self, 'HP'), lua_tableget(_self, 'MHP'))]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_rotten'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _before_6578 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _before_6578));
      lua_call(G.str['Invalidate'], [_self, "MHP"]);
      var _tmp_6578 = lua_tableget(_self, 'MHP');
      return [];
    })
    G.str['SCR_BUFF_ENTER_Burrow'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Burrow'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _healHP_6580 = lua_multiply(lua_tableget(_self, 'MHP'), 0.25);
      lua_call(G.str['Heal'], [_self, lua_tablegetcall(G.str['math'], 'floor', [_healHP_6580])[0], 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Burrow'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Confuse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        return [];
      }
      var _curFaction_6582 = lua_call(G.str['GetCurrentFaction'], [_self])[0];
      lua_call(G.str['SetExProp_Str'], [_self, '_PREV_FACTION', _curFaction_6582]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'CrazyMonster']);
      lua_call(G.str['SetTendency'], [_self, "Attack"]);
      tmp = lua_call(G.str['SelectObject'], [_self, 100, "ENEMY"]); var _list_6582 = tmp[0]; var _cnt_6582 = tmp[1]; tmp = null;
      var var_6584 = 1, stop_6584 = lua_assertfloat(_cnt_6582);
      for (; var_6584 <= stop_6584; var_6584++) {
        var _i_6584 = var_6584;
        var _obj_6585 = lua_tableget(_list_6582, _i_6584);
        if (lua_eq(lua_call(G.str['IS_PC'], [_obj_6585])[0], false)) {
          if ((!lua_eq(lua_tableget(_obj_6585, 'MonRank'), 'Boss') && !lua_eq(lua_tableget(_obj_6585, 'Faction'), "Neutral"))) {
            lua_call(G.str['ResetHateAndAttack'], [_obj_6585]);
            lua_call(G.str['InsertHate'], [_self, _obj_6585, 10000]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Confuse'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _prevFaction_6588 = lua_call(G.str['GetExProp_Str'], [_self, '_PREV_FACTION'])[0];
      lua_call(G.str['SetCurrentFaction'], [_self, _prevFaction_6588]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        tmp = lua_call(G.str['SelectObject'], [_self, 100, "FRIEND"]); var _list_6589 = tmp[0]; var _cnt_6589 = tmp[1]; tmp = null;
        var var_6590 = 1, stop_6590 = lua_assertfloat(_cnt_6589);
        for (; var_6590 <= stop_6590; var_6590++) {
          var _i_6590 = var_6590;
          var _obj_6591 = lua_tableget(_list_6589, _i_6590);
          if (lua_eq(lua_call(G.str['IS_PC'], [_obj_6591])[0], false)) {
            lua_call(G.str['RemoveHate'], [_obj_6591, _self]);
          }
        }
        lua_call(G.str['ResetHateAndAttack'], [_self]);
        lua_call(G.str['InsertHate'], [_self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), 50));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), 50));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MoveSpeed'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), lua_multiply(50, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MoveSpeed'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_multiply(50, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_buff, 'Value', lua_tableget(_self, 'MAXPATK'));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), lua_tableget(_buff, 'Value')));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), lua_tableget(_buff, 'Value')));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MoveSpeedFix'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FIXMSPD_BM', _arg1);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MoveSpeedFix'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      lua_tableset(_self, 'FIXMSPD_BM', 0);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_MoveSpeed_Always'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), lua_multiply(10, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MoveSpeed_Always'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_multiply(10, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FastMoveMon_Always'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_multiply(500, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FastMoveMon_Always'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_multiply(50, _arg1)));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Invincible'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Invincible'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_After_Invincible'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6607 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6607));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6607]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_After_Invincible'] = (function (_self, _buff, _arg1, _arg2, _RemainTime) {
      var tmp;
      var _defadd_6608 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6608));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MonReturn'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_tableget(_self, 'RaceType'), 'Item')) {
        lua_call(G.str['SetNoDamage'], [_self, 1]);
        lua_call(G.str['HoldMonScp'], [_self]);
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 50));
        lua_call(G.str['CancelMonsterSkill'], [_self]);
        lua_call(G.str['ResetHate'], [_self]);
        lua_call(G.str['SetTendency'], [_self, "None"]);
        var _range_6610 = 50;
        var _count_6610 = lua_add(1, _arg1);
        lua_call(G.str['MoveEx'], [_self, lua_tableget(_self, 'CreateX'), lua_tableget(_self, 'CreateY'), lua_tableget(_self, 'CreateZ'), 1]);
        lua_call(G.str['InvalidateMSPD'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MonReturn'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _posX_6611 = tmp[0]; var _posY_6611 = tmp[1]; var _posZ_6611 = tmp[2]; tmp = null;
      if (lua_lt(lua_call(G.str['SCR_POINT_DISTANCE'], [lua_tableget(_self, 'CreateX'), lua_tableget(_self, 'CreateZ'), _posX_6611, _posZ_6611])[0], 50)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MonReturn'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      lua_call(G.str['UnHoldMonScp'], [_self]);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 50));
      lua_call(G.str['InvalidateMSPD'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Abomi'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6614 = 0.6;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6614));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6614]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Abomi'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6615 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6615));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_helga'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6616 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6616));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6616]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_helga'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6617 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6617));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Ryta'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6618 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6618));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6618]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Ryta'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6619 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6619));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Death_eye'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 100, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Death_eye'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      lua_call(G.str['TakeTrueDamage'], [_self, _self, 'None', lua_subtract(lua_tableget(_self, 'HP'), 1), G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mole_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_6622 = 0.5;
      var _defsub_6622 = 0.3;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_6622));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defsub_6622));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_6622]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defsub_6622]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mole_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_6623 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      var _defsub_6623 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_6623));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defsub_6623));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kubas_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _val_6624 = lua_call(G.str['IMCRandom'], [1, 3])[0];
      if (lua_eq(_val_6624, 1)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'Kubas_Buff_Flame', 0, 0, 12000, 1]);
      } else if (lua_eq(_val_6624, 2)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'Kubas_Buff_Water', 0, 0, 12000, 1]);
      } else if (lua_eq(_val_6624, 3)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'Kubas_Buff_Tempest', 0, 0, 12000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Kubas_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kubas_Buff_Flame'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _regadd_6629 = 10;
      lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _regadd_6629));
      lua_call(G.str['SetExProp'], [_buff, "ADD_REG", _regadd_6629]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Kubas_Buff_Flame'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _regadd_6630 = lua_call(G.str['GetExProp'], [_buff, "ADD_REG"])[0];
      lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _regadd_6630));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kubas_Buff_Water'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _regadd_6631 = 10;
      lua_tableset(_self, 'Ice_Def_BM', lua_add(lua_tableget(_self, 'Ice_Def_BM'), _regadd_6631));
      lua_call(G.str['SetExProp'], [_buff, "ADD_REG", _regadd_6631]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Kubas_Buff_Water'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _regadd_6632 = lua_call(G.str['GetExProp'], [_buff, "ADD_REG"])[0];
      lua_tableset(_self, 'Ice_Def_BM', lua_subtract(lua_tableget(_self, 'Ice_Def_BM'), _regadd_6632));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kubas_Buff_Tempest'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _regadd_6633 = 10;
      lua_tableset(_self, 'Lightning_Def_BM', lua_add(lua_tableget(_self, 'Lightning_Def_BM'), _regadd_6633));
      lua_call(G.str['SetExProp'], [_buff, "ADD_REG", _regadd_6633]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Kubas_Buff_Tempest'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _regadd_6634 = lua_call(G.str['GetExProp'], [_buff, "ADD_REG"])[0];
      lua_tableset(_self, 'Lightning_Def_BM', lua_subtract(lua_tableget(_self, 'Lightning_Def_BM'), _regadd_6634));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _shieldValue_6635 = lua_divide(lua_tableget(_self, 'MHP'), 10);
      lua_call(G.str['GIVE_BUFF_SHIELD'], [_self, _buff, _shieldValue_6635]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TAKE_BUFF_SHIELD'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Def_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6637 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6637));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_6637]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Def_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6638 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_6638));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Golden_Bell_Shield_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_6639 = 1;
      lua_call(G.str['SetExProp'], [_self, 'DEFENCED_BM', _addDefenced_BM_6639]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_6639));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Golden_Bell_Shield_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_6640 = lua_call(G.str['GetExProp'], [_self, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_6640));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Magic_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Magic_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Magic_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_6643 = 0.5;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_6643));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_6643]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Magic_Shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_6644 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_6644));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Magic_Shield_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_6645 = lua_add(100, lua_multiply(_arg1, 5));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_6645));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_MDEF_BM', _mdefadd_6645]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Magic_Shield_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_6646 = lua_call(G.str['GetExProp'], [_buff, 'ADD_MDEF_BM'])[0];
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_6646));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Poison_Mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6647 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6647, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6647, 'MAXPATK'), lua_tableget(_caster_6647, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Poison_Mon'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMAXPATK_6649 = tmp[0]; var _casterMAXMATK_6649 = tmp[1]; tmp = null;
      var _from_6649 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_from_6649, null)) {
        _from_6649 = _self;
      }
      var _damage_6649 = lua_divide((lua_add(_casterMAXPATK_6649, _casterMAXMATK_6649)), 2);
      lua_call(G.str['TakeDamage'], [_from_6649, _self, "None", lua_divide(_damage_6649, 5), "Poison", "None", "TrueDamage", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Poison_Mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Melee_charging'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Melee_charging'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Magic_charging'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Magic_charging'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HammerImpact'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'Bomb')) {
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_6657 = tmp[0]; var _y_6657 = tmp[1]; var _z_6657 = tmp[2]; tmp = null;
        lua_call(G.str['PlayEffectToGround'], [_self, "F_explosion012", _x_6657, _y_6657, _z_6657, 1.8]);
        lua_call(G.str['SELF_DESTRUCT'], [_self, 30, 50, 250]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HammerImpact'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sticky_Bubble'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetPropType'], [_self, "Runnable"])[0], null)) {
        if (lua_eq(lua_tableget(_self, 'Runnable'), 1)) {
          lua_tableset(_self, 'Runnable', lua_subtract(lua_tableget(_self, 'Runnable'), 1));
        }
      }
      var _mspdadd_6659 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_multiply(0.15, _over)));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6659));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6659]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sticky_Bubble'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6662 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6662));
      if (!lua_eq(lua_call(G.str['GetPropType'], [_self, "Runnable"])[0], null)) {
        if (lua_eq(lua_tableget(_self, 'Runnable'), 0)) {
          lua_tableset(_self, 'Runnable', lua_add(lua_tableget(_self, 'Runnable'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Scald'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6665 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6665, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6665, 'Lv'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Scald'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6667 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6667, null)) {
        _caster_6667 = _self;
      }
      var _casterLv_6667 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _dmg_6667 = lua_divide(lua_multiply(_casterLv_6667, 2), 5);
      lua_call(G.str['TakeDamage'], [_caster_6667, _self, "None", _dmg_6667, "Fire", "None", "Melee", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Scald'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bind_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 100, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bind_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monster_Haste_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6672 = _arg1;
      var _mspdadd_6672 = lua_multiply(lua_tableget(_self, 'MSPD'), 2);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6672));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6672]);
      var _caster_6672 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6672, null)) {
        return [];
      }
      var _Name_6672 = lua_call(G.str['GetName'], [_caster_6672])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_6672)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_6672, "SHOW_HASTE", lua_tableget(_buff, 'ClassID'), null, _Name_6672]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monster_Haste_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6675 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6675));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monster_Slow'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6676 = _arg1;
      var _mspdadd_6676 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_add(0.85, lua_multiply(_lv_6676, 0.02))));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6676));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6676]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monster_Slow'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6677 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6677));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BLK_UP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6678 = lua_multiply(lua_multiply(lua_tableget(_self, 'BLK'), 0.6), _arg1);
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _defadd_6678));
      lua_call(G.str['SetExProp'], [_buff, "ADD_BLK", _defadd_6678]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BLK_UP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_6679 = lua_call(G.str['GetExProp'], [_buff, "ADD_BLK"])[0];
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _defadd_6679));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Scud'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6680 = _arg1;
      var _mspdadd_6680 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.8);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6680));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6680]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Scud'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6681 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6681));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Dot_Fire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Dot_Fire'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _dotDmg_6683 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_divide((lua_add(lua_tableget(G.str['caster'], 'MINMATK'), lua_tableget(G.str['caster'], 'MAXMATK'))), 2), lua_tableget(_self, 'DEF'))), 0.5)])[0];
      if (lua_lt(_dotDmg_6683, 1)) {
        _dotDmg_6683 = 1;
      }
      lua_call(G.str['TakeDamage'], [_buff, _self, "None", _dotDmg_6683, "Fire", "None", "None", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Dot_Fire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_FireWall'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_FireWall'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6687 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6687, null)) {
        var _skl_6688 = lua_call(G.str['GetSkill'], [_caster_6687, "Mon_pc_summon_Fireload_Skill_3"])[0];
        if (!lua_eq(_skl_6688, null)) {
          var _atk_6689 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_6687, _self, "Mon_pc_summon_Fireload_Skill_3"])[0];
          lua_call(G.str['TakeDamage'], [_caster_6687, _self, lua_tableget(_skl_6688, 'ClassName'), _atk_6689, "Fire", "None", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
        }
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_FireWall'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_cure_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6691 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6691, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6691, 'MINMATK'), lua_tableget(_caster_6691, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_cure_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_6693 = tmp[0]; var _casterMAXMATK_6693 = tmp[1]; tmp = null;
      var _lv_6693 = _arg1;
      var _caster_6693 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6693, null)) {
        _caster_6693 = _self;
      }
      var _baseAtk_6693 = lua_multiply((lua_subtract(lua_divide((lua_add(_casterMINMATK_6693, _casterMAXMATK_6693)), 2), lua_tableget(_self, 'DEF'))), (lua_add(0.15, lua_multiply((lua_subtract(_lv_6693, 1)), 0.015))));
      var _addAtk_6693 = lua_multiply(_lv_6693, 1.5);
      if (lua_lt(_baseAtk_6693, 1)) {
        _baseAtk_6693 = 1;
      }
      if (lua_lt(5, _lv_6693)) {
        _addAtk_6693 = lua_add(_addAtk_6693, lua_multiply((lua_subtract(_lv_6693, 5)), 3.2));
      }
      var _resultDmg_6693 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_baseAtk_6693, _addAtk_6693)])[0];
      lua_call(G.str['TakeDamage'], [_caster_6693, _self, "None", _resultDmg_6693, "Holy", "None", "Magic", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_cure_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_FirePilla'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6698 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6698, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6698, 'MINMATK'), lua_tableget(_caster_6698, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_FirePilla'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_6700 = tmp[0]; var _casterMAXMATK_6700 = tmp[1]; tmp = null;
      var _lv_6700 = _arg1;
      var _caster_6700 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6700, null)) {
        _caster_6700 = _self;
      }
      var _baseAtk_6700 = lua_multiply((lua_subtract(lua_divide((lua_add(_casterMINMATK_6700, _casterMAXMATK_6700)), 2), lua_tableget(_self, 'DEF'))), (lua_add(0.74, lua_multiply((lua_subtract(_lv_6700, 1)), 0.074))));
      var _addAtk_6700 = lua_multiply(_lv_6700, 5.94);
      if (lua_lt(_baseAtk_6700, 1)) {
        _baseAtk_6700 = 1;
      }
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        _addAtk_6700 = 0;
      }
      lua_call(G.str['TakeDamage'], [_caster_6700, _self, "None", lua_tablegetcall(G.str['math'], 'floor', [lua_add(_baseAtk_6700, _addAtk_6700)])[0], "Fire", "None", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_FirePilla'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Fire_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6705 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6705, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6705, 'MINMATK'), lua_tableget(_caster_6705, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_Fire_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_6707 = tmp[0]; var _casterMAXMATK_6707 = tmp[1]; tmp = null;
      var _lv_6707 = _arg1;
      var _caster_6707 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6707, null)) {
        _caster_6707 = _self;
      }
      var _damage_6707 = lua_call(G.str['GetFinalAtk'], [_casterMINMATK_6707, _casterMAXMATK_6707])[0];
      lua_call(G.str['TakeDamage'], [_caster_6707, _self, "None", lua_divide(lua_multiply(_damage_6707, _arg1), 100), "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Fire_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Heal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6710 = _arg1;
      var _bonusValue_6710 = _arg2;
      lua_call(G.str['Heal'], [_self, lua_add((lua_multiply(lua_multiply(lua_tableget(_self, 'MHP'), 0.01), _lv_6710)), _bonusValue_6710), 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Heal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Heal_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6712 = _arg1;
      var _caster_6712 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6712, null)) {
        var _baseAtk_6713 = lua_multiply((lua_subtract(lua_divide((lua_add(lua_tableget(_caster_6712, 'MINMATK'), lua_tableget(_caster_6712, 'MAXMATK'))), 2), lua_tableget(_self, 'DEF'))), (lua_add(1.1, lua_multiply((lua_subtract(_lv_6712, 1)), 0.11))));
        var _addAtk_6713 = lua_multiply(_lv_6712, 3.5);
        if (!lua_eq(lua_tableget(_caster_6712, 'ClassName'), 'PC')) {
          _baseAtk_6713 = (lua_subtract(lua_divide((lua_add(lua_tableget(_caster_6712, 'MINMATK'), lua_tableget(_caster_6712, 'MAXMATK'))), 2.5), lua_tableget(_self, 'DEF')));
        }
        if (lua_lt(_baseAtk_6713, 1)) {
          _baseAtk_6713 = 1;
        }
        if (lua_lt(5, _lv_6712)) {
          _addAtk_6713 = lua_add(_addAtk_6713, lua_multiply((lua_subtract(_lv_6712, 5)), 7));
        }
        var _resultDmg_6713 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_baseAtk_6713, _addAtk_6713)])[0];
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Cleric_Bless_Debuff'])[0], 'YES')) {
          _resultDmg_6713 = lua_multiply(_resultDmg_6713, 2);
        }
        lua_call(G.str['TakeDamage'], [_caster_6712, _self, "None", _resultDmg_6713, "Melee", "None", "Magic", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      }
      return [1];
      return [];
    })
    G.str['GET_HEAL_CLERIC_VALUE_BUFF'] = (function (_lv) {
      var tmp;
      return [lua_multiply(_lv, 0.005)];
      return [];
    })
    G.str['GET_HEAL_CLERIC_VALUE_DEBUFF'] = (function (_lv) {
      var tmp;
      return [lua_multiply(_lv, 0.05)];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Heal_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Atk_up'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_6721 = 0.5;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_6721));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_6721]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Atk_up'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_6722 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_6722));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Atk_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        return [];
      }
      var _patkadd_6723 = 0.2;
      var _matkadd_6723 = 0.2;
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_6723));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_6723));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_6723]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_6723]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Atk_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        return [];
      }
      var _patkadd_6725 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_6725 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_6725));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_6725));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Aggressor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dradd_6727 = lua_subtract((lua_multiply(lua_tableget(_self, 'DR'), 1)), (lua_multiply(lua_tableget(_self, 'DR'), (lua_multiply(_arg1, 0.1)))));
      var _hradd_6727 = lua_multiply(lua_tableget(_self, 'DR'), (lua_multiply(0.2, _arg1)));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_6727));
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hradd_6727));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_6727]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hradd_6727]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Aggressor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dradd_6728 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      var _hradd_6728 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_6728));
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hradd_6728));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Transpose_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _con_6729 = lua_tableget(_self, 'CON');
      var _str_6729 = lua_tableget(_self, 'STR');
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_CON', _con_6729]);
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_STR', _str_6729]);
      lua_tableset(_self, 'CON_BM', lua_add(lua_subtract(lua_tableget(_self, 'CON_BM'), _con_6729), _str_6729));
      lua_tableset(_self, 'STR_BM', lua_add(lua_subtract(lua_tableget(_self, 'STR_BM'), _str_6729), _con_6729));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Transpose_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _con_6730 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_CON'])[0];
      var _str_6730 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_STR'])[0];
      lua_tableset(_self, 'CON_BM', lua_add(lua_subtract(lua_tableget(_self, 'CON_BM'), _str_6730), _con_6730));
      lua_tableset(_self, 'STR_BM', lua_add(lua_subtract(lua_tableget(_self, 'STR_BM'), _con_6730), _str_6730));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_Throw'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 0, 0, 0, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Throw'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_NewFireWall_Monster_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6733 = _arg1;
      var _caster_6733 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6733, null)) {
        var _damage_6734 = lua_call(G.str['GetFinalAtk'], [lua_tableget(_caster_6733, 'MINMATK'), lua_tableget(_caster_6733, 'MAXMATK')])[0];
        lua_call(G.str['TakeDamage'], [_caster_6733, _self, "None", lua_divide(lua_multiply(_damage_6734, _arg1), 100), "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NewFireWall_Monster_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Wound_mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6736 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6736, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6736, 'MAXMATK'), lua_tableget(_caster_6736, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Wound_mon'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6738 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6738, null)) {
        _caster_6738 = _self;
      }
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_6738 = tmp[0]; var _casterMAXMATK_6738 = tmp[1]; tmp = null;
      var _damage_6738 = lua_call(G.str['GetFinalAtk'], [_casterMINMATK_6738, _casterMAXMATK_6738])[0];
      lua_call(G.str['TakeDamage'], [_caster_6738, _self, "None", lua_divide(lua_multiply(_damage_6738, _arg1), 100), "Wound", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Wound_mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HPLock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HPLock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CantLevelDown'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        return [];
      }
      var _beforeLv_6743 = lua_tableget(_self, 'Lv');
      lua_call(G.str['SetExProp'], [_self, "LEVEL_FOR_DROP", _beforeLv_6743]);
      var _newLv_6743 = lua_subtract(_beforeLv_6743, _arg1);
      lua_tableset(_self, 'Lv', lua_tablegetcall(G.str['math'], 'max', [1, _newLv_6743])[0]);
      lua_call(G.str['InvalidateStates'], [_self]);
      lua_call(G.str['BroadcastLevel'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CantLevelDown'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _originalLv_6745 = lua_call(G.str['GetExProp'], [_self, "LEVEL_FOR_DROP"])[0];
      lua_tableset(_self, 'Lv', _originalLv_6745);
      lua_call(G.str['InvalidateStates'], [_self]);
      lua_call(G.str['BroadcastLevel'], [_self]);
      lua_call(G.str['ShowUnicodeValueDigit'], [_self, "", 0]);
      lua_call(G.str['ShowDigitValue'], [_self, -255, _arg2]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_PoisonPilla'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6746 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6746, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6746, 'MAXMATK'), lua_tableget(_caster_6746, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_PoisonPilla'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6748 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6748, null)) {
        _caster_6748 = _self;
      }
      var _lv_6748 = _arg1;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_6748 = tmp[0]; var _casterMAXMATK_6748 = tmp[1]; tmp = null;
      var _baseAtk_6748 = lua_multiply((lua_subtract(lua_divide((lua_add(_casterMINMATK_6748, _casterMAXMATK_6748)), 2), lua_tableget(_self, 'DEF'))), (lua_add(0.74, lua_multiply((lua_subtract(_lv_6748, 1)), 0.074))));
      var _addAtk_6748 = lua_multiply(_lv_6748, 5.94);
      if (lua_lt(_baseAtk_6748, 1)) {
        _baseAtk_6748 = 1;
      }
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        _addAtk_6748 = 0;
      }
      lua_call(G.str['TakeDamage'], [_caster_6748, _self, "None", lua_tablegetcall(G.str['math'], 'floor', [lua_add(_baseAtk_6748, _addAtk_6748)])[0], "Poison", "Magic", "Magic", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_PoisonPilla'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_ReflectShield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _buffLv_6753 = _arg1;
      var _damratio_6753 = 50;
      lua_tableset(_self, 'DamReflect', lua_add(lua_tableget(_self, 'DamReflect'), _damratio_6753));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DAMREFLCET", _damratio_6753]);
      lua_call(G.str['AttachEffect'], [_self, "I_sphere007_mash", 3, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_ReflectShield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damratio_6754 = lua_call(G.str['GetExProp'], [_buff, "ADD_DAMREFLCET"])[0];
      lua_tableset(_self, 'DamReflect', lua_subtract(lua_tableget(_self, 'DamReflect'), _damratio_6754));
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere007_mash']);
      lua_call(G.str['AttachEffect'], [_self, "F_wizard_reflect_shot_light", 2, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Marionette_bound'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 100, 255, 1]);
      var _caster_6755 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6755, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_6755, 'MINPATK'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Marionette_bound'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _casterMINPATK_6757 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _caster_6757 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6757, null)) {
        _caster_6757 = _self;
      }
      var _dot_6757 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_casterMINPATK_6757, 0.05)])[0];
      lua_call(G.str['TakeDamage'], [_caster_6757, _self, "None", _dot_6757, "Melee", "Magic", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Marionette_bound'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_AniChangeHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AniChangeHP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _hp_6761 = lua_multiply(lua_call(G.str['GetHpPercent'], [_self])[0], 100);
      var _change_6761 = lua_call(G.str['GetClass'], ["ChangeAnim", lua_tableget(_self, 'ClassName')])[0];
      if ((lua_lt(_hp_6761, lua_tableget(_change_6761, 'Percent_2')) && lua_eq(lua_call(G.str['GetExProp'], [_self, "Ani0"])[0], 0))) {
        lua_call(G.str['PlayAnim'], [_self, lua_tableget(_change_6761, 'Anim_2'), 1]);
        lua_call(G.str['SetExProp'], [_self, "Ani0", 1]);
      } else if ((lua_lt(_hp_6761, lua_tableget(_change_6761, 'Percent_1')) && lua_eq(lua_call(G.str['GetExProp'], [_self, "Ani1"])[0], 0))) {
        lua_call(G.str['PlayAnim'], [_self, lua_tableget(_change_6761, 'Anim_1'), 1]);
        lua_call(G.str['SetExProp'], [_self, "Ani1", 1]);
      } else if ((lua_lt(_hp_6761, lua_tableget(_change_6761, 'Percent_0')) && lua_eq(lua_call(G.str['GetExProp'], [_self, "Ani2"])[0], 0))) {
        lua_call(G.str['PlayAnim'], [_self, lua_tableget(_change_6761, 'Anim_0'), 1]);
        lua_call(G.str['SetExProp'], [_self, "Ani2", 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AniChangeHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "Ani0"]);
      lua_call(G.str['DelExProp'], [_self, "Ani1"]);
      lua_call(G.str['DelExProp'], [_self, "Ani2"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_AniChangeTime'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AniChangeTime'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _change_6767 = lua_call(G.str['GetClass'], ["ChangeAnim", lua_tableget(_self, 'ClassName')])[0];
      var _time_6767 = lua_call(G.str['GetAge'], [_self])[0];
      if ((lua_lt(lua_tableget(_change_6767, 'Time_0'), _time_6767) && lua_eq(lua_call(G.str['GetExProp'], [_self, "Ani0"])[0], 0))) {
        lua_call(G.str['PlayAnim'], [_self, lua_tableget(_change_6767, 'Anim_0'), 1]);
        lua_call(G.str['SetExProp'], [_self, "Ani0", 1]);
      } else if ((lua_lt(lua_tableget(_change_6767, 'Time_1'), _time_6767) && lua_eq(lua_call(G.str['GetExProp'], [_self, "Ani1"])[0], 0))) {
        lua_call(G.str['PlayAnim'], [_self, lua_tableget(_change_6767, 'Anim_1'), 1]);
        lua_call(G.str['SetExProp'], [_self, "Ani1", 1]);
      } else if ((lua_lt(lua_tableget(_change_6767, 'Time_2'), _time_6767) && lua_eq(lua_call(G.str['GetExProp'], [_self, "Ani2"])[0], 0))) {
        lua_call(G.str['PlayAnim'], [_self, lua_tableget(_change_6767, 'Anim_2'), 1]);
        lua_call(G.str['SetExProp'], [_self, "Ani2", 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AniChangeTime'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "Ani0"]);
      lua_call(G.str['DelExProp'], [_self, "Ani1"]);
      lua_call(G.str['DelExProp'], [_self, "Ani2"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SuperExp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "SuperDrop", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SuperExp'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_mspblood'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6774 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.3);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6774));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6774]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_mspblood'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.2))]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_mspblood'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6776 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6776));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_SpDrain'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6777 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.05);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6777));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_6777]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mon_SpDrain'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.05))]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_SpDrain'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_6779 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_6779));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_joint_MagicShield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_6780 = lua_add(lua_tableget(_self, 'MDEF'), lua_multiply(_arg1, 5));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_6780));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_6780]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_EliteMonsterBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        return [];
      }
      var _monRank_6781 = lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0];
      if (lua_eq(_monRank_6781, null)) {
        return [];
      }
      var _debuffRank_6781 = lua_call(G.str['TryGetProp'], [_self, "DebuffRank"])[0];
      if (lua_eq(_debuffRank_6781, null)) {
        return [];
      }
      var _size_6781 = lua_call(G.str['TryGetProp'], [_self, "Size"])[0];
      if (lua_eq(_size_6781, "S")) {
        lua_tableset(_self, 'Size', "L");
        lua_call(G.str['ChangeScale'], [_self, 2.0, 1.0]);
      } else if (lua_eq(_size_6781, "M")) {
        lua_tableset(_self, 'Size', "L");
        lua_call(G.str['ChangeScale'], [_self, 1.5, 1.0]);
      }
      if (lua_eq(_monRank_6781, "Normal")) {
        lua_tableset(_self, 'MonRank', "Elite");
      }
      if (lua_eq(_debuffRank_6781, "None")) {
        lua_tableset(_self, 'DebuffRank', "Normal");
      }
      var _addmhp_6781 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MHP'), lua_tableget(_self, 'MHP_BM'))])[0];
      var _addpatk_6781 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MAXPATK'), lua_tableget(_self, 'PATK_BM'))])[0];
      var _addmatk_6781 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MAXMATK'), lua_tableget(_self, 'MATK_BM'))])[0];
      var _adddef_6781 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'DEF'), lua_tableget(_self, 'DEF_BM'))])[0];
      var _addmdef_6781 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MDEF'), lua_tableget(_self, 'MDEF_BM'))])[0];
      var _addMSPD_6781 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_tableget(_self, 'MSPD'), lua_tableget(_self, 'MSPD_BM'))), 0.75)])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _addmhp_6781));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _addpatk_6781));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _addmatk_6781));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _adddef_6781));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addmdef_6781));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addMSPD_6781));
      lua_call(G.str['InvalidateStates'], [_self]);
      lua_call(G.str['AddHP'], [_self, lua_tableget(_self, 'MHP')]);
      var _eliteMonSkillCapacity_6781 = 2;
      var _holdingSkillCount_6781 = lua_call(G.str['IMCRandom'], [0, _eliteMonSkillCapacity_6781])[0];
      if (lua_lt(0, _holdingSkillCount_6781)) {
        var _holdingSkillList_6789 = lua_call(G.str['GetEliteMonSkillList'], ["Holding", _holdingSkillCount_6781])[0];
        lua_call(G.str['SetExProp'], [_self, "EliteMonHoldingSkillCount", lua_len(_holdingSkillList_6789)]);
        var var_6790 = 1, stop_6790 = lua_assertfloat(lua_len(_holdingSkillList_6789));
        for (; var_6790 <= stop_6790; var_6790++) {
          var _i_6790 = var_6790;
          lua_call(G.str['SetExProp_Str'], [_self, lua_concat("EliteMonHoldingSkill_", _i_6790), lua_tableget(_holdingSkillList_6789, _i_6790)]);
        }
      }
      var _debuffSkillCount_6781 = lua_call(G.str['IMCRandom'], [0, _eliteMonSkillCapacity_6781])[0];
      if (lua_lt(0, _debuffSkillCount_6781)) {
        tmp = lua_call(G.str['GetEliteMonSkillList'], ["Debuff", _debuffSkillCount_6781]); var _debuffSkillList_6792 = tmp[0]; var _cnt_6792 = tmp[1]; tmp = null;
        lua_call(G.str['SetExProp'], [_self, "EliteMonDebuffSkillCount", lua_len(_debuffSkillList_6792)]);
        var var_6793 = 1, stop_6793 = lua_assertfloat(lua_len(_debuffSkillList_6792));
        for (; var_6793 <= stop_6793; var_6793++) {
          var _i_6793 = var_6793;
          lua_call(G.str['SetExProp_Str'], [_self, lua_concat("EliteMonDebuffSkill_", _i_6793), lua_tableget(_debuffSkillList_6792, _i_6793)]);
        }
      }
      var _buffSkillCount_6781 = lua_call(G.str['IMCRandom'], [0, _eliteMonSkillCapacity_6781])[0];
      if (lua_lt(0, _buffSkillCount_6781)) {
        var _buffSkillList_6795 = lua_call(G.str['GetEliteMonSkillList'], ["Buff", _buffSkillCount_6781])[0];
        lua_call(G.str['SetExProp'], [_self, "EliteMonBuffSkillCount", lua_len(_buffSkillList_6795)]);
        var var_6796 = 1, stop_6796 = lua_assertfloat(lua_len(_buffSkillList_6795));
        for (; var_6796 <= stop_6796; var_6796++) {
          var _i_6796 = var_6796;
          lua_call(G.str['SetExProp_Str'], [_self, lua_concat("EliteMonBuffSkill_", _i_6796), lua_tableget(_buffSkillList_6795, _i_6796)]);
        }
      }
      var _summonSkillCount_6781 = lua_call(G.str['IMCRandom'], [0, _eliteMonSkillCapacity_6781])[0];
      if (lua_lt(0, _summonSkillCount_6781)) {
        var _summonSkillList_6798 = lua_call(G.str['GetEliteMonSkillList'], ["Summon", _summonSkillCount_6781])[0];
        lua_call(G.str['SetExProp'], [_self, "EliteMonSummonSkillCount", lua_len(_summonSkillList_6798)]);
        var var_6799 = 1, stop_6799 = lua_assertfloat(lua_len(_summonSkillList_6798));
        for (; var_6799 <= stop_6799; var_6799++) {
          var _i_6799 = var_6799;
          lua_call(G.str['SetExProp_Str'], [_self, lua_concat("EliteMonSummonSkill_", _i_6799), lua_tableget(_summonSkillList_6798, _i_6799)]);
        }
      }
      var _bornSkillCount_6781 = lua_call(G.str['IMCRandom'], [0, _eliteMonSkillCapacity_6781])[0];
      if (lua_lt(0, _bornSkillCount_6781)) {
        var _bornSkillList_6801 = lua_call(G.str['GetEliteMonSkillList'], ["Born", _bornSkillCount_6781])[0];
        lua_call(G.str['SetExProp'], [_self, "EliteMonBornSkillCount", lua_len(_bornSkillList_6801)]);
        var var_6802 = 1, stop_6802 = lua_assertfloat(lua_len(_bornSkillList_6801));
        for (; var_6802 <= stop_6802; var_6802++) {
          var _i_6802 = var_6802;
          lua_call(G.str['SetExProp_Str'], [_self, lua_concat("EliteMonBornSkill_", _i_6802), lua_tableget(_bornSkillList_6801, _i_6802)]);
        }
      }
      var _eliteMonBornSkillCount_6781 = lua_call(G.str['GetExProp'], [_self, "EliteMonBornSkillCount"])[0];
      if (lua_lt(0, _eliteMonBornSkillCount_6781)) {
        var _rnd_6804 = lua_call(G.str['IMCRandom'], [0, _eliteMonBornSkillCount_6781])[0];
        if (lua_lt(0, _rnd_6804)) {
          var _skillFunc_6805 = lua_call(G.str['GetExProp_Str'], [_self, lua_concat("EliteMonBornSkill_", _rnd_6804)])[0];
          if (!lua_eq(_skillFunc_6805, "None")) {
            var _func_6806 = lua_tableget(G.str['_G'], lua_call(G.str['GetExProp_Str'], [_self, lua_concat("EliteMonBornSkill_", _rnd_6804)])[0]);
            if (!lua_eq(_func_6806, null)) {
              lua_call(_func_6806, [_self]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EliteMonsterBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _topHater_6808 = lua_call(G.str['GetNearTopHateEnemy'], [_self])[0];
      if (!lua_eq(_topHater_6808, null)) {
        var _dist_6809 = lua_call(G.str['GetDist2D'], [_self, _topHater_6808])[0];
        if (lua_lt(_dist_6809, 100)) {
          var _eliteMonHoldingSkillCount_6810 = lua_call(G.str['GetExProp'], [_self, "EliteMonHoldingSkillCount"])[0];
          if (lua_lt(0, _eliteMonHoldingSkillCount_6810)) {
            var _rnd_6811 = lua_call(G.str['IMCRandom'], [0, 99])[0];
            if (lua_lt(_rnd_6811, 25)) {
              if (lua_lt(lua_call(G.str['GetExProp'], [_self, "EliteMonSkillDelay"])[0], lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0])) {
                tmp = lua_call(G.str['GetPos'], [_self]); var _x_6813 = tmp[0]; var _y_6813 = tmp[1]; var _z_6813 = tmp[2]; tmp = null;
                lua_call(G.str['RunPad'], [_self, "Mon_Elite_Holding", null, _x_6813, _y_6813, _z_6813, 0, 1]);
                lua_call(G.str['SetExProp'], [_self, "EliteMonSkillDelay", lua_add(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], 15)]);
              }
            }
          }
        }
        var _eliteMonSummonSkillCount_6809 = lua_call(G.str['GetExProp'], [_self, "EliteMonSummonSkillCount"])[0];
        if (lua_lt(0, _eliteMonSummonSkillCount_6809)) {
          if (lua_lt(lua_call(G.str['GetExProp'], [_self, "EliteMonSkillDelay"])[0], lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0])) {
            var _rnd_6815 = lua_call(G.str['IMCRandom'], [1, _eliteMonSummonSkillCount_6809])[0];
            var _skillFunc_6815 = lua_call(G.str['GetExProp_Str'], [_self, lua_concat("EliteMonSummonSkill_", _rnd_6815)])[0];
            if (!lua_eq(_skillFunc_6815, "None")) {
              var _func_6816 = lua_tableget(G.str['_G'], lua_call(G.str['GetExProp_Str'], [_self, lua_concat("EliteMonSummonSkill_", _rnd_6815)])[0]);
              if (!lua_eq(_func_6816, null)) {
                lua_call(_func_6816, [_self]);
              }
            }
            lua_call(G.str['SetExProp'], [_self, "EliteMonSkillDelay", lua_add(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], 5)]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_EliteMonsterSummonBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addmhp_6818 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MHP'), lua_tableget(_self, 'MHP_BM'))])[0];
      var _addpatk_6818 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MAXPATK'), lua_tableget(_self, 'PATK_BM'))])[0];
      var _addmatk_6818 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MAXMATK'), lua_tableget(_self, 'MATK_BM'))])[0];
      var _adddef_6818 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'DEF'), lua_tableget(_self, 'DEF_BM'))])[0];
      var _addmdef_6818 = lua_tablegetcall(G.str['math'], 'floor', [lua_subtract(lua_tableget(_self, 'MDEF'), lua_tableget(_self, 'MDEF_BM'))])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), (lua_divide(_addmhp_6818, 2))));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), (lua_divide(_addpatk_6818, 2))));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), (lua_divide(_addmatk_6818, 2))));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), (lua_divide(_adddef_6818, 2))));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), (lua_divide(_addmdef_6818, 2))));
      lua_call(G.str['InvalidateStates'], [_self]);
      lua_call(G.str['AddHP'], [_self, lua_tableget(_self, 'MHP')]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mon_ResistElements_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_6819 = 0;
      var _resfireadd_6819 = 0;
      var _reslightadd_6819 = 0;
      var _resposadd_6819 = 0;
      var _researthadd_6819 = 0;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        var _lv_6820 = _arg1;
        var _caster_6820 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_6820, null)) {
          var _pad_6821 = lua_call(G.str['GetPadByBuff'], [_caster_6820, _buff])[0];
          if (!lua_eq(_pad_6821, null)) {
            _lv_6820 = lua_call(G.str['GetPadArgNumber'], [_pad_6821, 1])[0];
          }
        }
        var _resadd_6820 = lua_add(24, lua_multiply(6.3, (lua_subtract(_lv_6820, 1))));
        _resiceadd_6819 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_resadd_6820, lua_multiply(lua_tableget(_self, 'Ice_Def'), 0.2))])[0];
        _resfireadd_6819 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_resadd_6820, lua_multiply(lua_tableget(_self, 'Fire_Def'), 0.2))])[0];
        _reslightadd_6819 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_resadd_6820, lua_multiply(lua_tableget(_self, 'Lightning_Def'), 0.2))])[0];
        _resposadd_6819 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_resadd_6820, lua_multiply(lua_tableget(_self, 'Poison_Def'), 0.2))])[0];
        _researthadd_6819 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_resadd_6820, lua_multiply(lua_tableget(_self, 'Earth_Def'), 0.2))])[0];
        lua_tableset(_self, 'Ice_Def_BM', lua_add(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_6819));
        lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_6819));
        lua_tableset(_self, 'Lightning_Def_BM', lua_add(lua_tableget(_self, 'Lightning_Def_BM'), _reslightadd_6819));
        lua_tableset(_self, 'Poison_Def_BM', lua_add(lua_tableget(_self, 'Poison_Def_BM'), _resposadd_6819));
        lua_tableset(_self, 'Earth_Def_BM', lua_add(lua_tableget(_self, 'Earth_Def_BM'), _researthadd_6819));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_ICE", _resiceadd_6819]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIRE", _resfireadd_6819]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_LIGHT", _reslightadd_6819]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_POS", _resposadd_6819]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_EARTH", _researthadd_6819]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ResistElements_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_6823 = lua_call(G.str['GetExProp'], [_buff, "ADD_ICE"])[0];
      var _resfireadd_6823 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIRE"])[0];
      var _reslightadd_6823 = lua_call(G.str['GetExProp'], [_buff, "ADD_LIGHT"])[0];
      var _resposadd_6823 = lua_call(G.str['GetExProp'], [_buff, "ADD_POS"])[0];
      var _researthadd_6823 = lua_call(G.str['GetExProp'], [_buff, "ADD_EARTH"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_tableset(_self, 'Ice_Def_BM', lua_subtract(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_6823));
        lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_6823));
        lua_tableset(_self, 'Lightning_Def_BM', lua_subtract(lua_tableget(_self, 'Lightning_Def_BM'), _reslightadd_6823));
        lua_tableset(_self, 'Poison_Def_BM', lua_subtract(lua_tableget(_self, 'Poison_Def_BM'), _resposadd_6823));
        lua_tableset(_self, 'Earth_Def_BM', lua_subtract(lua_tableget(_self, 'Earth_Def_BM'), _researthadd_6823));
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EliteMonsterSummonBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _owner_6825 = lua_call(G.str['GetOwner'], [_self])[0];
      if (lua_eq(_owner_6825, null)) {
        lua_call(G.str['Dead'], [_self, 0.2]);
      }
      var _topHater_6825 = lua_call(G.str['GetNearTopHateEnemy'], [_self])[0];
      if (lua_eq(_topHater_6825, null)) {
        _topHater_6825 = lua_call(G.str['GetNearTopHateEnemy'], [_owner_6825])[0];
        if (!lua_eq(_topHater_6825, null)) {
          var _hateValue_6828 = lua_call(G.str['GetHate'], [_self, _topHater_6825])[0];
          lua_call(G.str['InsertHate'], [_self, _topHater_6825, _hateValue_6828]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kerberos_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_6829 = lua_multiply(0.01, _arg1);
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_6829));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_6829]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mon_Kerberos_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_6830 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_6830));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Blk_Down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Blk_Down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Boss_Reflect_attack'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Boss_Reflect_attack'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ID_Whitetrees1_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ID_Whitetrees1_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _damage_6836 = 200;
      var _caster_6836 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6836, null)) {
        lua_call(G.str['TakeDamage'], [_caster_6836, _self, "None", _damage_6836, "Poison", "Magic", "TrueDamage", "HIT_POISON", "HITRESULT_BLOW", 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ID_Whitetrees1_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Boss_kucarry_blazermancer_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damage_6839 = 100;
      var _maxOverBonus_6839 = 0;
      if (lua_lte(100, _over)) {
        _over = 100;
        _maxOverBonus_6839 = 7;
      }
      var _damage_6839 = lua_add(lua_add((lua_multiply(7, (lua_subtract(_over, 1)))), _damage_6839), _maxOverBonus_6839);
      lua_call(G.str['SetExProp'], [_buff, 'DAMAGE', _damage_6839]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Boss_kucarry_blazermancer_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _damage_6841 = lua_call(G.str['GetExProp'], [_buff, 'DAMAGE'])[0];
      var _caster_6841 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_over, 100)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ID_WHITETREES1_GIMMICK3_BUFF'])[0], 'YES')) {
          lua_call(G.str['RemoveBuff'], [_self, 'ID_WHITETREES1_GIMMICK3_BUFF']);
          return [0];
        }
      }
      if (!lua_eq(_caster_6841, null)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ID_WHITETREES1_GIMMICK3_BUFF'])[0], 'NO')) {
          lua_call(G.str['TakeDamage'], [_caster_6841, _self, "None", _damage_6841, "Poison", "Magic", "TrueDamage", G.str['HIT_BASIC_NOT_CANCEL_CAST'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      } else {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Boss_kucarry_blazermancer_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_Cloaking_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_Cloaking_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_Diffusion_Curse_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UC_Diffusion_Curse_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6851 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6851, null)) {
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_6851, _self, 60, 'ENEMY']); var _objList_6852 = tmp[0]; var _objCount_6852 = tmp[1]; tmp = null;
        if ((lua_lt(0, _objCount_6852) && lua_lt(lua_call(G.str['IMCRandom'], [1, 10000])[0], 9000))) {
          var _rand_6853 = lua_call(G.str['IMCRandom'], [1, _objCount_6852])[0];
          lua_call(G.str['AddBuff'], [_caster_6851, lua_tableget(_objList_6852, _rand_6853), 'UC_Diffusion_Curse', _arg1, _arg2, G.str['RemainTime'], _over]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_Diffusion_Curse_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_Invincible_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GM_Invincible_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6856 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6856, null)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_Invincible_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetNoDamage'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_Focusing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6859 = _arg1;
      var _addHR_6859 = lua_multiply(_lv_6859, 100);
      var _addCRT_6859 = lua_multiply(_lv_6859, 100);
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _addHR_6859));
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _addCRT_6859));
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRIHR", _addCRT_6859]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _addHR_6859]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_Focusing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCRT_6860 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRIHR"])[0];
      var _addHR_6860 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _addHR_6860));
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _addCRT_6860));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FIELD_BOSS_AWAKE_UP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addATKRate_6861 = 1.5;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _addATKRate_6861));
      lua_call(G.str['SetExProp'], [_buff, 'addATKRate', _addATKRate_6861]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FIELD_BOSS_AWAKE_UP'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _maxHP_6862 = lua_tableget(_self, 'MHP');
      var _nowHP_6862 = lua_tableget(_self, 'HP');
      var _healHP_6862 = lua_multiply(_maxHP_6862, 0.15);
      var _prop_6862 = lua_call(G.str['GetExProp'], [_buff, 'useHeal'])[0];
      if (!lua_eq(_prop_6862, 1)) {
        if (lua_lt(_nowHP_6862, _maxHP_6862)) {
          lua_call(G.str['Heal'], [_self, lua_tablegetcall(G.str['math'], 'floor', [_healHP_6862])[0], 0]);
          return [1];
        }
        lua_call(G.str['SetExProp'], [_buff, 'useHeal', 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FIELD_BOSS_AWAKE_UP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      G.str['addATKRate'] = lua_call(G.str['GetExProp'], [_buff, 'addATKRate'])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), G.str['addATKRate']));
      return [];
    })
    G.str['SCR_FIELD_BOSS_AWAKE_SIMPLE'] = (function (_self) {
      var tmp;
      var _nowHP_6866 = lua_tableget(_self, 'HP');
      var _maxHP_6866 = lua_tableget(_self, 'MHP');
      var _awakeCnt_6866 = lua_call(G.str['GetExProp'], [_self, "AWAKE_COUNT"])[0];
      if ((lua_lt(_awakeCnt_6866, 1) && lua_eq(_awakeCnt_6866, 0))) {
        if (lua_lte(_nowHP_6866, lua_multiply(_maxHP_6866, 0.1))) {
          lua_call(G.str['AddBuff'], [_self, _self, 'FIELD_BOSS_AWAKE_UP', 1, 0, 0, 1]);
          lua_call(G.str['AddBuff'], [_self, _self, 'GM_Invincible_Buff', 1, 0, 5000, 1]);
          lua_call(G.str['SetExProp'], [_self, "AWAKE_COUNT", 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_FIELD_BOSS_AWAKE_UP_VERSION_TWO'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addATKRate_6869 = 1.5;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _addATKRate_6869));
      lua_call(G.str['SetExProp'], [_buff, 'addATKRate', _addATKRate_6869]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FIELD_BOSS_AWAKE_UP_VERSION_TWO'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _maxHP_6870 = lua_tableget(_self, 'MHP');
      var _nowHP_6870 = lua_tableget(_self, 'HP');
      var _healHP_6870 = lua_multiply(_maxHP_6870, 0.15);
      var _prop_6870 = lua_call(G.str['GetExProp'], [_buff, 'useHeal'])[0];
      if (!lua_eq(_prop_6870, 1)) {
        if (lua_lt(_nowHP_6870, _maxHP_6870)) {
          lua_call(G.str['Heal'], [_self, lua_tablegetcall(G.str['math'], 'floor', [_healHP_6870])[0], 0]);
          return [1];
        }
        lua_call(G.str['SetExProp'], [_buff, 'useHeal', 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FIELD_BOSS_AWAKE_UP_VERSION_TWO'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      G.str['addATKRate'] = lua_call(G.str['GetExProp'], [_buff, 'addATKRate'])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), G.str['addATKRate']));
      return [];
    })
    G.str['SCR_FIELD_BOSS_AWAKE_VERSION_TWO_SIMPLE'] = (function (_self) {
      var tmp;
      var _nowHP_6874 = lua_tableget(_self, 'HP');
      var _maxHP_6874 = lua_tableget(_self, 'MHP');
      var _awakeCnt_6874 = lua_call(G.str['GetExProp'], [_self, "AWAKE_COUNT"])[0];
      if ((lua_lt(_awakeCnt_6874, 1) && lua_eq(_awakeCnt_6874, 0))) {
        if (lua_lte(_nowHP_6874, lua_multiply(_maxHP_6874, 0.1))) {
          lua_call(G.str['AddBuff'], [_self, _self, 'FIELD_BOSS_AWAKE_UP_VERSION_TWO', 1, 0, 0, 1]);
          lua_call(G.str['AddBuff'], [_self, _self, 'GM_Invincible_Buff', 1, 0, 5000, 1]);
          lua_call(G.str['SetExProp'], [_self, "AWAKE_COUNT", 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_buff_Velcoffer_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_6877 = tmp[0]; var _y_6877 = tmp[1]; var _z_6877 = tmp[2]; tmp = null;
      tmp = lua_call(G.str['GetFollowerList'], [_self]); var _followerList_6877 = tmp[0]; var _followercnt_6877 = tmp[1]; tmp = null;
      var _limitCnt_6877 = 4;
      if (lua_eq(_followercnt_6877, 0)) {
        var var_6879 = 1, stop_6879 = lua_assertfloat(_limitCnt_6877);
        for (; var_6879 <= stop_6879; var_6879++) {
          var _i_6879 = var_6879;
          lua_call(G.str['RunScript'], ["SCR_Raid_buff_Velcoffer_Summon_Time", _self, _x_6877, _y_6877, _z_6877]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Raid_buff_Velcoffer_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetFollowerList'], [_self]); var _followerList_6881 = tmp[0]; var _followercnt_6881 = tmp[1]; tmp = null;
      if ((lua_eq(_followerList_6881, null) || lua_eq(_followercnt_6881, 0))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_buff_Velcoffer_Summon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_Raid_buff_Velcoffer_Summon_Time'] = (function (_self, _x, _y, _z) {
      var tmp;
      var _time_6884 = lua_call(G.str['IMCRandom'], [0, 1000])[0];
      lua_call(G.str['sleep'], [_time_6884]);
      var _dPos_6884 = lua_call(G.str['SCR_DOUGHNUT_RANDOM_POS'], [_x, _z, 50, 100])[0];
      var _angle_6884 = lua_call(G.str['GetAngleFromPos'], [_self, lua_tableget(_dPos_6884, 'x'), lua_tableget(_dPos_6884, 'z')])[0];
      var _summonMon_6884 = lua_call(G.str['CREATE_MONSTER_EX'], [_self, 'velcoffer_guard_mini', lua_tableget(_dPos_6884, 'x'), _y, lua_tableget(_dPos_6884, 'z'), _angle_6884, 'Monster', null])[0];
      lua_call(G.str['DisableBornAni'], [_summonMon_6884]);
      lua_call(G.str['PlayEffect'], [_summonMon_6884, 'F_buff_basic027_navy_line', 0.5, 'BOT']);
      lua_call(G.str['SetOwner'], [_summonMon_6884, _self, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_RAID_VELCOFFER_GIMMICK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_buff_basic025_white_line_event', 0.5, 'BOT']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RAID_VELCOFFER_GIMMICK_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_VELCOPFFER_GIMMICK_TIMER_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_VELCOPFFER_GIMMICK_TIMER_BUFF'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _remainderTime_6888 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_RemainTime, 1000)])[0];
      var _timer_6888 = lua_add(_remainderTime_6888, 1);
      lua_call(G.str['SetTitle'], [_self, _timer_6888]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VELCOPFFER_GIMMICK_TIMER_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetTitle'], [_self, ""]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_VELCOPFFER_GIMMICK_SACRIFICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VELCOPFFER_GIMMICK_SACRIFICE_BUFF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_INVINCIBILITY_EXCEPT_FOR_CERTAIN_ATTACKS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_INVINCIBILITY_EXCEPT_FOR_CERTAIN_ATTACKS'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_Velcofer_Curse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_6894 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _StageProgress_6894 = lua_call(G.str['GetMGameValue'], [_self, 'StageProgress'])[0];
      if (lua_lte(1, _over)) {
        
      }
      if (lua_lte(2, _over)) {
        
      }
      if (lua_lte(3, _over)) {
        if (lua_eq(_StageProgress_6894, 0)) {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Cnt_Debuff'])[0], 'YES')) {
            lua_call(G.str['RemoveBuff'], [_self, 'Raid_Velcofer_Cnt_Debuff']);
          }
        }
        tmp = lua_call(G.str['SelectObject'], [_self, 40, 'PC']); var _objList_6897 = tmp[0]; var _objCount_6897 = tmp[1]; tmp = null;
        lua_call(G.str['PlayEffect'], [_self, 'F_burstup012_violet', 1]);
        var var_6900 = 1, stop_6900 = lua_assertfloat(_objCount_6897);
        for (; var_6900 <= stop_6900; var_6900++) {
          var _i_6900 = var_6900;
          var _obj_6901 = lua_tableget(_objList_6897, _i_6900);
          if (lua_eq(lua_tableget(_obj_6901, 'ClassName'), 'PC')) {
            var _angle_6902 = lua_call(G.str['GetAngleTo'], [_self, _obj_6901])[0];
            lua_call(G.str['TakeDamage'], [_caster_6894, _obj_6901, "None", 9999, "Dark", "Magic", "Magic", G.str['HIT_DARK'], G.str['HITRESULT_BLOW']]);
            lua_call(G.str['KnockDown'], [_obj_6901, _self, 150, _angle_6902, 60, 1]);
          }
        }
      }
      if (lua_lte(4, _over)) {
        
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Raid_Velcofer_Curse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffCount_6904 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _caster_6904 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6904, null)) {
        var _casterHandler_6905 = lua_call(G.str['GetMGameValue'], [_self, 'casterHandle'])[0];
        var _zoneInst_6905 = lua_call(G.str['GetZoneInstID'], [_self])[0];
        _caster_6904 = lua_call(G.str['GetByHandle'], [_zoneInst_6905, _casterHandler_6905])[0];
      }
      lua_call(G.str['SetBuffArgs'], [_buff, lua_add(_buffCount_6904, 1)]);
      if (lua_lte(2, _over)) {
        if ((lua_eq(lua_mod(_buffCount_6904, 5), 0) && !lua_eq(_buffCount_6904, 0))) {
          var _hpDmg_6907 = lua_subtract((lua_multiply(2500, (lua_subtract(_over, 1)))), 1);
          var _hpCheck_6907 = lua_subtract(lua_tableget(_self, 'HP'), _hpDmg_6907);
          if ((lua_lte(1, _hpCheck_6907) && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'RAID_VELCOFFER_GIMMICK_BUFF'])[0], 'NO'))) {
            lua_call(G.str['TakeDamage'], [_caster_6904, _self, "None", _hpDmg_6907, "Dark", "Magic", "TrueDamage", G.str['HIT_BASIC_NOT_CANCEL_CAST'], G.str['HITRESULT_BLOW']]);
          }
        }
      }
      var _StageProgress_6904 = lua_call(G.str['GetMGameValue'], [_self, "StageProgress"])[0];
      if (lua_eq(_StageProgress_6904, 1)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Cnt_Debuff'])[0], 'NO')) {
          if (lua_lt(_over, 5)) {
            lua_call(G.str['AddBuff'], [_caster_6904, _self, 'Raid_Velcofer_Cnt_Debuff', 1, 0, 0, 1]);
            return [1];
          }
        } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Cnt_Debuff'])[0], 'YES')) {
          if (lua_lte(5, _over)) {
            lua_call(G.str['RemoveBuff'], [_self, 'Raid_Velcofer_Cnt_Debuff']);
          }
        }
      } else if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Cnt_Debuff'])[0], 'YES') && lua_lte(3, _over))) {
        lua_call(G.str['RemoveBuff'], [_self, 'Raid_Velcofer_Cnt_Debuff']);
      } else if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Cnt_Debuff'])[0], 'NO') && lua_lt(_over, 3))) {
        lua_call(G.str['AddBuff'], [_caster_6904, _self, 'Raid_Velcofer_Cnt_Debuff', 1]);
      }
      if (lua_lte(4, _over)) {
        if (lua_eq(_buffCount_6904, 10)) {
          tmp = lua_call(G.str['SelectObject'], [_self, 100, 'PC']); var _objList_6917 = tmp[0]; var _objCount_6917 = tmp[1]; tmp = null;
          if ((lua_eq(_objCount_6917, null) || !lua_eq(_objCount_6917, 0))) {
            var var_6919 = 1, stop_6919 = lua_assertfloat(_objCount_6917);
            for (; var_6919 <= stop_6919; var_6919++) {
              var _i_6919 = var_6919;
              var _obj_6920 = lua_tableget(_objList_6917, _i_6919);
              if (lua_eq(lua_tableget(_obj_6920, 'ClassName'), 'PC')) {
                if (lua_eq(lua_call(G.str['IsBuffApplied'], [_obj_6920, 'Raid_Velcofer_Curse_Debuff'])[0], 'YES')) {
                  var _overCharge_6922 = lua_call(G.str['GetBuffOver'], [_obj_6920, 'Raid_Velcofer_Curse_Debuff'])[0];
                  if (lua_lte(2, _overCharge_6922)) {
                    return [1];
                  }
                }
                lua_call(G.str['AddBuff'], [_caster_6904, _obj_6920, 'Raid_Velcofer_Curse_Debuff', 1, 0, 0, 2]);
              }
            }
          }
        }
      }
      if (lua_lte(5, _over)) {
        lua_call(G.str['AddBuff'], [_caster_6904, _self, 'Raid_Velcofer_Last_Curse_Debuff', 1, 0, 30000, 1]);
        lua_call(G.str['RemoveBuff'], [_self, 'Raid_Velcofer_Curse_Debuff']);
      }
      if (lua_lte(10, _buffCount_6904)) {
        lua_call(G.str['SetBuffArgs'], [_buff, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_Velcofer_Curse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_Velcofer_Cnt_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Raid_Velcofer_Cnt_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_6928 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_6928, null)) {
        var _casterHandler_6929 = lua_call(G.str['GetMGameValue'], [_self, 'casterHandle'])[0];
        var _zoneInst_6929 = lua_call(G.str['GetZoneInstID'], [_self])[0];
        _caster_6928 = lua_call(G.str['GetByHandle'], [_zoneInst_6929, _casterHandler_6929])[0];
      }
      var _curseCharge_6928 = _over;
      if (lua_lte(100, _curseCharge_6928)) {
        lua_call(G.str['AddBuff'], [_caster_6928, _self, 'Raid_Velcofer_Curse_Debuff', 1, 0, 0, 1]);
        lua_call(G.str['RemoveBuff'], [_self, 'Raid_Velcofer_Cnt_Debuff']);
      }
      lua_call(G.str['AddBuff'], [_caster_6928, _self, 'Raid_Velcofer_Cnt_Debuff', 1, 0, 0, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_Velcofer_Cnt_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_Velcofer_Awake_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_6932 = _arg1;
      var _blkbreakAdd_6932 = lua_multiply(50, _lv_6932);
      var _hrAdd_6932 = lua_multiply(50, _lv_6932);
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hrAdd_6932));
      lua_tableset(_self, 'BLK_BREAK_BM', lua_add(lua_tableget(_self, 'BLK_BREAK_BM'), _blkbreakAdd_6932));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hrAdd_6932]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_BLKBREAK", _blkbreakAdd_6932]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_Velcofer_Awake_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blkbreakAdd_6933 = lua_call(G.str['GetExProp'], [_buff, "ADD_BLKBREAK"])[0];
      var _hrAdd_6933 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hrAdd_6933));
      lua_tableset(_self, 'BLK_BREAK_BM', lua_subtract(lua_tableget(_self, 'BLK_BREAK_BM'), _blkbreakAdd_6933));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_Velcofer_Last_Curse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Raid_Velcofer_Last_Curse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffCount_6935 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      lua_call(G.str['SetBuffArgs'], [_buff, lua_add(_buffCount_6935, 1)]);
      if (lua_eq(_buffCount_6935, 10)) {
        var _buffSelect_6936 = lua_call(G.str['IMCRandom'], [1, 4])[0];
        if (lua_eq(_buffSelect_6936, 1)) {
          lua_call(G.str['AddBuff'], [G.str['caster'], _self, 'Mon_raid_stun', 1, 0, 3000, 1]);
        } else if (lua_eq(_buffSelect_6936, 2)) {
          lua_call(G.str['AddBuff'], [G.str['caster'], _self, 'UC_petrify', 1, 0, 3000, 1]);
        } else if (lua_eq(_buffSelect_6936, 3)) {
          lua_call(G.str['AddBuff'], [G.str['caster'], _self, 'UC_silence', 1, 0, 3000, 1]);
        } else if (lua_eq(_buffSelect_6936, 4)) {
          lua_call(G.str['AddBuff'], [G.str['caster'], _self, 'UC_blind', 1, 0, 3000, 1]);
        }
      }
      if (lua_lte(10, _buffCount_6935)) {
        lua_call(G.str['SetBuffArgs'], [_buff, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_Velcofer_Last_Curse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_Cloaking_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_Cloaking_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_UC_UnrecoverableHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UC_UnrecoverableHP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monster_Stop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defencedBM_6947 = 0;
      var _caster_6947 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_6947, null)) {
        _defencedBM_6947 = 1;
      }
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _defencedBM_6947]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _defencedBM_6947));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Monster_Stop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monster_Stop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defencedBM_6950 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _defencedBM_6950));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Blk_Down'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Blk_Down'])[0], 'YES')) {
        var _skillLevel_6952 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _blkRate_6952 = lua_multiply(500, _skillLevel_6952);
        lua_tableset(_rateTable, 'blkAdd', lua_subtract(lua_tableget(_rateTable, 'blkAdd'), _blkRate_6952));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Raid_Velcofer_Awake_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raid_Velcofer_Awake_Buff'])[0], 'YES')) {
        lua_tableset(_rateTable, 'addDamageRate', lua_subtract(lua_tableget(_rateTable, 'addDamageRate'), 0.3));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_Weakness_Melee'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_Weakness_Melee'])[0], 'YES')) {
        lua_tableset(_rateTable, 'addDamageRate', lua_subtract(lua_tableget(_rateTable, 'addDamageRate'), 0.75));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_Weakness_Missile'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_Weakness_Missile'])[0], 'YES')) {
        lua_tableset(_rateTable, 'addDamageRate', lua_subtract(lua_tableget(_rateTable, 'addDamageRate'), 0.75));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_Weakness_Magic'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_Weakness_Magic'])[0], 'YES')) {
        lua_tableset(_rateTable, 'addDamageRate', lua_subtract(lua_tableget(_rateTable, 'addDamageRate'), 0.75));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GM_WHITETREES_MON_BUFF3'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'GM_WHITETREES_MON_BUFF3'])[0], 'YES')) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.5]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GM_Tower_Setting_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'GM_Tower_Setting_Buff'])[0], 'YES')) {
        if (lua_eq(lua_call(G.str['GetRelation'], [_self, _from])[0], "ENEMY")) {
          var _addTrueDamage_6965 = lua_call(G.str['IMCRandom'], [400000, 500000])[0];
          lua_tableset(_rateTable, 'AddTrueDamage', lua_add(lua_tableget(_rateTable, 'AddTrueDamage'), lua_tablegetcall(G.str['math'], 'floor', [_addTrueDamage_6965])[0]));
        }
      }
      return [];
    })
    G.str['SCR_SKILL_BUFF'] = (function (_self, _from, _skill, _splash, _ret) {
      var tmp;
      lua_call(G.str['NO_HIT_RESULT'], [_ret]);
      var _buffName_6966 = 'None';
      if (!lua_eq(lua_tableget(_skill, 'TargetBuff'), 'None')) {
        _buffName_6966 = lua_tableget(_skill, 'TargetBuff');
      } else if (!lua_eq(lua_tableget(_skill, 'SelfBuff'), 'None')) {
        _buffName_6966 = lua_tableget(_skill, 'SelfBuff');
        lua_call(G.str['RemoveBuff'], [_from, _buffName_6966]);
      }
      if (lua_eq(_buffName_6966, 'buffName')) {
        return [];
      }
      var _ratioFuncName_6966 = lua_concat('SCR_GET_', lua_concat(_buffName_6966, '_Ratio2'));
      var _over_6966 = 1;
      if (lua_eq(lua_call(G.str['IsFunc'], [_ratioFuncName_6966])[0], 1)) {
        var _func_6970 = lua_tableget(G.str['_G'], _ratioFuncName_6966);
        var _MaxOver_6970 = lua_call(_func_6970, [_skill, _from])[0];
        if (lua_eq(1, lua_call(G.str['IsOverBuff'], [_from, _buffName_6966, _MaxOver_6970])[0])) {
          return [];
        }
      }
      var _applyTime_6966 = lua_call(G.str['Get_SKill_BUFFTIME'], [_from, _self, _buffName_6966])[0];
      var _funcName_6966 = lua_concat('SCR_', lua_concat(lua_tableget(_skill, 'ClassName'), '_BUFFTIME'));
      if (lua_eq(lua_call(G.str['IsFunc'], [_funcName_6966])[0], 1)) {
        var _func_6972 = lua_tableget(G.str['_G'], _funcName_6966);
        _applyTime_6966 = lua_call(_func_6972, [_from, _self, _skill])[0];
      }
      _applyTime_6966 = lua_add(_applyTime_6966, lua_call(G.str['GET_ADD_BUFFTIME'], [_self, _from, _buffName_6966])[0]);
      var _buff_6966 = lua_call(G.str['AddBuff'], [_from, _self, _buffName_6966, lua_tableget(_skill, 'Level'), 0, _applyTime_6966, 1, lua_tableget(_skill, 'ClassID')])[0];
      if (lua_eq(null, _buff_6966)) {
        return [];
      }
      if ((lua_eq(lua_tableget(_buff_6966, 'LinkBuff'), 'NO') || lua_eq(lua_tableget(_buff_6966, 'LinkBuff'), 'No'))) {
        return [];
      }
      lua_call(G.str['CHECK_SHAREBUFF_BUFF'], [_self, _buff_6966, lua_tableget(_skill, 'Level'), 0, _applyTime_6966, _over_6966, 100]);
      var _linkBuff_6966 = lua_call(G.str['GetBuffByName'], [_self, 'Link_Party'])[0];
      if (lua_eq(_linkBuff_6966, null)) {
        return [];
      }
      var _linkCaster_6966 = lua_call(G.str['GetBuffCaster'], [_linkBuff_6966])[0];
      if (lua_eq(_linkCaster_6966, null)) {
        return [];
      }
      var _objList_6966 = lua_call(G.str['GetLinkObjects'], [_linkCaster_6966, _self, 'Link_Party'])[0];
      if (!lua_eq(_objList_6966, null)) {
        var var_6978 = 1, stop_6978 = lua_assertfloat(lua_len(_objList_6966));
        for (; var_6978 <= stop_6978; var_6978++) {
          var _i_6978 = var_6978;
          var _partyMember_6979 = lua_tableget(_objList_6966, _i_6978);
          lua_call(G.str['ADDBUFF'], [_self, _partyMember_6979, _buffName_6966, lua_tableget(_skill, 'Level'), 0, _applyTime_6966, _over_6966, 100]);
        }
      }
      return [];
    })
    G.str['CHECK_SHAREBUFF_BUFF'] = (function (_self, _buff, _arg1, _arg2, _time, _over, _rate) {
      var tmp;
      if (lua_eq(_buff, null)) {
        return [];
      }
      if (!lua_eq(lua_tableget(_buff, 'LinkBuff'), 'YES')) {
        return [];
      }
      var _range_6980 = 150;
      var _partyBuff_6980 = lua_call(G.str['GetBuffByName'], [_self, 'ShareBuff_Buff'])[0];
      if (!lua_eq(_partyBuff_6980, null)) {
        var _shareBuffCaster_6983 = lua_call(G.str['GetBuffCaster'], [_partyBuff_6980])[0];
        if (lua_eq(_shareBuffCaster_6983, null)) {
          return [];
        }
        tmp = lua_call(G.str['GetPartyMemberList'], [_self, G.str['PARTY_NORMAL'], _range_6980]); var _list_6983 = tmp[0]; var _cnt_6983 = tmp[1]; tmp = null;
        var var_6985 = 1, stop_6985 = lua_assertfloat(_cnt_6983);
        for (; var_6985 <= stop_6985; var_6985++) {
          var _i_6985 = var_6985;
          var _partyMember_6986 = lua_tableget(_list_6983, _i_6985);
          var _checkBuff_6986 = lua_call(G.str['GetBuffByName'], [_partyMember_6986, 'ShareBuff_Buff'])[0];
          if (!lua_eq(_checkBuff_6986, null)) {
            var _checkCaster_6987 = lua_call(G.str['GetBuffCaster'], [_checkBuff_6986])[0];
            if ((lua_eq(lua_call(G.str['IsSameActor'], [_shareBuffCaster_6983, _checkCaster_6987])[0], "YES") && lua_eq(lua_call(G.str['IsSameActor'], [_self, _partyMember_6986])[0], "NO"))) {
              lua_call(G.str['ADDBUFF'], [_self, _partyMember_6986, lua_tableget(_buff, 'ClassName'), _arg1, _arg2, _time, _over, _rate]);
            }
          }
        }
        tmp = lua_call(G.str['GetPartyMemberList'], [_self, G.str['PARTY_GUILD'], _range_6980]); var _list_6983 = tmp[0]; var _cnt_6983 = tmp[1]; tmp = null;
        var var_6989 = 1, stop_6989 = lua_assertfloat(_cnt_6983);
        for (; var_6989 <= stop_6989; var_6989++) {
          var _i_6989 = var_6989;
          var _partyMember_6990 = lua_tableget(_list_6983, _i_6989);
          var _checkBuff_6990 = lua_call(G.str['GetBuffByName'], [_partyMember_6990, 'ShareBuff_Buff'])[0];
          if (!lua_eq(_checkBuff_6990, null)) {
            var _checkCaster_6991 = lua_call(G.str['GetBuffCaster'], [_checkBuff_6990])[0];
            if ((lua_eq(lua_call(G.str['IsSameActor'], [_shareBuffCaster_6983, _checkCaster_6991])[0], "YES") && lua_eq(lua_call(G.str['IsSameActor'], [_self, _partyMember_6990])[0], "NO"))) {
              lua_call(G.str['ADDBUFF'], [_self, _partyMember_6990, lua_tableget(_buff, 'ClassName'), _arg1, _arg2, _time, _over, _rate]);
            }
          }
        }
      }
      return [];
    })
    G.str['Get_SKill_BUFFTIME'] = (function (_self, _from, _buffName) {
      var tmp;
      var _time_6993 = 10000;
      var _buffCls_6993 = lua_call(G.str['GetClass'], ["Buff", _buffName])[0];
      if (!lua_eq(_buffCls_6993, null)) {
        _time_6993 = lua_tableget(_buffCls_6993, 'ApplyTime');
      }
      return [_time_6993];
      return [];
    })
    G.str['GET_ADD_BUFFTIME'] = (function (_self, _from, _buffName) {
      var tmp;
      if ((lua_eq(_buffName, null) || lua_eq(_buffName, 'None'))) {
        return [0];
      }
      var _isDebuff_6995 = false;
      var _bufCls_6995 = lua_call(G.str['GetClass'], ["Buff", _buffName])[0];
      if ((!lua_eq(_bufCls_6995, G.str['nill']) && lua_eq(lua_tableget(_bufCls_6995, 'Group1'), "Debuff"))) {
        _isDebuff_6995 = true;
      }
      var _bonusTime_6995 = 0;
      if (lua_eq(_isDebuff_6995, true)) {
        if (lua_eq(lua_call(G.str['IsSameActor'], [_self, _from])[0], 'NO')) {
          _bonusTime_6995 = lua_add(_bonusTime_6995, lua_multiply(lua_call(G.str['GET_ABIL_LEVEL'], [_from, "DebuffReduce"])[0], (-2000)));
        }
      }
      var _warcryAbil_6995 = lua_call(G.str['GetAbility'], [_self, 'Barbarian2'])[0];
      if ((!lua_eq(_warcryAbil_6995, null) && lua_eq('Warcry_Buff', _buffName))) {
        _bonusTime_6995 = lua_add(_bonusTime_6995, lua_multiply(lua_tableget(_warcryAbil_6995, 'Level'), 2000));
      }
      return [_bonusTime_6995];
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeleCast'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TeleCast'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lte(_over, 1)) {
        lua_call(G.str['PlayAnim'], [_self, "SKL_TELEKINESIS_RETURN", 0, 1, 0, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_TurnUndead_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TurnUndead_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'Size'), "XL")) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TurnUndead_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (((lua_eq(lua_tableget(_self, 'RaceType'), "Velnias") || lua_eq(lua_tableget(_self, 'RaceType'), "Paramune")) && !lua_eq(lua_tableget(_self, 'Size'), "XL"))) {
        var _caster_7008 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (lua_true(lua_call(G.str['GetSkill'], [_caster_7008, 'Paladin_TurnUndead'])[0])) {
          lua_call(G.str['TakeTrueDamage'], [_caster_7008, _self, 'Paladin_TurnUndead', lua_add(lua_tableget(_self, 'HP'), 1), G.str['HIC_BASIC'], G.str['HITRESULT_BLOW']]);
        } else {
          lua_call(G.str['KillCountDead'], [_self, _caster_7008, lua_tableget(_buff, 'ClassName')]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Dekatos_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Dekatos_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7012 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7012, null)) {
        return [];
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        return [];
      }
      var _rate_7012 = 10;
      var _casterMNA_7012 = lua_call(G.str['TryGetProp'], [_caster_7012, 'MNA'])[0];
      if (lua_eq(_casterMNA_7012, null)) {
        _casterMNA_7012 = 1;
      }
      var _enemyLv_7012 = lua_call(G.str['TryGetProp'], [_self, 'Lv'])[0];
      if (lua_eq(_enemyLv_7012, null)) {
        _enemyLv_7012 = 1;
      }
      var _addRate_7012 = lua_multiply((lua_divide(_casterMNA_7012, (lua_multiply(_enemyLv_7012, 2)))), 10);
      _addRate_7012 = lua_tablegetcall(G.str['math'], 'min', [lua_tablegetcall(G.str['math'], 'max', [0, _addRate_7012])[0], _rate_7012])[0];
      _rate_7012 = lua_add(_rate_7012, _addRate_7012);
      var _random_7012 = lua_call(G.str['IMCRandom'], [1, 100])[0];
      if (lua_lte(_random_7012, _rate_7012)) {
        if (!lua_eq(lua_tableget(_self, 'MonRank'), "Boss")) {
          var _skill_7018 = lua_call(G.str['GetSkill'], [_caster_7012, 'Pardoner_Dekatos'])[0];
          if (!lua_eq(_skill_7018, null)) {
            lua_call(G.str['Dead'], [_self, 0, _caster_7012]);
          } else {
            lua_call(G.str['KillCountDead'], [_self, _caster_7012, lua_tableget(_buff, 'ClassName')]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_PainBarrier_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abil_7021 = lua_call(G.str['GetAbility'], [_self, 'Doppelsoeldner3'])[0];
      if (!lua_eq(_abil_7021, null)) {
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), (lua_multiply(lua_tableget(_abil_7021, 'Level'), 0.05))));
        lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), (lua_multiply(lua_tableget(_abil_7021, 'Level'), 0.1))));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PainBarrier_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abil_7023 = lua_call(G.str['GetAbility'], [_self, 'Doppelsoeldner3'])[0];
      if (!lua_eq(_abil_7023, null)) {
        lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), (lua_multiply(lua_tableget(_abil_7023, 'Level'), 0.05))));
        lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), (lua_multiply(lua_tableget(_abil_7023, 'Level'), 0.1))));
      }
      return [];
    })
    G.str['SCR_Swordman_PainBarrier_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _abil_7025 = lua_call(G.str['GetAbility'], [_self, 'Swordman29'])[0];
      var _time_7025 = lua_add(14000, lua_multiply(lua_tableget(_skill, 'Level'), 1000));
      if (!lua_eq(_abil_7025, null)) {
        _time_7025 = lua_add(_time_7025, 5000);
      }
      return [_time_7025];
      return [];
    })
    G.str['SCR_Doppelsoeldner_DeedsOfValor_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7027 = lua_add(20000, lua_multiply(lua_tableget(_skill, 'Level'), 3000));
      return [_time_7027];
      return [];
    })
    G.str['SCR_Scout_Cloaking_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7028 = lua_add(20000, lua_multiply(lua_tableget(_skill, 'Level'), 3000));
      return [_time_7028];
      return [];
    })
    G.str['SCR_Barbarian_Frenzy_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7029 = lua_add(30000, lua_multiply(lua_tableget(_skill, 'Level'), 2000));
      return [_time_7029];
      return [];
    })
    G.str['SCR_Ranger_SteadyAim_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7030 = 300000;
      return [_time_7030];
      return [];
    })
    G.str['SCR_Rancer_Commence_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7031 = lua_add(10000, lua_multiply(lua_tableget(_skill, 'Level'), 3000));
      return [_time_7031];
      return [];
    })
    G.str['SCR_Hackapell_HakkaPalle_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7032 = 45000;
      return [_time_7032];
      return [];
    })
    G.str['SCR_Hackapell_HackapellCharge_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7033 = 300000;
      return [_time_7033];
      return [];
    })
    G.str['SCR_Schwarzereiter_EvasiveAction_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7034 = 300000;
      return [_time_7034];
      return [];
    })
    G.str['SCR_Thaumaturge_Transpose_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7035 = lua_add(50000, lua_multiply(lua_tableget(_skill, 'Level'), 10000));
      return [_time_7035];
      return [];
    })
    G.str['SCR_Archer_SwiftStep_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7036 = 300000;
      return [_time_7036];
      return [];
    })
    G.str['SCR_Rogue_SneakHit_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7037 = lua_add(lua_multiply(lua_tableget(_skill, 'Level'), 4000), 30000);
      var _Rogue1_abil_7037 = lua_call(G.str['GetAbility'], [_self, 'Rogue1'])[0];
      if (!lua_eq(_Rogue1_abil_7037, null)) {
        _time_7037 = lua_add(_time_7037, lua_multiply(2000, lua_tableget(_Rogue1_abil_7037, 'Level')));
      }
      return [_time_7037];
      return [];
    })
    G.str['SCR_Rogue_Evasion_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7039 = lua_add(lua_multiply(lua_tableget(_skill, 'Level'), 1000), 15000);
      return [_time_7039];
      return [];
    })
    G.str['SCR_Barbarian_Savagery_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7040 = 40000;
      return [_time_7040];
      return [];
    })
    G.str['SCR_Corsair_SubweaponCancel_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7041 = 300000;
      return [_time_7041];
      return [];
    })
    G.str['SCR_Wizard_Surespell_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7042 = 300000;
      return [_time_7042];
      return [];
    })
    G.str['SCR_Wizard_QuickCast_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7043 = 300000;
      return [_time_7043];
      return [];
    })
    G.str['SCR_Warrior_Provoke_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7044 = 2000;
      return [_time_7044];
      return [];
    })
    G.str['SCR_Barbarian_Aggressor_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7045 = lua_add(20000, lua_multiply(lua_tableget(_skill, 'Level'), 2000));
      return [_time_7045];
      return [];
    })
    G.str['SCR_Swordman_GungHo_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7046 = 300000;
      return [_time_7046];
      return [];
    })
    G.str['SCR_Peltasta_Guardian_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7047 = lua_add(17000, lua_multiply(lua_tableget(_skill, 'Level'), 3000));
      return [_time_7047];
      return [];
    })
    G.str['SCR_Swordman_Restrain_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7048 = lua_add(30000, lua_multiply(lua_tableget(_skill, 'Level'), 3000));
      return [_time_7048];
      return [];
    })
    G.str['SCR_Warrior_Parrying_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7049 = lua_add(50000, lua_multiply(lua_tableget(_skill, 'Level'), 10000));
      return [_time_7049];
      return [];
    })
    G.str['SCR_Ranger_SpiralArrow_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7050 = 10000;
      return [_time_7050];
      return [];
    })
    G.str['SCR_Corsair_Looting_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7051 = lua_add(9000, lua_multiply(lua_tableget(_skill, 'Level'), 1000));
      return [_time_7051];
      return [];
    })
    G.str['SCR_Featherfoot_Levitation_BUFFTIME'] = (function (_self, _from, _skill) {
      var tmp;
      var _time_7052 = lua_add(30000, lua_multiply(lua_tableget(_skill, 'Level'), 2000));
      return [_time_7052];
      return [];
    })
    G.str['SCR_BUFF_ENTER_FirePillar_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FirePillar_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MagnusExorcismus_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7055 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_7055 = lua_call(G.str['GET_MON_SKILL'], [_caster_7055, 'Chaplain_MagnusExorcismus'])[0];
      var _damage_7055 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7055, _self, 'Chaplain_MagnusExorcismus'])[0];
      var _divineAtkAdd_7055 = lua_tableget(_skill_7055, 'SkillAtkAdd');
      var _addValue_7055 = 0;
      var _pad_7055 = lua_call(G.str['GetPadByBuff'], [_caster_7055, _buff])[0];
      if (!lua_eq(_pad_7055, null)) {
        _addValue_7055 = lua_call(G.str['GetPadArgNumber'], [_pad_7055, 1])[0];
      }
      _divineAtkAdd_7055 = lua_subtract(_addValue_7055, _divineAtkAdd_7055);
      if (lua_lt(_divineAtkAdd_7055, 0)) {
        _divineAtkAdd_7055 = 0;
      }
      lua_call(G.str['TakeDamage'], [_caster_7055, _self, "Chaplain_MagnusExorcismus", lua_add(_damage_7055, _divineAtkAdd_7055)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MagnusExorcismus_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GravityPole_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GravityPole_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ReduceCraftTime_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ReduceCraftTime_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BattleOrders_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BattleOrders_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Frenzy_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlaySound'], [_self, "skl_eff_frenzy_up"]);
      if (lua_eq(_over, 1)) {
        lua_call(G.str['ResetLastAttackTarget'], [_self]);
        lua_call(G.str['SetExProp'], [_buff, 'FRENZY_TARGET', 0]);
      }
      var _dgatk_7065 = 0.015;
      _dgatk_7065 = lua_multiply(_dgatk_7065, _over);
      var _atkSpd_7065 = lua_add(150, (lua_multiply(_arg1, 10)));
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _dgatk_7065));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _dgatk_7065]);
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_atkSpd_7065)]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATKSPD", _atkSpd_7065]);
      var _skill_7065 = lua_call(G.str['GetUsingSkill'], [_self])[0];
      if ((!lua_eq(_skill_7065, null) && lua_eq(lua_call(G.str['GetExProp'], [_buff, 'BUFF_PARENT_SKILLID'])[0], 0))) {
        lua_call(G.str['SetExProp'], [_buff, 'BUFF_PARENT_SKILLID', lua_tableget(_skill_7065, 'ClassID')]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Frenzy_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dgatk_7068 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      var _atkSpd_7068 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATKSPD"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _dgatk_7068));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _atkSpd_7068]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Stop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defencedBM_7069 = 0;
      var _caster_7069 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7069, null)) {
        var _Chronomancer4_abil_7070 = lua_call(G.str['GetAbility'], [_caster_7069, 'Chronomancer4'])[0];
        if (lua_eq(lua_tableget(_self, 'Size'), 'XL')) {
          if ((lua_eq(lua_call(G.str['GetExProp'], [_self, 'USED_WIZ_STOP'])[0], 0) && !lua_eq(_Chronomancer4_abil_7070, null))) {
            _defencedBM_7069 = 1;
            lua_call(G.str['SetExProp'], [_self, 'USED_WIZ_STOP', 1]);
          } else {
            lua_call(G.str['SetExProp'], [_self, 'STOP_REMOVE', 1]);
            return [];
          }
        } else {
          _defencedBM_7069 = 1;
        }
      }
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _defencedBM_7069]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _defencedBM_7069));
      lua_call(G.str['SetExProp'], [_self, 'ImmuneBuff', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Stop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, 'STOP_REMOVE'])[0], 1)) {
        lua_call(G.str['DelExProp'], [_self, 'STOP_REMOVE']);
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Stop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'ImmuneBuff']);
      var _defencedBM_7077 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _defencedBM_7077));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Maze_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, 'ImmuneBuff', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Maze_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7079 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7079, null)) {
        var _damage_7080 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7079, _self, 'Sage_Maze'])[0];
        var _skill_7080 = lua_call(G.str['GET_MON_SKILL'], [_caster_7079, 'Sage_Maze'])[0];
        lua_call(G.str['TakeDamage'], [_caster_7079, _self, lua_tableget(_skill_7080, 'ClassName'), _damage_7080]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Maze_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'ImmuneBuff']);
      var _caster_7081 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      lua_call(G.str['AddBuff'], [_caster_7081, _self, "CarveAustrasKoks_Debuff", _arg1, _arg2, lua_add(400, lua_multiply(_arg1, 600))]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SubWeaponCancel_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SubWeaponCancel_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_EsquiveToucher_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EsquiveToucher_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FireWall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireRes_7086 = 20;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _fireRes_7086));
      } else {
        lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _fireRes_7086));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIRERES", _fireRes_7086]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FireWall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireRes_7089 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIRERES"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _fireRes_7089));
      } else {
        lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _fireRes_7089));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_BrambleRage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BrambleRage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Vendetta_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7094 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7094, null)) {
        _caster_7094 = _buff;
      }
      var _stradd_7094 = lua_multiply(_arg1, 5);
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_7094));
      lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_7094]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Vendetta_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_7096 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_7096));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fade_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SKL_HATE_RESET'], [_self]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 150, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fade_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_OperHide'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SKL_HATE_RESET'], [_self]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 150, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_OperHide'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Exorcise_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7101 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7101, null)) {
        var _damage_7102 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7101, _self, 'Priest_Exorcise'])[0];
        var _skill_7102 = lua_call(G.str['GET_MON_SKILL'], [_caster_7101, 'Priest_Exorcise'])[0];
        if (!lua_eq(_skill_7102, null)) {
          lua_call(G.str['TakeDamage'], [_caster_7101, _self, lua_tableget(_skill_7102, 'ClassName'), _damage_7102, "Holy", "Magic", "Magic", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW'], 0, 0]);
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_7101, 'MNA'), lua_tableget(_caster_7101, 'INT'), 0]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Exorcise_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7104 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7104, null)) {
        var _skill_7105 = lua_call(G.str['GetSkill'], [_caster_7104, "Priest_Exorcise"])[0];
        if (!lua_eq(_skill_7105, null)) {
          var _damage_7106 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7104, _self, 'Priest_Exorcise'])[0];
          lua_call(G.str['TakeDamage'], [_caster_7104, _self, lua_tableget(_skill_7105, 'ClassName'), _damage_7106, "Holy", "Magic", "Magic", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Exorcise_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Testudo_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7108 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.5);
      var _caster_7108 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_7108 = lua_call(G.str['GetAbility'], [_caster_7108, 'Centurion5'])[0];
      if (!lua_eq(_abil_7108, null)) {
        _mspdadd_7108 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_subtract(0.5, (lua_multiply(lua_tableget(_abil_7108, 'Level'), 0.05)))));
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7108));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7108]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Testudo_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffOwner_7110 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_buffOwner_7110])[0])) {
        if (lua_lt(0, lua_tableget(_self, 'SP'))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.01))]);
        } else {
          lua_call(G.str['RunFormation'], [_self, lua_call(G.str['GetSkill'], [_self, "Centurion_Testudo"])[0], "None"]);
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Testudo_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7114 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7114));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_God_Finger_Flicking_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _spadd_7115 = lua_multiply(lua_tableget(_self, 'MSP'), 0.5);
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _spadd_7115));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSP", _spadd_7115]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_God_Finger_Flicking_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _spadd_7116 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSP"])[0];
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _spadd_7116));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SneakHit_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skill_7117 = lua_call(G.str['GetSkill'], [_self, "Rogue_SneakHit"])[0];
      lua_call(G.str['SetExProp'], [_buff, "Lv", lua_tableget(_skill_7117, 'Level')]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SneakHit_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JollyRoger_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JollyRoger_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Samsara_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_tableget(_self, 'MonRank'), 'Boss')) {
        return [];
      }
      var _sklRate_7121 = 2;
      var _caster_7121 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _party_7121 = lua_call(G.str['GetPartyObj'], [_caster_7121, 0])[0];
      if (!lua_eq(_party_7121, null)) {
        var _partyMemberCount_7123 = lua_subtract(lua_call(G.str['GetPartyAliveMemberCount'], [_party_7121])[0], 1);
        if (lua_lt(0, _partyMemberCount_7123)) {
          _sklRate_7121 = lua_add(_sklRate_7121, lua_multiply(2, _partyMemberCount_7123));
        }
      }
      var _rate_7121 = lua_call(G.str['IMCRandom'], [1, 100])[0];
      lua_call(G.str['SetExProp'], [_self, "Samsara_rate", _rate_7121]);
      lua_call(G.str['SetExProp'], [_self, "Samsara_sklRate", _sklRate_7121]);
      if (lua_lt(_sklRate_7121, _rate_7121)) {
        lua_call(G.str['SetExProp'], [_self, "Remove_Samsara_Buff", 1]);
      } else {
        lua_call(G.str['SetExProp'], [_self, 'SAMSARA_APPLIED', 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Samsara_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "SamsaraAfter_Buff"])[0], "YES")) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, 'KABAL_COPIED'])[0], 1)) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['GetExProp'], [_self, "Remove_Samsara_Buff"])[0], 1)) {
        var _caster_7130 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_7130, null)) {
          tmp = lua_call(G.str['GetPartyMemberList'], [_caster_7130, G.str['PARTY_NORMAL'], 500]); var _List_7131 = tmp[0]; var _cnt_7131 = tmp[1]; tmp = null;
          if (lua_lt(0, _cnt_7131)) {
            var var_7133 = 1, stop_7133 = lua_assertfloat(_cnt_7131);
            for (; var_7133 <= stop_7133; var_7133++) {
              var _i_7133 = var_7133;
              var _obj_7134 = lua_tableget(_List_7131, _i_7133);
              lua_call(G.str['SendSysMsg'], [_obj_7134, "SkillSamsaraFail"]);
            }
          } else {
            lua_call(G.str['SendSysMsg'], [_caster_7130, "SkillSamsaraFail"]);
          }
        }
        return [0];
      }
      if (lua_eq(lua_call(G.str['GetExProp'], [_buff, "Samsara_check"])[0], 0)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
        lua_call(G.str['SetExProp'], [_buff, "Samsara_check", 1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Samsara_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "SamsaraAfter_Buff"])[0], "YES")) {
        return [];
      }
      if ((lua_eq(lua_call(G.str['GetExProp'], [_self, "Remove_Samsara_Buff"])[0], 1) || !lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1))) {
        return [];
      }
      var _createCount_7137 = 1;
      var _caster_7137 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7137, null)) {
        var _Chronomancer3_abil_7140 = lua_call(G.str['GetAbility'], [_caster_7137, 'Chronomancer3'])[0];
        if ((!lua_eq(_Chronomancer3_abil_7140, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], lua_tableget(_Chronomancer3_abil_7140, 'Level')))) {
          _createCount_7137 = lua_add(_createCount_7137, 1);
        }
      }
      var var_7142 = 1, stop_7142 = lua_assertfloat(_createCount_7137);
      for (; var_7142 <= stop_7142; var_7142++) {
        var _i_7142 = var_7142;
        tmp = lua_call(G.str['GetActorRandomPos'], [_self, 10]); var _x_7143 = tmp[0]; var _y_7143 = tmp[1]; var _z_7143 = tmp[2]; tmp = null;
        var _iesObj_7143 = lua_call(G.str['CreateGCIES'], ['Monster', lua_tableget(_self, 'ClassName')])[0];
        lua_tableset(_iesObj_7143, 'Lv', lua_tableget(_self, 'Lv'));
        var _mon_7143 = lua_call(G.str['CreateMonster'], [_self, _iesObj_7143, _x_7143, _y_7143, _z_7143, 0, 0])[0];
        var _monHp_7143 = lua_multiply(lua_tableget(_mon_7143, 'MHP'), 0.05);
        var _subHp_7143 = lua_subtract(lua_tableget(_mon_7143, 'MHP'), _monHp_7143);
        lua_call(G.str['AddHP'], [_mon_7143, lua_unm(_subHp_7143)]);
        lua_call(G.str['AddBuff'], [_caster_7137, _mon_7143, "SamsaraAfter_Buff"]);
        lua_call(G.str['SetExProp'], [_mon_7143, "CREATE_SAMSARA", 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SteadyAim_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SteadyAim_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Quicken_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkspdadd_7146 = 0;
      var _lv_7146 = _arg1;
      var _addCri_7146 = 0;
      var _decreaseDR_7146 = 0;
      var _caster_7146 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7146, null)) {
        var _casterMNA_7147 = lua_call(G.str['TryGetProp'], [_caster_7146, "MNA"])[0];
        var _baseLv_7147 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
        var _addRate_7147 = lua_divide(_casterMNA_7147, _baseLv_7147);
        if (lua_lte(_addRate_7147, 0)) {
          _addRate_7147 = 0;
        } else if (lua_lte(1, _addRate_7147)) {
          _addRate_7147 = 1;
        }
        var _pad_7147 = lua_call(G.str['GetPadByBuff'], [_caster_7146, _buff])[0];
        if (!lua_eq(_pad_7147, null)) {
          _lv_7146 = lua_call(G.str['GetPadArgNumber'], [_pad_7147, 1])[0];
        }
        _atkspdadd_7146 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(15, lua_multiply(_lv_7146, 10))), (lua_add(1, _addRate_7147)))])[0];
        var _Chronomancer1_abil_7147 = lua_call(G.str['GetAbility'], [_caster_7146, 'Chronomancer1'])[0];
        if ((!lua_eq(_Chronomancer1_abil_7147, null) && lua_eq(lua_tableget(_Chronomancer1_abil_7147, 'ActiveState'), 1))) {
          _addCri_7146 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_Chronomancer1_abil_7147, 'Level'), 15), (lua_add(1, _addRate_7147)))])[0];
          _decreaseDR_7146 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_Chronomancer1_abil_7147, 'Level'), 20), (lua_add(1, _addRate_7147)))])[0];
        }
      }
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _addCri_7146));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_CRT_ABIL', _addCri_7146]);
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _decreaseDR_7146));
      lua_call(G.str['SetExProp'], [_buff, 'DECREASE_DR_ABIL', _decreaseDR_7146]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATKSPD", _atkspdadd_7146]);
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_atkspdadd_7146)]);
      var _Name_7146 = lua_call(G.str['GetName'], [_caster_7146])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_7146)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Quicken_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkspdadd_7153 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATKSPD"])[0];
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _atkspdadd_7153]);
      var _addCri_7153 = lua_call(G.str['GetExProp'], [_buff, 'ADD_CRT_ABIL'])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _addCri_7153));
      var _decreaseDR_7153 = lua_call(G.str['GetExProp'], [_buff, 'DECREASE_DR_ABIL'])[0];
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _decreaseDR_7153));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_Amolado_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7154 = _arg1;
      var _kdpadd_7154 = 200;
      lua_tableset(_self, 'KDPow_BM', lua_add(lua_tableget(_self, 'KDPow_BM'), _kdpadd_7154));
      lua_call(G.str['SetExProp'], [_buff, "ADD_KDP", _kdpadd_7154]);
      lua_call(G.str['SetExProp'], [_self, "KD_BM", lua_tableget(_self, 'KDPow_BM')]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_Amolado_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _kdpadd_7155 = lua_call(G.str['GetExProp'], [_buff, "ADD_KDP"])[0];
      lua_tableset(_self, 'KDPow_BM', lua_subtract(lua_tableget(_self, 'KDPow_BM'), _kdpadd_7155));
      lua_call(G.str['DelExProp'], [_buff, "KD_BM"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShieldCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7156 = _arg1;
      var _mspdadd_7156 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.3);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7156));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7156]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      lua_tableset(_self, 'DashRun', 0);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ShieldCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, -500]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShieldCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7158 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7158));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Slithering_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7159 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.4);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7159));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7159]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      var _caster_7159 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Slitheringskl_7159 = lua_call(G.str['GetSkill'], [_caster_7159, 'Rodelero_Slithering'])[0];
      if (!lua_eq(_Slitheringskl_7159, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Slitheringskl_7159, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Slithering_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, -500]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Slithering_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7162 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7162));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Pouncing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DashRun', 0);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Pouncing_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddStamina'], [_self, -200]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Pouncing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Trot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7166 = _arg1;
      var _mspdadd_7166 = lua_add(5, lua_multiply(_arg1, 1));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7166));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7166]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Trot_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(1, lua_call(G.str['GetVehicleState'], [_self])[0])) {
        lua_call(G.str['RemoveBuff'], [_self, "Trot_Buff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Trot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7169 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7169));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpeForceFom_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpeForceFom_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fluting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7172 = _arg1;
      var _mspdadd_7172 = lua_multiply((lua_subtract(lua_tableget(_self, 'MSPD'), lua_tableget(_self, 'MSPD_BM'))), 0.6);
      var _abilPiedPiper4_7172 = lua_call(G.str['GetAbility'], [_self, "PiedPiper4"])[0];
      if ((!lua_eq(_abilPiedPiper4_7172, null) && lua_eq(lua_tableget(_abilPiedPiper4_7172, 'ActiveState'), 1))) {
        _mspdadd_7172 = lua_multiply((lua_subtract(lua_tableget(_self, 'MSPD'), lua_tableget(_self, 'MSPD_BM'))), (lua_subtract(0.6, (lua_multiply(lua_tableget(_abilPiedPiper4_7172, 'Level'), 0.01)))));
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7172));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7172]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fluting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7174 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7174));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fluting_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_7175 = 30;
      lua_call(G.str['SetExProp'], [_buff, "BEFORE_FIXMSPD", lua_tableget(_self, 'FIXMSPD_BM')]);
      lua_tableset(_self, 'FIXMSPD_BM', _moveSpeed_7175);
      lua_call(G.str['HoldMonScp'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fluting_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _beforeFixMSPD_7176 = lua_call(G.str['GetExProp'], [_buff, "BEFORE_FIXMSPD"])[0];
      lua_tableset(_self, 'FIXMSPD_BM', _beforeFixMSPD_7176);
      lua_call(G.str['UnHoldMonScp'], [_self]);
      lua_call(G.str['StopMove'], [_self]);
      lua_call(G.str['AttachEffect'], [_self, "I_emo_exclamation", 3, "TOP"]);
      var _caster_7176 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7176, null)) {
        var _abilPiedPiper5_7177 = lua_call(G.str['GetAbility'], [_caster_7176, "PiedPiper5"])[0];
        if ((!lua_eq(_abilPiedPiper5_7177, null) && lua_eq(lua_tableget(_abilPiedPiper5_7177, 'ActiveState'), 1))) {
          var _buffTime_7178 = lua_multiply(lua_tableget(_abilPiedPiper5_7177, 'Level'), 1000);
          lua_call(G.str['AddBuff'], [_caster_7176, _self, "Confuse", 1, 0, _buffTime_7178, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sabbath_Fluting'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_7179 = 100;
      var _adddef_7179 = 0;
      var _buffCaster_7179 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_buffCaster_7179, null)) {
        _moveSpeed_7179 = lua_call(G.str['GetCurMSPD'], [_buffCaster_7179])[0];
      }
      lua_call(G.str['SetExProp'], [_buff, "BEFORE_FIXMSPD", _moveSpeed_7179]);
      lua_tableset(_self, 'FIXMSPD_BM', _moveSpeed_7179);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _adddef_7179));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _adddef_7179]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Sabbath_Fluting'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _beforeFixMSPD_7181 = lua_call(G.str['GetExProp'], [_buff, "BEFORE_FIXMSPD"])[0];
      lua_tableset(_self, 'FIXMSPD_BM', _beforeFixMSPD_7181);
      var _moveSpeed_7181 = 100;
      var _buffCaster_7181 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_buffCaster_7181, null)) {
        _moveSpeed_7181 = lua_call(G.str['GetCurMSPD'], [_buffCaster_7181])[0];
      }
      if (!lua_eq(_beforeFixMSPD_7181, _moveSpeed_7181)) {
        lua_call(G.str['SetExProp'], [_buff, "BEFORE_FIXMSPD", _moveSpeed_7181]);
        lua_tableset(_self, 'FIXMSPD_BM', _moveSpeed_7181);
        lua_call(G.str['InvalidateMSPD'], [_self]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sabbath_Fluting'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _beforeFixMSPD_7184 = lua_call(G.str['GetExProp'], [_buff, "BEFORE_FIXMSPD"])[0];
      lua_tableset(_self, 'FIXMSPD_BM', 0);
      lua_call(G.str['StopMove'], [_self]);
      var _adddef_7184 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _adddef_7184));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BwaKayiman_Fluting'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_7185 = 80;
      var _adddef_7185 = 0;
      var _buffCaster_7185 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_buffCaster_7185, null)) {
        _moveSpeed_7185 = lua_call(G.str['GetCurMSPD'], [_buffCaster_7185])[0];
        var _bokor5_abil_7186 = lua_call(G.str['GetAbility'], [_buffCaster_7185, 'Bokor5'])[0];
        if (!lua_eq(_bokor5_abil_7186, null)) {
          _adddef_7185 = lua_multiply(lua_tableget(_bokor5_abil_7186, 'Level'), 0.02);
        }
      }
      lua_call(G.str['SetExProp'], [_buff, "BEFORE_FIXMSPD", _moveSpeed_7185]);
      lua_tableset(_self, 'FIXMSPD_BM', _moveSpeed_7185);
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _adddef_7185));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _adddef_7185]);
      lua_call(G.str['SkillCancel'], [_self]);
      lua_call(G.str['BwakayZombieSummon'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BwaKayiman_Fluting'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _beforeFixMSPD_7188 = lua_call(G.str['GetExProp'], [_buff, "BEFORE_FIXMSPD"])[0];
      lua_tableset(_self, 'FIXMSPD_BM', _beforeFixMSPD_7188);
      var _moveSpeed_7188 = 80;
      var _buffCaster_7188 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_buffCaster_7188, null)) {
        _moveSpeed_7188 = lua_call(G.str['GetCurMSPD'], [_buffCaster_7188])[0];
      }
      if (!lua_eq(_beforeFixMSPD_7188, _moveSpeed_7188)) {
        lua_call(G.str['SetExProp'], [_buff, "BEFORE_FIXMSPD", _moveSpeed_7188]);
        lua_tableset(_self, 'FIXMSPD_BM', _moveSpeed_7188);
        lua_call(G.str['InvalidateMSPD'], [_self]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BwaKayiman_Fluting'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _beforeFixMSPD_7191 = lua_call(G.str['GetExProp'], [_buff, "BEFORE_FIXMSPD"])[0];
      lua_tableset(_self, 'FIXMSPD_BM', 0);
      lua_call(G.str['StopMove'], [_self]);
      lua_call(G.str['EndBwakayZombieSummon'], [_self]);
      lua_call(G.str['AttachEffect'], [_self, "I_emo_exclamation", 3, "TOP"]);
      var _adddef_7191 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _adddef_7191));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Retrieve_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_7192 = 0;
      var _pet_7192 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _caster_7192 = lua_call(G.str['GetOwner'], [_pet_7192])[0];
      if (!lua_eq(_caster_7192, null)) {
        var _Hunter3_abil_7193 = lua_call(G.str['GetAbility'], [_caster_7192, "Hunter3"])[0];
        if (!lua_eq(_Hunter3_abil_7193, null)) {
          _defadd_7192 = lua_multiply(0.02, lua_tableget(_Hunter3_abil_7193, 'Level'));
        }
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_7192));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_7192]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Retrieve_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _pet_7195 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _caster_7195 = lua_call(G.str['GetOwner'], [_pet_7195])[0];
      var _notApplyDiminishing_7195 = 1;
      if (!lua_eq(_caster_7195, null)) {
        var _damage_7196 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7195, _self, 'Hunter_Retrieve'])[0];
        var _skill_7196 = lua_call(G.str['GET_MON_SKILL'], [_caster_7195, 'Hunter_Retrieve'])[0];
        lua_call(G.str['TAKE_SCP_DAMAGE'], [_caster_7195, _self, _damage_7196, G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, lua_tableget(_skill_7196, 'ClassName'), 1, 4, null, _pet_7195, _notApplyDiminishing_7195]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Retrieve_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_7197 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_7197));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Praise_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7198 = _arg1;
      var _atkadd_7198 = lua_add(25, lua_multiply((lua_subtract(_lv_7198, 1)), 5));
      var _hradd_7198 = lua_add(25, lua_multiply((lua_subtract(_lv_7198, 1)), 5));
      var _crihradd_7198 = lua_add(25, lua_multiply((lua_subtract(_lv_7198, 1)), 5));
      var _mspdadd_7198 = 0;
      var _time_7198 = lua_multiply(_lv_7198, 300);
      var _caster_7198 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Hunter5_abil_7198 = lua_call(G.str['GetAbility'], [_caster_7198, "Hunter5"])[0];
      if (!lua_eq(_Hunter5_abil_7198, null)) {
        _mspdadd_7198 = lua_add(_mspdadd_7198, lua_tableget(_Hunter5_abil_7198, 'Level'));
      }
      lua_tableset(_self, 'Stat_ATK_BM', lua_add(lua_tableget(_self, 'Stat_ATK_BM'), _atkadd_7198));
      lua_tableset(_self, 'Stat_HR_BM', lua_add(lua_tableget(_self, 'Stat_HR_BM'), _hradd_7198));
      lua_tableset(_self, 'Stat_CRTHR_BM', lua_add(lua_tableget(_self, 'Stat_CRTHR_BM'), _crihradd_7198));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7198));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _atkadd_7198]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hradd_7198]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRIHR", _crihradd_7198]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7198]);
      lua_call(G.str['SetAddCoolTime'], [_self, "Mon_Velhider_Skill_1", lua_unm((_time_7198))]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Praise_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_7200 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _hradd_7200 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      var _crihradd_7200 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRIHR"])[0];
      var _mspdadd_7200 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'Stat_ATK_BM', lua_subtract(lua_tableget(_self, 'Stat_ATK_BM'), _atkadd_7200));
      lua_tableset(_self, 'Stat_HR_BM', lua_subtract(lua_tableget(_self, 'Stat_HR_BM'), _hradd_7200));
      lua_tableset(_self, 'Stat_CRTHR_BM', lua_subtract(lua_tableget(_self, 'Stat_CRTHR_BM'), _crihradd_7200));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7200));
      lua_call(G.str['SetAddCoolTime'], [_self, "Mon_Velhider_Skill_1", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Pointing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunSimpleAIOnly'], [_self, "companion_pointing"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Pointing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearSimpleAI'], [_self, "companion_pointing"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Pointing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _default_7203 = 10;
      var _rate_7203 = lua_multiply(_arg1, 6);
      var _dradd_7203 = lua_add(_default_7203, _rate_7203);
      var _hradd_7203 = lua_add(_default_7203, _rate_7203);
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_7203));
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hradd_7203));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_7203]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hradd_7203]);
      var _pet_7203 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _caster_7203 = lua_call(G.str['GetOwner'], [_pet_7203])[0];
      var _Hunter1_abil_7203 = lua_call(G.str['GetAbility'], [_caster_7203, "Hunter1"])[0];
      if (!lua_eq(_Hunter1_abil_7203, null)) {
        if (lua_lt(lua_call(G.str['IMCRandom'], [0, 9999])[0], lua_multiply(lua_tableget(_Hunter1_abil_7203, 'Level'), 500))) {
          lua_call(G.str['AddBuff'], [_caster_7203, _self, 'UC_fear', lua_tableget(_Hunter1_abil_7203, 'Level'), 0, 3000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Pointing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dradd_7206 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      var _hradd_7206 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_7206));
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hradd_7206));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hounding_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _owner_7207 = lua_call(G.str['GetOwner'], [_self])[0];
      var _skl_7207 = lua_call(G.str['GetSkill'], [_owner_7207, "Hunter_Hounding"])[0];
      lua_call(G.str['SetExProp'], [_self, "Hounding_Count", lua_tableget(_skl_7207, 'Level')]);
      lua_call(G.str['RunSimpleAIOnly'], [_self, "companion_hounding"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hounding_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearSimpleAI'], [_self, "companion_hounding"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Growling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['RunSimpleAIOnly'], [_self, "companion_growling"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Growling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearSimpleAI'], [_self, "companion_growling"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Growling_Return_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_tableget(_self, 'RaceType'), 'Item')) {
        lua_call(G.str['HoldMonScp'], [_self]);
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 50));
        lua_call(G.str['CancelMonsterSkill'], [_self]);
        lua_call(G.str['SetTendency'], [_self, "None"]);
        lua_call(G.str['MoveEx'], [_self, lua_tableget(_self, 'CreateX'), lua_tableget(_self, 'CreateY'), lua_tableget(_self, 'CreateZ'), 1]);
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Growling_Return_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _posX_7213 = tmp[0]; var _posY_7213 = tmp[1]; var _posZ_7213 = tmp[2]; tmp = null;
      if (lua_lt(lua_call(G.str['SCR_POINT_DISTANCE'], [lua_tableget(_self, 'CreateX'), lua_tableget(_self, 'CreateZ'), _posX_7213, _posZ_7213])[0], 30)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Growling_Return_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['UnHoldMonScp'], [_self]);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Growling_fear_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['HoldMonScp'], [_self]);
        lua_call(G.str['CancelMonsterSkill'], [_self]);
      }
      var _patkadd_7216 = 0.3;
      var _matkadd_7216 = 0.3;
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_7216));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_7216));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_7216]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_7216]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Growling_fear_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['UnHoldMonScp'], [_self]);
      }
      var _patkadd_7218 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_7218 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_7218));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_7218));
      lua_call(G.str['Invalidate'], [_self, "MINPATK"]);
      lua_call(G.str['Invalidate'], [_self, "MAXPATK"]);
      lua_call(G.str['Invalidate'], [_self, "MINMATK"]);
      lua_call(G.str['Invalidate'], [_self, "MAXMATK"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TimeBombArrow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7220 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_7220 = lua_call(G.str['GET_MON_SKILL'], [_caster_7220, "Ranger_TimeBombArrow"])[0];
      var _damage_7220 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7220, _self, "Ranger_TimeBombArrow"])[0];
      lua_call(G.str['SetExProp'], [_buff, "DAMAGE", _damage_7220]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TimeBombArrow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'HP'))) {
        var _damage_7222 = lua_call(G.str['GetExProp'], [_buff, "DAMAGE"])[0];
        if (lua_lte(_damage_7222, 0)) {
          return [0];
        }
        var _from_7222 = _self;
        var _caster_7222 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_7222, null)) {
          _from_7222 = _caster_7222;
        }
        var _key_7222 = lua_call(G.str['GenerateSyncKey'], [_self])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_7222]);
        lua_call(G.str['PlayEffect'], [_self, 'F_archer_explosiontrap_hit_explosion', 1]);
        lua_call(G.str['TakeDamage'], [_caster_7222, _self, "Ranger_TimeBombArrow", _damage_7222, "Melee", "Strike", "Melee", G.str['HIT_FIRE'], G.str['HITRESULT_NO_HITSCP']]);
        var _angle_7222 = lua_call(G.str['GetAngleTo'], [_caster_7222, _self])[0];
        var _abilRanger35_7222 = lua_call(G.str['GetAbility'], [_caster_7222, "Ranger35"])[0];
        if ((lua_eq(_abilRanger35_7222, null) && !lua_eq(lua_call(G.str['TryGetProp'], [_abilRanger35_7222, "ActiveState"])[0], 1))) {
          if ((!lua_eq(lua_call(G.str['GetPropType'], [_self, 'KDArmor'])[0], null) && lua_lt(lua_tableget(_self, 'KDArmor'), 900))) {
            lua_call(G.str['KnockDown'], [_self, _caster_7222, 150, _angle_7222, 60, 3]);
          }
        }
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_7222, _self, 45, "ENEMY", 0, 0]); var _list_7222 = tmp[0]; var _cnt_7222 = tmp[1]; tmp = null;
        var _maxCount_7222 = 5;
        if (lua_lt(_cnt_7222, _maxCount_7222)) {
          _maxCount_7222 = _cnt_7222;
        }
        if (lua_lte(1, _maxCount_7222)) {
          var var_7229 = 1, stop_7229 = lua_assertfloat(_maxCount_7222);
          for (; var_7229 <= stop_7229; var_7229++) {
            var _i_7229 = var_7229;
            var _obj_7230 = lua_tableget(_list_7222, _i_7229);
            if (lua_eq(lua_call(G.str['IsSameObject'], [_obj_7230, _self])[0], 0)) {
              lua_call(G.str['TakeDamage'], [_caster_7222, _obj_7230, "Ranger_TimeBombArrow", _damage_7222, "Melee", "Strike", "Melee", G.str['HIT_FIRE'], G.str['HITRESULT_NO_HITSCP']]);
              _angle_7222 = lua_call(G.str['GetAngleTo'], [_self, _obj_7230])[0];
              if (!lua_eq(lua_call(G.str['TryGetProp'], [_abilRanger35_7222, "ActiveState"])[0], 1)) {
                if ((!lua_eq(lua_call(G.str['GetPropType'], [_obj_7230, 'KDArmor'])[0], null) && lua_lt(lua_tableget(_obj_7230, 'KDArmor'), 900))) {
                  lua_call(G.str['KnockDown'], [_obj_7230, _self, 150, _angle_7222, 60, 3]);
                }
              }
            }
          }
        }
        lua_call(G.str['EndSyncPacket'], [_self, _key_7222, 0]);
        lua_call(G.str['ExecSyncPacket'], [_self, _key_7222]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Singijeon_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7234 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Fletcher7_abil_7234 = lua_call(G.str['GetAbility'], [_caster_7234, "Fletcher7"])[0];
      if (!lua_eq(_Fletcher7_abil_7234, null)) {
        lua_call(G.str['AddBuff'], [_caster_7234, _self, "UC_shock", lua_tableget(_Fletcher7_abil_7234, 'Level'), 0, 10000, 1]);
      }
      var _skill_7234 = lua_call(G.str['GET_MON_SKILL'], [_caster_7234, "Fletcher_Singijeon"])[0];
      var _damage_7234 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7234, _self, "Fletcher_Singijeon"])[0];
      if (lua_eq(_damage_7234, null)) {
        _damage_7234 = 0;
      }
      lua_call(G.str['SetExProp'], [_buff, "DAMAGE", _damage_7234]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Singijeon_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'HP'))) {
        var _damage_7238 = lua_call(G.str['GetExProp'], [_buff, "DAMAGE"])[0];
        if (lua_lte(_damage_7238, 0)) {
          return [0];
        }
        var _from_7238 = _self;
        var _caster_7238 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_7238, null)) {
          _from_7238 = _caster_7238;
        }
        var _key_7238 = lua_call(G.str['GenerateSyncKey'], [_self])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_7238]);
        lua_call(G.str['PlayEffect'], [_self, 'F_archer_explosiontrap_hit_explosion', 1]);
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_7238, _self, 65, "ENEMY", 0, 0]); var _objList_7238 = tmp[0]; var _cnt_7238 = tmp[1]; tmp = null;
        lua_call(G.str['TakeDamage'], [_caster_7238, _self, "Fletcher_Singijeon", _damage_7238, "Melee", "Strike", "Melee", G.str['HIT_FIRE'], G.str['HITRESULT_NO_HITSCP']]);
        if (lua_lte(9, _cnt_7238)) {
          _cnt_7238 = 9;
        }
        var var_7242 = 1, stop_7242 = lua_assertfloat(_cnt_7238);
        for (; var_7242 <= stop_7242; var_7242++) {
          var _i_7242 = var_7242;
          var _angle_7243 = lua_call(G.str['GetAngleTo'], [_self, lua_tableget(_objList_7238, _i_7242)])[0];
          lua_call(G.str['TakeDamage'], [_caster_7238, lua_tableget(_objList_7238, _i_7242), "Fletcher_Singijeon", _damage_7238, "Melee", "Strike", "Melee", G.str['HIT_FIRE'], G.str['HITRESULT_NO_HITSCP']]);
        }
        lua_call(G.str['EndSyncPacket'], [_self, _key_7238, 0]);
        lua_call(G.str['ExecSyncPacket'], [_self, _key_7238]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpiralArrow_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpiralArrow_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monster_Poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7246 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7246, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_7246, 'MINMATK'), lua_tableget(_caster_7246, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Monster_Poison'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7248 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7248, null)) {
        _caster_7248 = _self;
      }
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_7248 = tmp[0]; var _casterMAXMATK_7248 = tmp[1]; tmp = null;
      lua_call(G.str['TakeDamage'], [_caster_7248, _self, "None", lua_divide((lua_add(_casterMINMATK_7248, _casterMAXMATK_7248)), 10), "Poison", "None", "Melee", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monster_Poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpreadPoison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), lua_multiply(_arg1, 3)));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SpreadPoison'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _faction_7252 = lua_call(G.str['GetCurrentFaction'], [_self])[0];
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 20, _faction_7252]); var _objList_7252 = tmp[0]; var _objCount_7252 = tmp[1]; tmp = null;
      if (lua_lt(0, _objCount_7252)) {
        var var_7254 = 1, stop_7254 = lua_assertfloat(_objCount_7252);
        for (; var_7254 <= stop_7254; var_7254++) {
          var _index_7254 = var_7254;
          if ((((!lua_eq(lua_call(G.str['GetBodyState'], [lua_tableget(_objList_7252, _index_7254)])[0], 'BS_DEAD') && !lua_eq(lua_tableget(lua_tableget(_objList_7252, _index_7254), 'SpecialDefType'), 'DebuffProof')) && !lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_objList_7252, _index_7254), 'SpreadPoison'])[0], 'YES')) && !lua_eq(lua_tableget(_objList_7252, _index_7254), _self))) {
            lua_call(G.str['AddBuff'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], lua_tableget(_objList_7252, _index_7254), 'SpreadPoison', _arg1, _arg2, _RemainTime, _over]);
          }
        }
      }
      var _caster_7252 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7252, null)) {
        _caster_7252 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7252, _self, "None", _arg1, "Poison", "None", "Melee", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpreadPoison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), lua_multiply(_arg1, 3)));
      var _caster_7258 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7258, null)) {
        _caster_7258 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7258, _self, lua_multiply(3, _arg1), "Poison", "None", "Melee", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), lua_multiply(_arg1, 2)));
      var _caster_7260 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7260, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_7260, 'MINMATK'), lua_tableget(_caster_7260, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Poison'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_7262 = tmp[0]; var _casterMAXMATK_7262 = tmp[1]; tmp = null;
      var _caster_7262 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7262, null)) {
        _caster_7262 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7262, _self, "None", lua_divide((lua_add(_casterMINMATK_7262, _casterMAXMATK_7262)), lua_call(G.str['IMCRandom'], [7, 10])[0]), "Poison", "None", "Melee", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), lua_multiply(_arg1, 2)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Revenge'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Revenge'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aggressor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hradd_7267 = 50;
      var _ScudInstinct_Buff_7267 = lua_call(G.str['GetBuffByName'], [_self, 'ScudInstinct_Buff'])[0];
      if (!lua_eq(_ScudInstinct_Buff_7267, null)) {
        var _ScudInstinct_Over_7268 = lua_call(G.str['GetOver'], [_ScudInstinct_Buff_7267])[0];
        _hradd_7267 = lua_add(_hradd_7267, (lua_multiply(_ScudInstinct_Over_7268, 10)));
      }
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _hradd_7267));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hradd_7267]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aggressor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hradd_7269 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _hradd_7269));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Lada_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_7270 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_7270]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_7270));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Lada_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_7271 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_7271));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FoldingFan_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SpinObject'], [_self, 0, -1, 0.15, 3.5]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FoldingFan_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SpinObject'], [_self, 0, 0, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Savagery_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Savagery_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_SAVAGERY'] = (function (_self) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Blind'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        lua_call(G.str['CancelMonsterSkill'], [_self]);
        lua_call(G.str['StopMove'], [_self]);
        lua_call(G.str['SetTendencysearchRange'], [_self, 30]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Blind'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        lua_call(G.str['SetTendencysearchRange'], [_self, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bodkin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilLevel_7281 = 0;
      var _caster_7281 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7281, null)) {
        var _abil_7282 = lua_call(G.str['GetAbility'], [_caster_7281, "Fletcher2"])[0];
        if (!lua_eq(_abil_7282, null)) {
          _abilLevel_7281 = lua_tableget(_abil_7282, 'Level');
        }
      }
      var _defrate_7281 = lua_add(lua_multiply(_arg1, 0.01), lua_multiply(_abilLevel_7281, 0.005));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_7281));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defrate_7281]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bodkin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defrate_7284 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_7284));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_Reward_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffect'], [_self, 'F_warrior_reward_shot_lineup', 0.3]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Warrior_Reward_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, 'ENEMY']); var _objList_7286 = tmp[0]; var _objCount_7286 = tmp[1]; tmp = null;
      var _Money_7286 = lua_call(G.str['GetInvItemCount'], [_self, 'Vis'])[0];
      var _AddHate_7286 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(50, lua_multiply(_Money_7286, 0.01))])[0];
      var var_7287 = 1, stop_7287 = lua_assertfloat(_objCount_7286);
      for (; var_7287 <= stop_7287; var_7287++) {
        var _i_7287 = var_7287;
        var _obj_7288 = lua_tableget(_objList_7286, _i_7287);
        var _skill_7288 = lua_call(G.str['GetSkill'], [_self, "Warrior_Reward"])[0];
        lua_call(G.str['InsertHate'], [_obj_7288, _self, _AddHate_7286]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_Reward_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Shockwave'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SPD_BM', lua_subtract(lua_tableget(_self, 'SPD_BM'), lua_multiply(_arg1, 10)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Shockwave'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SPD_BM', lua_add(lua_tableget(_self, 'SPD_BM'), lua_multiply(_arg1, 10)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cold'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SPD_BM', lua_subtract(lua_tableget(_self, 'SPD_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cold'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'SPD_BM', lua_add(lua_tableget(_self, 'SPD_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Wizard_Wild_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7294 = _arg1;
      var _atkadd_7294 = lua_multiply((lua_divide((lua_add(lua_tableget(_self, 'MINMATK'), lua_tableget(_self, 'MAXMATK'))), 2)), (lua_add(0.15, (lua_multiply(_lv_7294, 0.02)))));
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_7294));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_7294]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 160, 150, 255, 1, 3]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Wizard_Wild_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_7295 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkadd_7295));
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 2]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_HolyBaptism_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7296 = _arg1;
      var _atkadd_7296 = lua_add(lua_tableget(_self, 'STR'), lua_call(G.str['GetSumOfEquipItem'], [_self, 'MAXMATK'])[0]);
      _atkadd_7296 = lua_multiply(_atkadd_7296, lua_call(G.str['set_LI'], [_lv_7296, 0.1, 0.5])[0]);
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_7296));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_7296]);
      var _caster_7296 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7296, null)) {
        _caster_7296 = _buff;
      }
      var _Name_7296 = lua_call(G.str['GetName'], [_caster_7296])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_7296)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_7296, "SHOW_HOLY_BAPTISM", lua_tableget(_buff, 'ClassID'), null, _Name_7296]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_HolyBaptism_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_7299 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkadd_7299));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Limitation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7300 = _arg1;
      var _isdebuff_7300 = 1;
      if (lua_eq(_arg2, 1)) {
        _isdebuff_7300 = -1;
      }
      var _mhpadd_7300 = lua_multiply(lua_multiply(_isdebuff_7300, lua_tableget(_self, 'MHP')), lua_call(G.str['set_LI'], [_lv_7300, 0.1, 1])[0]);
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_7300));
      if (lua_lt(lua_add(lua_tableget(_self, 'MHP'), lua_tableget(_self, 'MHP_BM')), lua_tableget(_self, 'HP'))) {
        lua_call(G.str['AddHP'], [_self, lua_tableget(_self, 'MHP_BM')]);
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHPATK", _mhpadd_7300]);
      var _caster_7300 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7300, null)) {
        _caster_7300 = _buff;
      }
      var _Name_7300 = lua_call(G.str['GetName'], [_caster_7300])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_7300)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_7300, "SHOW_LIMITATION", lua_tableget(_buff, 'ClassID'), null, _Name_7300]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Limitation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7305 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHPATK"])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_7305));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ayin_sof_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _addMHP_7306 = lua_add((lua_multiply(lua_multiply(lua_call(G.str['TryGetProp'], [_self, "MHP"])[0], 0.1), _arg1)), (lua_multiply(_arg1, 3000)));
      var _caster_7306 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7306, null)) {
        if (lua_eq(lua_tableget(_caster_7306, 'ClassName'), 'PC')) {
          var _skill_7309 = lua_call(G.str['GetSkill'], [_caster_7306, "Kabbalist_Ayin_sof"])[0];
          if (lua_eq(_skill_7309, null)) {
            return [];
          }
          var _abil_7309 = lua_call(G.str['GetAbility'], [_caster_7306, "Kabbalist10"])[0];
          if (((!lua_eq(_abil_7309, null) && lua_eq(lua_tableget(_abil_7309, 'ActiveState'), 1)) && lua_lte(3, lua_tableget(_skill_7309, 'Level')))) {
            _addMHP_7306 = lua_divide(_addMHP_7306, 2);
            lua_call(G.str['AddBuff'], [_caster_7306, _self, "Ayin_sof_SP_Buff", 1, _addMHP_7306, 10000, 1]);
          }
          var _healBonus_7309 = 0;
          var _Kabbalist18_abil_7309 = lua_call(G.str['GetAbility'], [_caster_7306, "Kabbalist18"])[0];
          if (!lua_eq(_Kabbalist18_abil_7309, null)) {
            _healBonus_7309 = 1;
          }
          lua_call(G.str['SetBuffArgs'], [_buff, _healBonus_7309, 0, 0]);
        }
      }
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _addMHP_7306));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _addMHP_7306]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ayin_sof_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lt(0, lua_tableget(_self, 'MHP_BM'))) {
        var _mhpadd_7314 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
        lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_7314));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ayin_sof_SP_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addSp_7315 = lua_multiply(_arg2, 0.1);
      lua_call(G.str['AddSP'], [_self, _addSp_7315]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Ayin_sof_SP_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _addSp_7316 = lua_multiply(_arg2, 0.1);
      lua_call(G.str['AddSP'], [_self, _addSp_7316]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ayin_sof_SP_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kurdaitcha_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7318 = 15;
      var _abil_7318 = lua_call(G.str['GetAbility'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], "Featherfoot14"])[0];
      if (!lua_eq(_abil_7318, null)) {
        _mspdadd_7318 = 5;
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7318));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7318]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Kurdaitcha_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7320 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7320));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HeadShot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7321 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _MINPATK_7321 = lua_call(G.str['TryGetProp'], [_caster_7321, "MINPATK"])[0];
      var _MAXPATK_7321 = lua_call(G.str['TryGetProp'], [_caster_7321, "MAXPATK"])[0];
      var _atk_7321 = lua_divide((lua_add(_MINPATK_7321, _MAXPATK_7321)), 10);
      var _intadd_7321 = 0;
      var _mnaadd_7321 = 0;
      if (!lua_eq(_caster_7321, null)) {
        _intadd_7321 = lua_multiply(5, _arg1);
        _mnaadd_7321 = lua_multiply(5, _arg1);
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
          _intadd_7321 = lua_add(_intadd_7321, lua_multiply(lua_tableget(_caster_7321, 'HR'), 0.1));
          _mnaadd_7321 = lua_add(_mnaadd_7321, lua_multiply(lua_tableget(_caster_7321, 'HR'), 0.1));
        } else {
          _intadd_7321 = _intadd_7321;
          _mnaadd_7321 = _mnaadd_7321;
        }
        _intadd_7321 = lua_tablegetcall(G.str['math'], 'floor', [_intadd_7321])[0];
        _mnaadd_7321 = lua_tablegetcall(G.str['math'], 'floor', [_mnaadd_7321])[0];
      }
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_7321));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_7321));
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_7321]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_7321]);
      lua_call(G.str['SetExProp'], [_buff, "Debuff_Damage", _atk_7321]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HeadShot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _atk_7325 = lua_call(G.str['GetExProp'], [_buff, "Debuff_Damage"])[0];
      var _caster_7325 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7325, null)) {
        _caster_7325 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7325, _self, "None", _atk_7325, "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HeadShot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intadd_7327 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_7327 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_7327));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_7327));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bloodbath_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillCancel'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Bloodbath_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _lv_7329 = _arg1;
      var _caster_7329 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_7329 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7329, _self, 'Featherfoot_BloodBath'])[0];
      var _skill_7329 = lua_call(G.str['GET_MON_SKILL'], [_caster_7329, 'Featherfoot_BloodBath'])[0];
      lua_call(G.str['TakeDamage'], [_caster_7329, _self, lua_tableget(_skill_7329, 'ClassName'), _damage_7329, "Poison", "Magic", "Magic", G.str['HIT_POISON'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bloodbath_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bloodbath_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Bloodbath_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7332 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_7332 = lua_call(G.str['GET_MON_SKILL'], [_caster_7332, 'Featherfoot_BloodBath'])[0];
      var _damage_7332 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7332, _self, 'Featherfoot_BloodBath'])[0];
      var _AddValue_7332 = lua_multiply(lua_multiply(_damage_7332, _arg1), 0.01);
      lua_call(G.str['Heal'], [_self, _AddValue_7332, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bloodbath_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_RevengedSevenfold_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RevengedSevenfold_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Empowering_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "EMPOWERING_LEVEL_TEXT", _arg1]);
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _lv_7336 = _arg1;
      var _selfMSP_7336 = lua_subtract(lua_call(G.str['TryGetProp'], [_self, "MSP"])[0], lua_call(G.str['TryGetProp'], [_self, "MSP_BM"])[0]);
      var _mspadd_7336 = lua_multiply(_selfMSP_7336, (lua_multiply(_lv_7336, 0.1)));
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _mspadd_7336));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSP", _mspadd_7336]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Empowering_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspadd_7338 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSP"])[0];
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _mspadd_7338));
      return [];
    })
    G.str['SCR_BUFF_ENTER_EnchantFire_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireAtk_7339 = 0;
      var _lv_7339 = _arg1;
      var _casterMATK_7339 = 0;
      var _caster_7339 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7339, null)) {
        var _pad_7340 = lua_call(G.str['GetPadByBuff'], [_caster_7339, _buff])[0];
        if (!lua_eq(_pad_7340, null)) {
          _lv_7339 = lua_tablegetcall(G.str['math'], 'max', [_lv_7339].concat(lua_call(G.str['GetPadArgNumber'], [_pad_7340, 1])))[0];
        }
        var _enchantFire_7340 = lua_call(G.str['GetSkill'], [_caster_7339, 'Pyromancer_EnchantFire'])[0];
        if (!lua_eq(_enchantFire_7340, null)) {
          _lv_7339 = lua_tablegetcall(G.str['math'], 'max', [_lv_7339, lua_tableget(_enchantFire_7340, 'Level')])[0];
        }
        var _statINT_7340 = lua_call(G.str['TryGetProp'], [_caster_7339, "INT"])[0];
        var _statMNA_7340 = lua_call(G.str['TryGetProp'], [_caster_7339, "MNA"])[0];
        _fireAtk_7339 = lua_add(lua_add(30, (lua_multiply((lua_subtract(_lv_7339, 1)), 5))), (lua_multiply((lua_divide(_lv_7339, 5)), (lua_power((lua_multiply((lua_add(_statINT_7340, _statMNA_7340)), 0.6)), 0.9)))));
        var _Pyromancer16_abil_7340 = lua_call(G.str['GetAbility'], [_caster_7339, 'Pyromancer16'])[0];
        if (!lua_eq(_Pyromancer16_abil_7340, null)) {
          _fireAtk_7339 = lua_add(_fireAtk_7339, lua_tableget(_Pyromancer16_abil_7340, 'Level'));
        }
        var _casterMINMATK_7340 = lua_call(G.str['TryGetProp'], [_caster_7339, "MINMATK"])[0];
        if (lua_eq(_casterMINMATK_7340, null)) {
          _casterMINMATK_7340 = 0;
        }
        var _casterMAXMATK_7340 = lua_call(G.str['TryGetProp'], [_caster_7339, "MAXMATK"])[0];
        if (lua_eq(_casterMAXMATK_7340, null)) {
          _casterMAXMATK_7340 = 0;
        }
        _casterMATK_7339 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(_casterMINMATK_7340, _casterMAXMATK_7340)), 2)])[0];
      }
      _fireAtk_7339 = lua_tablegetcall(G.str['math'], 'floor', [_fireAtk_7339])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Fire_Atk_BM', lua_add(lua_tableget(_self, 'Fire_Atk_BM'), _fireAtk_7339));
      } else {
        lua_tableset(_self, 'ADD_FIRE_BM', lua_add(lua_tableget(_self, 'ADD_FIRE_BM'), _fireAtk_7339));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIRE", _fireAtk_7339]);
      var _Name_7339 = lua_call(G.str['GetName'], [_caster_7339])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_7339)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_7339, "SHOW_FIRE_DETONATION", lua_tableget(_buff, 'ClassID'), null, _Name_7339]);
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _lv_7339, _casterMATK_7339, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EnchantFire_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireAtk_7349 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIRE"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Fire_Atk_BM', lua_subtract(lua_tableget(_self, 'Fire_Atk_BM'), _fireAtk_7349));
      } else {
        lua_tableset(_self, 'ADD_FIRE_BM', lua_subtract(lua_tableget(_self, 'ADD_FIRE_BM'), _fireAtk_7349));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_EnchantFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7352 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7352, null)) {
        _caster_7352 = _buff;
      }
      var _resfireadd_7352 = 0;
      var _pyromancer6_abil_7352 = lua_call(G.str['GetAbility'], [_caster_7352, 'Pyromancer6'])[0];
      if (!lua_eq(_pyromancer6_abil_7352, null)) {
        _resfireadd_7352 = lua_multiply(10, lua_tableget(_pyromancer6_abil_7352, 'Level'));
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_7352));
      } else {
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _resfireadd_7352));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_RESFIRE", _resfireadd_7352]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EnchantFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resfireadd_7357 = lua_call(G.str['GetExProp'], [_buff, "ADD_RESFIRE"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_7357));
      } else {
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _resfireadd_7357));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Drain_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Drain_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "DARKTHEURAGE_COUNT", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_EnchantLightning_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _value_7362 = 0;
      var _lv_7362 = _arg1;
      var _caster_7362 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7362, null)) {
        var _pad_7363 = lua_call(G.str['GetPadByBuff'], [_caster_7362, _buff])[0];
        if (!lua_eq(_pad_7363, null)) {
          _lv_7362 = lua_call(G.str['GetPadArgNumber'], [_pad_7363, 1])[0];
        }
        var _statINT_7363 = lua_call(G.str['TryGetProp'], [_caster_7362, "INT"])[0];
        var _statMNA_7363 = lua_call(G.str['TryGetProp'], [_caster_7362, "MNA"])[0];
        _value_7362 = lua_add(lua_add(160, (lua_multiply((lua_subtract(_arg1, 1)), 60))), (lua_multiply((lua_divide(_arg1, 5)), (lua_power((lua_multiply((lua_add(_statINT_7363, _statMNA_7363)), 0.8)), 0.9)))));
        var _enchantLightning_7363 = lua_call(G.str['GetSkill'], [_caster_7362, 'Enchanter_EnchantLightning'])[0];
        if (!lua_eq(_enchantLightning_7363, null)) {
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_enchantLightning_7363, 'Level'), 0, 0]);
        }
      }
      _value_7362 = lua_tablegetcall(G.str['math'], 'floor', [_value_7362])[0];
      lua_tableset(_self, 'Lightning_Atk_BM', lua_add(lua_tableget(_self, 'Lightning_Atk_BM'), _value_7362));
      lua_call(G.str['SetExProp'], [_buff, "ADD_LIGHTNING", _value_7362]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EnchantLightning_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _value_7366 = lua_call(G.str['GetExProp'], [_buff, "ADD_LIGHTNING"])[0];
      lua_tableset(_self, 'Lightning_Atk_BM', lua_subtract(lua_tableget(_self, 'Lightning_Atk_BM'), _value_7366));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sacrament_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _holyAddAttack_7367 = 0;
      var _resdarkadd_7367 = 0;
      var _lv_7367 = _arg1;
      var _caster_7367 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7367, null)) {
        var _pad_7368 = lua_call(G.str['GetPadByBuff'], [_caster_7367, _buff])[0];
        if (!lua_eq(_pad_7368, null)) {
          _lv_7367 = lua_call(G.str['GetPadArgNumber'], [_pad_7368, 1])[0];
        }
        var _Priest7_abil_7368 = lua_call(G.str['GetAbility'], [_caster_7367, 'Priest7'])[0];
        if (!lua_eq(_Priest7_abil_7368, null)) {
          _resdarkadd_7367 = lua_multiply(lua_tableget(_Priest7_abil_7368, 'Level'), 5);
        }
        var _stat_7368 = lua_call(G.str['TryGetProp'], [_caster_7367, 'MNA'])[0];
        if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
          var _stat_BM_7371 = lua_call(G.str['TryGetProp'], [_caster_7367, 'MNA_BM'])[0];
          var _stat_ITEM_BM_7371 = lua_call(G.str['TryGetProp'], [_caster_7367, 'MNA_ITEM_BM'])[0];
          _stat_7368 = lua_subtract(_stat_7368, (lua_add(_stat_BM_7371, _stat_ITEM_BM_7371)));
        }
        _holyAddAttack_7367 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_add(180, (lua_multiply((lua_subtract(_lv_7367, 1)), 60))), (lua_multiply((lua_divide(_lv_7367, 3)), (lua_power(_stat_7368, 0.9)))))])[0];
        lua_call(G.str['SetBuffArgs'], [_buff, _holyAddAttack_7367, _resdarkadd_7367]);
      } else {
        tmp = lua_call(G.str['GetBuffArgs'], [_buff]); _holyAddAttack_7367 = tmp[0]; _resdarkadd_7367 = tmp[1]; tmp = null;
      }
      if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
        _resdarkadd_7367 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_resdarkadd_7367, 0.7)])[0];
      }
      lua_tableset(_self, 'ResDark_BM', lua_add(lua_tableget(_self, 'ResDark_BM'), _resdarkadd_7367));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DARK", _resdarkadd_7367]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sacrament_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resdarkadd_7374 = lua_call(G.str['GetExProp'], [_buff, "ADD_DARK"])[0];
      lua_tableset(_self, 'ResDark_BM', lua_subtract(lua_tableget(_self, 'ResDark_BM'), _resdarkadd_7374));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ColdDetonation'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Ice_Bonus_BM', lua_add(lua_tableget(_self, 'Ice_Bonus_BM'), lua_multiply(_arg1, _over)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ColdDetonation'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Ice_Bonus_BM', lua_subtract(lua_tableget(_self, 'Ice_Bonus_BM'), lua_multiply(_arg1, _over)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CardCharm'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7377 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      lua_call(G.str['SetOwner'], [_self, _caster_7377]);
      lua_call(G.str['SetTendency'], [_self, "Attack"]);
      lua_call(G.str['ResetHateAndAttack'], [_self]);
      lua_call(G.str['BroadcastRelation'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CardCharm'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetOwner'], [_self, 0]);
      lua_call(G.str['ResetHateAndAttack'], [_self]);
      lua_call(G.str['BroadcastRelation'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CriticalWound'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7379 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _dmg_7379 = lua_divide((lua_add(lua_tableget(_caster_7379, 'MINPATK'), lua_tableget(_caster_7379, 'MINPATK'))), 10);
      lua_call(G.str['SetExProp'], [_self, 'CriticalWound_Damage', _dmg_7379]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CriticalWound'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7380 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7380, null)) {
        _caster_7380 = _self;
      }
      var _dmg_7380 = lua_call(G.str['GetExProp'], [_self, 'CriticalWound_Damage'])[0];
      lua_call(G.str['TakeDamage'], [_caster_7380, _self, "None", _dmg_7380, "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CriticalWound'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CriticalWound_Mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7383 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7383, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_7383, 'MINPATK'), lua_tableget(_caster_7383, 'MAXPATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CriticalWound_Mon'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINPATK_7385 = tmp[0]; var _casterMAXPATK_7385 = tmp[1]; tmp = null;
      var _caster_7385 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7385, null)) {
        _caster_7385 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7385, _self, "None", lua_divide((lua_add(_casterMINPATK_7385, _casterMAXPATK_7385)), 10), "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CriticalWound_Mon'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_enchanted_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_enchanted_poison'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BroadHead_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7390 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _atk_7390 = 0;
      if (!lua_eq(_caster_7390, null)) {
        _atk_7390 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7390, _self, "Fletcher_BroadHead"])[0];
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _atk_7390, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BroadHead_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _atk_7392 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _caster_7392 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7392, null)) {
        var _skill_7393 = lua_call(G.str['GetSkill'], [_caster_7392, 'Fletcher_BroadHead'])[0];
        if (!lua_eq(_skill_7393, null)) {
          lua_call(G.str['TakeDamage'], [_caster_7392, _self, lua_tableget(_skill_7393, 'ClassName'), _atk_7392, lua_tableget(_skill_7393, 'Attribute'), "Melee", "Melee", G.str['HIT_BLEEDING'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BroadHead_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_BleedingToxin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7396 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7396, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_7396, 'MINMATK'), lua_tableget(_caster_7396, 'MAXMATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Archer_BleedingToxin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINMATK_7398 = tmp[0]; var _casterMAXMATK_7398 = tmp[1]; tmp = null;
      var _caster_7398 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7398, null)) {
        _caster_7398 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7398, _self, "None", lua_add((lua_divide((lua_add(_casterMINMATK_7398, _casterMAXMATK_7398)), (lua_subtract(10, _arg1)))), 1), "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_BleedingToxin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_NeuroToxin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7401 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7401, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_caster_7401, 'MINPATK'), lua_tableget(_caster_7401, 'MAXPATK'), 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Archer_NeuroToxin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _casterMINPATK_7403 = tmp[0]; var _casterMAXPATK_7403 = tmp[1]; tmp = null;
      var _caster_7403 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7403, null)) {
        _caster_7403 = _self;
      }
      lua_call(G.str['TakeDamage'], [_caster_7403, _self, "None", lua_add((lua_divide((lua_add(_casterMINPATK_7403, _casterMAXPATK_7403)), (lua_subtract(10, _arg1)))), 1), "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_NeuroToxin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DeathVerdict_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _skillLevel_7406 = _arg1;
      var _mspdadd_7406 = 0;
      var _caster_7406 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7406, null)) {
        var _skill_7407 = lua_call(G.str['GetSkill'], [_caster_7406, 'Oracle_DeathVerdict'])[0];
        _skillLevel_7406 = lua_call(G.str['TryGetProp'], [_skill_7407, 'Level'])[0];
        if (lua_eq(_skillLevel_7406, null)) {
          _skillLevel_7406 = _arg1;
        }
        var _abil_7407 = lua_call(G.str['GetAbility'], [_caster_7406, "Oracle8"])[0];
        if (!lua_eq(_abil_7407, null)) {
          _mspdadd_7406 = lua_multiply(lua_multiply(lua_tableget(_self, 'MSPD'), 0.15), lua_tableget(_abil_7407, 'Level'));
        }
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7406));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7406]);
      lua_call(G.str['AttachGauge'], [_self, lua_multiply(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0.001), 1, 1, "gauge_barrack_attack"]);
      var _cumulativeDamage_7406 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_eq(_cumulativeDamage_7406, null)) {
        _cumulativeDamage_7406 = 0;
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _cumulativeDamage_7406, 0, 0]);
      var _addDamageRate_7406 = lua_add(30, (lua_multiply(_skillLevel_7406, 5)));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_DAMAGE_RATE', _addDamageRate_7406]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DeathVerdict_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsDead'], [_self])[0], 0) && lua_eq(_isLastEnd, 1))) {
        var _caster_7412 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_7412, null)) {
          var _cumulativeDamage_7413 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
          if (lua_lt(0, _cumulativeDamage_7413)) {
            var _Oracle13_abil_7414 = lua_call(G.str['GetAbility'], [_caster_7412, 'Oracle13'])[0];
            if ((!lua_eq(_Oracle13_abil_7414, null) && lua_eq(1, lua_tableget(_Oracle13_abil_7414, 'ActiveState')))) {
              _cumulativeDamage_7413 = lua_multiply(_cumulativeDamage_7413, (lua_subtract(1, (lua_multiply(lua_tableget(_Oracle13_abil_7414, 'Level'), 0.1)))));
            }
            lua_call(G.str['TakeDamage'], [_self, _caster_7412, 'None', _cumulativeDamage_7413, 'Dark', 'Magic', 'AbsoluteDamage', G.str['HIT_DARK'], G.str['HITRESULT_BLOW']]);
          }
        }
      }
      var _mspdadd_7411 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7411));
      lua_call(G.str['AttachGauge'], [_self, 0, 1, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Circling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_tableset(_self, 'FixedMinSDR_BM', lua_add(lua_tableget(_self, 'FixedMinSDR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Circling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      lua_tableset(_self, 'FixedMinSDR_BM', lua_subtract(lua_tableget(_self, 'FixedMinSDR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CirclingIncreaseSR_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _increaseSR_7418 = 3;
      lua_call(G.str['SetExProp'], [_buff, "CliclingAddSR", _increaseSR_7418]);
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), _increaseSR_7418));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CirclingIncreaseSR_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _increaseSR_7419 = lua_call(G.str['GetExProp'], [_buff, "CliclingAddSR"])[0];
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _increaseSR_7419));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_BlowGunPoison_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ShowEmoticon'], [_self, 'I_emo_poison', 0]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7420 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _atk_7420 = 0;
      if (!lua_eq(_caster_7420, null)) {
        _atk_7420 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7420, _self, "Wugushi_NeedleBlow"])[0];
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _atk_7420, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Archer_BlowGunPoison_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _atk_7422 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _caster_7422 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7422, null)) {
        var _skill_7423 = lua_call(G.str['GetSkill'], [_caster_7422, 'Wugushi_NeedleBlow'])[0];
        if (!lua_eq(_skill_7423, null)) {
          lua_call(G.str['TakeDamage'], [_caster_7422, _self, lua_tableget(_skill_7423, 'ClassName'), _atk_7422, "Poison", "Melee", "Melee", G.str['HIT_POISON_GREEN'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_BlowGunPoison_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideEmoticon'], [_self, 'I_emo_poison']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Zhendu_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _PoisonATK_7426 = 0;
      var _caster_7426 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skl_7426 = lua_call(G.str['GetSkill'], [_caster_7426, "Wugushi_Zhendu"])[0];
      if ((!lua_eq(_caster_7426, null) && !lua_eq(_skl_7426, null))) {
        var _STR_7427 = lua_call(G.str['TryGetProp'], [_caster_7426, "STR"])[0];
        var _minPATK_7427 = lua_call(G.str['TryGetProp'], [_caster_7426, "MINPATK"])[0];
        var _maxPATK_7427 = lua_call(G.str['TryGetProp'], [_caster_7426, "MAXPATK"])[0];
        var _PATK_7427 = (lua_multiply((lua_divide((lua_add(_minPATK_7427, _maxPATK_7427)), 2)), 0.1));
        var _skillLv_7427 = lua_tableget(_skl_7426, 'Level');
        _PoisonATK_7426 = lua_add(lua_tablegetcall(G.str['math'], 'floor', [lua_add(40, lua_multiply((lua_subtract(_skillLv_7427, 1)), 7))])[0], (lua_multiply((lua_divide(_skillLv_7427, 4)), (lua_power((lua_multiply(_STR_7427, 0.6)), 0.9)))));
        lua_call(G.str['SetExProp'], [_buff, "PoisonDadak", _PATK_7427]);
        lua_tableset(_self, 'Poison_Atk_BM', lua_add(lua_tableget(_self, 'Poison_Atk_BM'), _PoisonATK_7426));
        lua_call(G.str['SetExProp'], [_self, "add_Zhendu", _PoisonATK_7426]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Zhendu_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _PoisonATK_7428 = lua_call(G.str['GetExProp'], [_self, "add_Zhendu"])[0];
      lua_tableset(_self, 'Poison_Atk_BM', lua_subtract(lua_tableget(_self, 'Poison_Atk_BM'), _PoisonATK_7428));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Zhendu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7429 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _resposadd_7429 = 0;
      var _abil_7429 = lua_call(G.str['GetAbility'], [_caster_7429, "Wugushi7"])[0];
      if (!lua_eq(_abil_7429, null)) {
        _resposadd_7429 = lua_add(_resposadd_7429, lua_multiply(lua_tableget(_abil_7429, 'Level'), 7));
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), _resposadd_7429));
      } else {
        lua_tableset(_self, 'Poison_Def_BM', lua_subtract(lua_tableget(_self, 'Poison_Def_BM'), _resposadd_7429));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_POS", _resposadd_7429]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Zhendu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resposadd_7433 = lua_call(G.str['GetExProp'], [_buff, "ADD_POS"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), _resposadd_7433));
      } else {
        lua_tableset(_self, 'Poison_Def_BM', lua_add(lua_tableget(_self, 'Poison_Def_BM'), _resposadd_7433));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bewitch_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7436 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7436, null)) {
        _caster_7436 = _buff;
      }
      tmp = lua_call(G.str['GetBuffListByProp'], [_self, 'Keyword', 'Poison']); var _debuffList_7436 = tmp[0]; var _debuffCount_7436 = tmp[1]; tmp = null;
      if ((!lua_eq(_debuffList_7436, null) && lua_lte(1, _debuffCount_7436))) {
        var var_7439 = 1, stop_7439 = lua_assertfloat(_debuffCount_7436);
        for (; var_7439 <= stop_7439; var_7439++) {
          var _i_7439 = var_7439;
          var _deBuff_7440 = lua_tableget(_debuffList_7436, _i_7439);
          if ((lua_eq(lua_tableget(_deBuff_7440, 'Group1'), "Debuff") && !lua_eq(lua_tableget(_deBuff_7440, 'ClassName'), 'Bewitch_Debuff'))) {
            lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
            lua_call(G.str['RemoveBuff'], [_self, 'Bewitch_Debuff']);
            lua_call(G.str['PlayEffect'], [_self, 'F_archer_wugu3_shot', 0.5, 1, 'BOT']);
            lua_call(G.str['ActorVibrate'], [_self, 1, 1, 30, 0]);
            lua_call(G.str['AddBuff'], [_caster_7436, _self, 'Confuse', _arg1, 0, 10000, 1]);
            break;
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bewitch_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_VerminPot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7443 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7443, null)) {
        _caster_7443 = _self;
      }
      var _atk_7443 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7443, _self, "Wugushi_ThrowGuPot"])[0];
      lua_call(G.str['SetBuffArgs'], [_buff, _atk_7443, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Archer_VerminPot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _atk_7445 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lte(_atk_7445, 0)) {
        return [0];
      }
      var _from_7445 = _self;
      var _caster_7445 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7445, null)) {
        _from_7445 = _caster_7445;
      }
      var _skill_7445 = lua_call(G.str['GetSkill'], [_caster_7445, 'Wugushi_ThrowGuPot'])[0];
      if (!lua_eq(_skill_7445, null)) {
        lua_call(G.str['TakeDamage'], [_caster_7445, _self, lua_tableget(_skill_7445, 'ClassName'), _atk_7445, "Poison", "Melee", "Melee", G.str['HIT_POISON_GREEN'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_VerminPot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Detoxify_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7450 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7450, null)) {
        _caster_7450 = _buff;
      }
      tmp = lua_call(G.str['GetBuffListByProp'], [_self, "Keyword", "Poison"]); var _buff_list_7450 = tmp[0]; var _buff_cnt_7450 = tmp[1]; tmp = null;
      if ((!lua_eq(_buff_list_7450, null) && lua_lte(1, _buff_cnt_7450))) {
        var var_7453 = 1, stop_7453 = lua_assertfloat(_buff_cnt_7450);
        for (; var_7453 <= stop_7453; var_7453++) {
          var _i_7453 = var_7453;
          if (((lua_eq(lua_call(G.str['IS_CONTAIN_KEYWORD_BUFF'], [lua_tableget(_buff_list_7450, _i_7453), "Poison"])[0], true) && lua_eq(lua_call(G.str['TryGetProp'], [lua_tableget(_buff_list_7450, _i_7453), "RemoveBySkill"])[0], "YES")) && !lua_eq(lua_call(G.str['TryGetProp'], [lua_tableget(_buff_list_7450, _i_7453), "Premium"])[0], "PC"))) {
            if (lua_lte(lua_tableget(lua_tableget(_buff_list_7450, _i_7453), 'Lv'), _arg1)) {
              lua_call(G.str['RemoveBuff'], [_self, lua_tableget(lua_tableget(_buff_list_7450, _i_7453), 'ClassName')]);
              lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
              var _abilWugushi1_7456 = lua_call(G.str['GetAbility'], [_caster_7450, 'Wugushi1'])[0];
              if ((!lua_eq(_abilWugushi1_7456, null) && lua_eq(lua_tableget(_abilWugushi1_7456, 'ActiveState'), 1))) {
                lua_call(G.str['AddBuff'], [_caster_7450, _self, 'Detoxify_After_Buff', lua_tableget(_abilWugushi1_7456, 'Level'), 0, lua_multiply(lua_tableget(_abilWugushi1_7456, 'Level'), 4000), 1]);
              }
            }
            var _abilWugushi24_7455 = lua_call(G.str['GetAbility'], [_caster_7450, 'Wugushi24'])[0];
            if ((!lua_eq(_abilWugushi24_7455, null) && lua_eq(lua_tableget(_abilWugushi24_7455, 'ActiveState'), 1))) {
              lua_call(G.str['RemoveBuff'], [_self, lua_tableget(lua_tableget(_buff_list_7450, _i_7453), 'ClassName')]);
              lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Detoxify_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Detoxify_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Detoxify_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['RemoveBuffKeyword'], [_self, 'Debuff', 'Poison', 1, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Detoxify_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_ADD_CASTER_BUFF_REMAINTIME'] = (function (_self, _fromBuffName, _toBuffName, _setReaminTime) {
      var tmp;
      var _buff_7463 = lua_call(G.str['GetBuffByName'], [_self, _fromBuffName])[0];
      if (!lua_eq(_buff_7463, null)) {
        var _caster_7464 = lua_call(G.str['GetBuffCaster'], [_buff_7463])[0];
        if (!lua_eq(_caster_7464, null)) {
          if (lua_eq("YES", lua_call(G.str['IsBuffApplied'], [_caster_7464, _toBuffName])[0])) {
            lua_call(G.str['SetBuffRemainTime'], [_caster_7464, _toBuffName, _setReaminTime]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DiscernEvil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7467 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7467, null)) {
        _caster_7467 = _buff;
      }
      tmp = lua_call(G.str['GetBuffList'], [_self]); var _list_7467 = tmp[0]; var _cnt_7467 = tmp[1]; tmp = null;
      var var_7469 = 1, stop_7469 = lua_assertfloat(_cnt_7467);
      for (; var_7469 <= stop_7469; var_7469++) {
        var _i_7469 = var_7469;
        var _debuff_7470 = lua_tableget(_list_7467, _i_7469);
        if (lua_eq(lua_tableget(_debuff_7470, 'Group1'), "Debuff")) {
          if (lua_eq(lua_call(G.str['GetExProp'], [_debuff_7470, "DISCERNEVIL_DEBUFFTIME"])[0], 1)) {
            return [];
          }
          if (lua_eq(lua_call(G.str['IS_CONTAIN_KEYWORD_BUFF'], [lua_tableget(_list_7467, _i_7469), "DiscernEvil"])[0], false)) {
            var _remainTime_7473 = lua_call(G.str['GetBuffRemainTime'], [_debuff_7470])[0];
            var _timeValue_7473 = lua_multiply(_remainTime_7473, (lua_add(0.25, (lua_multiply(_arg1, 0.05)))));
            lua_call(G.str['AddBuffRemainTime'], [_self, lua_tableget(_debuff_7470, 'ClassName'), _timeValue_7473]);
            lua_call(G.str['SetExProp'], [_debuff_7470, "DISCERNEVIL_DEBUFFTIME", 1]);
          }
          if (lua_eq(lua_tableget(_debuff_7470, 'ClassName'), "Hexing_Debuff")) {
            lua_call(G.str['SCR_ADD_CASTER_BUFF_REMAINTIME'], [_self, "Hexing_Debuff", "Hexing_Buff", G.str['remainTime']]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DiscernEvil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TombLord_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_7476 = 0.05;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_7476));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_7476]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TombLord_DEF'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_7477 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_7477));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TombLord_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TombLord_ATK'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Fire'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7481 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7481, null)) {
        _caster_7481 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_7481, _self, "None", _arg1, "Fire", "Magic", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fire'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warning'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Warning'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7485 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7485, null)) {
        _caster_7485 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_7485, _self, "None", lua_call(G.str['IMCRandom'], [lua_divide(_arg1, 3), lua_divide(_arg1, 2)])[0], "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warning'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Burn'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Burn'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7489 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7489, null)) {
        _caster_7489 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_7489, _self, "None", lua_multiply(lua_divide(_arg2, 5), _over), "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Burn'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Scud'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7492 = _arg1;
      var _mspdadd_7492 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.2);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7492));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7492]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Scud'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7493 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7493));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cure_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7494 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7494, null)) {
        _caster_7494 = _buff;
      }
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL'], [_self, "Debuff", 2]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cure_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cure_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7497 = _arg1;
      var _caster_7497 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_7497 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7497, _self, 'Cleric_Cure'])[0];
      var _skill_7497 = lua_call(G.str['GET_MON_SKILL'], [_caster_7497, 'Cleric_Cure'])[0];
      var _addValue_7497 = 0;
      var _pad_7497 = lua_call(G.str['GetPadByBuff'], [_caster_7497, _buff])[0];
      if (!lua_eq(_pad_7497, null)) {
        _addValue_7497 = lua_call(G.str['GetPadArgNumber'], [_pad_7497, 1])[0];
      }
      lua_call(G.str['TakeDamage'], [_caster_7497, _self, "Cleric_Cure", _damage_7497]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cure_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Lunge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addlv_7500 = lua_multiply(20, _arg1);
      var _dradd_7500 = lua_add(50, _addlv_7500);
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_7500));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_7500]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Lunge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dradd_7501 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_7501));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Lunge_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Lunge_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_AttaqueCoquille_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AttaqueCoquille_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_ScarletMacaw_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "isScarletMacaw_Debuff", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_ScarletMacaw_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "isScarletMacaw_Debuff"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FireWall_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireadd_7508 = 0;
      var _caster_7508 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _pyromancer2_abil_7508 = lua_call(G.str['GetAbility'], [_caster_7508, 'Pyromancer2'])[0];
      if (!lua_eq(_pyromancer2_abil_7508, null)) {
        var _stat_7509 = lua_divide(lua_tableget(_caster_7508, 'INT'), 5);
        _fireadd_7508 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_pyromancer2_abil_7508, 'Level'), _stat_7509)])[0];
      }
      lua_tableset(_self, 'Fire_Atk_BM', lua_add(lua_tableget(_self, 'Fire_Atk_BM'), _fireadd_7508));
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIREATK", _fireadd_7508]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FireWall_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireadd_7510 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIREATK"])[0];
      lua_tableset(_self, 'Fire_Atk_BM', lua_subtract(lua_tableget(_self, 'Fire_Atk_BM'), _fireadd_7510));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Finestra_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _crtrate_7511 = lua_multiply(10, _arg1);
      var _blkrate_7511 = lua_multiply(15, _arg1);
      var _drarate_7511 = lua_multiply(15, _arg1);
      var _crtadd_7511 = lua_add(50, _crtrate_7511);
      var _dradd_7511 = _drarate_7511;
      var _blkadd_7511 = lua_add(25, _blkrate_7511);
      var _sradd_7511 = 0;
      var _skill_7511 = lua_call(G.str['GetSkill'], [_self, "Hoplite_Finestra"])[0];
      if (lua_eq(_skill_7511, null)) {
        return [];
      }
      var _abil_7511 = lua_call(G.str['GetAbility'], [_self, 'Hoplite9'])[0];
      if ((!lua_eq(_abil_7511, null) && lua_lte(3, lua_tableget(_skill_7511, 'Level')))) {
        _dradd_7511 = lua_multiply(_dradd_7511, 2);
        _sradd_7511 = 3;
      }
      _crtadd_7511 = lua_tablegetcall(G.str['math'], 'floor', [_crtadd_7511])[0];
      _dradd_7511 = lua_tablegetcall(G.str['math'], 'floor', [_dradd_7511])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _crtadd_7511));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_7511));
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _blkadd_7511));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), _sradd_7511));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_7511]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRT", _crtadd_7511]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_BLK", _blkadd_7511]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_SR", _sradd_7511]);
      var _abil_7511 = lua_call(G.str['GetAbility'], [_self, 'Hoplite4'])[0];
      if (!lua_eq(_abil_7511, null)) {
        var _addAtk_7514 = lua_multiply(lua_tableget(_self, 'INT'), 0.1);
        lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _addAtk_7514));
        lua_call(G.str['SetExProp'], [_buff, "ADD_ATK_ABIL", _addAtk_7514]);
      }
      lua_call(G.str['RunScript'], ['SCR_FINESTRA_TEMP', _self, G.str['caster']]);
      return [];
    })
    G.str['SCR_FINESTRA_TEMP'] = (function (_self) {
      var tmp;
      lua_call(G.str['sleep'], [400]);
      lua_call(G.str['PlayAnim'], [_self, "SKL_FINESTRA_ASTD", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Finestra_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dradd_7516 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      var _crtadd_7516 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRT"])[0];
      var _blkadd_7516 = lua_call(G.str['GetExProp'], [_buff, "ADD_BLK"])[0];
      var _sradd_7516 = lua_call(G.str['GetExProp'], [_buff, "ADD_SR"])[0];
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_7516));
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _crtadd_7516));
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _blkadd_7516));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _sradd_7516));
      var _addAtk_7516 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK_ABIL"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _addAtk_7516));
      var _skill_7516 = lua_call(G.str['GetSkill'], [_self, 'Normal_Attack'])[0];
      lua_call(G.str['ChangeSkillAniNameImmediately'], [_self, 'Normal_Attack', 'None']);
      lua_call(G.str['ChangeSkillAniNameImmediately'], [_self, 'Normal_Attack_TH', 'None']);
      lua_call(G.str['Invalidate'], [_self, "DR"]);
      lua_call(G.str['Invalidate'], [_self, "CRTHR"]);
      lua_call(G.str['Invalidate'], [_self, "BLK"]);
      lua_call(G.str['Invalidate'], [_self, "MINMATK"]);
      lua_call(G.str['Invalidate'], [_self, "MAXMATK"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_EpeeGarde_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lhItem_7517 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      if (lua_eq(_lhItem_7517, null)) {
        return [];
      }
      if (lua_lte(lua_tableget(_lhItem_7517, 'DEF'), 0)) {
        return [];
      }
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), lua_tableget(_lhItem_7517, 'DEF')));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", lua_tableget(_lhItem_7517, 'DEF')]);
      lua_call(G.str['RunScript'], ['SCR_EPEEGARDE_TEMP', _self, G.str['caster']]);
      return [];
    })
    G.str['SCR_EPEEGARDE_TEMP'] = (function (_self) {
      var tmp;
      lua_call(G.str['sleep'], [400]);
      lua_call(G.str['PlayAnim'], [_self, "SKL_EPEEGARDE_ASTD", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EpeeGarde_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _ridingCompanion_7521 = lua_call(G.str['GetRidingCompanion'], [_self])[0];
      if (!lua_eq(_ridingCompanion_7521, null)) {
        return [0];
      }
      var _lhItem_7521 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      if (!lua_eq(_lhItem_7521, null)) {
        var _defadd_7523 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
        if (!lua_eq(lua_tableget(_lhItem_7521, 'DEF'), _defadd_7523)) {
          lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_7523));
          lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), lua_tableget(_lhItem_7521, 'DEF')));
          lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", lua_tableget(_lhItem_7521, 'DEF')]);
          lua_call(G.str['Invalidate'], [_self, "DEF"]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EpeeGarde_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_7525 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      if (lua_lt(0, _defadd_7525)) {
        lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_7525));
        lua_call(G.str['Invalidate'], [_self, "DEF"]);
      }
      var _skill_7525 = lua_call(G.str['GetSkill'], [_self, 'Normal_Attack'])[0];
      lua_call(G.str['ChangeSkillAniNameImmediately'], [_self, 'Normal_Attack', 'None']);
      lua_call(G.str['ChangeSkillAniNameImmediately'], [_self, 'Normal_Attack_TH', 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _mspdadd_7527 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.1);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7527));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7527]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Rain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7528 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7528, null)) {
        _caster_7528 = _buff;
      }
      var _damage_7528 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7528, _self, 'Elementalist_Rain'])[0];
      var _skill_7528 = lua_call(G.str['GET_MON_SKILL'], [_caster_7528, 'Elementalist_Rain'])[0];
      if (lua_eq(lua_tableget(_self, 'Attribute'), "Fire")) {
        lua_call(G.str['TakeDamage'], [_caster_7528, _self, "Elementalist_Rain", _damage_7528, "None", "Magic", "Magic", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7531 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7531));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HighGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RunScript'], ['SCR_HIGHGUARD_TEMP', _self, G.str['caster']]);
      var _blkAddLv_7532 = 30;
      var _blkAdd_7532 = lua_add(100, lua_multiply(_arg1, _blkAddLv_7532));
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _blkAdd_7532));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HIGHGUARD_BLK", _blkAdd_7532]);
      return [];
    })
    G.str['SCR_HIGHGUARD_TEMP'] = (function (_self) {
      var tmp;
      lua_call(G.str['sleep'], [400]);
      lua_call(G.str['PlayAnim'], [_self, "SKL_HIGHGUARD_ASTD", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HighGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skill_7534 = lua_call(G.str['GetSkill'], [_self, 'Normal_Attack'])[0];
      lua_call(G.str['ChangeSkillAniName'], [_self, 'Normal_Attack', 'None']);
      var _blkAdd_7534 = lua_call(G.str['GetExProp'], [_buff, "ADD_HIGHGUARD_BLK"])[0];
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _blkAdd_7534));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Yekub_skill2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7535 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7535, null)) {
        _caster_7535 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_7535, _self, "None", lua_divide((lua_add(lua_tableget(_caster_7535, 'MINMATK'), lua_tableget(_caster_7535, 'MAXMATK'))), 10), "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Yekub_skill2'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpearLunge_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpearLunge_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Heal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7540 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_7540 = lua_call(G.str['GetSkill'], [_caster_7540, "Cleric_Heal"])[0];
      var _healValue_7540 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), 0.05)])[0];
      var _minHealValue_7540 = 0;
      var _maxHealValue_7540 = 0;
      if (!lua_eq(_caster_7540, null)) {
        var _pad_7541 = lua_call(G.str['GetPadByBuff'], [_caster_7540, _buff])[0];
        if (!lua_eq(_pad_7541, null)) {
          _minHealValue_7540 = lua_tablegetcall(G.str['math'], 'floor', lua_call(G.str['GetPadArgNumber'], [_pad_7541, 1]))[0];
          _maxHealValue_7540 = lua_tablegetcall(G.str['math'], 'floor', lua_call(G.str['GetPadArgNumber'], [_pad_7541, 2]))[0];
        }
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Restoration_Buff'])[0], 'YES')) {
        _minHealValue_7540 = lua_multiply(_minHealValue_7540, 2);
        _maxHealValue_7540 = lua_multiply(_maxHealValue_7540, 2);
      }
      _minHealValue_7540 = lua_add(_healValue_7540, _minHealValue_7540);
      _maxHealValue_7540 = lua_add(_healValue_7540, _maxHealValue_7540);
      var _healRnd_7540 = lua_call(G.str['IMCRandom'], [_minHealValue_7540, _maxHealValue_7540])[0];
      var _Ayin_sof_buff_7540 = lua_call(G.str['GetBuffByName'], [_self, 'Ayin_sof_Buff'])[0];
      var _Ayin_sof_arg3_7540 = 0;
      if (!lua_eq(_Ayin_sof_buff_7540, null)) {
        _Ayin_sof_arg3_7540 = lua_call(G.str['GetBuffArgs'], [_Ayin_sof_buff_7540])[0];
      }
      if ((lua_eq(lua_call(G.str['IsSameActor'], [_self, _caster_7540])[0], "NO") || lua_eq(_Ayin_sof_arg3_7540, 0))) {
        _healRnd_7540 = lua_add(_healRnd_7540, (lua_multiply(_healRnd_7540, _arg2)));
      }
      _healRnd_7540 = lua_divide(lua_multiply(lua_call(G.str['TryGetProp'], [_caster_7540, "HEAL_PWR"])[0], lua_tableget(_skill_7540, 'SkillFactor')), 100);
      lua_call(G.str['Heal'], [_self, _healRnd_7540, 0, null, lua_tableget(_buff, 'ClassName')]);
      var _abilCleric22_7540 = lua_call(G.str['GetAbility'], [_caster_7540, "Cleric22"])[0];
      if ((!lua_eq(_abilCleric22_7540, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilCleric22_7540, "ActiveState"])[0], 1))) {
        var _abilLv_7546 = lua_tableget(_abilCleric22_7540, 'Level');
        var _addDotHeal_7546 = lua_multiply(lua_multiply(_healRnd_7540, _abilLv_7546), 0.05);
        lua_call(G.str['AddBuff'], [_caster_7540, _self, "Heal_Dot_Buff", 1, _addDotHeal_7546, 10000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Heal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Heal_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7548 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7548, null)) {
        return [];
      }
      var _damage_7548 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7548, _self, 'Cleric_Heal'])[0];
      var _skill_7548 = lua_call(G.str['GET_MON_SKILL'], [_caster_7548, 'Cleric_Heal'])[0];
      var _addValue_7548 = 0;
      var _pad_7548 = lua_call(G.str['GetPadByBuff'], [_caster_7548, _buff])[0];
      if (!lua_eq(_pad_7548, null)) {
        _addValue_7548 = lua_call(G.str['GetPadArgNumber'], [_pad_7548, 1])[0];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_caster_7548, 'Blessing_Buff'])[0], "NO")) {
        lua_call(G.str['TakeDamage'], [_caster_7548, _self, lua_tableget(_skill_7548, 'ClassName'), _damage_7548, "Holy", "Magic", "Magic", G.str['HIT_MOTION'], G.str['HITRESULT_BLOW']]);
      } else {
        var var_7553 = 1, stop_7553 = 2;
        for (; var_7553 <= stop_7553; var_7553++) {
          var _i_7553 = var_7553;
          var _key_7554 = lua_call(G.str['GenerateSyncKey'], [_self])[0];
          lua_call(G.str['StartSyncPacket'], [_self, _key_7554]);
          lua_call(G.str['TakeDamage'], [_caster_7548, _self, lua_tableget(_skill_7548, 'ClassName'), _damage_7548, "Holy", "Magic", "Magic", G.str['HIT_MOTION'], G.str['HITRESULT_BLOW']]);
          lua_call(G.str['EndSyncPacket'], [_self, _key_7554, lua_multiply(_i_7553, 0.2)]);
          lua_call(G.str['ExecSyncPacket'], [_self, _key_7554]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Heal_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Heal_Dot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Heal_Dot_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _addHeal_7557 = lua_multiply(_arg2, 0.1);
      lua_call(G.str['Heal'], [_self, _addHeal_7557, 0, null, lua_tableget(_buff, 'ClassName')]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Heal_Dot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Venom_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Cleric_Venom_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _lv_7560 = _arg1;
      var _caster_7560 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7560, null)) {
        _caster_7560 = _buff;
      }
      var _value_7560 = lua_divide((lua_multiply((lua_add(lua_tableget(_caster_7560, 'MINMATK'), lua_tableget(_caster_7560, 'MAXMATK'))), (lua_add(0.5, (lua_multiply(_lv_7560, 0.1)))))), lua_call(G.str['IMCRandomFloat'], [1, 1.3])[0]);
      lua_call(G.str['TakeDamage'], [_caster_7560, _self, "None", lua_tablegetcall(G.str['math'], 'min', [_value_7560, lua_multiply(lua_tableget(_self, 'MHP'), 0.2)])[0], "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Venom_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Gae_Bulg_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Gae_Bulg_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_GreatBearFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7565 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _maxatk_7565 = lua_call(G.str['GetExProp'], [_caster_7565, "MAX_ATK"])[0];
      var _minatk_7565 = lua_call(G.str['GetExProp'], [_caster_7565, "MIN_ATK"])[0];
      var _maxdef_7565 = lua_call(G.str['GetExProp'], [_caster_7565, "MAX_DEF"])[0];
      var _atkadd_7565 = (lua_subtract(_maxatk_7565, lua_tableget(_self, 'MAXPATK')));
      var _defadd_7565 = (lua_subtract(_maxdef_7565, lua_tableget(_self, 'DEF')));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_7565]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_7565]);
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_7565));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_7565));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_GreatBearFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addatk_7566 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      var _adddef_7566 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _addatk_7566));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _adddef_7566));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_Parrying_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_Parrying_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Exchange'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hp_7569 = lua_subtract(lua_tableget(_self, 'SP'), lua_tableget(_self, 'HP'));
      var _sp_7569 = lua_subtract(lua_tableget(_self, 'HP'), lua_tableget(_self, 'SP'));
      lua_call(G.str['AddHP'], [_self, _hp_7569]);
      lua_call(G.str['AddSP'], [_self, _sp_7569]);
      var _shieldValue_7569 = lua_divide(lua_tableget(_self, 'MHP'), 4);
      lua_call(G.str['GIVE_BUFF_SHIELD'], [_self, _buff, _shieldValue_7569]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Exchange'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Exchange'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TAKE_BUFF_SHIELD'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_spector_shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _shieldValue_7572 = lua_divide(lua_tableget(_self, 'MHP'), 3);
      lua_call(G.str['GIVE_BUFF_SHIELD'], [_self, _buff, _shieldValue_7572]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_spector_shield'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_spector_shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TAKE_BUFF_SHIELD'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rejuvenation'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Rejuvenation'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_7576 = lua_divide(lua_tableget(_self, 'MHP'), 20);
      var _healsp_7576 = lua_divide(lua_tableget(_self, 'MSP'), 20);
      if (lua_lt(_heal_7576, 5)) {
        _heal_7576 = 5;
      }
      if (lua_lt(_healsp_7576, 3)) {
        _healsp_7576 = 3;
      }
      lua_call(G.str['Heal'], [_self, _heal_7576, 0]);
      lua_call(G.str['HealSP'], [_self, _healsp_7576, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rejuvenation'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_JincanGu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7580 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7580, null)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_7580, "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
        var _caster_7581 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        lua_call(G.str['ObjectColorBlend'], [_self, 100, 100, 100, 255, 1, 10]);
        lua_call(G.str['SetExProp'], [_self, 'JINCAN_COUNT', 1]);
        lua_call(G.str['SetExProp'], [_buff, "Wugushi_JincanGu_COUNT", 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JincanGu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _count_7582 = lua_call(G.str['GetExProp'], [_self, 'JINCAN_COUNT'])[0];
      lua_call(G.str['SetExProp'], [_self, 'JINCAN_COUNT', lua_add(_count_7582, 1)]);
      var _caster_7582 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7582, null)) {
        var _skill_7583 = lua_call(G.str['GetSkill'], [_caster_7582, 'Wugushi_JincanGu'])[0];
        var _damage_7583 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7582, _self, 'Wugushi_JincanGu'])[0];
        _damage_7583 = lua_tablegetcall(G.str['math'], 'floor', [_damage_7583])[0];
        lua_call(G.str['TakeDamage'], [_caster_7582, _self, lua_tableget(_skill_7583, 'ClassName'), _damage_7583, "Poison", "None", "Melee", G.str['HIT_POISON'], G.str['HITRESULT_BLOW']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JincanGu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "Lv", _arg1]);
      lua_call(G.str['SetExProp_Pos'], [_self, "JINCANGU"].concat(lua_call(G.str['GetPos'], [_self])));
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 2]);
      var _caster_7584 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1)) {
        var _summonRate_7585 = lua_call(G.str['IMCRandom'], [1, 100])[0];
        var _rate_7585 = 100;
        if (lua_lt(_summonRate_7585, _rate_7585)) {
          var _skl_7586 = lua_call(G.str['GetSkill'], [_caster_7584, "Wugushi_JincanGu"])[0];
          if (!lua_eq(_skl_7586, null)) {
            tmp = lua_call(G.str['GetPos'], [_self]); var _x_7587 = tmp[0]; var _y_7587 = tmp[1]; var _z_7587 = tmp[2]; tmp = null;
            var _createCount_7587 = lua_call(G.str['GetExProp'], [_buff, "Wugushi_JincanGu_COUNT"])[0];
            var _maxcount_7587 = lua_tableget(_skl_7586, 'Level');
            if (lua_lte(5, _maxcount_7587)) {
              _maxcount_7587 = 5;
            }
            var _loopCount_7587 = lua_subtract(_maxcount_7587, _createCount_7587);
            if (lua_lte(1, _loopCount_7587)) {
              var var_7590 = 1, stop_7590 = lua_assertfloat(_loopCount_7587);
              for (; var_7590 <= stop_7590; var_7590++) {
                var _i_7590 = var_7590;
                lua_call(G.str['RunScript'], ["SCR_WUGUSHI_JINCANGU", _self, G.str['sklID'], G.str['damage'], _caster_7584, _x_7587, _y_7587, _z_7587]);
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Ziva_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Cleric_Ziva_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_7593 = lua_divide(lua_tableget(_self, 'MHP'), 10);
      if (lua_lt(_heal_7593, 5)) {
        _heal_7593 = 5;
      }
      lua_call(G.str['Heal'], [_self, _heal_7593, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Ziva_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_RoyalRumbleBoss'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_RoyalRumbleBoss'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_7597 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MHP'), 20)])[0];
      lua_call(G.str['Heal'], [_self, _heal_7597, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RoyalRumbleBoss'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SelfHeal'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SelfHeal'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_7600 = (lua_add(lua_add(_arg1, _over), 1));
      lua_call(G.str['Heal'], [_self, _heal_7600, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SelfHeal'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['UnHoldMonScp'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Den_Heal'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Den_Heal'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _heal_7603 = lua_divide(lua_tableget(_self, 'MHP'), 20);
      lua_call(G.str['Heal'], [_self, _heal_7603, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Den_Heal'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GuardImpact'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), 10000));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GuardImpact'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), 10000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwashBuckling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addHateCount_7607 = lua_add(_arg1, 6);
      lua_tableset(_self, 'MaxHateCount_BM', lua_add(lua_tableget(_self, 'MaxHateCount_BM'), _addHateCount_7607));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HATE", _addHateCount_7607]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwashBuckling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MaxHateCount_BM', lua_subtract(lua_tableget(_self, 'MaxHateCount_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_HATE"])[0]));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwashBuckling_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 160, 150, 255, 1, 1.5]);
      var _spdAdd_7609 = 10;
      var _buffCaster_7609 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['SetFociblyHater'], [_self, _buffCaster_7609]);
        lua_call(G.str['AddBuff'], [_buffCaster_7609, _self, "ProvocationImmunity_Debuff", 0, 0, 30000, 1]);
        if (!lua_eq(lua_tableget(_self, 'MonRank'), "BOSS")) {
          lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _spdAdd_7609));
          lua_call(G.str['SetExProp'], [_self, "SWASHBUCKLING_SPD", _spdAdd_7609]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwashBuckling_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      var _buffCaster_7612 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_buffCaster_7612, null)) {
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
          if (!lua_eq(lua_tableget(_self, 'MonRank'), "BOSS")) {
            lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_call(G.str['GetExProp'], [_self, "SWASHBUCKLING_SPD"])[0]));
          }
          var _currentTarget_7614 = lua_call(G.str['GetFociblyHater'], [_self])[0];
          if (!lua_eq(_currentTarget_7614, null)) {
            if (lua_eq(lua_call(G.str['IsSameActor'], [_currentTarget_7614, _buffCaster_7612])[0], "YES")) {
              lua_call(G.str['RemoveFociblyHater'], [_self]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwashBuckling_AbilBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwashBuckling_AbilBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mastema_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7620 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_7620 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7620, _self, 'Warlock_Mastema'])[0];
      var _skill_7620 = lua_call(G.str['GET_MON_SKILL'], [_caster_7620, 'Warlock_Mastema'])[0];
      var _divineAtkAdd_7620 = lua_tableget(_skill_7620, 'SkillAtkAdd');
      var _addValue_7620 = 0;
      var _pad_7620 = lua_call(G.str['GetPadByBuff'], [_caster_7620, _buff])[0];
      if (!lua_eq(_pad_7620, null)) {
        _addValue_7620 = lua_call(G.str['GetPadArgNumber'], [_pad_7620, 1])[0];
      }
      _divineAtkAdd_7620 = lua_subtract(_addValue_7620, _divineAtkAdd_7620);
      if (lua_lt(_divineAtkAdd_7620, 0)) {
        _divineAtkAdd_7620 = 0;
      }
      lua_call(G.str['TakeDamage'], [_caster_7620, _self, lua_tableget(_skill_7620, 'ClassName'), lua_add(_damage_7620, _divineAtkAdd_7620), "Dark", "Magic", "Magic", G.str['HIT_MOTION'], G.str['HITRESULT_BLOW'], 0, 0]);
      if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        var _addHate_7623 = lua_multiply((lua_add(_damage_7620, lua_tableget(_skill_7620, 'SkillAtkAdd'))), 10);
        var _abil_7623 = lua_call(G.str['GetAbility'], [_caster_7620, "Warlock10"])[0];
        if (!lua_eq(_abil_7623, null)) {
          _addHate_7623 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_addHate_7623, (lua_subtract(1, lua_multiply(lua_tableget(_abil_7623, 'Level'), 0.01))))])[0];
        }
        lua_call(G.str['InsertHate'], [_self, _caster_7620, _addHate_7623]);
      }
      var _Warlock13_7620 = lua_call(G.str['GetAbility'], [_caster_7620, "Warlock13"])[0];
      if (!lua_eq(null, _Warlock13_7620)) {
        var _stradd_7625 = lua_multiply(lua_tableget(_Warlock13_7620, 'Level'), 10);
        var _intadd_7625 = lua_multiply(lua_tableget(_Warlock13_7620, 'Level'), 10);
        var _mnaadd_7625 = lua_multiply(lua_tableget(_Warlock13_7620, 'Level'), 10);
        var _adddex_7625 = lua_multiply(lua_tableget(_Warlock13_7620, 'Level'), 10);
        lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_7625));
        lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_7625));
        lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_7625));
        lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _adddex_7625));
        lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_7625]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_7625]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_7625]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_DEX", _adddex_7625]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Mastema_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7626 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_7626, null)) {
        return [1];
      }
      var _Warlock13_7626 = lua_call(G.str['GetAbility'], [_caster_7626, "Warlock13"])[0];
      if (lua_eq(_Warlock13_7626, null)) {
        return [1];
      }
      var _damage_7626 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7626, _self, 'Warlock_Mastema'])[0];
      var _skill_7626 = lua_call(G.str['GET_MON_SKILL'], [_caster_7626, 'Warlock_Mastema'])[0];
      var _divineAtkAdd_7626 = lua_tableget(_skill_7626, 'SkillAtkAdd');
      var _addValue_7626 = 0;
      var _pad_7626 = lua_call(G.str['GetPadByBuff'], [_caster_7626, _buff])[0];
      if (!lua_eq(_pad_7626, null)) {
        _addValue_7626 = lua_call(G.str['GetPadArgNumber'], [_pad_7626, 1])[0];
      }
      _divineAtkAdd_7626 = lua_subtract(_addValue_7626, _divineAtkAdd_7626);
      if (lua_lt(_divineAtkAdd_7626, 0)) {
        _divineAtkAdd_7626 = 0;
      }
      _damage_7626 = lua_multiply((lua_add(_damage_7626, _divineAtkAdd_7626)), 0.5);
      lua_call(G.str['TakeDamage'], [_caster_7626, _self, lua_tableget(_skill_7626, 'ClassName'), _damage_7626, "Dark", "Magic", "Magic", G.str['HIT_MOTION'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mastema_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_7631 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _intadd_7631 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_7631 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      var _adddex_7631 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEX"])[0];
      if (lua_lt(0, _stradd_7631)) {
        lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_7631));
      }
      if (lua_lt(0, _intadd_7631)) {
        lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_7631));
      }
      if (lua_lt(0, _mnaadd_7631)) {
        lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_7631));
      }
      if (lua_lt(0, _adddex_7631)) {
        lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _adddex_7631));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Agony_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Agony_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7637 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7637, null)) {
        var _damage_7638 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7637, _self, 'Warlock_PoleofAgony'])[0];
        var _skill_7638 = lua_call(G.str['GET_MON_SKILL'], [_caster_7637, 'Warlock_PoleofAgony'])[0];
        if (!lua_eq(_skill_7638, null)) {
          var _damrate_7639 = lua_divide(_RemainTime, (lua_add(10000, lua_multiply(lua_call(G.str['GET_ABIL_LEVEL'], [_caster_7637, "Warlock3"])[0], 800))));
          var _abil_7639 = lua_call(G.str['GetAbility'], [_caster_7637, "Warlock11"])[0];
          if (!lua_eq(_abil_7639, null)) {
            var _lowerlimit_7640 = lua_multiply(lua_tableget(_abil_7639, 'Level'), 0.15);
            if (lua_lt(_damrate_7639, _lowerlimit_7640)) {
              _damrate_7639 = _lowerlimit_7640;
            }
          }
          _damage_7638 = lua_multiply(_damage_7638, _damrate_7639);
          lua_call(G.str['TakeDamage'], [_caster_7637, _self, lua_tableget(_skill_7638, 'ClassName'), _damage_7638, "Dark", "Magic", "Magic", G.str['HIT_MOTION'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Agony_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Invocation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetExProp_Str'], [_self, 'COPY_EFFECTNAME'])[0], 'None')) {
        var _sklLevel_7644 = lua_call(G.str['GetExProp'], [_self, 'COPY_SKLLEVEL'])[0];
        lua_call(G.str['SUMMON_INVOCATION_MONSTER'], [_self, _self, _sklLevel_7644, 20]);
        lua_call(G.str['RemoveBuff'], [_self, 'Invocation_Debuff']);
        lua_call(G.str['SkillCancel'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Invocation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LevelUpBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LevelUpBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, 'ENEMY']); var _objList_7647 = tmp[0]; var _objCount_7647 = tmp[1]; tmp = null;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_7647 = tmp[0]; var _y_7647 = tmp[1]; var _z_7647 = tmp[2]; tmp = null;
      var var_7648 = 1, stop_7648 = lua_assertfloat(_objCount_7647);
      for (; var_7648 <= stop_7648; var_7648++) {
        var _i_7648 = var_7648;
        var _obj_7649 = lua_tableget(_objList_7647, _i_7648);
        if (lua_eq(lua_call(G.str['IS_PC'], [_obj_7649])[0], false)) {
          var _dmg_7650 = lua_divide((lua_add(lua_tableget(_self, 'MAXPATK'), lua_tableget(_self, 'MAXMATK'))), 3);
          if (lua_lt(0, lua_tableget(_obj_7649, 'HPCount'))) {
            _dmg_7650 = 1;
          }
          lua_call(G.str['TakeDamage'], [_self, _obj_7649, "None", _dmg_7650, "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Flins_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Flins_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Flins_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      var _dg_7654 = lua_multiply(lua_tableget(_self, 'DEF'), (lua_multiply(0.05, _over)));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _dg_7654));
      lua_call(G.str['SetExProp'], [_buff, "TOTAL_DG", _dg_7654]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Flins_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _dg_7655 = lua_call(G.str['GetExProp'], [_buff, "TOTAL_DG"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _dg_7655));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Dodola_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Dodola_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Pass_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _sklList_7658 = tmp[0]; var _cnt_7658 = tmp[1]; tmp = null;
      var _downList_7658 = lua_newtable();
      if (!lua_eq(_cnt_7658, null)) {
        var _skillCooldownList_7659 = lua_newtable();
        var _totalSkillCooldown_7659 = 0;
        var var_7660 = 1, stop_7660 = lua_assertfloat(_cnt_7658);
        for (; var_7660 <= stop_7660; var_7660++) {
          var _i_7660 = var_7660;
          var _skl_7661 = lua_tableget(_sklList_7658, _i_7660);
          var _result_7661 = lua_call(G.str['CAN_REMAINCOOL_TIME_FOR_PASS_BUFF'], [_downList_7658, _skl_7661])[0];
          if (lua_eq(_result_7661, "YES")) {
            var _cls_7662 = lua_call(G.str['GetClass'], ["CoolDown", lua_tableget(_skl_7661, 'CoolDownGroup')])[0];
            if (!lua_eq(_cls_7662, null)) {
              var _skillCooldown_7663 = lua_call(G.str['GetCoolDown'], [_self, lua_tableget(_cls_7662, 'ClassName')])[0];
              if (lua_lte((lua_multiply(_arg1, 5000)), _skillCooldown_7663)) {
                _skillCooldown_7663 = lua_multiply(_arg1, 5000);
              }
              lua_tableset(_skillCooldownList_7659, lua_add(lua_len(_skillCooldownList_7659), 1), _skillCooldown_7663);
              _totalSkillCooldown_7659 = lua_add(_totalSkillCooldown_7659, _skillCooldown_7663);
              lua_call(G.str['AddCoolDown'], [_self, lua_tableget(_cls_7662, 'ClassName'), lua_multiply(_arg1, -5000)]);
              lua_call(G.str['SetExProp'], [_skl_7661, "PASS_COOLDOWN", 1]);
              lua_tableset(_downList_7658, lua_add(lua_len(_downList_7658), 1), lua_tableget(_cls_7662, 'ClassName'));
            }
          }
        }
      }
      return [];
    })
    G.str['CAN_REMAINCOOL_TIME_FOR_PASS_BUFF'] = (function (_downList, _skl) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetExProp'], [_skl, "PASS_COOLDOWN"])[0], 1)) {
        return ["NO"];
      }
      if (lua_eq(lua_call(G.str['TryGetProp'], [_skl, "CommonType"])[0], "Item")) {
        return ["NO"];
      }
      if ((lua_eq(lua_tableget(_skl, 'ClassName'), "Chronomancer_Pass") || lua_eq(lua_tableget(_skl, 'ClassName'), "Musketeer_PrimeAndLoad"))) {
        return ["NO"];
      }
      if (lua_lte(lua_call(G.str['IsCoolTime'], [_skl])[0], 0)) {
        return ["NO"];
      }
      var var_7670 = 1, stop_7670 = lua_assertfloat(lua_len(_downList));
      for (; var_7670 <= stop_7670; var_7670++) {
        var _i_7670 = var_7670;
        if (lua_eq(lua_tableget(_downList, _i_7670), lua_tableget(_skl, 'CoolDownGroup'))) {
          return ["NO"];
        }
      }
      return ["YES"];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Pass_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Daino_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAttackSpeed_7674 = 0;
      var _abil_Kriwi21_7674 = lua_call(G.str['GetAbility'], [_self, "Kriwi21"])[0];
      if ((!lua_eq(_abil_Kriwi21_7674, null) && lua_eq(lua_tableget(_abil_Kriwi21_7674, 'ActiveState'), 1))) {
        _addAttackSpeed_7674 = lua_multiply(10, _arg1);
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_DAINO_ATKSPD", _addAttackSpeed_7674]);
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_addAttackSpeed_7674)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Daino_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAttackSpeed_7676 = lua_call(G.str['GetExProp'], [_buff, "ADD_DAINO_ATKSPD"])[0];
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _addAttackSpeed_7676]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Resurrection_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7677 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _healHP_7677 = lua_multiply(_arg1, 5);
      if (lua_lt(100, _healHP_7677)) {
        _healHP_7677 = 100;
      }
      if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1)) {
        lua_call(G.str['ResurrectPc'], [_self, "Resurrection", 0].concat(lua_tablegetcall(G.str['math'], 'max', [5, _healHP_7677])));
        if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
          var _count_7680 = lua_call(G.str['GetExProp'], [_self, "RESURRECTION_COUNT"])[0];
          lua_call(G.str['SetExProp'], [_self, "RESURRECTION_COUNT", lua_subtract(_count_7680, 1)]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Resurrection_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Revival_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7682 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7682, null)) {
        var _reviveSkl_7683 = lua_call(G.str['GetSkill'], [_caster_7682, 'Priest_Revive'])[0];
        if (!lua_eq(_reviveSkl_7683, null)) {
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_reviveSkl_7683, 'Level'), 0, 0]);
        }
      }
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        var _count_7685 = lua_call(G.str['GetExProp'], [_self, "REVIVE_COUNT"])[0];
        lua_call(G.str['SetExProp'], [_self, "REVIVE_COUNT", lua_subtract(_count_7685, 1)]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Revival_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Revival_Leave_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, "Cleric_Revival_Buff"]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      lua_call(G.str['Heal'], [_self, lua_multiply(lua_multiply(lua_tableget(_self, 'MHP'), _arg1), 0.05), 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Revival_Leave_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Restoration_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addrhp_7689 = 0;
      var _addrsp_7689 = 0;
      var _lv_7689 = _arg1;
      var _caster_7689 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7689, null)) {
        var _skill_7690 = lua_call(G.str['GetSkill'], [_caster_7689, "Paladin_Restoration"])[0];
        if (!lua_eq(_skill_7690, null)) {
          _addrhp_7689 = lua_call(G.str['SCR_GET_Restoration_Ratio'], [_skill_7690])[0];
          var _Paladin7_abil_7691 = lua_call(G.str['GetAbility'], [_caster_7689, "Paladin7"])[0];
          if (!lua_eq(_Paladin7_abil_7691, null)) {
            _addrsp_7689 = lua_add(_addrsp_7689, lua_multiply(lua_tableget(_Paladin7_abil_7691, 'Level'), 10));
          }
        }
      }
      _addrhp_7689 = lua_tablegetcall(G.str['math'], 'floor', [_addrhp_7689])[0];
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), _addrhp_7689));
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), _addrsp_7689));
      lua_call(G.str['SetExProp'], [_buff, "ADD_RHP", _addrhp_7689]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_RSP", _addrsp_7689]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Restoration_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addrhp_7693 = lua_call(G.str['GetExProp'], [_buff, "ADD_RHP"])[0];
      var _addrsp_7693 = lua_call(G.str['GetExProp'], [_buff, "ADD_RSP"])[0];
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), _addrhp_7693));
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), _addrsp_7693));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_Once_Critical_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abil_7694 = lua_call(G.str['GetAbility'], [G.str['from'], 'Hoplite6'])[0];
      var _addCri_7694 = lua_multiply(lua_multiply(lua_tableget(_self, 'CRTHR'), lua_tableget(_abil_7694, 'Level')), 0.05);
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _addCri_7694));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_CRI_ABIL']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_Once_Critical_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCri_7695 = lua_call(G.str['GetExProp'], [_buff, 'ADD_CRI_ABIL'])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _addCri_7695));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Concentrate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _sklLv_7696 = tmp[0]; var _value_7696 = tmp[1]; tmp = null;
      var _statBonus_7696 = 0;
      var _byAbilRate_7696 = 0;
      var _caster_7696 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7696, null)) {
        var _Concentrate_7697 = lua_call(G.str['GetSkill'], [_caster_7696, 'Swordman_Concentrate'])[0];
        if (!lua_eq(null, _Concentrate_7697)) {
          _sklLv_7696 = lua_tableget(_Concentrate_7697, 'Level');
          _statBonus_7696 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(lua_multiply(lua_tableget(_caster_7696, 'STR'), 0.1), lua_multiply(lua_tableget(_caster_7696, 'DEX'), 0.2))), _arg1)])[0];
        }
        var _Swordman14_abil_7697 = lua_call(G.str['GetAbility'], [_caster_7696, "Swordman14"])[0];
        if ((!lua_eq(_Swordman14_abil_7697, null) && lua_lte(3, _sklLv_7696))) {
          _byAbilRate_7696 = lua_multiply(lua_tableget(_Swordman14_abil_7697, 'Level'), 0.01);
        }
      } else {
        _caster_7696 = _self;
      }
      _value_7696 = lua_add(lua_add(5, lua_multiply((lua_subtract(_sklLv_7696, 1)), 1.5)), _statBonus_7696);
      _value_7696 = lua_add(_value_7696, (lua_multiply(_value_7696, _byAbilRate_7696)));
      _value_7696 = lua_tablegetcall(G.str['math'], 'floor', [_value_7696])[0];
      lua_call(G.str['SetExProp'], [_buff, "ConcentrateValue", _value_7696]);
      lua_call(G.str['SetExProp'], [_buff, "ConcentrateCount", lua_multiply(_sklLv_7696, 2)]);
      lua_call(G.str['SkillTextEffect'], [null, _self, _caster_7696, 'SHOW_SKILL_BONUS', _value_7696, null, "skill_concentrate"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Concentrate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_TEST_BUFF_SKILL'] = (function (_self, _buff, _skillclsID) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_ENTER_SoulActivation'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SoulActivation'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, _arg1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SoulActivation'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, _arg1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CrossGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blkadd_7706 = lua_add(lua_tableget(_self, 'STR'), (lua_multiply(50, _arg1)));
      var _defadd_7706 = 0;
      var _skill_7706 = lua_call(G.str['GetSkill'], [_self, "Highlander_CrossGuard"])[0];
      if (lua_eq(_skill_7706, null)) {
        return [];
      }
      var _Highlander15_abil_7706 = lua_call(G.str['GetAbility'], [_self, 'Highlander15'])[0];
      if ((!lua_eq(_Highlander15_abil_7706, null) && lua_lte(3, lua_tableget(_skill_7706, 'Level')))) {
        _defadd_7706 = lua_add(_defadd_7706, lua_multiply(lua_tableget(_Highlander15_abil_7706, 'Level'), 5));
      }
      _defadd_7706 = lua_tablegetcall(G.str['math'], 'floor', [_defadd_7706])[0];
      _blkadd_7706 = lua_tablegetcall(G.str['math'], 'floor', [_blkadd_7706])[0];
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _blkadd_7706));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_7706));
      lua_call(G.str['SetExProp'], [_buff, "ADD_BLK", _blkadd_7706]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_7706]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CrossGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blkadd_7709 = lua_call(G.str['GetExProp'], [_buff, "ADD_BLK"])[0];
      var _defadd_7709 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _blkadd_7709));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_7709));
      return [];
    })
    G.str['SCR_BUFF_GIVEDAMAGE_CrossGuard_Buff'] = (function (_self, _buff, _skillid, _damage, _target) {
      var tmp;
      var _time_7710 = 6000;
      var _Highlander1_abil_7710 = lua_call(G.str['GetAbility'], [_self, "Highlander1"])[0];
      if (!lua_eq(_Highlander1_abil_7710, null)) {
        _time_7710 = lua_add(_time_7710, lua_multiply(lua_tableget(_Highlander1_abil_7710, 'Level'), 1000));
      }
      lua_call(G.str['AddBuff'], [_self, G.str['from'], 'CrossGuard_Debuff', 1, 0, _time_7710, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CrossGuard_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7712 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _crossGuardSkl_7712 = lua_call(G.str['GetSkill'], [_caster_7712, 'Highlander_CrossGuard'])[0];
      if (!lua_eq(_crossGuardSkl_7712, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_crossGuardSkl_7712, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CrossGuard_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Guard_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Guard_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cloaking_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _zone_7717 = lua_call(G.str['GetZoneName'], [_self])[0];
      if (((lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1) || lua_eq(lua_call(G.str['IsJoinColonyWarMap'], [_self])[0], 1)) || lua_eq(_zone_7717, 'pvp_Mine'))) {
        lua_call(G.str['SetCoolDown'], [_self, "Cloaking", 0]);
      }
      var _addmspd_7717 = 0;
      var _abil_7717 = lua_call(G.str['GetAbility'], [_self, "Scout9"])[0];
      if (!lua_eq(_abil_7717, null)) {
        _addmspd_7717 = lua_add(_addmspd_7717, lua_tableget(_abil_7717, 'Level'));
      }
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addmspd_7717));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _addmspd_7717]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cloaking_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _zone_7720 = lua_call(G.str['GetZoneName'], [_self])[0];
      var _addmspd_7720 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addmspd_7720));
      lua_call(G.str['SetExProp'], [G.str['buffOwner'], "ACT_TIME", G.str['actTime']]);
      if (((lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1) || lua_eq(lua_call(G.str['IsJoinColonyWarMap'], [_self])[0], 1)) || lua_eq(_zone_7720, 'pvp_Mine'))) {
        lua_call(G.str['StartCoolTimeAndSpendSP'], [_self, "Scout_Cloaking"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cover_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cover_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Scan_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Scan_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Beprepared_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetClassList'], ["CoolDown"]); var _CoolList_7726 = tmp[0]; var _cnt_7726 = tmp[1]; tmp = null;
      var var_7727 = 0, stop_7727 = lua_assertfloat(lua_subtract(_cnt_7726, 1));
      for (; var_7727 <= stop_7727; var_7727++) {
        var _i_7727 = var_7727;
        var _cal_7728 = lua_call(G.str['GetClassByIndexFromList'], [_CoolList_7726, _i_7727])[0];
        lua_call(G.str['AddCoolDown'], [_self, lua_tableget(_cal_7728, 'ClassName'), lua_multiply(_arg1, -5000)]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Beprepared_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _levelfix_7730 = lua_tableget(_self, 'Lv');
      lua_tableset(_buff, 'Value', _levelfix_7730);
      var _MHP_7730 = lua_tableget(_self, 'MHP');
      var _MSP_7730 = lua_tableget(_self, 'MSP');
      lua_call(G.str['SetEmoticon'], [_self, 'I_emo_startuscharge']);
      lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), lua_divide((lua_multiply(lua_multiply(_levelfix_7730, lua_tableget(_self, 'MHP')), 0.096)), _levelfix_7730)));
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), lua_divide((lua_multiply(lua_multiply(_levelfix_7730, lua_tableget(_self, 'MSP')), 0.096)), _levelfix_7730)));
      if (lua_eq("YES", lua_call(G.str['IsBuffApplied'], [_self, 'StoupBuff'])[0])) {
        lua_call(G.str['RemoveEffect'], [_self, 'F_pc_statue_buff', 1]);
        lua_call(G.str['AttachEffect'], [_self, 'F_pc_statue_buff', 10, 'MID', 0, 0, 0, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Rest'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObjectByFaction'], [_self, 120, 'Law']); var _list_7732 = tmp[0]; var _cnt_7732 = tmp[1]; tmp = null;
      var _i_7732;
      var _pc_count_7732 = 1;
      if (lua_lt(0, _cnt_7732)) {
        var var_7734 = 1, stop_7734 = lua_assertfloat(_cnt_7732);
        for (; var_7734 <= stop_7734; var_7734++) {
          var _i_7734 = var_7734;
          if (((lua_eq(lua_tableget(lua_tableget(_list_7732, _i_7734), 'ClassName'), 'PC') && lua_eq(lua_call(G.str['IsBuffApplied'], [lua_tableget(_list_7732, _i_7734), 'Rest'])[0], 'YES')) && lua_eq(lua_call(G.str['IsSameActor'], [_self, lua_tableget(_list_7732, _i_7734)])[0], 'NO'))) {
            _pc_count_7732 = lua_add(_pc_count_7732, 1);
          }
        }
      }
      if (lua_lt(0, _pc_count_7732)) {
        var _hpup_7737 = 0;
        var _spup_7737 = 0;
        _pc_count_7732 = lua_add(0.005, lua_multiply(_pc_count_7732, 0.005));
        if (lua_lt(0.05, _pc_count_7732)) {
          _pc_count_7732 = 0.05;
        }
        _hpup_7737 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), _pc_count_7732)])[0];
        _spup_7737 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MSP'), _pc_count_7732)])[0];
        if (lua_lt(_hpup_7737, 1)) {
          _hpup_7737 = 1;
        }
        if (lua_lt(_spup_7737, 1)) {
          _spup_7737 = 1;
        }
        lua_call(G.str['AddHP'], [_self, _hpup_7737]);
        lua_call(G.str['AddSP'], [_self, _spup_7737]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _levelfix_7741 = lua_tableget(_buff, 'Value');
      var _MHP_7741 = lua_tableget(_self, 'MHP');
      var _MSP_7741 = lua_tableget(_self, 'MSP');
      lua_call(G.str['SetEmoticon'], [_self, 'None']);
      lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), lua_divide((lua_multiply(lua_multiply(_levelfix_7741, lua_tableget(_self, 'MHP')), 0.096)), _levelfix_7741)));
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), lua_divide((lua_multiply(lua_multiply(_levelfix_7741, lua_tableget(_self, 'MSP')), 0.096)), _levelfix_7741)));
      if (lua_eq("YES", lua_call(G.str['IsBuffApplied'], [_self, 'StoupBuff'])[0])) {
        lua_call(G.str['RemoveEffect'], [_self, 'F_pc_statue_buff', 1]);
        lua_call(G.str['AttachEffect'], [_self, 'F_pc_statue_buff', 10, 'TOP', 0, 0, 0, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SitRest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _jobCheck_7743 = lua_call(G.str['GetJobGradeByName'], [_self, 'Char3_12'])[0];
      if (lua_lte(1, _jobCheck_7743)) {
        lua_call(G.str['AddHelpByName'], [_self, 'TUTO_FLUTING']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SitRest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sleep_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _lv_7746 = _arg1;
      var _caster_7746 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7746, null)) {
        var _pad_7747 = lua_call(G.str['GetPadByBuff'], [_caster_7746, _buff])[0];
        if (!lua_eq(_pad_7747, null)) {
          _lv_7746 = lua_call(G.str['GetPadArgNumber'], [_pad_7747, 1])[0];
          var _abilWizard25_7748 = lua_call(G.str['GetAbility'], [_caster_7746, "Wizard25"])[0];
          if (!lua_eq(_abilWizard25_7748, null)) {
            _lv_7746 = lua_multiply(_lv_7746, 0.2);
          }
          if (lua_lte(_lv_7746, 0)) {
            _lv_7746 = 1;
          }
        }
      }
      var _zone_7746 = lua_call(G.str['GetZoneName'], [_self])[0];
      if (((lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1) || lua_eq(lua_call(G.str['IsJoinColonyWarMap'], [_self])[0], 1)) || lua_eq(_zone_7746, 'pvp_Mine'))) {
        _lv_7746 = 0;
      }
      lua_call(G.str['SetExProp'], [_self, "TAKEDMG_COUNT", _lv_7746]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sleep_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "TAKEDMG_COUNT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FortitudeEndure'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DMG_MTPL_BM', lua_subtract(lua_tableget(_self, 'DMG_MTPL_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FortitudeEndure'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DMG_MTPL_BM', lua_add(lua_tableget(_self, 'DMG_MTPL_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeacherEncouragment'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'REST_BM', lua_add(lua_tableget(_self, 'REST_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TeacherEncouragment'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'REST_BM', lua_subtract(lua_tableget(_self, 'REST_BM'), 2000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SoPowerful'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), 9999999));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), 9999999));
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), 9999999));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SoPowerful'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), 9999999));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), 9999999));
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), 9999999));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GungHo'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilDefAdd_7759 = 1;
      var _abilAtkAdd_7759 = 1;
      var _skill_7759 = lua_call(G.str['GetSkill'], [_self, "Swordman_GungHo"])[0];
      if (lua_eq(_skill_7759, null)) {
        return [];
      }
      var _Swordman13_abil_7759 = lua_call(G.str['GetAbility'], [_self, "Swordman13"])[0];
      if ((!lua_eq(_Swordman13_abil_7759, null) && lua_lte(3, lua_tableget(_skill_7759, 'Level')))) {
        _abilDefAdd_7759 = lua_add(1, lua_multiply(lua_tableget(_Swordman13_abil_7759, 'Level'), 0.01));
        _abilAtkAdd_7759 = lua_add(1, lua_multiply(lua_tableget(_Swordman13_abil_7759, 'Level'), 0.01));
      }
      var _stat_7759 = lua_call(G.str['TryGetProp'], [_self, "STR"])[0];
      var _atkAdd_7759 = lua_add(lua_add(10, (lua_multiply((lua_subtract(_arg1, 1)), 2))), (lua_multiply((lua_divide(_arg1, 5)), (lua_power((lua_multiply(_stat_7759, 0.5)), 0.8)))));
      var _defAdd_7759 = lua_add(lua_add(5, (lua_subtract(_arg1, 1))), (lua_multiply((lua_divide(_arg1, 5)), (lua_power((lua_multiply(_stat_7759, 0.3)), 0.5)))));
      _atkAdd_7759 = lua_multiply(_atkAdd_7759, _abilAtkAdd_7759);
      _defAdd_7759 = lua_multiply(_defAdd_7759, _abilDefAdd_7759);
      if (lua_lt(lua_tableget(_self, 'DEF'), _defAdd_7759)) {
        _defAdd_7759 = lua_tableget(_self, 'DEF');
      }
      _defAdd_7759 = lua_tablegetcall(G.str['math'], 'floor', [_defAdd_7759])[0];
      _atkAdd_7759 = lua_tablegetcall(G.str['math'], 'floor', [_atkAdd_7759])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defAdd_7759));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _atkAdd_7759));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defAdd_7759]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkAdd_7759]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GungHo'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GungHo'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defAdd_7764 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _atkAdd_7764 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defAdd_7764));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _atkAdd_7764));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Guardian_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defRate_7765 = 1;
      var _drAdd_7765 = 0;
      var _Peltasta23_abil_7765 = lua_call(G.str['GetAbility'], [_self, "Peltasta23"])[0];
      if (!lua_eq(_Peltasta23_abil_7765, null)) {
        _drAdd_7765 = lua_multiply(50, lua_tableget(_Peltasta23_abil_7765, 'Level'));
      }
      var _abilPeltasta34_7765 = lua_call(G.str['GetAbility'], [_self, "Peltasta34"])[0];
      if ((!lua_eq(_abilPeltasta34_7765, null) && lua_eq(lua_tableget(_abilPeltasta34_7765, 'ActiveState'), 1))) {
        _defRate_7765 = 2;
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defRate_7765));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _defRate_7765));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _drAdd_7765));
      lua_call(G.str['SetExProp'], [_buff, "ADD_GUARDIAN_DR", _drAdd_7765]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_GUARDIAN_DEF", _defRate_7765]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Guardian_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _drAdd_7768 = lua_call(G.str['GetExProp'], [_buff, "ADD_GUARDIAN_DR"])[0];
      var _defRate_7768 = lua_call(G.str['GetExProp'], [_buff, "ADD_GUARDIAN_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defRate_7768));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _defRate_7768));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _drAdd_7768));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Restrain_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7769 = lua_add(lua_add(50, (lua_multiply(_arg1, 5))), (lua_multiply(lua_multiply(lua_tableget(_self, 'MHP'), 0.01), _arg1)));
      if (lua_lt(lua_multiply(lua_tableget(_self, 'MHP'), 0.9), _mhpadd_7769)) {
        _mhpadd_7769 = lua_multiply(lua_tableget(_self, 'MHP'), 0.9);
      }
      _mhpadd_7769 = lua_tablegetcall(G.str['math'], 'floor', [_mhpadd_7769])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_7769));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _mhpadd_7769]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Restrain_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7771 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_7771));
      lua_call(G.str['SetExProp'], [_self, "REGEN_HP", _mhpadd_7771]);
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Restrain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Restrain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7773 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_7773 = lua_call(G.str['GetAbility'], [_caster_7773, "Swordman4"])[0];
      if (!lua_eq(_abil_7773, null)) {
        lua_call(G.str['AddBuff'], [_caster_7773, _self, 'Slow_Debuff', 1, 0, lua_multiply(lua_tableget(_abil_7773, 'Level'), 3000), 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SafetyZone_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_7775 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_7775]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_7775));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SafetyZone_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_7776 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_7776));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_Oil_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7777 = _arg1;
      var _mspdadd_7777 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_add(0.2, lua_multiply(_lv_7777, 0.1))));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7777));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7777]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_Oil_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7778 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7778));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwiftStep_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7779 = lua_add(0.05, lua_multiply((lua_subtract(_arg1, 1)), 0.01));
      var _dradd_7779 = lua_multiply(10, _arg1);
      lua_tableset(_self, 'MovingShot_BM', lua_add(lua_tableget(_self, 'MovingShot_BM'), _mspdadd_7779));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_7779));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7779]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_7779]);
      var _caster_7779 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7779, null)) {
        var _abil_7780 = lua_call(G.str['GetAbility'], [_caster_7779, "Archer8"])[0];
        if ((!lua_eq(_abil_7780, null) && lua_eq(lua_tableget(_abil_7780, 'ActiveState'), 1))) {
          var _crthrAbil_7781 = lua_multiply(lua_tableget(_abil_7780, 'Level'), 20);
          var _skill_7781 = lua_call(G.str['GetSkill'], [_caster_7779, 'Archer_SwiftStep'])[0];
          var _crthrSkill_7781 = lua_multiply(lua_tableget(_skill_7781, 'Level'), 5);
          lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), (lua_add(_crthrAbil_7781, _crthrSkill_7781))));
          lua_call(G.str['SetExProp'], [_buff, "ADD_CRTHR_ABIL", _crthrAbil_7781]);
          lua_call(G.str['SetExProp'], [_buff, "ADD_CRTHR_SKILL", _crthrSkill_7781]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwiftStep_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7782 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      var _dradd_7782 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'MovingShot_BM', lua_subtract(lua_tableget(_self, 'MovingShot_BM'), _mspdadd_7782));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_7782));
      var _crthrAbil_7782 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTHR_ABIL"])[0];
      var _crthrSkill_7782 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTHR_SKILL"])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), (lua_add(_crthrAbil_7782, _crthrSkill_7782))));
      return [];
    })
    G.str['SCR_BUFF_ENTER_RunningShot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _spdadd_7783 = 100;
      lua_tableset(_self, 'MovingShot_BM', lua_add(lua_tableget(_self, 'MovingShot_BM'), 1.3));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_spdadd_7783)]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATKSPD", _spdadd_7783]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RunningShot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _spdadd_7784 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATKSPD"])[0];
      lua_tableset(_self, 'MovingShot_BM', lua_subtract(lua_tableget(_self, 'MovingShot_BM'), 1.3));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _spdadd_7784]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Limacon_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _level_7785 = 1;
      var _skl_7785 = lua_call(G.str['GetSkill'], [_self, 'Schwarzereiter_Limacon'])[0];
      if (!lua_eq(_skl_7785, null)) {
        _level_7785 = lua_tableget(_skl_7785, 'Level');
      }
      lua_call(G.str['AddInstSkill'], [_self, 'Pistol_Attack2', _level_7785]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Limacon_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _ridingCompanion_7787 = lua_call(G.str['GetRidingCompanion'], [_self])[0];
      if (lua_eq(_ridingCompanion_7787, null)) {
        lua_call(G.str['RemoveBuff'], [_self, 'Limacon_Buff']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Limacon_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bloodletting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abil_7790 = lua_call(G.str['GetAbility'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], "PlagueDoctor3"])[0];
      if (!lua_eq(_abil_7790, null)) {
        lua_call(G.str['SetBuffUpdateTime'], [_buff, lua_add(300, lua_multiply(lua_tableget(_abil_7790, 'Level'), 30))]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Bloodletting_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _value_7792 = (lua_subtract(6, _arg1));
      if (lua_lte(_value_7792, 0)) {
        _value_7792 = 1;
      }
      var _caster_7792 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7792, null)) {
        var _abil_7794 = lua_call(G.str['GetAbility'], [_caster_7792, "PlagueDoctor4"])[0];
        if ((!lua_eq(_abil_7794, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 9999])[0], lua_multiply(lua_tableget(_abil_7794, 'Level'), 10000)))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(_value_7792)]);
        } else {
          lua_call(G.str['AddHP'], [_self, lua_unm(_value_7792)]);
        }
        if (lua_lt(lua_tableget(_self, 'HP'), 1)) {
          lua_call(G.str['Dead'], [_self]);
        }
      } else {
        return [];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bloodletting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Incineration_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7800 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7800, null)) {
        var _abilPlagueDoctor15_7801 = lua_call(G.str['GetAbility'], [_caster_7800, 'PlagueDoctor15'])[0];
        if ((!lua_eq(_abilPlagueDoctor15_7801, null) && lua_eq(lua_tableget(_abilPlagueDoctor15_7801, 'ActiveState'), 1))) {
          lua_call(G.str['SetBuffUpdateTime'], [_buff, 300]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Incineration_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _lv_7803 = _arg1;
      var _caster_7803 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_7803 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7803, _self, 'PlagueDoctor_Incineration'])[0];
      var _skill_7803 = lua_call(G.str['GET_MON_SKILL'], [_caster_7803, 'PlagueDoctor_Incineration'])[0];
      var _divineAtkAdd_7803 = lua_tableget(_skill_7803, 'SkillAtkAdd');
      var _addValue_7803 = _arg2;
      _divineAtkAdd_7803 = lua_subtract(_addValue_7803, _divineAtkAdd_7803);
      if (lua_lt(_divineAtkAdd_7803, 0)) {
        _divineAtkAdd_7803 = 0;
      }
      lua_call(G.str['TakeDamage'], [_caster_7803, _self, lua_tableget(_skill_7803, 'ClassName'), lua_add(_damage_7803, _divineAtkAdd_7803), "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Incineration_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Lachrymator_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        lua_call(G.str['CancelMonsterSkill'], [_self]);
        lua_call(G.str['StopMove'], [_self]);
        lua_call(G.str['SetTendencysearchRange'], [_self, 30]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Lachrymator_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7808 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(null, _caster_7808)) {
        return [];
      }
      var _skill_7808 = lua_call(G.str['GetSkill'], [_caster_7808, "Rogue_Lachrymator"])[0];
      if (lua_eq(_skill_7808, null)) {
        return [];
      }
      var _Rogue13_abil_7808 = lua_call(G.str['GetAbility'], [_caster_7808, "Rogue13"])[0];
      if ((!lua_eq(_Rogue13_abil_7808, null) && lua_lte(3, lua_tableget(_skill_7808, 'Level')))) {
        lua_call(G.str['TakeDamage'], [_caster_7808, _self, "None", lua_tableget(_Rogue13_abil_7808, 'Level'), "Melee", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Lachrymator_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        lua_call(G.str['SetTendencysearchRange'], [_self, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Evasion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7814 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _evasionSkl_7814 = lua_call(G.str['GetSkill'], [_caster_7814, 'Rogue_Evasion'])[0];
      if (!lua_eq(_evasionSkl_7814, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_evasionSkl_7814, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Evasion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Lethargy_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _lv_7817 = _arg1;
      var _patkAdd_7817 = 0;
      var _matkAdd_7817 = 0;
      var _drAdd_7817 = 0;
      var _caster_7817 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7817, null)) {
        var _pad_7818 = lua_call(G.str['GetPadByBuff'], [_caster_7817, _buff])[0];
        if (!lua_eq(_pad_7818, null)) {
          _lv_7817 = lua_call(G.str['GetPadArgNumber'], [_pad_7818, 1])[0];
        }
        _patkAdd_7817 = lua_multiply(_lv_7817, 0.01);
        _matkAdd_7817 = lua_multiply(_lv_7817, 0.01);
        _drAdd_7817 = lua_multiply(_lv_7817, 5);
        var _skill_7818 = lua_call(G.str['GetSkill'], [_caster_7817, "Wizard_Lethargy"])[0];
        if (lua_eq(_skill_7818, null)) {
          return [];
        }
        var _Wizard7_abil_7818 = lua_call(G.str['GetAbility'], [_caster_7817, 'Wizard7'])[0];
        if (!lua_eq(_Wizard7_abil_7818, null)) {
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Wizard7_abil_7818, 'Level'), 0, 0]);
        }
      }
      if (lua_lt(lua_tableget(_self, 'DR'), _drAdd_7817)) {
        _drAdd_7817 = lua_tableget(_self, 'DR');
      }
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkAdd_7817));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkAdd_7817));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _drAdd_7817));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkAdd_7817]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkAdd_7817]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _drAdd_7817]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Lethargy_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkAdd_7823 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkAdd_7823 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      var _drAdd_7823 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkAdd_7823));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkAdd_7823));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _drAdd_7823));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Slow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _lv_7824 = _arg1;
      var _caster_7824 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7824, null)) {
        var _pad_7825 = lua_call(G.str['GetPadByBuff'], [_caster_7824, _buff])[0];
        if (!lua_eq(_pad_7825, null)) {
          _lv_7824 = lua_call(G.str['GetPadArgNumber'], [_pad_7825, 1])[0];
        }
        var _Chronomancer2_abil_7825 = lua_call(G.str['GetAbility'], [_caster_7824, 'Chronomancer2'])[0];
        if (!lua_eq(_Chronomancer2_abil_7825, null)) {
          var _decreaseCRT_7827 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_caster_7824, 'INT'), 0.15)])[0];
          lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _decreaseCRT_7827));
          lua_call(G.str['SetExProp'], [_buff, 'DECREASE_CRT_ABIL', _decreaseCRT_7827]);
        }
      }
      var _mspdadd_7824 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(8, lua_multiply(_arg1, 1.5))])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7824));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7824]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Slow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7828 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7828));
      var _decreaseCRT_7828 = lua_call(G.str['GetExProp'], [_buff, 'DECREASE_CRT_ABIL'])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _decreaseCRT_7828));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Surespell_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Surespell_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_QuickCast_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_QuickCast_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_QuickCast_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_QuickCast_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Zombie_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Cleric_Zombie_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _mhp_7836 = lua_tableget(_self, 'MHP');
      var _remainHP_7836 = lua_call(G.str['GetExProp'], [_buff, "REMAIN_HP"])[0];
      var _hp_7836 = lua_add(lua_multiply(_mhp_7836, 0.005), _remainHP_7836);
      _remainHP_7836 = lua_subtract(_hp_7836, lua_tablegetcall(G.str['math'], 'floor', [_hp_7836])[0]);
      lua_call(G.str['SetExProp'], [_buff, "REMAIN_HP", _remainHP_7836]);
      if (lua_lte(1, _hp_7836)) {
        lua_call(G.str['AddHP'], [_self, lua_unm(_hp_7836)]);
      }
      if (lua_lte(lua_tableget(_self, 'HP'), 0)) {
        lua_call(G.str['Dead'], [_self]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Zombie_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_7839 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7839, null)) {
        if (!lua_eq(1, lua_call(G.str['IsZombie'], [_caster_7839])[0])) {
          lua_call(G.str['ZombieDelete'], [_caster_7839, _self]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_JincanGu_Mon_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JincanGu_Mon_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddHP'], [_self, lua_unm(lua_divide(lua_tableget(_self, 'MHP'), 20))]);
      if (lua_lte(lua_tableget(_self, 'HP'), 0)) {
        lua_call(G.str['Dead'], [_self]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JincanGu_Mon_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Dead'], [_self]);
      lua_call(G.str['PlayEffect'], [_self, "F_blood006_green", 0.7, 0, 0]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Feint_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7846 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7846, null)) {
        var _abil_7847 = lua_call(G.str['GetAbility'], [_caster_7846, 'Rogue10'])[0];
        if (((!lua_eq(_abil_7847, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 9999])[0], lua_multiply(lua_tableget(_abil_7847, 'Level'), 1500))) && !lua_eq(lua_tableget(_self, 'MonRank'), 'Boss'))) {
          lua_call(G.str['RunScript'], ['SCR_FEINT_ABIL', _self, _caster_7846]);
        }
        var _feintSkl_7847 = lua_call(G.str['GetSkill'], [_caster_7846, 'Rogue_Feint'])[0];
        if (!lua_eq(_feintSkl_7847, null)) {
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_feintSkl_7847, 'Level'), 0, 0]);
        }
      }
      return [];
    })
    G.str['SCR_FEINT_ABIL'] = (function (_self, _caster) {
      var tmp;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
        tmp = lua_call(G.str['GetDir'], [_caster]); var _casterx_7851 = tmp[0]; var _casterz_7851 = tmp[1]; tmp = null;
        var _casterDir_7851 = lua_call(G.str['DirToAngle'], [_casterx_7851, _casterz_7851])[0];
        lua_call(G.str['sleep'], [300]);
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
          lua_call(G.str['HoldMonScp'], [_self]);
        }
        lua_call(G.str['SetDirectionByAngle'], [_self, _casterDir_7851]);
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
          lua_call(G.str['sleep'], [1500]);
          lua_call(G.str['UnHoldMonScp'], [_self]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Feint_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Damballa_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ActorVibrate'], [_self, 7, 1, 25, 0.1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Damballa_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp_Pos'], [_self, "ZOMBIE_VEC3"].concat(lua_call(G.str['GetPos'], [_self])));
      var _caster_7856 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      lua_call(G.str['Dead'], [_self]);
      lua_call(G.str['ActorVibrate'], [_self, 0, 0, 0, 0]);
      tmp = lua_call(G.str['SelectObjectNear'], [_caster_7856, _self, 50, "ENEMY"]); var _objList_7856 = tmp[0]; var _objCount_7856 = tmp[1]; tmp = null;
      lua_call(G.str['PlayEffect'], [_self, 'F_explosion093_dark', 0.7]);
      var _damage_7856 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_7856, _self, 'Bokor_Damballa'])[0];
      var _skill_7856 = lua_call(G.str['GET_MON_SKILL'], [_caster_7856, 'Bokor_Damballa'])[0];
      var _divineAtkAdd_7856 = lua_tableget(_skill_7856, 'SkillAtkAdd');
      var _addValue_7856 = 0;
      var _pad_7856 = lua_call(G.str['GetPadByBuff'], [_caster_7856, _buff])[0];
      if (!lua_eq(_pad_7856, null)) {
        _addValue_7856 = lua_call(G.str['GetPadArgNumber'], [_pad_7856, 1])[0];
      }
      _divineAtkAdd_7856 = lua_subtract(_addValue_7856, _divineAtkAdd_7856);
      if (lua_lt(_divineAtkAdd_7856, 0)) {
        _divineAtkAdd_7856 = 0;
      }
      if (lua_lt(lua_tableget(_skill_7856, 'SkillSR'), _objCount_7856)) {
        _objCount_7856 = lua_tableget(_skill_7856, 'SkillSR');
      }
      if ((!lua_eq(_objCount_7856, null) || !lua_eq(_objList_7856, null))) {
        var var_7861 = 1, stop_7861 = lua_assertfloat(_objCount_7856);
        for (; var_7861 <= stop_7861; var_7861++) {
          var _i_7861 = var_7861;
          var _obj_7862 = lua_tableget(_objList_7856, _i_7861);
          lua_call(G.str['TakeDamage'], [_caster_7856, _obj_7862, lua_tableget(_skill_7856, 'ClassName'), lua_add(_damage_7856, _divineAtkAdd_7856), "Dark", "Magic", "Magic", G.str['HIT_DARK'], G.str['HITRESULT_BLOW'], 0, 0]);
          var _abil_7862 = lua_call(G.str['GetAbility'], [_caster_7856, "Bokor6"])[0];
          if (lua_eq(_abil_7862, null)) {
            lua_call(G.str['SKL_TOOL_KD'], [_self, _obj_7862, 4, 0, 150, 50, 0, 3, 5]);
          }
        }
      }
      if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1)) {
        var _index_7864 = lua_call(G.str['IMCRandom'], [1, 100])[0];
        var _summonRate_7864 = 50;
        var _bokor4_abil_7864 = lua_call(G.str['GetAbility'], [_caster_7856, 'Bokor4'])[0];
        if (!lua_eq(_bokor4_abil_7864, null)) {
          _summonRate_7864 = lua_add(_summonRate_7864, lua_multiply(lua_tableget(_bokor4_abil_7864, 'Level'), 2));
        }
        if (lua_lt(_index_7864, _summonRate_7864)) {
          lua_call(G.str['RunScript'], ['SCR_SUMMON_ZOMBIE', _self, _caster_7856]);
          if (lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], 50)) {
            lua_call(G.str['RunScript'], ['SCR_SUMMON_ZOMBIE', _self, _caster_7856]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Zombify_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Zombify_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7869 = _arg1;
      var _caster_7869 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7869, null)) {
        var _pad_7870 = lua_call(G.str['GetPadByBuff'], [_caster_7869, _buff])[0];
        if (!lua_eq(_pad_7870, null)) {
          _lv_7869 = lua_call(G.str['GetPadArgNumber'], [_pad_7870, 1])[0];
        }
      }
      lua_call(G.str['SetExProp'], [_self, "SkillLv", _lv_7869]);
      if (lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1)) {
        if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "ZOMBIE_POS_FLAG"])[0], 1)) {
          tmp = lua_call(G.str['GetPos'], [_self]); var _x_7873 = tmp[0]; var _y_7873 = tmp[1]; var _z_7873 = tmp[2]; tmp = null;
          lua_call(G.str['SetExProp_Pos'], [_self, "ZOMBIE_VEC3", _x_7873, _y_7873, _z_7873]);
          lua_call(G.str['SetExProp'], [_self, "ZOMBIE_POS_FLAG", 1]);
        }
        if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "FLAG"])[0], 1)) {
          var _caster_7874 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          lua_call(G.str['RunScript'], ['SCR_SUMMON_ZOMBIE', _self, _caster_7874]);
          if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
            lua_call(G.str['SetExProp'], [_self, "FLAG", 1]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_EntangleSlow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7876 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.2);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7876));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7876]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_EntangleSlow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7877 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7877));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ScatterCaltrop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7878 = 10;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7878));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7878]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ScatterCaltrop_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7879 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7879));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aukuras_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7880 = _arg1;
      var _addHP_7880 = 0;
      var _addResfire_7880 = 0;
      var _caster_7880 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7880, null)) {
        var _skill_7881 = lua_call(G.str['GetSkill'], [_caster_7880, "Kriwi_Aukuras"])[0];
        if (!lua_eq(_skill_7881, null)) {
          _addHP_7880 = lua_divide(lua_multiply(lua_call(G.str['TryGetProp'], [_caster_7880, "HEAL_PWR"])[0], lua_tableget(_skill_7881, 'SkillFactor')), 100);
          var _abilKriwi6_7882 = lua_call(G.str['GetAbility'], [_caster_7880, "Kriwi6"])[0];
          if (!lua_eq(_abilKriwi6_7882, null)) {
            _addResfire_7880 = lua_multiply(lua_tableget(_abilKriwi6_7882, 'Level'), 14);
          }
        }
      }
      _addResfire_7880 = lua_tablegetcall(G.str['math'], 'floor', [_addResfire_7880])[0];
      lua_call(G.str['SetExProp'], [_buff, "ADD_HP_VALUE", _addHP_7880]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _addResfire_7880));
      } else {
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _addResfire_7880));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_RES_FIRE", _addResfire_7880]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Aukuras_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_7886 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7886, null)) {
        var _abilKriwi18_7887 = lua_call(G.str['GetAbility'], [_caster_7886, "Kriwi18"])[0];
        if ((!lua_eq(_abilKriwi18_7887, null) && lua_eq(lua_tableget(_abilKriwi18_7887, 'ActiveState'), 1))) {
          return [1];
        }
      }
      var _addHP_7886 = lua_call(G.str['GetExProp'], [_buff, "ADD_HP_VALUE"])[0];
      if ((!lua_eq(_addHP_7886, null) && !lua_eq(_addHP_7886, 0))) {
        lua_call(G.str['Heal'], [_self, _addHP_7886, 0, _ret, 'Kriwi_Aukuras']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aukuras_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addResfire_7890 = lua_call(G.str['GetExProp'], [_buff, "ADD_RES_FIRE"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _addResfire_7890));
      } else {
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _addResfire_7890));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aukuras_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hraddrate_7893 = 10;
      var _caster_7893 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7893, null)) {
        var _pad_7894 = lua_call(G.str['GetPadByBuff'], [_caster_7893, _buff])[0];
        if (!lua_eq(_pad_7894, null)) {
          G.str['lv'] = lua_call(G.str['GetPadArgNumber'], [_pad_7894, 1])[0];
        }
        _hraddrate_7893 = lua_add(_hraddrate_7893, lua_multiply((lua_subtract(G.str['lv'], 1)), 1));
      }
      if (lua_lt(lua_tableget(_self, 'HR'), _hraddrate_7893)) {
        _hraddrate_7893 = lua_subtract(lua_tableget(_self, 'HR'), 1);
      }
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hraddrate_7893));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hraddrate_7893]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aukuras_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hraddrate_7897 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hraddrate_7897));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aukuras_Buff_ReduceTime'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Aukuras_Buff_ReduceTime'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffList'], [_self]); var _list_7899 = tmp[0]; var _cnt_7899 = tmp[1]; tmp = null;
      var var_7900 = 1, stop_7900 = lua_assertfloat(_cnt_7899);
      for (; var_7900 <= stop_7900; var_7900++) {
        var _i_7900 = var_7900;
        var _debuff_7901 = lua_tableget(_list_7899, _i_7900);
        if (lua_eq(lua_tableget(_debuff_7901, 'Group1'), "Debuff")) {
          var _remainTime_7902 = lua_call(G.str['GetBuffRemainTime'], [_debuff_7901])[0];
          if (lua_lt(0, _remainTime_7902)) {
            _remainTime_7902 = lua_subtract(_remainTime_7902, 50);
            lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_debuff_7901, 'ClassName'), _remainTime_7902, 0]);
          }
          if (lua_eq(lua_tableget(_debuff_7901, 'ClassName'), "Hexing_Debuff")) {
            lua_call(G.str['SCR_ADD_CASTER_BUFF_REMAINTIME'], [_self, "Hexing_Debuff", "Hexing_Buff", _remainTime_7902]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aukuras_Buff_ReduceTime'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aukuras_Kriwi18_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addFireDamage_7906 = 0;
      var _caster_7906 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7906, null)) {
        var _lv_7907 = _arg1;
        var _skill_7907 = lua_call(G.str['GetSkill'], [_caster_7906, 'Kriwi_Aukuras'])[0];
        var _skillLevel_7907 = lua_call(G.str['TryGetProp'], [_skill_7907, 'Level'])[0];
        if (!lua_eq(_skillLevel_7907, null)) {
          _lv_7907 = _skillLevel_7907;
        }
        var _casterINT_7907 = lua_call(G.str['TryGetProp'], [_caster_7906, 'INT'])[0];
        if (lua_eq(_casterINT_7907, null)) {
          _casterINT_7907 = 1;
        }
        var _casterMNA_7907 = lua_call(G.str['TryGetProp'], [_caster_7906, 'MNA'])[0];
        if (lua_eq(_casterMNA_7907, null)) {
          _casterMNA_7907 = 1;
        }
        _addFireDamage_7906 = lua_add(lua_add(215, (lua_multiply((lua_power((lua_add(_casterINT_7907, _casterMNA_7907)), 0.9)), (lua_add(1, lua_divide(_lv_7907, 15)))))), (lua_multiply(_lv_7907, 43)));
      }
      _addFireDamage_7906 = lua_tablegetcall(G.str['math'], 'floor', [_addFireDamage_7906])[0];
      lua_call(G.str['SetBuffArgs'], [_buff, _addFireDamage_7906, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aukuras_Kriwi18_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Impact'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetPropType'], [_self, "Runnable"])[0], null)) {
        if (lua_eq(lua_tableget(_self, 'Runnable'), 1)) {
          lua_tableset(_self, 'Runnable', lua_subtract(lua_tableget(_self, 'Runnable'), 1));
        }
      }
      var _mspdadd_7912 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.5);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7912));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7912]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Impact'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7915 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7915));
      if (!lua_eq(lua_call(G.str['GetPropType'], [_self, "Runnable"])[0], null)) {
        if (lua_eq(lua_tableget(_self, 'Runnable'), 0)) {
          lua_tableset(_self, 'Runnable', lua_add(lua_tableget(_self, 'Runnable'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_honey_slow'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetPropType'], [_self, "Runnable"])[0], null)) {
        lua_tableset(_self, 'Runnable', lua_subtract(lua_tableget(_self, 'Runnable'), 1));
      }
      var _lv_7918 = _arg1;
      var _mspdadd_7918 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.6);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7918));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7918]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_honey_slow'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7920 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7920));
      if (!lua_eq(lua_call(G.str['GetPropType'], [_self, "Runnable"])[0], null)) {
        lua_tableset(_self, 'Runnable', lua_add(lua_tableget(_self, 'Runnable'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ElectricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      }
      var _lv_7922 = _arg1;
      var _mspdadd_7922 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.5);
      var _defadd_7922 = lua_multiply(lua_tableget(_self, 'DEF'), 0.3);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7922));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_7922));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7922]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_7922]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ElectricShock'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_7924 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      var _defadd_7924 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7924));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_7924));
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_SPAndStaUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), 2));
      lua_tableset(_self, 'RSPTIME_BM', lua_subtract(lua_tableget(_self, 'RSPTIME_BM'), 2500));
      lua_tableset(_self, 'RSta_BM', lua_add(lua_tableget(_self, 'RSta_BM'), 1000));
      lua_call(G.str['ResetRSPTime'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SPAndStaUP'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), 2));
      lua_tableset(_self, 'RSPTIME_BM', lua_add(lua_tableget(_self, 'RSPTIME_BM'), 2500));
      lua_tableset(_self, 'RSta_BM', lua_subtract(lua_tableget(_self, 'RSta_BM'), 1000));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7928 = _arg1;
      var _intsubtract_7928 = lua_multiply(lua_tableget(_self, 'INT'), (lua_add(0.5, lua_multiply(_lv_7928, 0.25))));
      var _defsubtract_7928 = lua_multiply(lua_tableget(_self, 'DEF'), (lua_add(0.5, lua_multiply(_lv_7928, 0.25))));
      var _stradd_7928 = lua_multiply(lua_tableget(_self, 'STR'), (lua_add(0.5, lua_multiply(_lv_7928, 0.25))));
      var _atkadd_7928 = lua_multiply(lua_tableget(_self, 'MINMATK'), (lua_add(0.5, lua_multiply(_lv_7928, 0.25))));
      var _mspdadd_7928 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_add(0.2, lua_multiply(_lv_7928, 0.1))));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intsubtract_7928));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defsubtract_7928));
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_7928));
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_7928));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7928));
      lua_call(G.str['SetExProp'], [_buff, "SUBSTRACT_INT", _intsubtract_7928]);
      lua_call(G.str['SetExProp'], [_buff, "SUBSTRACT_DEF", _defsubtract_7928]);
      lua_call(G.str['SetExProp'], [_buff, "SUBSTRACT_RR", G.str['rrsubtract']]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_7928]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_7928]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7928]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intsubtract_7929 = lua_call(G.str['GetExProp'], [_buff, "SUBSTRACT_INT"])[0];
      var _defsubtract_7929 = lua_call(G.str['GetExProp'], [_buff, "SUBSTRACT_DEF"])[0];
      var _rrsubtract_7929 = lua_call(G.str['GetExProp'], [_buff, "SUBSTRACT_RR"])[0];
      var _stradd_7929 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _atkadd_7929 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      var _mspdadd_7929 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intsubtract_7929));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defsubtract_7929));
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_7929));
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkadd_7929));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7929));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_stout'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_7930 = 0.5;
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _atkadd_7930));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_7930]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_stout'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_7931 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _atkadd_7931));
      return [];
    })
    G.str['SCR_BUFF_ENTER_AfterEffect'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_7932 = _arg1;
      var _atkadd_7932 = 0.5;
      var _defadd_7932 = 0.5;
      var _matkadd_7932 = 0.5;
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkadd_7932));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_7932));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_7932));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _matkadd_7932]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_7932]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_7932]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_RR", G.str['rradd']]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AfterEffect'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_7933 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      var _defadd_7933 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _matkadd_7933 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      var _rradd_7933 = lua_call(G.str['GetExProp'], [_buff, "ADD_RR"])[0];
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_7933));
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_7933));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_7933));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hexing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hexing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hexing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_7936 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _mdefadd_7936 = 0;
      var _skill_7936 = lua_call(G.str['GetSkill'], [_caster_7936, "Featherfoot_Kurdaitcha"])[0];
      if ((!lua_eq(_skill_7936, null) && lua_eq(lua_tableget(_skill_7936, 'ClassName'), "Featherfoot_Kurdaitcha"))) {
        _mdefadd_7936 = lua_add(0.04, (lua_multiply(_arg1, 0.005)));
      } else {
        _mdefadd_7936 = lua_add(0.03, (lua_multiply(_arg1, 0.005)));
      }
      if (!lua_eq(_caster_7936, null)) {
        var _Bokor9_abil_7939 = lua_call(G.str['GetAbility'], [_caster_7936, "Bokor9"])[0];
        if (!lua_eq(_Bokor9_abil_7939, null)) {
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Bokor9_abil_7939, 'Level'), 0, 0]);
        }
      }
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_7936));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_7936]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hexing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_7941 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_7941));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Effigy_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Effigy_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwellLeftArm_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addValue_7944 = 0;
      var _patkadd_7944 = 0;
      var _matkadd_7944 = 0;
      var _item_7944 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (!lua_eq(lua_tableget(_item_7944, 'ClassName'), "NoWeapon")) {
        var _lv_7945 = _arg1;
        var _caster_7945 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_7945, null)) {
          var _pad_7946 = lua_call(G.str['GetPadByBuff'], [_caster_7945, _buff])[0];
          if (!lua_eq(_pad_7946, null)) {
            _lv_7945 = lua_call(G.str['GetPadArgNumber'], [_pad_7946, 1])[0];
          }
          var _defaultAdd_7946 = 70;
          var _INT_7946 = lua_call(G.str['TryGetProp'], [_caster_7945, "INT"])[0];
          var _MNA_7946 = lua_call(G.str['TryGetProp'], [_caster_7945, "MNA"])[0];
          _addValue_7944 = lua_add(lua_add(_defaultAdd_7946, (lua_multiply((lua_subtract(_lv_7945, 1)), 12))), lua_multiply((lua_divide(_lv_7945, 5)), lua_power((lua_multiply((lua_add(_INT_7946, _MNA_7946)), 0.6)), 0.9)));
          var _SwellLeftArmSkill_7946 = lua_call(G.str['GetSkill'], [_caster_7945, "Thaumaturge_SwellLeftArm"])[0];
          var _SwellBodySkill_7946 = lua_call(G.str['GetSkill'], [_caster_7945, "Thaumaturge_SwellBody"])[0];
          var _ShrinkBodySkill_7946 = lua_call(G.str['GetSkill'], [_caster_7945, "Thaumaturge_ShrinkBody"])[0];
          var _Thaumaturge11_abil_7946 = lua_call(G.str['GetAbility'], [_caster_7945, "Thaumaturge11"])[0];
          if ((!lua_eq(_Thaumaturge11_abil_7946, null) && lua_lte(3, lua_tableget(_SwellLeftArmSkill_7946, 'Level')))) {
            _addValue_7944 = lua_multiply(_addValue_7944, (lua_add(1, lua_multiply(lua_tableget(_Thaumaturge11_abil_7946, 'Level'), 0.01))));
          }
          var _Thaumaturge6_abil_7946 = lua_call(G.str['GetAbility'], [_caster_7945, "Thaumaturge6"])[0];
          var _Thaumaturge7_abil_7946 = lua_call(G.str['GetAbility'], [_caster_7945, "Thaumaturge7"])[0];
          tmp = [0, 0]; var _arg3_7946 = tmp[0]; var _arg4_7946 = tmp[1]; tmp = null;
          if (((!lua_eq(_Thaumaturge6_abil_7946, null) && !lua_eq(_ShrinkBodySkill_7946, null)) && lua_lte(2, lua_tableget(_ShrinkBodySkill_7946, 'Level')))) {
            _arg3_7946 = lua_tableget(_Thaumaturge6_abil_7946, 'Level');
          }
          if (((!lua_eq(_Thaumaturge7_abil_7946, null) && !lua_eq(_SwellBodySkill_7946, null)) && lua_lte(2, lua_tableget(_SwellBodySkill_7946, 'Level')))) {
            _arg4_7946 = lua_tableget(_Thaumaturge7_abil_7946, 'Level');
          }
          lua_call(G.str['SetBuffArgs'], [_buff, _arg3_7946, _arg4_7946, 0]);
        }
        _patkadd_7944 = lua_tablegetcall(G.str['math'], 'floor', [_addValue_7944])[0];
        _matkadd_7944 = lua_tablegetcall(G.str['math'], 'floor', [_addValue_7944])[0];
        lua_tableset(_self, 'PATK_MAIN_BM', lua_add(lua_tableget(_self, 'PATK_MAIN_BM'), _patkadd_7944));
        lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_7944));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_7944]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_7944]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwellLeftArm_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_7951 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_7951 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_MAIN_BM', lua_subtract(lua_tableget(_self, 'PATK_MAIN_BM'), _patkadd_7951));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_7951));
      return [];
    })
    G.str['UPDATE_USER_ADD_PROPERTY'] = (function (_self, _buff, _arg1) {
      var tmp;
      var _hradd_7952 = 0;
      var _dradd_7952 = 0;
      var _addtype_7952 = 0;
      var _abilLevel_7952 = 0;
      var _addValue_7952 = 0;
      var _defualtAtkAdd_7952 = 45;
      var _defualtDefAdd_7952 = 90;
      var _caster_7952 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(null, _caster_7952)) {
        var _abil_7953 = lua_call(G.str['GetAbility'], [_caster_7952, "Thaumaturge8"])[0];
        if (!lua_eq(_abil_7953, null)) {
          _abilLevel_7952 = lua_tableget(_abil_7953, 'Level');
        }
      }
      var _item_7952 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      if ((lua_eq(lua_tableget(_item_7952, 'ClassName'), 'NoWeapon') || ((((!lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Shield') && !lua_eq(lua_tableget(_item_7952, 'AttachType'), 'dagger')) && !lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Pistol')) && !lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Sword')) && !lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Cannon')))) {
        _hradd_7952 = lua_multiply(_abilLevel_7952, 30);
        _dradd_7952 = lua_multiply(_abilLevel_7952, 30);
        lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hradd_7952));
        lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_7952));
        lua_call(G.str['Invalidate'], [_self, 'HR']);
        lua_call(G.str['Invalidate'], [_self, 'DR']);
      } else {
        var _lv_7956 = _arg1;
        var _caster_7956 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_7956, null)) {
          var _pad_7957 = lua_call(G.str['GetPadByBuff'], [_caster_7956, _buff])[0];
          if (!lua_eq(_pad_7957, null)) {
            _lv_7956 = lua_call(G.str['GetPadArgNumber'], [_pad_7957, 1])[0];
          }
          var _INT_7957 = lua_call(G.str['TryGetProp'], [_caster_7956, "INT"])[0];
          var _MNA_7957 = lua_call(G.str['TryGetProp'], [_caster_7956, "MNA"])[0];
          if (lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Shield')) {
            _addValue_7952 = lua_add(lua_add(_defualtDefAdd_7952, lua_multiply((lua_subtract(_lv_7956, 1)), 20)), lua_multiply((lua_divide(_lv_7956, 5)), lua_power((lua_multiply((lua_add(_INT_7957, _MNA_7957)), 0.7)), 0.9)));
          } else if ((((lua_eq(lua_tableget(_item_7952, 'AttachType'), 'dagger') || lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Pistol')) || lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Sword')) || lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Cannon'))) {
            _addValue_7952 = lua_add(lua_add(_defualtAtkAdd_7952, lua_multiply((lua_subtract(_lv_7956, 1)), 10)), lua_multiply((lua_divide(_lv_7956, 5)), lua_power((lua_multiply((lua_add(_INT_7957, _MNA_7957)), 0.6)), 0.9)));
          }
          var _skill_7957 = lua_call(G.str['GetSkill'], [_caster_7956, "Thaumaturge_SwellRightArm"])[0];
          if (lua_eq(_skill_7957, null)) {
            return [];
          }
          var _Thaumaturge14_abil_7957 = lua_call(G.str['GetAbility'], [_caster_7956, "Thaumaturge14"])[0];
          if ((!lua_eq(_Thaumaturge14_abil_7957, null) && lua_lte(3, lua_tableget(_skill_7957, 'Level')))) {
            _addValue_7952 = lua_multiply(_addValue_7952, (lua_add(1, lua_multiply(lua_tableget(_Thaumaturge14_abil_7957, 'Level'), 0.01))));
          }
        }
        _addValue_7952 = lua_tablegetcall(G.str['math'], 'floor', [_addValue_7952])[0];
        if (lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Shield')) {
          lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _addValue_7952));
          _addtype_7952 = 1;
          lua_call(G.str['Invalidate'], [_self, 'DEF']);
        } else if ((((lua_eq(lua_tableget(_item_7952, 'AttachType'), 'dagger') || lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Pistol')) || lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Sword')) || lua_eq(lua_tableget(_item_7952, 'AttachType'), 'Cannon'))) {
          lua_tableset(_self, 'PATK_SUB_BM', lua_add(lua_tableget(_self, 'PATK_SUB_BM'), _addValue_7952));
          _addtype_7952 = 2;
          lua_call(G.str['Invalidate'], [_self, 'MAXPATK']);
          lua_call(G.str['Invalidate'], [_self, 'MINPATK']);
          lua_call(G.str['Invalidate'], [_self, 'MAXMATK']);
          lua_call(G.str['Invalidate'], [_self, 'MINMATK']);
        }
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_TYPE", _addtype_7952]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_PHYSICAL", _addValue_7952]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MAGICAL", _addValue_7952]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _addValue_7952]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _addValue_7952]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hradd_7952]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_7952]);
      lua_call(G.str['SetExProp_Str'], [_buff, "ItemGUID"].concat(lua_call(G.str['GetItemGuid'], [_item_7952])));
      return [];
    })
    G.str['UPDATE_USER_MINER_PROPERTY'] = (function (_self, _buff) {
      var tmp;
      var _addtype_7965 = lua_call(G.str['GetExProp'], [_buff, "ADD_TYPE"])[0];
      var _addValue_7965 = lua_call(G.str['GetExProp'], [_buff, "ADD_PHYSICAL"])[0];
      var _addValue_7965 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _addValue_7965 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      var _hradd_7965 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      var _dradd_7965 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      if (lua_eq(_addtype_7965, 0)) {
        lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hradd_7965));
        lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_7965));
        lua_call(G.str['Invalidate'], [_self, 'HR']);
        lua_call(G.str['Invalidate'], [_self, 'DR']);
      } else if (lua_eq(_addtype_7965, 1)) {
        lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addValue_7965));
        lua_call(G.str['Invalidate'], [_self, 'DEF']);
      } else if (lua_eq(_addtype_7965, 2)) {
        lua_tableset(_self, 'PATK_SUB_BM', lua_subtract(lua_tableget(_self, 'PATK_SUB_BM'), _addValue_7965));
        lua_call(G.str['Invalidate'], [_self, 'MAXPATK']);
        lua_call(G.str['Invalidate'], [_self, 'MINPATK']);
        lua_call(G.str['Invalidate'], [_self, 'MAXMATK']);
        lua_call(G.str['Invalidate'], [_self, 'MINMATK']);
      }
      lua_call(G.str['SetExProp_Str'], [_buff, "ItemGUID", "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwellRightArm_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _item_7969 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      if (lua_eq(null, _item_7969)) {
        return [];
      }
      var _casterINT_7969 = 0;
      var _caster_7969 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7969, null)) {
        _casterINT_7969 = lua_tableget(_caster_7969, 'INT');
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _casterINT_7969, 0, 0]);
      lua_call(G.str['UPDATE_USER_ADD_PROPERTY'], [_self, _buff, _arg1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SwellRightArm_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _item_7972 = lua_call(G.str['GetEquipItem'], [_self, 'LH'])[0];
      if (lua_eq(null, _item_7972)) {
        var _caster_7973 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (lua_eq(_caster_7973, null)) {
          return [0];
        }
        _RemainTime = lua_subtract(_RemainTime, 1000);
        if (lua_lte(_RemainTime, 0)) {
          return [0];
        }
        lua_call(G.str['AddBuff'], [_caster_7973, _self, lua_tableget(_buff, 'ClassName'), _arg1, _arg2, _RemainTime, 1]);
        return [1];
      }
      var _nowGuid_7972 = lua_call(G.str['GetItemGuid'], [_item_7972])[0];
      var _guid_7972 = lua_call(G.str['GetExProp_Str'], [_buff, "ItemGUID"])[0];
      if (!lua_eq(_nowGuid_7972, _guid_7972)) {
        var _caster_7976 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (lua_eq(_caster_7976, null)) {
          return [0];
        }
        _RemainTime = lua_subtract(_RemainTime, 1000);
        if (lua_lte(_RemainTime, 0)) {
          return [0];
        }
        lua_call(G.str['AddBuff'], [_caster_7976, _self, lua_tableget(_buff, 'ClassName'), _arg1, _arg2, _RemainTime, 1]);
        return [1];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwellRightArm_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['UPDATE_USER_MINER_PROPERTY'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mackangdal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "isMackangdal_Buff", 1]);
      lua_call(G.str['SetExProp'], [_self, "DamageConut", 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mackangdal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      G.str['damage'] = lua_call(G.str['GetExProp'], [_self, "DamageConut"])[0];
      lua_call(G.str['DelExProp'], [_self, "DamageConut"]);
      var _caster_7981 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7981, null)) {
        var _skill_7982 = lua_call(G.str['GetSkill'], [_caster_7981, "Bokor_Mackangdal"])[0];
        if (lua_eq(_skill_7982, null)) {
          return [];
        }
        var _bokor17_Abil_7982 = lua_call(G.str['GetAbility'], [_caster_7981, 'Bokor17'])[0];
        if ((!lua_eq(_bokor17_Abil_7982, null) && lua_lte(3, lua_tableget(_skill_7982, 'Level')))) {
          G.str['damage'] = lua_subtract(G.str['damage'], (lua_multiply(lua_tableget(_bokor17_Abil_7982, 'Level'), 2)));
        }
        if (lua_lte(G.str['damage'], 0)) {
          lua_call(G.str['DelExProp'], [_self, "isMackangdal_Buff"]);
          return [];
        }
      }
      lua_call(G.str['DelExProp'], [_self, "isMackangdal_Buff"]);
      lua_call(G.str['TakeDamage'], [_buff, _self, "None", G.str['damage'], "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_OgouVeve_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_7986 = 0;
      var _sradd_7986 = 0;
      var _lv_7986 = _arg1;
      var _caster_7986 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7986, null)) {
        var _pad_7987 = lua_call(G.str['GetPadByBuff'], [_caster_7986, _buff])[0];
        if (!lua_eq(_pad_7987, null)) {
          _lv_7986 = lua_call(G.str['GetPadArgNumber'], [_pad_7987, 1])[0];
        }
        _stradd_7986 = lua_multiply(_lv_7986, 5);
        _sradd_7986 = lua_add(1, lua_multiply(_lv_7986, 0.5));
      }
      _stradd_7986 = lua_tablegetcall(G.str['math'], 'floor', [_stradd_7986])[0];
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_7986));
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), _sradd_7986));
      lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_7986]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_SR", _sradd_7986]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_OgouVeve_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_7989 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _sradd_7989 = lua_call(G.str['GetExProp'], [_buff, "ADD_SR"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_7989));
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _sradd_7989));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ogouveve_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _decreaseStr_7990 = lua_multiply(_arg2, 2);
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _decreaseStr_7990));
      lua_call(G.str['SetExProp'], [_buff, "DECREASE_STR_ABIL", _decreaseStr_7990]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ogouveve_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _decreaseStr_7991 = lua_multiply(_arg2, 2);
      var _stradd_7991 = lua_call(G.str['GetExProp'], [_buff, "DECREASE_STR_ABIL"])[0];
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _decreaseStr_7991));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Samdiveve_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7992 = 0;
      var _mspdadd_7992 = 0;
      var _lv_7992 = _arg1;
      var _caster_7992 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7992, null)) {
        var _pad_7993 = lua_call(G.str['GetPadByBuff'], [_caster_7992, _buff])[0];
        if (!lua_eq(_pad_7993, null)) {
          _lv_7992 = lua_call(G.str['GetPadArgNumber'], [_pad_7993, 1])[0];
        }
      }
      _mhpadd_7992 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(298.6, ((lua_multiply(lua_tableget(_caster_7992, 'MHP'), (lua_multiply(0.005, _lv_7992))))))])[0];
      _mspdadd_7992 = lua_add(3, lua_multiply(_lv_7992, 1));
      var _zone_7992 = lua_call(G.str['GetZoneName'], [_self])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1) || lua_eq(_zone_7992, 'pvp_Mine'))) {
        _mspdadd_7992 = lua_multiply(_mspdadd_7992, 0.5);
      }
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_7992));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7992));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _mhpadd_7992]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7992]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Samdiveve_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7996 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
      var _mspdadd_7996 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_7996));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7996));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SamdivevePc_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7997 = 0;
      var _mspdadd_7997 = 0;
      var _lv_7997 = _arg1;
      var _caster_7997 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_7997, null)) {
        _mhpadd_7997 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(298.6, ((lua_multiply(lua_tableget(_caster_7997, 'MHP'), (lua_multiply(0.005, _lv_7997))))))), 2)])[0];
        _mspdadd_7997 = lua_divide((lua_add(3, lua_multiply(_lv_7997, 1))), 2);
        lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_7997));
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7997));
        lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _mhpadd_7997]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_7997]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SamdivevePc_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mhpadd_7999 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
      var _mspdadd_7999 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_7999));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_7999));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Barrier_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_8000 = 0;
      var _lv_8000 = _arg1;
      var _mdefrate_8000 = lua_multiply((lua_subtract(lua_tableget(_self, 'MDEF'), lua_tableget(_self, 'MDEF_BM'))), (lua_multiply(0.1, _arg1)));
      var _caster_8000 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8000, null)) {
        var _pad_8001 = lua_call(G.str['GetPadByBuff'], [_caster_8000, _buff])[0];
        if (!lua_eq(_pad_8001, null)) {
          _lv_8000 = lua_call(G.str['GetPadArgNumber'], [_pad_8001, 1])[0];
        }
      }
      var _defRate_8000 = 0;
      var _abil_8000 = lua_call(G.str['GetAbility'], [_caster_8000, "Paladin20"])[0];
      var _ActiveState_8000 = lua_call(G.str['TryGetProp'], [_abil_8000, "ActiveState"])[0];
      var _abilLevel_8000 = lua_call(G.str['TryGetProp'], [_abil_8000, "Level"])[0];
      if ((!lua_eq(_abil_8000, null) && lua_eq(_ActiveState_8000, 1))) {
        _defRate_8000 = lua_multiply(_abilLevel_8000, 0.04);
      }
      if (lua_eq(lua_call(G.str['IsSameActor'], [_caster_8000, _self])[0], "YES")) {
        lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defRate_8000));
        lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defRate_8000]);
      }
      _mdefadd_8000 = lua_add(lua_add(lua_add(30, (lua_multiply(_lv_8000, 20))), lua_tableget(_caster_8000, 'MNA')), _mdefrate_8000);
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_8000));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_8000]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Barrier_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_8005 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      var _defRate_8005 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defRate_8005));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_8005));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Freeze'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['LeaveEffect'], [_self, lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 'Freeze', lua_tableget(_buff, 'ClassName')]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Freeze'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cryomancer_Freeze'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['LeaveEffect'], [_self, lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 'Freeze', lua_tableget(_buff, 'ClassName')]);
      var _caster_8008 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Cryomancer9_abil_8008 = lua_call(G.str['GetAbility'], [_caster_8008, "Cryomancer9"])[0];
      if (!lua_eq(_Cryomancer9_abil_8008, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Cryomancer9_abil_8008, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cryomancer_Freeze'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cryomancer_FrostPillar'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['LeaveEffect'], [_self, lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 'Freeze', lua_tableget(_buff, 'ClassName')]);
      var _caster_8011 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Cryomancer9_abil_8011 = lua_call(G.str['GetAbility'], [_caster_8011, "Cryomancer9"])[0];
      if (!lua_eq(_Cryomancer9_abil_8011, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Cryomancer9_abil_8011, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cryomancer_FrostPillar'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DeedsOfValor'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DeedsOfValor'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Reflect'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _arg1));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Reflect'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _arg1));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sacrifice'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _arg1));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sacrifice'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _arg1));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _arg1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ReflectShield_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damratio_8020 = 50;
      var _Name_8020 = "";
      var _buffLv_8020 = _arg1;
      var _caster_8020 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8020, null)) {
        var _pad_8021 = lua_call(G.str['GetPadByBuff'], [_caster_8020, _buff])[0];
        if (!lua_eq(_pad_8021, null)) {
          _buffLv_8020 = lua_call(G.str['GetPadArgNumber'], [_pad_8021, 1])[0];
        }
        _Name_8020 = lua_call(G.str['GetName'], [_caster_8020])[0];
        var _shieldLv_8021 = 0;
        var _abilLv_8021 = 0;
        var _shield_8021 = lua_call(G.str['GetSkill'], [_caster_8020, 'Wizard_ReflectShield'])[0];
        if (!lua_eq(_shield_8021, null)) {
          _shieldLv_8021 = lua_tableget(_shield_8021, 'Level');
        }
        var _Wizard2_abil_8021 = lua_call(G.str['GetAbility'], [_caster_8020, "Wizard2"])[0];
        if ((!lua_eq(_Wizard2_abil_8021, null) && lua_lte(3, _shieldLv_8021))) {
          _abilLv_8021 = lua_tableget(_Wizard2_abil_8021, 'Level');
        }
        lua_call(G.str['SetBuffArgs'], [_buff, _shieldLv_8021, _abilLv_8021, lua_tableget(_caster_8020, 'MNA')]);
      }
      lua_tableset(_self, 'DamReflect', lua_add(lua_tableget(_self, 'DamReflect'), _damratio_8020));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DAMREFLCET", _damratio_8020]);
      lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", 0]);
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_8020)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_8020, "SHOW_ICE_SHIELD", lua_tableget(_buff, 'ClassID'), null, _Name_8020]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ReflectShield_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damratio_8026 = lua_call(G.str['GetExProp'], [_buff, "ADD_DAMREFLCET"])[0];
      lua_tableset(_self, 'DamReflect', lua_subtract(lua_tableget(_self, 'DamReflect'), _damratio_8026));
      lua_call(G.str['DetachEffect'], [_self, 'I_sphere007_mash']);
      lua_call(G.str['PlayEffect'], [_self, "F_wizard_reflect_shot_light", 1, 2, "BOT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_todal_shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_todal_shield'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ArmorBreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8029 = 0.5;
      var _mdefadd_8029 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8029));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8029));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8029]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _defadd_8029]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ArmorBreak'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8030 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_8030 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8030));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8030));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Destroy'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8031 = 0.1;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8031));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8031]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Destroy'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8032 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8032));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MissileHole_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "MISSILEHOLE_ATTACKED_COUNT", 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MissileHole_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Absorb'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Absorb'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeleHold'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TeleHold'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8038 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_caster_8038, "TeleCast"])[0], 'NO')) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TeleHold'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ActorVibrate'], [_self, 0, 0, 0, 0]);
      if ((lua_lte(_over, 1) || lua_eq(lua_call(G.str['IsDead'], [_self])[0], 1))) {
        var _caster_8041 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        lua_call(G.str['RemoveBuff'], [_caster_8041, 'TeleCast']);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Conquest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8042 = lua_tableget(_self, 'DEF');
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_8042));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8042]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Conquest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8043 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_8043));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShadowUmbrella'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetHideCheckScript'], [_self, "HIDE_FROM_GOBLINE"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShadowUmbrella'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetHideCheckScript'], [_self, "None"]);
      return [];
    })
    G.str['HIDE_FROM_GOBLINE'] = (function (_self, _attacker) {
      var tmp;
      if (lua_eq(lua_tableget(_attacker, 'RaceType'), "Widling")) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_ENTER_FluFlu_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8048 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8048, null)) {
        _caster_8048 = _buff;
      }
      lua_call(G.str['AddBuff'], [_caster_8048, _self, "Fear", _arg1, 0, lua_add(8000, lua_multiply(_arg1, 200)), 1]);
      lua_call(G.str['AddBuff'], [_caster_8048, _self, "Confuse", _arg1, 0, lua_add(8000, lua_multiply(_arg1, 200)), 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FluFlu_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FluFlu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8051 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8051, null)) {
        _caster_8051 = _buff;
      }
      lua_call(G.str['AddBuff'], [_caster_8051, _self, "Fear", _arg1, 0, lua_add(8000, lua_multiply(_arg1, 200)), 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FluFlu_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ion'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Ion'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _damage_8055 = lua_call(G.str['GetExProp'], [_self, "IonDamage"])[0];
      var _range_8055 = 50;
      var _count_8055 = lua_add(1, _arg1);
      tmp = lua_call(G.str['SelectObjectNear'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], _self, _range_8055, 'ENEMY']); var _objList_8055 = tmp[0]; var _objCount_8055 = tmp[1]; tmp = null;
      _count_8055 = lua_tablegetcall(G.str['math'], 'min', [_objCount_8055, _count_8055])[0];
      var var_8056 = 1, stop_8056 = lua_assertfloat(_count_8055);
      for (; var_8056 <= stop_8056; var_8056++) {
        var _i_8056 = var_8056;
        var _obj_8057 = lua_tableget(_objList_8055, _i_8056);
        if (lua_eq(lua_call(G.str['IsSameActor'], [_obj_8057, _self])[0], "NO")) {
          var _caster_8058 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          if (lua_eq(_caster_8058, null)) {
            _caster_8058 = _buff;
          }
          lua_call(G.str['TakeDamage'], [_caster_8058, _obj_8057, "None", lua_call(G.str['IMCRandom'], [lua_divide(_damage_8055, 3), lua_divide(_damage_8055, 2)])[0], "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ion'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HeavyBleeding'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8061 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8061, null)) {
        _caster_8061 = _buff;
      }
      var _damage_8061 = lua_divide((lua_add(lua_tableget(_caster_8061, 'MINPATK'), lua_tableget(_caster_8061, 'MAXPATK'))), 5);
      lua_call(G.str['SetBuffArgs'], [_buff, _damage_8061, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HeavyBleeding'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8063 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8063, null)) {
        _caster_8063 = _buff;
      }
      var _damage_8063 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        if (lua_eq(lua_tableget(_self, 'MonRank'), 'Boss')) {
          lua_call(G.str['TakeDamage'], [_caster_8063, _self, "None", lua_divide(lua_tableget(_self, 'MHP'), 200), "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
        } else {
          lua_call(G.str['TakeDamage'], [_caster_8063, _self, "None", lua_divide(lua_tableget(_self, 'MHP'), 20), "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      } else if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        lua_call(G.str['RemoveBuffGroup'], [_self, 'Debuff', 'Wound', 1, 5]);
        lua_call(G.str['TakeDamage'], [_caster_8063, _self, "None", _damage_8063, "None", "None", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HeavyBleeding'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SoldierDead'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetHittable'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SoldierDead'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _remainSec_8071 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_RemainTime, 1000)])[0];
      if (lua_lte(_remainSec_8071, 0)) {
        lua_call(G.str['Chat'], [_self, "", 0.01]);
      } else {
        lua_call(G.str['Chat'], [_self].concat(lua_call(G.str['tostring'], [_remainSec_8071])));
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SoldierDead'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddHP'], [_self, lua_tableget(_self, 'MHP')]);
      lua_call(G.str['SendDummyPCHP'], [_self]);
      lua_call(G.str['SetHittable'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_mario'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_mario'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 50, 'ENEMY']); var _objList_8076 = tmp[0]; var _objCount_8076 = tmp[1]; tmp = null;
      var var_8077 = 1, stop_8077 = lua_assertfloat(_objCount_8076);
      for (; var_8077 <= stop_8077; var_8077++) {
        var _i_8077 = var_8077;
        var _obj_8078 = lua_tableget(_objList_8076, _i_8077);
        if (!lua_eq(_obj_8078, null)) {
          tmp = lua_call(G.str['GetPos'], [_obj_8078]); var _x_8079 = tmp[0]; var _y_8079 = tmp[1]; var _z_8079 = tmp[2]; tmp = null;
          var _gold_8079 = lua_tableget(_obj_8078, 'Level');
          var _drop_classname_8079 = lua_call(G.str['CalcVisSize'], [_gold_8079])[0];
          var _mon_8079 = lua_call(G.str['GetClassByStrProp'], ["Monster", "ClassName", _drop_classname_8079])[0];
          if (!lua_eq(lua_call(G.str['GetClassByType'], ["Monster", lua_tableget(_mon_8079, 'ClassID')])[0], null)) {
            var _rdObj_8080 = lua_call(G.str['CreateGCIESByID'], ['Monster', lua_tableget(_mon_8079, 'ClassID')])[0];
            lua_tableset(_rdObj_8080, 'ItemCount', _gold_8079);
            var _item_8080 = lua_call(G.str['CREATE_ITEM'], [_self, _rdObj_8080, _self, _x_8079, _y_8079, _z_8079, 0, 1])[0];
            if (!lua_eq(_item_8080, null)) {
              lua_call(G.str['SetExProp'], [_item_8080, "KD_POWER_MAX", 270]);
              lua_call(G.str['SetExProp'], [_item_8080, "KD_POWER_MIN", 120]);
            }
          }
          lua_call(G.str['PlayEffectToGround'], [_self, 'F_light064_blue', _x_8079, _y_8079, _z_8079, 0.7, 1]);
          lua_call(G.str['Kill'], [_obj_8078]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_mario'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DetachEffect'], [_self, 'F_levitation024_yellow']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Rockto_spd'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8083 = lua_multiply(lua_tableget(_self, 'MSPD'), 1.1);
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8083));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8083]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Rockto_spd'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8084 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8084));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Rockto_spd_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8085 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.7);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8085));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8085]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Rockto_spd_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8086 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8086));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Rockto_atk_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8087 = lua_multiply(lua_tableget(_self, 'MINMATK'), 0.5);
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _atkadd_8087));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_8087]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Rockto_atk_down'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8088 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _atkadd_8088));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Rockto_atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8089 = 0.5;
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _atkadd_8089));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_8089]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Rockto_atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8090 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _atkadd_8090));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rage_Rockto_def'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8091 = 0.6;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8091));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8091]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rage_Rockto_def'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8092 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8092));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Weaken'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8093 = 0.5;
      var _atkadd_8093 = lua_multiply(lua_tableget(_self, 'MINMATK'), 0.5);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8093));
      lua_tableset(_self, 'ATK_BM', lua_subtract(lua_tableget(_self, 'ATK_BM'), _atkadd_8093));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8093]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_8093]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Weaken'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8094 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _atkadd_8094 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8094));
      lua_tableset(_self, 'ATK_BM', lua_add(lua_tableget(_self, 'ATK_BM'), _atkadd_8094));
      return [];
    })
    G.str['SCR_BUFF_ENTER_PhalanxFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _arg3_8095 = tmp[0]; var _arg4_8095 = tmp[1]; var _arg5_8095 = tmp[2]; tmp = null;
      if (lua_eq(_arg3_8095, 0)) {
        var _caster_8096 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _abil_8096 = lua_call(G.str['GetAbility'], [_caster_8096, "Centurion1"])[0];
        if (!lua_eq(_abil_8096, null)) {
          _arg3_8095 = lua_tableget(_abil_8096, 'Level');
          lua_call(G.str['SetBuffArgs'], [_buff, _arg3_8095, _arg4_8095, _arg5_8095]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PhalanxFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffOwner_8098 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_buffOwner_8098])[0])) {
        if (lua_lt(0, lua_tableget(_self, 'SP'))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.01))]);
        } else {
          lua_call(G.str['RunFormation'], [_self, lua_call(G.str['GetSkill'], [_self, "Centurion_PhalanxFormation"])[0], "None"]);
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PhalanxFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WedgeFormation_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WedgeFormation_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffOwner_8104 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_buffOwner_8104])[0])) {
        if (lua_lt(0, lua_tableget(_self, 'SP'))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.01))]);
        } else {
          lua_call(G.str['RunFormation'], [_self, lua_call(G.str['GetSkill'], [_self, "Centurion_WedgeFormation"])[0], "None"]);
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WedgeFormation_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WingedFormation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8109 = lua_multiply(lua_tableget(_self, 'DEF'), (lua_add(0.5, (lua_multiply(0.03, _arg1)))));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_8109));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8109]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WingedFormation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8110 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_8110));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TercioFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TercioFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffOwner_8112 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_buffOwner_8112])[0])) {
        if (lua_lt(0, lua_tableget(_self, 'SP'))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.01))]);
        } else {
          lua_call(G.str['RunFormation'], [_self, lua_call(G.str['GetSkill'], [_self, "Centurion_TercioFormation"])[0], "None"]);
          return [0];
        }
      }
      var _propValue_8112 = lua_call(G.str['GetExProp'], [_buff, 'DEF_BM'])[0];
      if (lua_lt(0, _propValue_8112)) {
        tmp = lua_call(G.str['SelectObject'], [_self, 100, 'ENEMY']); var _objList_8116 = tmp[0]; var _objCount_8116 = tmp[1]; tmp = null;
        var var_8117 = 1, stop_8117 = lua_assertfloat(_objCount_8116);
        for (; var_8117 <= stop_8117; var_8117++) {
          var _i_8117 = var_8117;
          var _obj_8118 = lua_tableget(_objList_8116, _i_8117);
          if (!lua_eq(_obj_8118, null)) {
            var _topAttacker_8119 = lua_call(G.str['GetTopHatePointChar'], [_obj_8118])[0];
            if (!lua_eq(_topAttacker_8119, null)) {
              var _atkerHate_8120 = lua_call(G.str['GetHate'], [_obj_8118, _topAttacker_8119])[0];
              var _myHate_8120 = lua_call(G.str['GetHate'], [_obj_8118, _self])[0];
              if (lua_lte(_myHate_8120, _atkerHate_8120)) {
                var _addHate_8121 = lua_add(_atkerHate_8120, 500);
                lua_call(G.str['InsertHate'], [_obj_8118, _self, _addHate_8121]);
              }
            } else {
              lua_call(G.str['InsertHate'], [_obj_8118, _self, 500]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TercioFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WingedFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WingedFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffOwner_8125 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_buffOwner_8125])[0])) {
        if (lua_lt(0, lua_tableget(_self, 'SP'))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.01))]);
        } else {
          lua_call(G.str['RunFormation'], [_self, lua_call(G.str['GetSkill'], [_self, "Centurion_WingedFormation"])[0], "None"]);
          return [0];
        }
      }
      tmp = lua_call(G.str['SelectObject'], [_self, 300, 'ENEMY']); var _objList_8125 = tmp[0]; var _objCount_8125 = tmp[1]; tmp = null;
      var var_8129 = 1, stop_8129 = lua_assertfloat(_objCount_8125);
      for (; var_8129 <= stop_8129; var_8129++) {
        var _i_8129 = var_8129;
        var _obj_8130 = lua_tableget(_objList_8125, _i_8129);
        if (!lua_eq(_obj_8130, null)) {
          var _topAttacker_8131 = lua_call(G.str['GetTopHatePointChar'], [_obj_8130])[0];
          if (!lua_eq(_topAttacker_8131, null)) {
            var _atkerHate_8132 = lua_call(G.str['GetHate'], [_obj_8130, _topAttacker_8131])[0];
            var _myHate_8132 = lua_call(G.str['GetHate'], [_obj_8130, _self])[0];
            if (lua_lte(_myHate_8132, _atkerHate_8132)) {
              var _addHate_8133 = lua_add(_atkerHate_8132, 500);
              lua_call(G.str['InsertHate'], [_obj_8130, _self, _addHate_8133]);
            }
          } else {
            lua_call(G.str['InsertHate'], [_obj_8130, _self, 500]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WingedFomation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SchiltronFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addrhptime_8136 = 0;
      var _caster_8136 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_8136 = lua_call(G.str['GetAbility'], [_caster_8136, "Centurion4"])[0];
      if (!lua_eq(_abil_8136, null)) {
        _addrhptime_8136 = lua_add(_addrhptime_8136, lua_multiply(lua_tableget(_abil_8136, 'Level'), 2000));
      }
      lua_tableset(_self, 'RHPTIME_BM', lua_add(lua_tableget(_self, 'RHPTIME_BM'), _addrhptime_8136));
      lua_call(G.str['SetExProp'], [_buff, "ADD_RHPTIME", _addrhptime_8136]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SchiltronFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffOwner_8138 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['GetHandle'], [_self])[0], lua_call(G.str['GetHandle'], [_buffOwner_8138])[0])) {
        if (lua_lt(0, lua_tableget(_self, 'SP'))) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.01))]);
        } else {
          lua_call(G.str['RunFormation'], [_self, lua_call(G.str['GetSkill'], [_self, "Centurion_SchiltronFormation"])[0], "None"]);
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SchiltronFormation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addrhptime_8142 = lua_call(G.str['GetExProp'], [_buff, "ADD_RHPTIME"])[0];
      lua_tableset(_self, 'RHPTIME_BM', lua_subtract(lua_tableget(_self, 'RHPTIME_BM'), _addrhptime_8142));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Moldy_skill'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8143 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.5);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8143));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8143]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Moldy_skill'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, lua_unm(lua_multiply(lua_tableget(_self, 'MSP'), 0.2))]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Moldy_skill'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8145 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8145));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Summoning_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Summoning_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Summoning_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetFollowerList'], [_self]); var _list_8148 = tmp[0]; var _cnt_8148 = tmp[1]; tmp = null;
      var _handle_8148 = lua_call(G.str['GetExProp'], [_self, 'SORCERER_SUMMONING'])[0];
      var var_8149 = 1, stop_8149 = lua_assertfloat(_cnt_8148);
      for (; var_8149 <= stop_8149; var_8149++) {
        var _i_8149 = var_8149;
        var _fol_8150 = lua_tableget(_list_8148, _i_8149);
        if (lua_eq(lua_call(G.str['GetHandle'], [_fol_8150])[0], _handle_8148)) {
          lua_call(G.str['Dead'], [_fol_8150]);
          break;
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Moldy_skill_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Moldy_skill_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _lv_8153 = _arg1;
      var _caster_8153 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8153, null)) {
        _caster_8153 = _buff;
      }
      var _avgAtk_8153 = lua_divide((lua_add(lua_tableget(_caster_8153, 'MINMATK'), lua_tableget(_caster_8153, 'MAXMATK'))), 2);
      lua_call(G.str['TakeDamage'], [_caster_8153, _self, "None", lua_divide((lua_multiply((lua_add(lua_tableget(_caster_8153, 'MINMATK'), lua_tableget(_caster_8153, 'MAXMATK'))), (lua_add(1, (lua_multiply(_lv_8153, 0.1)))))), 10), "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Moldy_skill_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Moldy_skill_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Moldy_skill_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['IS_CONTAIN_KEYWORD_BUFF'] = (function (_buff, __keyword) {
      var tmp;
      var _keyword_8158 = lua_call(G.str['TryGetProp'], [_buff, 'Keyword', 'None'])[0];
      if (!lua_eq(_keyword_8158, 'None')) {
        var _keywordList_8159 = lua_call(G.str['StringSplit'], [_keyword_8158, ';'])[0];
        var var_8160 = 1, stop_8160 = lua_assertfloat(lua_len(_keywordList_8159));
        for (; var_8160 <= stop_8160; var_8160++) {
          var _j_8160 = var_8160;
          if (lua_eq(lua_tableget(_keywordList_8159, _j_8160), __keyword)) {
            return [true];
          }
        }
      }
      return [false];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Melstis_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8163 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_8163 = lua_call(G.str['GetSkill'], [_caster_8163, "Kriwi_Melstis"])[0];
      if (!lua_eq(_caster_8163, null)) {
        tmp = lua_call(G.str['GetBuffList'], [_self]); var _buff_list_8164 = tmp[0]; var _buff_cnt_8164 = tmp[1]; tmp = null;
        if (lua_lte(1, _buff_cnt_8164)) {
          var var_8166 = 1, stop_8166 = lua_assertfloat(_buff_cnt_8164);
          for (; var_8166 <= stop_8166; var_8166++) {
            var _i_8166 = var_8166;
            if (!lua_eq(lua_call(G.str['TryGetProp'], [lua_tableget(_buff_list_8164, _i_8166), "Premium"])[0], "PC")) {
              if (((lua_eq(lua_call(G.str['TryGetProp'], [lua_tableget(_buff_list_8164, _i_8166), "Group1"])[0], 'Buff') && lua_eq(lua_call(G.str['IS_CONTAIN_KEYWORD_BUFF'], [lua_tableget(_buff_list_8164, _i_8166), "IgnoreImmune"])[0], false)) && lua_eq(lua_call(G.str['IS_CONTAIN_KEYWORD_BUFF'], [lua_tableget(_buff_list_8164, _i_8166), "Invincibility"])[0], false))) {
                var _buff_8169 = lua_tableget(_buff_list_8164, _i_8166);
                var _buffTime_8169 = lua_call(G.str['GetBuffRemainTime'], [_buff_8169])[0];
                var _timeValue_8169 = lua_multiply(_buffTime_8169, (lua_multiply(lua_tableget(_skill_8163, 'Level'), 0.2)));
                if (lua_lt(20000, _timeValue_8169)) {
                  _timeValue_8169 = 20000;
                }
                lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff_8169, 'ClassName'), lua_add(_buffTime_8169, _timeValue_8169)]);
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Melstis_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CarveLaima_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CarveLaima_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CarveLaima_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CarveLaima_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CarveLaima_MSPD_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8176 = 1;
      var _caster_8176 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_caster_8176])[0], false)) {
        _caster_8176 = lua_call(G.str['GetOwner'], [_caster_8176])[0];
      }
      if (!lua_eq(_caster_8176, null)) {
        var _skill_8178 = lua_call(G.str['GetSkill'], [_caster_8176, "Dievdirbys_CarveLaima"])[0];
        _lv_8176 = lua_call(G.str['TryGetProp'], [_skill_8178, "Level"])[0];
        if (lua_eq(_lv_8176, null)) {
          _lv_8176 = 1;
        }
      }
      var _mspdadd_8176 = lua_multiply(_lv_8176, 1);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8176));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8176]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CarveLaima_MSPD_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8180 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8180));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CarveZemina_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8181 = 1;
      var _caster_8181 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _msptime_8181 = 5000;
      if (!lua_eq(_caster_8181, null)) {
        _lv_8181 = lua_call(G.str['GetExProp'], [_caster_8181, "ZEMINA_SKILL_LV"])[0];
      }
      lua_call(G.str['SetExProp'], [_self, "ZEMINA_BUFF_LV", _lv_8181]);
      lua_tableset(_self, 'RSPTIME_BM', lua_add(lua_tableget(_self, 'RSPTIME_BM'), _msptime_8181));
      lua_call(G.str['SetExProp'], [_buff, "RSPTIME", _msptime_8181]);
      lua_call(G.str['Invalidate'], [_self, "RSPTIME"]);
      lua_call(G.str['InvalidateSkill'], [_self, "ALL"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CarveZemina_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ZEMINA_BUFF_LV"]);
      var _msptime_8183 = lua_call(G.str['GetExProp'], [_buff, "RSPTIME"])[0];
      lua_tableset(_self, 'RSPTIME_BM', lua_subtract(lua_tableget(_self, 'RSPTIME_BM'), _msptime_8183));
      lua_call(G.str['Invalidate'], [_self, "RSPTIME"]);
      lua_call(G.str['InvalidateSkill'], [_self, "ALL"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CarveAustrasKoks_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['AddBuff'], [_self, _self, 'Silence_Debuff', 1, 0, 0]);
      } else {
        lua_call(G.str['AddLimitationSkillList'], [_self, "Normal_Attack"]);
        lua_call(G.str['AddLimitationSkillList'], [_self, "Normal_Attack_TH"]);
        lua_call(G.str['AddLimitationSkillList'], [_self, "Hammer_Attack"]);
        lua_call(G.str['AddLimitationSkillList'], [_self, "Common_DaggerAries"]);
        lua_call(G.str['AddLimitationSkillList'], [_self, "Common_StaffAttack"]);
        var _abil_8186 = lua_call(G.str['GetAbility'], [_self, "QuarrelShooter7"])[0];
        if (!lua_eq(_abil_8186, null)) {
          lua_call(G.str['AddLimitationSkillList'], [_self, "QuarrelShooter_Teardown"]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CarveAustrasKoks_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['RemoveBuff'], [_self, 'Silence_Debuff']);
      } else {
        lua_call(G.str['ClearLimitationSkillList'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Bless_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _agi_8191 = lua_add(lua_add(lua_tableget(_self, 'DEX_JOB'), lua_tableget(_self, 'DEX_STAT')), lua_call(G.str['GetSumOfEquipItem'], [_self, 'DEX'])[0]);
      var _agiAdd_8191 = lua_tablegetcall(G.str['math'], 'floor', [lua_add((lua_multiply(_agi_8191, (lua_add(0.1, lua_multiply(_arg1, 0.02))))), 5)])[0];
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _agiAdd_8191));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEX", _agiAdd_8191]);
      var _caster_8191 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8191, null)) {
        _caster_8191 = _buff;
      }
      var _Name_8191 = lua_call(G.str['GetName'], [_caster_8191])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_8191)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, _caster_8191, "SHOW_BLESS", lua_tableget(_buff, 'ClassID'), null, _Name_8191]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Bless_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _agiAdd_8194 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEX"])[0];
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _agiAdd_8194));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Bless_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _def_8195 = 0;
      if (lua_eq(lua_tableget(_self, 'GroupName'), "PC")) {
        _def_8195 = lua_add(lua_call(G.str['GetSumOfEquipItem'], [_self, "DEF"])[0], lua_tableget(_self, 'MAXDEF_Bonus'));
      } else if (lua_eq(lua_tableget(_self, 'GroupName'), "Monster")) {
        _def_8195 = lua_add(lua_call(G.str['GET_DEF_BY_LEVEL'], [lua_tableget(_self, 'Lv')])[0], lua_tableget(_self, 'DEF'));
      }
      var _defadd_8195 = lua_add(lua_multiply(_def_8195, 0.2), (lua_multiply(_arg1, 0.003)));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_8195));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8195]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Bless_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8198 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_8198));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Zalciai_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Invalidate'], [_self, "CRTATK"]);
      var _addCrtAtk_8199 = 0;
      var _statbounus_8199 = 0;
      var _addmhr_8199 = 0;
      var _lv_8199 = _arg1;
      var _caster_8199 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8199, null)) {
        var _pad_8200 = lua_call(G.str['GetPadByBuff'], [_caster_8199, _buff])[0];
        if (!lua_eq(_pad_8200, null)) {
          _lv_8199 = lua_call(G.str['GetPadArgNumber'], [_pad_8200, 1])[0];
        }
        G.str['statbonus'] = lua_multiply(lua_tableget(_caster_8199, 'MNA'), (lua_multiply(_lv_8199, 0.1)));
        _addCrtAtk_8199 = lua_add(lua_add(12, (lua_multiply(6, _lv_8199))), G.str['statbonus']);
        var _skill_8200 = lua_call(G.str['GetSkill'], [_caster_8199, "Kriwi_Zalciai"])[0];
        if (lua_eq(_skill_8200, null)) {
          return [];
        }
        var _abil_8200 = lua_call(G.str['GetAbility'], [_caster_8199, "Kriwi8"])[0];
        if (!lua_eq(_abil_8200, null)) {
          _addmhr_8199 = lua_multiply(lua_tableget(_abil_8200, 'Level'), 12);
        }
        var _Kriwi17_abil_8200 = lua_call(G.str['GetAbility'], [_caster_8199, "Kriwi17"])[0];
        if ((!lua_eq(_Kriwi17_abil_8200, null) && lua_lte(3, lua_tableget(_skill_8200, 'Level')))) {
          _addCrtAtk_8199 = lua_multiply(_addCrtAtk_8199, (lua_add(1, lua_multiply(lua_tableget(_Kriwi17_abil_8200, 'Level'), 0.01))));
        }
      }
      _addCrtAtk_8199 = lua_tablegetcall(G.str['math'], 'floor', [_addCrtAtk_8199])[0];
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRTATK", _addCrtAtk_8199]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHR", _addmhr_8199]);
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), _addCrtAtk_8199));
      lua_tableset(_self, 'MHR_BM', lua_add(lua_tableget(_self, 'MHR_BM'), _addmhr_8199));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Zalciai_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCrtAtk_8205 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTATK"])[0];
      var _addmhr_8205 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHR"])[0];
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), _addCrtAtk_8205));
      lua_tableset(_self, 'MHR_BM', lua_subtract(lua_tableget(_self, 'MHR_BM'), _addmhr_8205));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Zalciai_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['Invalidate'], [_self, "CRTDR"]);
      var _addCrtDr_8206 = 0;
      var _lv_8206 = _arg1;
      var _caster_8206 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8206, null)) {
        var _pad_8207 = lua_call(G.str['GetPadByBuff'], [_caster_8206, _buff])[0];
        if (!lua_eq(_pad_8207, null)) {
          _lv_8206 = lua_call(G.str['GetPadArgNumber'], [_pad_8207, 1])[0];
        }
        _addCrtDr_8206 = lua_multiply(_arg1, 10);
        if (lua_lt(lua_tableget(_self, 'CRTDR'), _addCrtDr_8206)) {
          _addCrtDr_8206 = lua_tableget(_self, 'CRTDR');
        }
      }
      _addCrtDr_8206 = lua_tablegetcall(G.str['math'], 'floor', [_addCrtDr_8206])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _addCrtDr_8206));
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRTDR", _addCrtDr_8206]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Zalciai_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCrtDr_8210 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTDR"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _addCrtDr_8210));
      return [];
    })
    G.str['SCR_BUFF_ENTER_DeprotectedZone_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(_self, null)) {
        return [];
      }
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      var _defadd_8211 = 0;
      var _lv_8211 = _arg1;
      var _caster_8211 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8211, null)) {
        var _pad_8213 = lua_call(G.str['GetPadByBuff'], [_caster_8211, _buff])[0];
        if (!lua_eq(_pad_8213, null)) {
          _lv_8211 = lua_call(G.str['GetPadArgNumber'], [_pad_8213, 1])[0];
        }
        var _Cleric7_abil_8213 = lua_call(G.str['GetAbility'], [_caster_8211, "Cleric7"])[0];
        if (!lua_eq(_Cleric7_abil_8213, null)) {
          lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Cleric7_abil_8213, 'Level'), 0, 0]);
        }
      }
      if (lua_lt(_over, 1)) {
        _over = 1;
      }
      var _overRate_8211 = 0.003;
      _defadd_8211 = lua_multiply(_overRate_8211, _over);
      var _skill_8211 = lua_call(G.str['GetSkill'], [_caster_8211, "Cleric_DeprotectedZone"])[0];
      if (lua_eq(_skill_8211, null)) {
        return [];
      }
      if (!lua_eq(_caster_8211, null)) {
        var _Cleric13_abil_8218 = lua_call(G.str['GetAbility'], [_caster_8211, 'Cleric13'])[0];
        if ((!lua_eq(_Cleric13_abil_8218, null) && lua_lte(3, lua_tableget(_skill_8211, 'Level')))) {
          _defadd_8211 = lua_multiply(_defadd_8211, (lua_add(1, lua_multiply(lua_tableget(_Cleric13_abil_8218, 'Level'), 0.01))));
        }
      }
      if (lua_lt(lua_tableget(_self, 'DEF'), _defadd_8211)) {
        _defadd_8211 = lua_tableget(_self, 'DEF');
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8211]);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8211));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DeprotectedZone_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8221 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8221));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monstrance_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      lua_call(G.str['Invalidate'], [_self, "DR"]);
      var _defadd_8222 = 0.1;
      var _dradd_8222 = 0;
      var _lv_8222 = _arg1;
      var _caster_8222 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8222, null)) {
        var _pad_8223 = lua_call(G.str['GetPadByBuff'], [_caster_8222, _buff])[0];
        if (!lua_eq(_pad_8223, null)) {
          _lv_8222 = lua_call(G.str['GetPadArgNumber'], [_pad_8223, 1])[0];
        }
        _dradd_8222 = lua_add(lua_add(6.3, lua_multiply((lua_subtract(_lv_8222, 1)), 2.4)), lua_multiply(lua_tableget(_caster_8222, 'MNA'), 0.4));
      }
      _dradd_8222 = lua_tablegetcall(G.str['math'], 'floor', [_dradd_8222])[0];
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8222]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_8222]);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8222));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_8222));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monstrance_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8225 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _dradd_8225 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8225));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_8225));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Monstrance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8226 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _adddex_8226 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(10, lua_multiply(lua_tableget(_self, 'DEX'), 0.3))])[0];
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _adddex_8226));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEX", _adddex_8226]);
      var _abil_8226 = lua_call(G.str['GetAbility'], [_caster_8226, "Priest4"])[0];
      if (!lua_eq(_abil_8226, null)) {
        var _addDR_8227 = lua_multiply(lua_tableget(_abil_8226, 'Level'), 20);
        lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _addDR_8227));
        lua_call(G.str['SetExProp'], [_buff, "ADD_DR_ABIL", _addDR_8227]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Monstrance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _adddex_8228 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEX"])[0];
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _adddex_8228));
      var _addDR_8228 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR_ABIL"])[0];
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _addDR_8228));
      var _addDef_8228 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF_ABIL"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addDef_8228));
      return [];
    })
    G.str['SCR_BUFF_ENTER_DivineMight_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _isBuff_8229 = lua_call(G.str['GetExProp'], [_self, "isDivineMight_Buff"])[0];
      if (lua_eq(_isBuff_8229, 0)) {
        tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _list_8230 = tmp[0]; var _cnt_8230 = tmp[1]; tmp = null;
        var var_8231 = 1, stop_8231 = lua_assertfloat(_cnt_8230);
        for (; var_8231 <= stop_8231; var_8231++) {
          var _i_8231 = var_8231;
          if ((lua_lt(10000, lua_tableget(lua_tableget(_list_8230, _i_8231), 'ClassID')) && !lua_eq(lua_tableget(lua_tableget(_list_8230, _i_8231), 'ClassName'), "Cleric_DivineMight"))) {
            var _skillcls_8233 = lua_call(G.str['GetClass'], ["Skill", lua_tableget(lua_tableget(_list_8230, _i_8231), 'ClassName')])[0];
            if ((!lua_eq(_skillcls_8233, null) && lua_eq(lua_call(G.str['TryGetProp'], [_skillcls_8233, 'CommonType', 'None'])[0], "None"))) {
              lua_tableset(lua_tableget(_list_8230, _i_8231), 'Level_BM', lua_add(lua_tableget(lua_tableget(_list_8230, _i_8231), 'Level_BM'), 1));
              lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_8230, _i_8231), "Level"]);
              lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_8230, _i_8231), "SkillAtkAdd"]);
              lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_8230, _i_8231), "SkillFactor"]);
              lua_call(G.str['SendSkillProperty'], [_self, lua_tableget(_list_8230, _i_8231)]);
            }
          }
        }
        lua_call(G.str['SetExProp'], [_self, "isDivineMight_Buff", 1]);
        lua_call(G.str['SetExProp'], [_self, "DivineMight_Buff_Lv", _arg1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DivineMight_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _isBuff_8235 = lua_call(G.str['GetExProp'], [_self, "isDivineMight_Buff"])[0];
      if (lua_eq(_isBuff_8235, 1)) {
        tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _list_8236 = tmp[0]; var _cnt_8236 = tmp[1]; tmp = null;
        var var_8237 = 1, stop_8237 = lua_assertfloat(_cnt_8236);
        for (; var_8237 <= stop_8237; var_8237++) {
          var _i_8237 = var_8237;
          if ((lua_lt(10000, lua_tableget(lua_tableget(_list_8236, _i_8237), 'ClassID')) && !lua_eq(lua_tableget(lua_tableget(_list_8236, _i_8237), 'ClassName'), "Cleric_DivineMight"))) {
            var _skillcls_8239 = lua_call(G.str['GetClass'], ["Skill", lua_tableget(lua_tableget(_list_8236, _i_8237), 'ClassName')])[0];
            if ((!lua_eq(_skillcls_8239, null) && lua_eq(lua_call(G.str['TryGetProp'], [_skillcls_8239, 'CommonType', 'None'])[0], 'None'))) {
              lua_tableset(lua_tableget(_list_8236, _i_8237), 'Level_BM', lua_subtract(lua_tableget(lua_tableget(_list_8236, _i_8237), 'Level_BM'), 1));
              lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_8236, _i_8237), "Level"]);
              lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_8236, _i_8237), "SkillAtkAdd"]);
              lua_call(G.str['SendSkillProperty'], [_self, lua_tableget(_list_8236, _i_8237)]);
            }
          }
        }
        lua_call(G.str['DelExProp'], [_self, "isDivineMight_Buff"]);
        lua_call(G.str['DelExProp'], [_self, "DivineMight_Buff_Lv"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DivineMight_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8241 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8241, null)) {
        _caster_8241 = _buff;
      }
      if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        if (lua_eq(lua_tableget(_self, 'RaceType'), 'Velnias')) {
          lua_call(G.str['TakeDamage'], [_caster_8241, _self, "None", lua_call(G.str['IMCRandom'], [lua_tableget(_caster_8241, 'MINMATK'), lua_tableget(_caster_8241, 'MAXMATK')])[0], "Holy", "Magic", "Magic", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      }
      lua_call(G.str['SetExProp'], [_self, "isDivineMight_Debuff", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DivineMight_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aspersion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      var _defValue_8246 = 0;
      var _caster_8246 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _stat_8246 = lua_call(G.str['TryGetProp'], [_caster_8246, "MNA"])[0];
      if (!lua_eq(_caster_8246, null)) {
        if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
          var _stat_BM_8248 = lua_call(G.str['TryGetProp'], [_caster_8246, 'MNA_BM'])[0];
          var _stat_ITEM_BM_8248 = lua_call(G.str['TryGetProp'], [_caster_8246, 'MNA_ITEM_BM'])[0];
          _stat_8246 = lua_subtract(_stat_8246, (lua_add(_stat_BM_8248, _stat_ITEM_BM_8248)));
        }
        lua_call(G.str['SetBuffArgs'], [_buff, _stat_8246]);
      } else {
        _stat_8246 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      }
      _defValue_8246 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_add(75, (lua_multiply((lua_subtract(_arg1, 1)), 25))), (lua_multiply((lua_divide(_arg1, 4)), (lua_power(_stat_8246, 0.9)))))])[0];
      if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
        _defValue_8246 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_defValue_8246, 0.7)])[0];
      }
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defValue_8246));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defValue_8246]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aspersion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defValue_8251 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defValue_8251));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aspersion_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      var _caster_8252 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _priest1_abil_8252 = lua_call(G.str['GetAbility'], [_caster_8252, 'Priest1'])[0];
      if (!lua_eq(_priest1_abil_8252, null)) {
        var _decreaseDef_8253 = lua_multiply(lua_multiply(lua_tableget(_self, 'DEF'), lua_tableget(_priest1_abil_8252, 'Level')), 0.08);
        lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _decreaseDef_8253));
        lua_call(G.str['SetExProp'], [_buff, "DECREASE_DEF", _decreaseDef_8253]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aspersion_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _decreaseDef_8254 = lua_call(G.str['GetExProp'], [_buff, "DECREASE_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _decreaseDef_8254));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Blessing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _sklLv_8255 = lua_call(G.str['GetBuffArg'], [_buff])[0];
      var _caster_8255 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _stat_8255 = 0;
      var _addAbil_8255 = 0;
      if (!lua_eq(_caster_8255, null)) {
        var _Blessing_8256 = lua_call(G.str['GetSkill'], [_caster_8255, 'Priest_Blessing'])[0];
        if (!lua_eq(null, _Blessing_8256)) {
          _sklLv_8255 = lua_tableget(_Blessing_8256, 'Level');
        }
        _stat_8255 = lua_call(G.str['TryGetProp'], [_caster_8255, "MNA"])[0];
        if (lua_eq(_stat_8255, null)) {
          _stat_8255 = 1;
        }
        if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
          var _stat_BM_8259 = lua_call(G.str['TryGetProp'], [_caster_8255, 'MNA_BM'])[0];
          var _stat_ITEM_BM_8259 = lua_call(G.str['TryGetProp'], [_caster_8255, 'MNA_ITEM_BM'])[0];
          _stat_8255 = lua_subtract(_stat_8255, (lua_add(_stat_BM_8259, _stat_ITEM_BM_8259)));
        }
        var _Priest13_abil_8256 = lua_call(G.str['GetAbility'], [_caster_8255, "Priest13"])[0];
        if ((!lua_eq(_Priest13_abil_8256, null) && lua_lte(3, _sklLv_8255))) {
          _addAbil_8255 = lua_tableget(_Priest13_abil_8256, 'Level');
        }
        lua_call(G.str['SetBuffArgs'], [_buff, _stat_8255, _addAbil_8255, 0]);
      } else {
        tmp = lua_call(G.str['GetBuffArgs'], [_buff]); _stat_8255 = tmp[0]; _addAbil_8255 = tmp[1]; tmp = null;
        _caster_8255 = _self;
      }
      var _value_8255 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_add(55, (lua_multiply((lua_subtract(_sklLv_8255, 1)), 25))), (lua_multiply((lua_divide(_sklLv_8255, 5)), (lua_power(_stat_8255, 0.9)))))])[0];
      _value_8255 = lua_multiply(_value_8255, (lua_add(1, (lua_multiply(_addAbil_8255, 0.01)))));
      if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
        _value_8255 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_value_8255, 0.7)])[0];
      }
      _value_8255 = lua_tablegetcall(G.str['math'], 'floor', [_value_8255])[0];
      lua_call(G.str['SetExProp'], [_buff, "BlessingValue", _value_8255]);
      lua_call(G.str['SkillTextEffect'], [null, _self, _caster_8255, 'SHOW_SKILL_BONUS', _value_8255, null, "skill_Blessing"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Blessing_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Haste_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8264 = _arg1;
      var _mspdAdd_8264 = lua_add(3, lua_multiply(_lv_8264, 0.5));
      var _dradd_8264 = 0;
      var _caster_8264 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8264, null)) {
        _caster_8264 = _buff;
      }
      var _casterMNA_8264 = lua_call(G.str['TryGetProp'], [_caster_8264, "MNA"])[0];
      var _baseLv_8264 = lua_call(G.str['TryGetProp'], [_self, "Lv"])[0];
      var _addRate_8264 = lua_divide(_casterMNA_8264, _baseLv_8264);
      if (lua_lte(_addRate_8264, 0)) {
        _addRate_8264 = 0;
      } else if (lua_lte(1, _addRate_8264)) {
        _addRate_8264 = 1;
      }
      _mspdAdd_8264 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_mspdAdd_8264, (lua_add(1, _addRate_8264)))])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdAdd_8264));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdAdd_8264]);
      var _abil_8264 = lua_call(G.str['GetAbility'], [_caster_8264, "Chronomancer7"])[0];
      if (!lua_eq(_abil_8264, null)) {
        _dradd_8264 = lua_add(_dradd_8264, lua_multiply(lua_tableget(_abil_8264, 'Level'), 15));
        _dradd_8264 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_dradd_8264, (lua_add(1, _addRate_8264)))])[0];
      }
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_8264));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_8264]);
      var _Name_8264 = lua_call(G.str['GetName'], [_caster_8264])[0];
      if (!lua_eq(lua_tableget(_self, 'Name'), _Name_8264)) {
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Haste_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdAdd_8270 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      var _dradd_8270 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdAdd_8270));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_8270));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_Entangle_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_Entangle_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'Archer_EntangleSlow_Debuff', 1, 0, 5000, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Melstis'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffList'], [_self]); var _list_8273 = tmp[0]; var _cnt_8273 = tmp[1]; tmp = null;
      lua_call(G.str['SetExProp'], [_buff, "START_BUFF_COUNT", lua_add(_cnt_8273, 1)]);
      var _factionName_8273 = lua_call(G.str['GetCurrentFaction'], [_self])[0];
      lua_call(G.str['SetExProp_Str'], [_buff, 'PREV_FACTION', _factionName_8273]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'FreeForAll']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Melstis'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _startBuffCnt_8274 = lua_call(G.str['GetExProp'], [_buff, "START_BUFF_COUNT"])[0];
      tmp = lua_call(G.str['GetBuffList'], [_self]); var _list_8274 = tmp[0]; var _cnt_8274 = tmp[1]; tmp = null;
      if (lua_lt(_startBuffCnt_8274, _cnt_8274)) {
        var var_8276 = 1, stop_8276 = lua_assertfloat(lua_subtract(_cnt_8274, _startBuffCnt_8274));
        for (; var_8276 <= stop_8276; var_8276++) {
          var _index_8276 = var_8276;
          var _newBuff_8277 = lua_tableget(_list_8274, lua_subtract(_cnt_8274, _index_8276));
          if (!lua_eq(_newBuff_8277, null)) {
            if (lua_eq(lua_tableget(_newBuff_8277, 'Group1'), 'Debuff')) {
              tmp = lua_call(G.str['SelectObject'], [_self, 100, "ENEMY"]); var _objList_8279 = tmp[0]; var _objCount_8279 = tmp[1]; tmp = null;
              if (lua_lt(1, _objCount_8279)) {
                var var_8281 = 1, stop_8281 = lua_assertfloat(lua_subtract(_objCount_8279, 1));
                for (; var_8281 <= stop_8281; var_8281++) {
                  var _i_8281 = var_8281;
                  var _target_8282 = lua_tableget(_objList_8279, _i_8281);
                  lua_call(G.str['AddBuff'], [_self, _target_8282, lua_tableget(_newBuff_8277, 'ClassName'), 1, 0, 10000, 1]);
                }
              }
            }
          }
        }
        lua_call(G.str['SetExProp'], [_buff, "START_BUFF_COUNT", _cnt_8274]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Melstis'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _factionName_8283 = lua_call(G.str['GetExProp_Str'], [_buff, 'PREV_FACTION'])[0];
      lua_call(G.str['SetCurrentFaction'], [_self, _factionName_8283]);
      lua_call(G.str['PlayAnim'], [_self, "ASTD"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_HolyAura_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffList'], [_self]); var _list_8284 = tmp[0]; var _cnt_8284 = tmp[1]; tmp = null;
      lua_call(G.str['SetExProp'], [_buff, "START_BUFF_COUNT", lua_add(_cnt_8284, 1)]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Cleric_HolyAura_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _startBuffCnt_8285 = lua_call(G.str['GetExProp'], [_buff, "START_BUFF_COUNT"])[0];
      tmp = lua_call(G.str['GetBuffList'], [_self]); var _list_8285 = tmp[0]; var _cnt_8285 = tmp[1]; tmp = null;
      if (lua_lt(_startBuffCnt_8285, _cnt_8285)) {
        var var_8287 = 1, stop_8287 = lua_assertfloat(lua_subtract(_cnt_8285, _startBuffCnt_8285));
        for (; var_8287 <= stop_8287; var_8287++) {
          var _index_8287 = var_8287;
          var _newBuff_8288 = lua_tableget(_list_8285, lua_subtract(_cnt_8285, _index_8287));
          if ((!lua_eq(_newBuff_8288, null) && lua_eq(lua_tableget(_newBuff_8288, 'Group1'), 'Buff'))) {
            tmp = lua_call(G.str['SelectObject'], [_self, 100, "FRIEND"]); var _objList_8289 = tmp[0]; var _objCount_8289 = tmp[1]; tmp = null;
            if (lua_lt(1, _objCount_8289)) {
              var var_8291 = 1, stop_8291 = lua_assertfloat(lua_subtract(_objCount_8289, 1));
              for (; var_8291 <= stop_8291; var_8291++) {
                var _i_8291 = var_8291;
                var _target_8292 = lua_tableget(_objList_8289, _i_8291);
                lua_call(G.str['AddBuff'], [_self, _target_8292, lua_tableget(_newBuff_8288, 'ClassName')]);
              }
            }
          }
        }
        lua_call(G.str['SetExProp'], [_buff, "START_BUFF_COUNT", _cnt_8285]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_HolyAura_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DivineStigma_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _arg3_8294 = tmp[0]; var _arg4_8294 = tmp[1]; var _arg5_8294 = tmp[2]; tmp = null;
      if (lua_eq(_arg3_8294, 0)) {
        var _caster_8295 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _skill_8295 = lua_call(G.str['GetSkill'], [_caster_8295, 'Kriwi_DivineStigma'])[0];
        var _abil_8295 = lua_call(G.str['GetAbility'], [_caster_8295, "Kriwi9"])[0];
        if (!lua_eq(_skill_8295, null)) {
          _arg3_8294 = lua_tableget(_skill_8295, 'Level');
        }
        if (!lua_eq(_abil_8295, null)) {
          _arg4_8294 = lua_tableget(_abil_8295, 'Level');
        }
        lua_call(G.str['SetBuffArgs'], [_buff, _arg3_8294, _arg4_8294, _arg5_8294]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_DivineStigma_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8298 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8298, null)) {
        var _damage_8299 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8298, _self, 'Kriwi_DivineStigma'])[0];
        lua_call(G.str['TakeDamage'], [_caster_8298, _self, 'Kriwi_DivineStigma', _damage_8299, 'Fire', 'Magic', 'Magic', G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DivineStigma_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DivineStigma_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['Invalidate'], [_self, "STR"]);
      lua_call(G.str['Invalidate'], [_self, "INT"]);
      var _stradd_8301 = lua_add(15, lua_multiply((lua_subtract(_arg1, 1)), 8));
      var _intadd_8301 = lua_add(15, lua_multiply((lua_subtract(_arg1, 1)), 8));
      lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_8301]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_8301]);
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_8301));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_8301));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DivineStigma_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_8302 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _intadd_8302 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_8302));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_8302));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Isa_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Isa_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Thurisaz_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeScalePC'], [_self, 2.0, 0, 1, 0, 1]);
      lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 0]);
      var _mspdadd_8305 = 20;
      var _defadd_8305 = 0.2;
      var _mdefadd_8305 = 0.2;
      var _MHP_8305 = lua_call(G.str['TryGetProp'], [_self, "MHP"])[0];
      var _mhpadd_8305 = lua_multiply(_MHP_8305, 0.2);
      var _caster_8305 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8305, null)) {
        var _abil_8306 = lua_call(G.str['GetAbility'], [_caster_8305, "RuneCaster4"])[0];
        if (!lua_eq(_abil_8306, null)) {
          _mhpadd_8305 = lua_add(_mhpadd_8305, (lua_multiply(lua_multiply(lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_caster_8305, 'CON'), 0.2)])[0], lua_tableget(_abil_8306, 'Level')), 60)));
        }
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8305));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8305));
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _mhpadd_8305));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8305));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8305]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MHP", _mhpadd_8305]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8305]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_8305]);
      lua_tableset(_self, 'Size', "L");
      var _addLimitationSkillList_8305 = lua_newtable();
      tmp = lua_call(G.str['GetClassList'], ["Skill"]); var _list_8305 = tmp[0]; var _cnt_8305 = tmp[1]; tmp = null;
      if (!lua_eq(_list_8305, null)) {
        var var_8309 = 1, stop_8309 = lua_assertfloat(lua_subtract(_cnt_8305, 1));
        for (; var_8309 <= stop_8309; var_8309++) {
          var _i_8309 = var_8309;
          var _skill_8310 = lua_call(G.str['GetClassByIndexFromList'], [_list_8305, _i_8309])[0];
          if (!lua_eq(_skill_8310, null)) {
            if (lua_eq(lua_tableget(_skill_8310, 'ValueType'), "Buff")) {
              lua_tableset(_addLimitationSkillList_8305, lua_add(lua_len(_addLimitationSkillList_8305), 1), lua_tableget(_skill_8310, 'ClassName'));
            }
          }
        }
      }
      var var_8313 = 1, stop_8313 = lua_assertfloat(lua_len(_addLimitationSkillList_8305));
      for (; var_8313 <= stop_8313; var_8313++) {
        var _j_8313 = var_8313;
        var _skillList_8314 = lua_tableget(_addLimitationSkillList_8305, _j_8313);
        var _addList_8314 = lua_call(G.str['GetSkill'], [_self, _skillList_8314])[0];
        if (!lua_eq(_addList_8314, null)) {
          lua_call(G.str['InvalidateObjectProp'], [_addList_8314, "MaxR"]);
          lua_call(G.str['SendSkillProperty'], [_self, _addList_8314]);
          lua_call(G.str['AddLimitationSkillList'], [_self, _skillList_8314]);
        }
      }
      lua_call(G.str['AddLimitationSkillList'], [_self, "Normal_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Bow_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Hammer_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Magic_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Normal_Attack_TH"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Magic_Attack_TH"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "CrossBow_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Pistol_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Musket_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Peltasta_SwashBuckling"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Common_DaggerAries"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Common_StaffAttack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "RuneCaster_Hagalaz"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "RuneCaster_Isa"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "RuneCaster_Thurisaz"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "RuneCaster_Tiwaz"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "RuneCaster_Algiz"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_EnergyBolt"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_Lethargy"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_Sleep"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_ReflectShield"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_EarthQuake"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_Surespell"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_MagicMissile"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Wizard_QuickCast"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "LightningHands_Attack"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Thurisaz_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsOnGround'], [_self])[0], "NO")) {
        lua_call(G.str['SetExProp'], [_self, "JUMP_STATE", 1]);
      }
      if ((lua_eq(lua_call(G.str['GetExProp'], [_self, "JUMP_STATE"])[0], 1) && lua_eq(lua_call(G.str['IsOnGround'], [_self])[0], "YES"))) {
        lua_call(G.str['SetExProp'], [_self, "JUMP_STATE", 0]);
        lua_call(G.str['PlaySound'], [_self, "skl_eff_thurisaz_landing"]);
        tmp = lua_call(G.str['GetPos'], [_self]); var _x_8318 = tmp[0]; var _y_8318 = tmp[1]; var _z_8318 = tmp[2]; tmp = null;
        var _skill_8318 = lua_call(G.str['GetNormalSkill'], [_self])[0];
        if (lua_eq(_skill_8318, null)) {
          return [1];
        }
        tmp = lua_call(G.str['SelectObjectPos'], [_self, _x_8318, _y_8318, _z_8318, 30, 'ENEMY']); var _list_8318 = tmp[0]; var _cnt_8318 = tmp[1]; tmp = null;
        var var_8320 = 1, stop_8320 = lua_assertfloat(_cnt_8318);
        for (; var_8320 <= stop_8320; var_8320++) {
          var _i_8320 = var_8320;
          var _target_8321 = lua_tableget(_list_8318, _i_8320);
          var _damage_8321 = lua_call(G.str['SCR_LIB_ATKCALC_RH'], [_self, _skill_8318])[0];
          lua_call(G.str['TakeDamage'], [_self, _target_8321, lua_tableget(_skill_8318, 'ClassName'), _damage_8321]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Thurisaz_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeScalePC'], [_self, (1 / 2), 0]);
      var _defadd_8322 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mhpadd_8322 = lua_call(G.str['GetExProp'], [_buff, "ADD_MHP"])[0];
      var _mspdadd_8322 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      var _mdefadd_8322 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8322));
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _mhpadd_8322));
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8322));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8322));
      lua_tableset(_self, 'Size', "M");
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Algiz_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Algiz_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Wizard_Fog_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Wizard_Fog_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _random_8326 = lua_call(G.str['IMCRandom'], [1, 100])[0];
      if (lua_lte(_random_8326, 90)) {
        if (!lua_eq(lua_tableget(_self, 'MonRank'), 'Boss')) {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Confuse'])[0], 'NO')) {
            lua_call(G.str['AddBuff'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], _self, 'Confuse', 1, 0, 10000, 1]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Wizard_Fog_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MagneticForce_Debuff_Hold'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['EnableControl'], [_self, 0, "MAGNETIC_MOVE_LOCK"]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MagneticForce_Debuff_Hold'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8333 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8333, null)) {
        if (lua_eq(lua_call(G.str['GetExProp'], [_self, "diminishing_magneticForce"])[0], 1)) {
          lua_call(G.str['SetExProp'], [_self, "diminishing_magneticForce", 0]);
          var _remainingTime_8335 = lua_call(G.str['GetExProp'], [_self, "diminishing_magneticForce_remainingTime"])[0];
          if (!lua_eq(_remainingTime_8335, 0)) {
            lua_call(G.str['AddBuff'], [_self, _self, "MagneticForceTemporaryImmune", 1, 1, _remainingTime_8335, 1]);
          }
        }
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['EnableControl'], [_self, 1, "MAGNETIC_MOVE_LOCK"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Camouflage_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8338 = _arg1;
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['SKL_HATE_RESET'], [_self]);
      var _spdrate_8338 = lua_subtract(1, (lua_multiply(_arg1, 0.1)));
      var _mspdadd_8338 = lua_tablegetcall(G.str['math'], 'max', [lua_multiply(30, _spdrate_8338), lua_multiply(lua_tableget(_self, 'MSPD'), _spdrate_8338)])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8338));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8338]);
      lua_call(G.str['SetExProp'], [_self, "IGNORE_MELEE_ATK", lua_multiply(_lv_8338, 5)]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Scout_Camouflage"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Bow_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "CrossBow_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Pistol_Attack"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Scout_Undistance"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Camouflage_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8339 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8339));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      var _skillObj_8339 = lua_call(G.str['GetSkill'], [lua_call(G.str['GetBuffCaster'], [_buff])[0], 'Scout_Camouflage'])[0];
      if (!lua_eq(_skillObj_8339, null)) {
        lua_call(G.str['SKL_TOGGLE_ON'], [_self, _skillObj_8339, 0]);
      }
      lua_call(G.str['DetachClientNodeMonster'], [_self, "skill_HideBox", "Dummy_HideBox"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Undistance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8341 = 0;
      var _caster_8341 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8341, null)) {
        var _abil_8342 = lua_call(G.str['GetAbility'], [_caster_8341, 'Scout3'])[0];
        if (!lua_eq(_abil_8342, null)) {
          _patkadd_8341 = lua_multiply(lua_tableget(_abil_8342, 'Level'), 0.05);
        }
      }
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8341));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_8341]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Undistance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8344 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8344));
      return [];
    })
    G.str['SCR_BUFF_ENTER_OOBE_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8345 = lua_tableget(_self, 'DEF');
      var _dradd_8345 = 0;
      var _abil_8345 = lua_call(G.str['GetAbility'], [_self, "Sadhu2"])[0];
      if (!lua_eq(_abil_8345, null)) {
        _dradd_8345 = lua_multiply(lua_tableget(_abil_8345, 'Level'), 10);
      }
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_8345));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dradd_8345));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEFADD", _defadd_8345]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _dradd_8345]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['AddLockSkillList'], [_self, 'Pardoner_Simony']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Pardoner_SpellShop']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Pardoner_Oblation']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Druid_Telepath']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Druid_ShapeShifting']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Druid_Transform']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_OOBE_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8347 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEFADD"])[0];
      var _dradd_8347 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_8347));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dradd_8347));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_buff_atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8348 = _over;
      var _atkadd_8348 = lua_multiply(lua_tableget(_self, 'MAXMATK'), (lua_add(0.2, lua_multiply(_lv_8348, 0.01))));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _atkadd_8348));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MINMATK", _atkadd_8348]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_buff_atk'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8349 = lua_call(G.str['GetExProp'], [_buff, "ADD_MINMATK"])[0];
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _atkadd_8349));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Coursing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _sklLevel_8350 = 1;
      var _pet_8350 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _caster_8350 = lua_call(G.str['GetOwner'], [_pet_8350])[0];
      if (!lua_eq(_caster_8350, null)) {
        var _skl_8351 = lua_call(G.str['GetSkill'], [_caster_8350, "Hunter_Coursing"])[0];
        if (!lua_eq(_skl_8351, null)) {
          _sklLevel_8350 = lua_tableget(_skl_8351, 'Level');
        }
      }
      var _defaultdef_8350 = 0.05;
      var _defBySkillLv_8350 = lua_multiply(0.005, _sklLevel_8350);
      var _defadd_8350 = lua_add(_defaultdef_8350, _defBySkillLv_8350);
      var _mdefadd_8350 = 0;
      var _pet_8350 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _caster_8350 = lua_call(G.str['GetOwner'], [_pet_8350])[0];
      if (!lua_eq(_caster_8350, null)) {
        var _abil_8353 = lua_call(G.str['GetAbility'], [_caster_8350, "Hunter7"])[0];
        if (!lua_eq(_abil_8353, null)) {
          _mdefadd_8350 = lua_multiply(0.02, lua_tableget(_abil_8353, 'Level'));
        }
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8350));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8350));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8350]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_8350]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Coursing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _pet_8355 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _caster_8355 = lua_call(G.str['GetOwner'], [_pet_8355])[0];
      if (!lua_eq(_caster_8355, null)) {
        var _damage_8356 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8355, _self, 'Hunter_Coursing'])[0];
        var _skill_8356 = lua_call(G.str['GET_MON_SKILL'], [_caster_8355, 'Hunter_Coursing'])[0];
        var _notApplyDiminishing_8356 = 1;
        lua_call(G.str['TAKE_SCP_DAMAGE'], [_caster_8355, _self, _damage_8356, G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, lua_tableget(_skill_8356, 'ClassName'), 1, 4, null, _pet_8355, _notApplyDiminishing_8356]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Coursing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8357 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_8357 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8357));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8357));
      return [];
    })
    G.str['SCR_BUFF_ENTER_TransmitPrana_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TransmitPrana_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TransmitPrana_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8360 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if ((!lua_eq(_caster_8360, null) && lua_eq(lua_call(G.str['IsSameActor'], [_caster_8360, _self])[0], "NO"))) {
        var _casterINT_8361 = lua_subtract(lua_tableget(_caster_8360, 'INT'), lua_tableget(_caster_8360, 'INT_BM'));
        var _casterSTR_8361 = lua_subtract(lua_tableget(_caster_8360, 'STR'), lua_tableget(_caster_8360, 'STR_BM'));
        var _casterCON_8361 = lua_subtract(lua_tableget(_caster_8360, 'CON'), lua_tableget(_caster_8360, 'CON_BM'));
        var _casterMNA_8361 = lua_subtract(lua_tableget(_caster_8360, 'MNA'), lua_tableget(_caster_8360, 'MNA_BM'));
        var _casterDEX_8361 = lua_subtract(lua_tableget(_caster_8360, 'DEX'), lua_tableget(_caster_8360, 'DEX_BM'));
        var _intadd_8361 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_casterINT_8361, (lua_multiply(_arg1, 0.1)))])[0];
        var _stradd_8361 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_casterSTR_8361, (lua_multiply(_arg1, 0.1)))])[0];
        var _conadd_8361 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_casterCON_8361, (lua_multiply(_arg1, 0.1)))])[0];
        var _mnaadd_8361 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_casterMNA_8361, (lua_multiply(_arg1, 0.1)))])[0];
        var _dexadd_8361 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_casterDEX_8361, (lua_multiply(_arg1, 0.1)))])[0];
        lua_tableset(_self, 'INT_BM', lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_tableget(_self, 'INT_BM'), _intadd_8361)])[0]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_8361]);
        var _Sadhu19_abil_8361 = lua_call(G.str['GetAbility'], [_caster_8360, 'Sadhu19'])[0];
        if (!lua_eq(_Sadhu19_abil_8361, null)) {
          lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_8361));
          lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_8361]);
        }
        var _Sadhu20_abil_8361 = lua_call(G.str['GetAbility'], [_caster_8360, 'Sadhu20'])[0];
        if (!lua_eq(_Sadhu20_abil_8361, null)) {
          lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _conadd_8361));
          lua_call(G.str['SetExProp'], [_buff, "ADD_CON", _conadd_8361]);
        }
        var _Sadhu21_abil_8361 = lua_call(G.str['GetAbility'], [_caster_8360, 'Sadhu21'])[0];
        if (!lua_eq(_Sadhu21_abil_8361, null)) {
          lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_8361));
          lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_8361]);
        }
        var _Sadhu22_abil_8361 = lua_call(G.str['GetAbility'], [_caster_8360, 'Sadhu22'])[0];
        if (!lua_eq(_Sadhu22_abil_8361, null)) {
          lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _dexadd_8361));
          lua_call(G.str['SetExProp'], [_buff, "ADD_DEX", _dexadd_8361]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TransmitPrana_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intadd_8366 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _stradd_8366 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _conadd_8366 = lua_call(G.str['GetExProp'], [_buff, "ADD_CON"])[0];
      var _mnaadd_8366 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      var _dexadd_8366 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEX"])[0];
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_8366));
      if (!lua_eq(_stradd_8366, null)) {
        lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_8366));
      }
      if (!lua_eq(_conadd_8366, null)) {
        lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _conadd_8366));
      }
      if (!lua_eq(_mnaadd_8366, null)) {
        lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_8366));
      }
      if (!lua_eq(_dexadd_8366, null)) {
        lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _dexadd_8366));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_AstralBodyExplosion_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8371 = _arg1;
      var _explosionDamage_8371 = _arg2;
      var _caster_8371 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8371, null)) {
        var _skill_8372 = lua_call(G.str['GetSkill'], [_caster_8371, "Sadhu_AstralBodyExplosion"])[0];
        if (!lua_eq(_skill_8372, null)) {
          _lv_8371 = lua_tableget(_skill_8372, 'Level');
        }
      }
      var _damage_8371 = lua_multiply(_explosionDamage_8371, (lua_add(0.05, lua_multiply((lua_subtract(_lv_8371, 1)), 0.003))));
      _damage_8371 = lua_tablegetcall(G.str['math'], 'floor', [_damage_8371])[0];
      lua_call(G.str['SetBuffArgs'], [_buff, _damage_8371, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AstralBodyExplosion_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damage_8374 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lte(_damage_8374, 0)) {
        return [0];
      }
      var _caster_8374 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8374, null)) {
        return [0];
      }
      lua_call(G.str['TakeDamage'], [_caster_8374, _self, "None", _damage_8374, "Soul", "Magic", "TrueDamage", G.str['HIT_SOUL'], G.str['HITRESULT_BLOW']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AstralBodyExplosion_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Suppress_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _lv_8378 = _arg1;
      var _caster_8378 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8378, null)) {
        var _pad_8379 = lua_call(G.str['GetPadByBuff'], [_caster_8378, _buff])[0];
        if (!lua_eq(_pad_8379, null)) {
          _lv_8378 = lua_call(G.str['GetPadArgNumber'], [_pad_8379, 1])[0];
        }
      }
      var _stradd_8378 = lua_multiply(_lv_8378, 5);
      var _conadd_8378 = lua_multiply(_lv_8378, 5);
      var _intadd_8378 = lua_multiply(_lv_8378, 5);
      var _mnaadd_8378 = lua_multiply(_lv_8378, 5);
      var _dexadd_8378 = lua_multiply(_lv_8378, 5);
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_8378));
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _conadd_8378));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_8378));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_8378));
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _dexadd_8378));
      lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_8378]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_CON", _conadd_8378]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_8378]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_8378]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEX", _dexadd_8378]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Suppress_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_8381 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _conadd_8381 = lua_call(G.str['GetExProp'], [_buff, "ADD_CON"])[0];
      var _intadd_8381 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_8381 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      var _dexadd_8381 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEX"])[0];
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_8381));
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _conadd_8381));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_8381));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_8381));
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _dexadd_8381));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Suppress_Confuse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8382 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8382, null)) {
        var _skill_8383 = lua_call(G.str['GetSkill'], [_caster_8382, "Sadhu_VashitaSiddhi"])[0];
        if (lua_eq(_skill_8383, null)) {
          return [];
        }
        var _abil_8383 = lua_call(G.str['GetAbility'], [_caster_8382, "Sadhu7"])[0];
        if (((!lua_eq(_abil_8383, null) && lua_lte(3, lua_tableget(_skill_8383, 'Level'))) && lua_lt(lua_call(G.str['IMCRandom'], [1, 9999])[0], lua_multiply(lua_tableget(_abil_8383, 'Level'), 200)))) {
          lua_call(G.str['AddBuff'], [_caster_8382, _self, "Confuse", 1, 0, 5000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Suppress_Confuse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SadhuBind_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SadhuBind_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddBuff'], [_self, _self, 'SadhuPossessionTemporaryImmune', 1, 0, 6500, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_buff_def'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8389 = lua_multiply(_over, 5);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_8389));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8389]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_buff_def'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8390 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_8390));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Double_pay_earn_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "DoublePayEarn", _arg1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Double_pay_earn_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Crown_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8393 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8393, null)) {
        _caster_8393 = _buff;
      }
      var _intadd_8393 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_tableget(_self, 'INT'), lua_tableget(_self, 'INT_BM'))), 0.5)])[0];
      var _mnaadd_8393 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_tableget(_self, 'MNA'), lua_tableget(_self, 'MNA_BM'))), 0.5)])[0];
      var _Highlander4_abil_8393 = lua_call(G.str['GetAbility'], [_caster_8393, 'Highlander4'])[0];
      if (!lua_eq(_Highlander4_abil_8393, null)) {
        _intadd_8393 = lua_add(_intadd_8393, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_tableget(_self, 'INT'), lua_tableget(_self, 'INT_BM'))), (lua_multiply(0.02, lua_tableget(_Highlander4_abil_8393, 'Level'))))])[0]);
        _mnaadd_8393 = lua_add(_mnaadd_8393, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(lua_tableget(_self, 'MNA'), lua_tableget(_self, 'MNA_BM'))), (lua_multiply(0.02, lua_tableget(_Highlander4_abil_8393, 'Level'))))])[0]);
      }
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_8393));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_8393));
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_8393]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_8393]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Crown_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intadd_8396 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_8396 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_8396));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_8396));
      return [];
    })
    G.str['GetDefAdd'] = (function (_self, _arg1) {
      var tmp;
      var _defadd_8397 = lua_multiply(lua_tableget(_self, 'DEF'), 0.1);
      return lua_tablegetcall(G.str['math'], 'floor', [_defadd_8397]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warcry_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlaySound'], [_self, "skl_eff_warcry_up"]);
      var _Defsum_8398 = 0;
      tmp = lua_call(G.str['SelectObject'], [_self, 100, 'ENEMY']); var _objList_8398 = tmp[0]; var _objCount_8398 = tmp[1]; tmp = null;
      if (lua_lt(5, _objCount_8398)) {
        var _maxCount_8399 = 5;
        var _abil_8399 = lua_call(G.str['GetAbility'], [_self, 'Barbarian1'])[0];
        if (!lua_eq(_abil_8399, null)) {
          _maxCount_8399 = lua_add(_maxCount_8399, lua_tableget(_abil_8399, 'Level'));
        }
        _objCount_8398 = lua_tablegetcall(G.str['math'], 'min', [_objCount_8398, _maxCount_8399])[0];
      }
      var var_8401 = 1, stop_8401 = lua_assertfloat(_objCount_8398);
      for (; var_8401 <= stop_8401; var_8401++) {
        var _i_8401 = var_8401;
        var _obj_8402 = lua_tableget(_objList_8398, _i_8401);
        var _defadd_8402 = lua_call(G.str['GetDefAdd'], [_obj_8402, _arg1])[0];
        if (lua_lt(lua_tableget(_obj_8402, 'DEF'), _defadd_8402)) {
          _defadd_8402 = lua_tableget(_obj_8402, 'DEF');
        }
        _Defsum_8398 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_Defsum_8398, _defadd_8402)])[0];
        lua_call(G.str['AddBuff'], [_self, _obj_8402, 'Warcry_Debuff', 0, _defadd_8402, lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 1]);
      }
      var _atkadd_8398 = lua_multiply((lua_multiply(_arg1, 4)), _objCount_8398);
      var _abilAtk_8398 = 1;
      var _Barbarian12_abil_8398 = lua_call(G.str['GetAbility'], [_self, "Barbarian12"])[0];
      var _Barbarian13_abil_8398 = lua_call(G.str['GetAbility'], [_self, "Barbarian13"])[0];
      if (!lua_eq(_Barbarian13_abil_8398, null)) {
        _atkadd_8398 = lua_multiply(_atkadd_8398, 2.26);
      } else if ((lua_eq(_Barbarian13_abil_8398, null) && !lua_eq(_Barbarian12_abil_8398, null))) {
        _atkadd_8398 = lua_multiply(_atkadd_8398, 1.57);
      }
      var _skill_8398 = lua_call(G.str['GetSkill'], [_self, "Barbarian_Warcry"])[0];
      if (lua_eq(_skill_8398, null)) {
        return [];
      }
      var _Barbarian11_abil_8398 = lua_call(G.str['GetAbility'], [_self, "Barbarian11"])[0];
      if ((!lua_eq(_Barbarian11_abil_8398, null) && lua_lte(3, lua_tableget(_skill_8398, 'Level')))) {
        _abilAtk_8398 = lua_add(1, lua_multiply(lua_tableget(_Barbarian11_abil_8398, 'Level'), 0.01));
      }
      _atkadd_8398 = lua_multiply(_atkadd_8398, _abilAtk_8398);
      _atkadd_8398 = lua_tablegetcall(G.str['math'], 'floor', [_atkadd_8398])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _atkadd_8398));
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATK", _atkadd_8398]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warcry_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8408 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _atkadd_8408));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warcry_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_8409 = 0.1;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8409));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8409]);
      if (lua_true(lua_call(G.str['GetBuffByProp'], [_self, 'Group1', 'Debuff'])[0])) {
        var _caster_8410 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_8410, null)) {
          var _abil_8411 = lua_call(G.str['GetAbility'], [_caster_8410, 'Barbarian30'])[0];
          if (!lua_eq(_abil_8411, null)) {
            tmp = lua_call(G.str['GetBuffList'], [_self]); var _buff_list_8412 = tmp[0]; var _buff_cnt_8412 = tmp[1]; tmp = null;
            if (lua_lte(1, _buff_cnt_8412)) {
              var var_8414 = 1, stop_8414 = lua_assertfloat(_buff_cnt_8412);
              for (; var_8414 <= stop_8414; var_8414++) {
                var _i_8414 = var_8414;
                if (lua_eq(lua_tableget(lua_tableget(_buff_list_8412, _i_8414), 'Group1'), 'Debuff')) {
                  var _debuff_8416 = lua_tableget(_buff_list_8412, _i_8414);
                  var _caster_debuff_8416 = lua_call(G.str['GetBuffCaster'], [_debuff_8416])[0];
                  if (!lua_eq(_caster_debuff_8416, null)) {
                    if (lua_eq(lua_call(G.str['IsSameActor'], [_caster_8410, _caster_debuff_8416])[0], "YES")) {
                      var _buffTime_8418 = lua_call(G.str['GetBuffRemainTime'], [_debuff_8416])[0];
                      var _abil_time_8418 = lua_multiply(1000, lua_tableget(_abil_8411, 'Level'));
                      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
                        _abil_time_8418 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(_abil_time_8418, 3)])[0];
                      }
                      lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_debuff_8416, 'ClassName'), lua_add(_buffTime_8418, _abil_time_8418)]);
                    }
                  }
                }
              }
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warcry_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8420 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8420));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpDrain_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _debuff_8421 = lua_call(G.str['GetBuffByProp'], [_self, 'Group1', 'Debuff'])[0];
      if (!lua_eq(_debuff_8421, null)) {
        lua_call(G.str['RemoveBuff'], [_self, lua_tableget(_debuff_8421, 'ClassName')]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpDrain_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpDrain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SpDrain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, -50]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpDrain_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwellBody_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hpadd_8427 = lua_tableget(_self, 'MHP');
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _hpadd_8427));
      var _addmspd_8427 = 0;
      var _addpatk_8427 = 0;
      var _addmatk_8427 = 0;
      lua_call(G.str['SetExProp'], [_self, "ADD_HP", _hpadd_8427]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8427 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "ReSizeFlag"])[0], 1)) {
        lua_call(G.str['SetExProp_Str'], [_self, "DefaultSize", lua_tableget(_self, 'Size')]);
        lua_call(G.str['SetExProp'], [_self, "ReSizeFlag", 1]);
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ShrinkBody_Debuff'])[0], 'YES')) {
        lua_call(G.str['RemoveBuff'], [_self, 'ShrinkBody_Debuff']);
      }
      var _Thaumaturge1_abil_8427 = lua_call(G.str['GetAbility'], [_caster_8427, 'Thaumaturge1'])[0];
      if ((!lua_eq(_Thaumaturge1_abil_8427, null) && lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false))) {
        _addmspd_8427 = lua_tablegetcall(G.str['math'], 'floor', [(lua_multiply(lua_tableget(_self, 'MSPD'), (lua_multiply(lua_tableget(_Thaumaturge1_abil_8427, 'Level'), 0.15))))])[0];
        _addpatk_8427 = lua_multiply(lua_tableget(_Thaumaturge1_abil_8427, 'Level'), 0.1);
        _addmatk_8427 = lua_multiply(lua_tableget(_Thaumaturge1_abil_8427, 'Level'), 0.1);
        lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addmspd_8427));
        lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _addpatk_8427));
        lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _addmatk_8427));
        lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _addmspd_8427]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _addpatk_8427]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _addmatk_8427]);
      }
      if (lua_eq(lua_tableget(_self, 'Size'), 'L')) {
        
      } else if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
        var _Thaumaturge3_abil_8432 = lua_call(G.str['GetAbility'], [_caster_8427, 'Thaumaturge3'])[0];
        if (!lua_eq(_Thaumaturge3_abil_8432, null)) {
          var _dmg_8433 = lua_multiply(lua_multiply(lua_tableget(_caster_8427, 'MAXMATK'), 0.2), lua_tableget(_Thaumaturge3_abil_8432, 'Level'));
          lua_call(G.str['TakeDamage'], [_caster_8427, _self, "None", _dmg_8433, "None", "None", "TrueDamage"]);
        }
        var _remaintime_8432 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
        lua_tableset(_self, 'Size', 'L');
        lua_call(G.str['RunScript'], ['SCR_SYNC_RESIZE', _self, (3 / 2)]);
      } else if (lua_eq(lua_tableget(_self, 'Size'), 'S')) {
        var _Thaumaturge3_abil_8434 = lua_call(G.str['GetAbility'], [_caster_8427, 'Thaumaturge3'])[0];
        if (!lua_eq(_Thaumaturge3_abil_8434, null)) {
          var _dmg_8435 = lua_multiply(lua_multiply(lua_tableget(_caster_8427, 'MAXMATK'), 0.2), lua_tableget(_Thaumaturge3_abil_8434, 'Level'));
          lua_call(G.str['TakeDamage'], [_caster_8427, _self, "None", _dmg_8435, "None", "None", "TrueDamage"]);
        }
        var _remaintime_8434 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
        lua_tableset(_self, 'Size', 'M');
        lua_call(G.str['RunScript'], ['SCR_SYNC_RESIZE', _self, (3 / 2)]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwellBody_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hpadd_8436 = lua_call(G.str['GetExProp'], [_self, "ADD_HP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _hpadd_8436));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0]));
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0]));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0]));
      if (lua_lt(0, lua_call(G.str['GetBuffRemainTime'], [_buff])[0])) {
        return [1];
      } else {
        var _default_8438 = lua_call(G.str['GetExProp_Str'], [_self, "DefaultSize"])[0];
        if (lua_eq(_default_8438, 'S')) {
          if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
            lua_call(G.str['ChangeScale'], [_self, (2 / 3), 0.2]);
          } else if (lua_eq(lua_tableget(_self, 'Size'), 'L')) {
            lua_call(G.str['ChangeScale'], [_self, (4 / 9), 0.2]);
          }
          lua_tableset(_self, 'Size', _default_8438);
        } else if (lua_eq(_default_8438, 'M')) {
          if (lua_eq(lua_tableget(_self, 'Size'), 'L')) {
            lua_call(G.str['ChangeScale'], [_self, (2 / 3), 0.2]);
          }
          lua_tableset(_self, 'Size', _default_8438);
        } else if (lua_eq(_default_8438, 'L')) {
          if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
            lua_call(G.str['ChangeScale'], [_self, (3 / 2), 0.2]);
          } else if (lua_eq(lua_tableget(_self, 'Size'), 'S')) {
            lua_call(G.str['ChangeScale'], [_self, (9 / 4), 0.2]);
          }
          lua_tableset(_self, 'Size', _default_8438);
        }
      }
      lua_call(G.str['DelExProp'], [_self, "ReSizeFlag"]);
      lua_call(G.str['DelExProp'], [_self, 'ReSize']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShrinkBody_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8447 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "ReSizeFlag"])[0], 1)) {
        lua_call(G.str['SetExProp_Str'], [_self, "DefaultSize", lua_tableget(_self, 'Size')]);
        lua_call(G.str['SetExProp'], [_self, "ReSizeFlag", 1]);
      }
      var _addmspd_8447 = 0;
      var _addpatk_8447 = 0;
      var _addmatk_8447 = 0;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SwellBody_Debuff'])[0], 'YES')) {
        lua_call(G.str['RemoveBuff'], [_self, 'SwellBody_Debuff']);
      }
      G.str['Thaumaturge2_abil'] = lua_call(G.str['GetAbility'], [_caster_8447, 'Thaumaturge2'])[0];
      if ((!lua_eq(G.str['Thaumaturge2_abil'], null) && lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false))) {
        _addmspd_8447 = lua_tablegetcall(G.str['math'], 'floor', [(lua_multiply(lua_tableget(_self, 'MSPD'), (lua_multiply(lua_tableget(G.str['Thaumaturge2_abil'], 'Level'), 0.1))))])[0];
        _addpatk_8447 = lua_multiply(lua_tableget(G.str['Thaumaturge2_abil'], 'Level'), 0.15);
        _addmatk_8447 = lua_multiply(lua_tableget(G.str['Thaumaturge2_abil'], 'Level'), 0.15);
        lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addmspd_8447));
        lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _addpatk_8447));
        lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _addmatk_8447));
        lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _addmspd_8447]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _addpatk_8447]);
        lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _addmatk_8447]);
      }
      if (lua_eq(lua_tableget(_self, 'Size'), 'L')) {
        var _Thaumaturge4_abil_8451 = lua_call(G.str['GetAbility'], [_caster_8447, 'Thaumaturge4'])[0];
        if (!lua_eq(_Thaumaturge4_abil_8451, null)) {
          var _dmg_8452 = lua_multiply(lua_multiply(lua_tableget(_caster_8447, 'MAXMATK'), 0.2), lua_tableget(_Thaumaturge4_abil_8451, 'Level'));
          lua_call(G.str['TakeDamage'], [_caster_8447, _self, "None", _dmg_8452, "None", "None", "TrueDamage"]);
        }
        var _remaintime_8451 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
        lua_tableset(_self, 'Size', 'M');
        lua_call(G.str['RunScript'], ['SCR_SYNC_RESIZE', _self, (2 / 3)]);
      } else if ((lua_eq(lua_tableget(_self, 'Size'), 'M') || lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC']))) {
        var _Thaumaturge4_abil_8453 = lua_call(G.str['GetAbility'], [_caster_8447, 'Thaumaturge4'])[0];
        if (!lua_eq(_Thaumaturge4_abil_8453, null)) {
          var _dmg_8454 = lua_multiply(lua_multiply(lua_tableget(_caster_8447, 'MAXMATK'), 0.2), lua_tableget(_Thaumaturge4_abil_8453, 'Level'));
          lua_call(G.str['TakeDamage'], [_caster_8447, _self, "None", _dmg_8454, "None", "None", "TrueDamage"]);
        }
        lua_tableset(_self, 'Size', 'S');
        lua_call(G.str['RunScript'], ['SCR_SYNC_RESIZE', _self, (2 / 3)]);
      } else if ((lua_eq(lua_call(G.str['GetExProp_Str'], [_self, "ReSize"])[0], 'S') || lua_eq(lua_tableget(_self, 'Size'), 'S'))) {
        
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShrinkBody_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0]));
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0]));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0]));
      if (lua_lt(0, lua_call(G.str['GetBuffRemainTime'], [_buff])[0])) {
        return [1];
      }
      if (lua_lt(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        var _default_8458 = lua_call(G.str['GetExProp_Str'], [_self, "DefaultSize"])[0];
        if (lua_eq(_default_8458, 'L')) {
          if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
            lua_call(G.str['ChangeScale'], [_self, (3 / 2), 0.2]);
          } else if (lua_eq(lua_tableget(_self, 'Size'), 'S')) {
            lua_call(G.str['ChangeScale'], [_self, (9 / 4), 0.2]);
          }
          lua_tableset(_self, 'Size', _default_8458);
        } else if ((lua_eq(_default_8458, 'M') || lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OP_PC']))) {
          if (lua_eq(lua_tableget(_self, 'Size'), 'S')) {
            lua_call(G.str['ChangeScale'], [_self, (3 / 2), 0.2]);
          }
          lua_tableset(_self, 'Size', _default_8458);
        } else if (lua_eq(_default_8458, 'S')) {
          if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
            lua_call(G.str['ChangeScale'], [_self, (2 / 3), 0.2]);
          } else if (lua_eq(lua_tableget(_self, 'Size'), 'L')) {
            lua_call(G.str['ChangeScale'], [_self, (4 / 9), 0.2]);
          }
          lua_tableset(_self, 'Size', _default_8458);
        }
      }
      lua_call(G.str['DelExProp'], [_self, "ReSizeFlag"]);
      lua_call(G.str['DelExProp'], [_self, 'ReSize']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_IceBlast_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8467 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8467, null)) {
        _caster_8467 = _buff;
      }
      var _damage_8467 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8467, _self, 'Cryomancer_IceBlast'])[0];
      var _skill_8467 = lua_call(G.str['GET_MON_SKILL'], [_caster_8467, 'Cryomancer_IceBlast'])[0];
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'pcskill_icewall')) {
        lua_call(G.str['TakeDamage'], [_caster_8467, _self, lua_tableget(_skill_8467, 'ClassName'), _damage_8467, "Ice", "Magic", "Magic", G.str['HIT_ICE'], G.str['HITRESULT_BLOW']]);
      } else {
        if (!lua_eq(lua_call(G.str['GetBuffByProp'], [_self, 'Group1', 'Debuff'])[0], null)) {
          if (!lua_eq(lua_call(G.str['GetBuffByProp'], [_self, 'Keyword', 'Freeze'])[0], null)) {
            var _Cryomancer8_abil_8472 = lua_call(G.str['GetAbility'], [_caster_8467, "Cryomancer8"])[0];
            if (!lua_eq(_Cryomancer8_abil_8472, null)) {
              lua_call(G.str['SetExProp'], [_self, "ADD_ICEBLAST_DAMAGE", lua_multiply(lua_tableget(_Cryomancer8_abil_8472, 'Level'), 10)]);
            } else {
              lua_call(G.str['DelExProp'], [G.str['target'], 'ADD_ICEBLAST_DAMAGE']);
            }
            lua_call(G.str['TakeDamage'], [_caster_8467, _self, lua_tableget(_skill_8467, 'ClassName'), _damage_8467, "Ice", "Magic", "Magic", G.str['HIT_ICE'], G.str['HITRESULT_BLOW']]);
            lua_call(G.str['PlayEffect'], [_self, 'F_spread_out018_ground', 0.4]);
            if (lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], 50)) {
              lua_call(G.str['RemoveBuffKeyword'], [_self, 'Debuff', 'Freeze', 99, 99]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_IceBlast_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ADD_ICEBLAST_DAMAGE"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Flare_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8477 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8477, null)) {
        _caster_8477 = _buff;
      }
      if (!lua_eq(lua_call(G.str['GetBuffByProp'], [_self, 'Group1', 'Debuff'])[0], null)) {
        if (!lua_eq(lua_call(G.str['GetBuffByProp'], [_self, 'Group2', 'Fire'])[0], null)) {
          var _damage_8480 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8477, _self, 'Pyromancer_Flare'])[0];
          var _skill_8480 = lua_call(G.str['GET_MON_SKILL'], [_caster_8477, 'Pyromancer_Flare'])[0];
          var _Pyromancer9_abil_8480 = lua_call(G.str['GetAbility'], [_caster_8477, "Pyromancer9"])[0];
          if (!lua_eq(_Pyromancer9_abil_8480, null)) {
            lua_call(G.str['SetExProp'], [_self, "ADD_FLARE_DAMAGE", lua_multiply(lua_tableget(_Pyromancer9_abil_8480, 'Level'), 10)]);
          }
          lua_call(G.str['TakeDamage'], [_caster_8477, _self, lua_tableget(_skill_8480, 'ClassName'), _damage_8480, "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Flare_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ADD_FLARE_DAMAGE"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Transpose_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, 'Link_Sacrifice']);
      lua_call(G.str['RemoveBuff'], [_self, 'ShieldBash_Debuff']);
      var _beforeCon_8483 = lua_tableget(_self, 'CON');
      var _beforeInt_8483 = lua_tableget(_self, 'INT');
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_CON', _beforeCon_8483]);
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_INT', _beforeInt_8483]);
      var _afterCon_8483 = lua_tableget(_self, 'INT');
      var _afterInt_8483 = lua_tableget(_self, 'CON');
      var _caster_8483 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_8483 = lua_call(G.str['GetAbility'], [_caster_8483, "Thaumaturge9"])[0];
      if (!lua_eq(_abil_8483, null)) {
        _afterCon_8483 = lua_divide((lua_add(_beforeCon_8483, _beforeInt_8483)), 2);
        _afterInt_8483 = lua_divide((lua_add(_beforeCon_8483, _beforeInt_8483)), 2);
      }
      lua_call(G.str['SetExProp'], [_buff, 'AFTER_CON', _afterCon_8483]);
      lua_call(G.str['SetExProp'], [_buff, 'AFTER_INT', _afterInt_8483]);
      lua_tableset(_self, 'CON_BM', lua_add(lua_subtract(lua_tableget(_self, 'CON_BM'), _beforeCon_8483), _afterCon_8483));
      lua_tableset(_self, 'INT_BM', lua_add(lua_subtract(lua_tableget(_self, 'INT_BM'), _beforeInt_8483), _afterInt_8483));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Transpose_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _beforeCon_8485 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_CON'])[0];
      var _beforeInt_8485 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_INT'])[0];
      var _afterCon_8485 = lua_call(G.str['GetExProp'], [_buff, 'AFTER_CON'])[0];
      var _afterInt_8485 = lua_call(G.str['GetExProp'], [_buff, 'AFTER_INT'])[0];
      lua_tableset(_self, 'CON_BM', lua_add(lua_subtract(lua_tableget(_self, 'CON_BM'), _afterCon_8485), _beforeCon_8485));
      lua_tableset(_self, 'INT_BM', lua_add(lua_subtract(lua_tableget(_self, 'INT_BM'), _afterInt_8485), _beforeInt_8485));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Raid_buff_spd'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8486 = _over;
      var _mspdadd_8486 = lua_multiply(lua_tableget(_self, 'MSPD'), (lua_multiply(_lv_8486, 0.1)));
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8486));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8486]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raid_buff_spd'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8487 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8487));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Wizard_CountDown_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, 'CountDown_CheckTime'].concat(lua_call(G.str['GetUseSkillStartTime'], [_self])));
      lua_call(G.str['SetExProp'], [_buff, 'CountDown_INDEX', 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Wizard_CountDown_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _prevTime_8489 = lua_call(G.str['GetExProp'], [_buff, 'CountDown_CheckTime'])[0];
      var _useSkillTime_8489 = lua_call(G.str['GetUseSkillStartTime'], [_self])[0];
      if (lua_lt(_prevTime_8489, _useSkillTime_8489)) {
        var _count_8490 = lua_call(G.str['GetExProp'], [_buff, 'CountDown_INDEX'])[0];
        _count_8490 = lua_add(_count_8490, 1);
        lua_call(G.str['SetExProp'], [_buff, 'CountDown_INDEX', _count_8490]);
        lua_call(G.str['SetExProp'], [_buff, 'CountDown_CheckTime', _useSkillTime_8489]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Wizard_CountDown_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _count_8491 = lua_call(G.str['GetExProp'], [_buff, 'CountDown_INDEX'])[0];
      var _caster_8491 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8491, null)) {
        _caster_8491 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_8491, _self, "None", lua_multiply((lua_divide((lua_multiply((lua_add(lua_tableget(_caster_8491, 'MINMATK'), lua_tableget(_caster_8491, 'MAXMATK'))), lua_call(G.str['IMCRandomFloat'], [0.2, 0.9])[0])), 2)), (lua_add(_count_8491, 1)))]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_MagneticForce_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MagneticForce_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8494 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8494, null)) {
        var _Psychokino4_abil_8495 = lua_call(G.str['GetAbility'], [_caster_8494, 'Psychokino4'])[0];
        if (!lua_eq(_Psychokino4_abil_8495, null)) {
          if (lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], lua_multiply(lua_tableget(_Psychokino4_abil_8495, 'Level'), 5))) {
            lua_call(G.str['AddBuff'], [_caster_8494, _self, 'Stun', 1, 0, 4000, 1]);
          }
        }
      }
      if (lua_eq(_caster_8494, null)) {
        _caster_8494 = _buff;
      }
      var _MagneticDamage_8494 = 0;
      if (lua_eq(_arg2, G.str['HIT_STABDOLL'])) {
        _MagneticDamage_8494 = _arg1;
      } else {
        var _damage_8500 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8494, _self, 'Psychokino_MagneticForce'])[0];
        var _skill_8500 = lua_call(G.str['GET_MON_SKILL'], [_caster_8494, 'Psychokino_MagneticForce'])[0];
        lua_call(G.str['TakeDamage'], [_caster_8494, _self, lua_tableget(_skill_8500, 'ClassName'), _damage_8500, "Melee", "Magic", "Magic", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      }
      lua_call(G.str['RemoveBuff'], [_self, 'MagneticForce_Debuff_Hold']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Stun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Stun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Petrification'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['PlaySound'], [_self, 'skl_eff_debuff_stone']);
      lua_call(G.str['LeaveEffect'], [_self, lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 'Stonize', lua_tableget(_buff, 'ClassName')]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Petrification'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fear'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8507 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8507, null)) {
        _caster_8507 = _buff;
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['AddBuff'], [_caster_8507, _self, 'Stun', 1, 0, 1000, 1]);
      }
      var _patkadd_8507 = 0.3;
      var _matkadd_8507 = 0.3;
      var _atkspdadd_8507 = 250;
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8507));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8507));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _atkspdadd_8507]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_8507]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_8507]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATKSPD", _atkspdadd_8507]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fear'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8510 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_8510 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      var _atkspdadd_8510 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATKSPD"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8510));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8510));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_atkspdadd_8510)]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Virus_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8511 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _atk_8511 = 0;
      if (!lua_eq(_caster_8511, null)) {
        _atk_8511 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8511, _self, "Wugushi_WugongGu"])[0];
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _atk_8511, 0, 0]);
      lua_call(G.str['SetExProp'], [_buff, 'VIRUS_MAX_COUNT', _arg1]);
      lua_call(G.str['SetExProp'], [_buff, 'VIRUS_SPREAD_COUNT', 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Virus_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _atk_8513 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _caster_8513 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8513, null)) {
        var _skill_8514 = lua_call(G.str['GetSkill'], [_caster_8513, 'Wugushi_WugongGu'])[0];
        if (!lua_eq(_skill_8514, null)) {
          lua_call(G.str['TakeDamage'], [_caster_8513, _self, lua_tableget(_skill_8514, 'ClassName'), _atk_8513, "Poison", "Melee", "Melee", G.str['HIT_POISON_GREEN'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Virus_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Virus_Spread_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8517 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _atk_8517 = 0;
      if (!lua_eq(_caster_8517, null)) {
        _atk_8517 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8517, _self, "Wugushi_WugongGu"])[0];
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _atk_8517, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Virus_Spread_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _atk_8519 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _caster_8519 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8519, null)) {
        var _skill_8520 = lua_call(G.str['GetSkill'], [_caster_8519, 'Wugushi_WugongGu'])[0];
        if (!lua_eq(_skill_8520, null)) {
          lua_call(G.str['TakeDamage'], [_caster_8519, _self, lua_tableget(_skill_8520, 'ClassName'), _atk_8519, "Poison", "Melee", "Melee", G.str['HIT_POISON_GREEN'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Virus_Spread_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MSPDSteal'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResDark_BM', lua_add(lua_tableget(_self, 'ResDark_BM'), _arg2));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MSPDSteal'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResDark_BM', lua_subtract(lua_tableget(_self, 'ResDark_BM'), _arg2));
      return [];
    })
    G.str['SCR_BUFF_ENTER_LastRites_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _holyAddAttack_8525 = 0;
      var _caster_8525 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8525, null)) {
        var _skillSacrament_8526 = lua_call(G.str['GetSkill'], [_caster_8525, 'Priest_Sacrament'])[0];
        var _sacramentLv_8526 = lua_call(G.str['TryGetProp'], [_skillSacrament_8526, 'Level'])[0];
        if (lua_eq(_sacramentLv_8526, null)) {
          _sacramentLv_8526 = 1;
        }
        var _stat_8526 = lua_call(G.str['TryGetProp'], [_caster_8525, 'MNA'])[0];
        if (lua_eq(_stat_8526, null)) {
          _stat_8526 = 1;
        }
        _holyAddAttack_8525 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_add(lua_add(180, (lua_multiply((lua_subtract(_sacramentLv_8526, 1)), 60))), (lua_multiply((lua_divide(_sacramentLv_8526, 3)), (lua_power(_stat_8526, 0.9)))))), 1.2)])[0];
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _holyAddAttack_8525]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LastRites_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aspergillum_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aspergillum_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Gaigalas_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_card_Gaigalas_debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8533 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8533, null)) {
        _caster_8533 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_8533, _self, "None", 15, "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Gaigalas_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Poata_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Poata_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Sequoia_Blue_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 15));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Sequoia_Blue_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 15));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Wood_Spirit_Green_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Wood_Spirit_Green_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Chafer_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Chafer_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 5));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Abomination_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Paramune_Atk_BM', lua_add(lua_tableget(_self, 'Paramune_Atk_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Abomination_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Paramune_Atk_BM', lua_subtract(lua_tableget(_self, 'Paramune_Atk_BM'), 20));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Wood_Spirit_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_card_Wood_Spirit_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddHP'], [_self, 20]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Wood_Spirit_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_MagBurk_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_MagBurk_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Deadborn_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Paramune_Atk_BM', lua_add(lua_tableget(_self, 'Paramune_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Deadborn_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Paramune_Atk_BM', lua_subtract(lua_tableget(_self, 'Paramune_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Denoptic_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_card_Denoptic_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddHP'], [_self, 24]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Denoptic_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Moldyhorn_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Moldyhorn_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), 30));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_TombLord_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), 50));
        lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), 50));
        lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), 50));
        lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), 50));
        lua_tableset(_self, 'ResHoly_BM', lua_add(lua_tableget(_self, 'ResHoly_BM'), 50));
        lua_tableset(_self, 'ResDark_BM', lua_add(lua_tableget(_self, 'ResDark_BM'), 50));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_TombLord_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), 50));
        lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), 50));
        lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), 50));
        lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), 50));
        lua_tableset(_self, 'ResHoly_BM', lua_subtract(lua_tableget(_self, 'ResHoly_BM'), 50));
        lua_tableset(_self, 'ResDark_BM', lua_subtract(lua_tableget(_self, 'ResDark_BM'), 50));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Mushcaria_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), 8));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Mushcaria_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), 8));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Ginklas_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_card_Ginklas_debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8565 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8565, null)) {
        _caster_8565 = _buff;
      }
      lua_call(G.str['DamageReflect'], [_caster_8565, _self, "None", 30, "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_card_Ginklas_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Velorchard_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), 75));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Velorchard_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), 75));
      return [];
    })
    G.str['SCR_BUFF_ENTER_JackO_lantern_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Velnias_Atk_BM', lua_add(lua_tableget(_self, 'Velnias_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JackO_lantern_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Velnias_Atk_BM', lua_subtract(lua_tableget(_self, 'Velnias_Atk_BM'), 120));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Sparnas_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Sparnas_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), 100));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_spector_gh_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_card_spector_gh_buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['AddSP'], [_self, 20]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_spector_gh_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Kerberos_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Fire_Atk_BM', lua_add(lua_tableget(_self, 'Fire_Atk_BM'), lua_multiply(_over, 30)));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Kerberos_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Fire_Atk_BM', lua_subtract(lua_tableget(_self, 'Fire_Atk_BM'), lua_multiply(_over, 30)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Carapace_defbuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defAdd_8579 = lua_multiply(lua_tableget(_self, 'DEF'), 0.1);
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), lua_multiply(_over, _defAdd_8579)));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defAdd_8579]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Carapace_defbuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defAdd_8580 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), lua_multiply(_over, _defAdd_8580)));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Kerberos_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Dark_Atk_BM', lua_add(lua_tableget(_self, 'Dark_Atk_BM'), 15));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Kerberos_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Dark_Atk_BM', lua_subtract(lua_tableget(_self, 'Dark_Atk_BM'), 15));
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Onion_the_Great_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_card_Onion_the_Great_debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8584 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8584, null)) {
        _caster_8584 = _buff;
      }
      lua_call(G.str['TakeDamage'], [_caster_8584, _self, "None", 25, "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Onion_the_Great_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Zombieboss_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'UMBO_BM', lua_add(lua_tableget(_self, 'UMBO_BM'), 40));
      lua_tableset(_self, 'RIM_BM', lua_add(lua_tableget(_self, 'RIM_BM'), 40));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Zombieboss_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'UMBO_BM', lua_subtract(lua_tableget(_self, 'UMBO_BM'), 40));
      lua_tableset(_self, 'RIM_BM', lua_subtract(lua_tableget(_self, 'RIM_BM'), 40));
      return [];
    })
    G.str['SCR_BUFF_ENTER_AntiKD_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AntiKD_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_card_Hydra_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Widling_Atk_BM', lua_add(lua_tableget(_self, 'Widling_Atk_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_card_Hydra_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'Widling_Atk_BM', lua_subtract(lua_tableget(_self, 'Widling_Atk_BM'), 50));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ResistElements_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8593 = _arg1;
      var _caster_8593 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8593, null)) {
        var _pad_8594 = lua_call(G.str['GetPadByBuff'], [_caster_8593, _buff])[0];
        if (!lua_eq(_pad_8594, null)) {
          _lv_8593 = lua_call(G.str['GetPadArgNumber'], [_pad_8594, 1])[0];
        }
      }
      var _resadd_8593 = lua_add(24, lua_multiply(6.3, (lua_subtract(_lv_8593, 1))));
      var _abilresadd_8593 = 1;
      var _skill_8593 = lua_call(G.str['GetSkill'], [_caster_8593, "Paladin_ResistElements"])[0];
      if (lua_eq(_skill_8593, null)) {
        return [];
      }
      var _Paladin18_abil_8593 = lua_call(G.str['GetAbility'], [_caster_8593, 'Paladin18'])[0];
      if ((!lua_eq(_Paladin18_abil_8593, null) && lua_lte(3, lua_tableget(_skill_8593, 'Level')))) {
        _abilresadd_8593 = lua_add(_abilresadd_8593, lua_multiply(lua_tableget(_Paladin18_abil_8593, 'Level'), 0.01));
      }
      var _resiceadd_8593 = lua_multiply((lua_add(_resadd_8593, lua_multiply(lua_tableget(_self, 'ResIce'), 0.2))), _abilresadd_8593);
      var _resfireadd_8593 = lua_multiply((lua_add(_resadd_8593, lua_multiply(lua_tableget(_self, 'ResFire'), 0.2))), _abilresadd_8593);
      var _reslightadd_8593 = lua_multiply((lua_add(_resadd_8593, lua_multiply(lua_tableget(_self, 'ResLightning'), 0.2))), _abilresadd_8593);
      var _resposadd_8593 = lua_multiply((lua_add(_resadd_8593, lua_multiply(lua_tableget(_self, 'ResPoison'), 0.2))), _abilresadd_8593);
      var _researthadd_8593 = lua_multiply((lua_add(_resadd_8593, lua_multiply(lua_tableget(_self, 'ResEarth'), 0.2))), _abilresadd_8593);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), _resiceadd_8593));
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _resfireadd_8593));
        lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_8593));
        lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8593));
        lua_tableset(_self, 'ResEarth_BM', lua_add(lua_tableget(_self, 'ResEarth_BM'), _researthadd_8593));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_ICE", _resiceadd_8593]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIRE", _resfireadd_8593]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_LIGHT", _reslightadd_8593]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_POS", _resposadd_8593]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_EARTH", _researthadd_8593]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ResistElements_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_8599 = lua_call(G.str['GetExProp'], [_buff, "ADD_ICE"])[0];
      var _resfireadd_8599 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIRE"])[0];
      var _reslightadd_8599 = lua_call(G.str['GetExProp'], [_buff, "ADD_LIGHT"])[0];
      var _resposadd_8599 = lua_call(G.str['GetExProp'], [_buff, "ADD_POS"])[0];
      var _researthadd_8599 = lua_call(G.str['GetExProp'], [_buff, "ADD_EARTH"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), _resiceadd_8599));
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _resfireadd_8599));
        lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_8599));
        lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8599));
        lua_tableset(_self, 'ResEarth_BM', lua_subtract(lua_tableget(_self, 'ResEarth_BM'), _researthadd_8599));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_collection_06003_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_collection_06003_debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8602 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8602, null)) {
        _caster_8602 = _buff;
      }
      var _dotDmg_8602 = lua_multiply(lua_tableget(_self, 'MHP'), 0.02);
      lua_call(G.str['TakeDamage'], [_caster_8602, _self, "None", _dotDmg_8602, "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_collection_06003_debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_collection_06004_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), 100));
        lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), 100));
        lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), 100));
        lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), 100));
        lua_tableset(_self, 'ResHoly_BM', lua_add(lua_tableget(_self, 'ResHoly_BM'), 100));
        lua_tableset(_self, 'ResDark_BM', lua_add(lua_tableget(_self, 'ResDark_BM'), 100));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_collection_06004_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), 100));
        lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), 100));
        lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), 100));
        lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), 100));
        lua_tableset(_self, 'ResHoly_BM', lua_subtract(lua_tableget(_self, 'ResHoly_BM'), 100));
        lua_tableset(_self, 'ResDark_BM', lua_subtract(lua_tableget(_self, 'ResDark_BM'), 100));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Resizeing'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'Size'), 'S')) {
        lua_call(G.str['ChangeScale'], [_self, 2.0, 0.2]);
        lua_call(G.str['SetExProp'], [_self, "Resize", 1]);
        lua_tableset(_self, 'Size', 'L');
      }
      if ((!lua_eq(lua_call(G.str['GetExProp'], [_self, 'Resize'])[0], 1) && lua_eq(lua_tableget(_self, 'Size'), 'L'))) {
        lua_call(G.str['ChangeScale'], [_self, (1 / 2), 0.2]);
        lua_call(G.str['SetExProp'], [_self, "Resize", 1]);
        lua_tableset(_self, 'Size', 'S');
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Resizeing'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if ((lua_eq(lua_tableget(_self, 'Size'), 'S') && lua_eq(lua_call(G.str['GetExProp'], [_self, 'Resize'])[0], 1))) {
        lua_call(G.str['ChangeScale'], [_self, 2.0, 0.2]);
        lua_tableset(_self, 'Size', 'L');
        lua_call(G.str['SetExProp'], [_self, "Resize", 0]);
      }
      if ((lua_eq(lua_tableget(_self, 'Size'), 'L') && lua_eq(lua_call(G.str['GetExProp'], [_self, 'Resize'])[0], 1))) {
        lua_call(G.str['ChangeScale'], [_self, (1 / 2), 0.2]);
        lua_tableset(_self, 'Size', 'S');
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ironskin_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damratio_8615 = 100;
      lua_tableset(_self, 'DamReflect', lua_add(lua_tableget(_self, 'DamReflect'), _damratio_8615));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DAMREFLCET", _damratio_8615]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ironskin_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _damratio_8616 = lua_call(G.str['GetExProp'], [_buff, "ADD_DAMREFLCET"])[0];
      lua_tableset(_self, 'DamReflect', lua_subtract(lua_tableget(_self, 'DamReflect'), _damratio_8616));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ironskin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Ironskin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      G.str['ticdamage'] = lua_divide(lua_call(G.str['GetExProp'], [_self, "AfterEffect"])[0], 20);
      lua_call(G.str['TakeDamage'], [_self, _self, "None", lua_divide(lua_call(G.str['GetExProp'], [_self, "AfterEffect"])[0], 20), "None", "None", "None", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ironskin_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Golden_Bell_Shield_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8620 = 1;
      lua_call(G.str['SetExProp'], [_self, 'DEFENCED_BM', _addDefenced_BM_8620]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8620));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Golden_Bell_Shield_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _addDefenced_BM_8621 = lua_call(G.str['GetExProp'], [_self, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8621));
      var _abilMonk7_8621 = lua_call(G.str['GetAbility'], [_self, 'Monk7'])[0];
      if ((!lua_eq(_abilMonk7_8621, null) && lua_eq(_isLastEnd, 1))) {
        lua_call(G.str['AddBuff'], [_self, _self, 'PainBarrier_Buff', 1, 0, 5000, 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Golden_Bell_Shield_Safety'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8623 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_8623]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8623));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Golden_Bell_Shield_Safety'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8624 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8624));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ausirine_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8625 = 1;
      lua_call(G.str['SetExProp'], [_self, 'DEFENCED_BM', _addDefenced_BM_8625]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8625));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ausirine_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8626 = lua_call(G.str['GetExProp'], [_self, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8626));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_ThrowItem_Debuff_RH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_THROWITEM_DEBUFF_ENTER'], [_self, _buff, "RH"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Warrior_ThrowItem_Debuff_RH'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SCR_THROWITEM_DEBUFF_UPDATE'], [_self, _buff, "RH"]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_ThrowItem_Debuff_RH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_THROWITEM_DEBUFF_LEAVE'], [_self, _buff, "RH"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_ThrowItem_Debuff_LH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_THROWITEM_DEBUFF_ENTER'], [_self, _buff, "LH"]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Warrior_ThrowItem_Debuff_LH'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['SCR_THROWITEM_DEBUFF_UPDATE'], [_self, _buff, "LH"]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_ThrowItem_Debuff_LH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SCR_THROWITEM_DEBUFF_LEAVE'], [_self, _buff, "LH"]);
      return [];
    })
    G.str['SCR_THROWITEM_DEBUFF_ENTER'] = (function (_self, _buff, _handType) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, 'PICK_EQUIPITEM', 0]);
      var _equipItem_8633 = lua_call(G.str['GetEquipItem'], [_self, _handType])[0];
      if (!lua_eq(_equipItem_8633, null)) {
        var _itemGUID_8634 = lua_call(G.str['GetItemGuid'], [_equipItem_8633])[0];
        lua_call(G.str['SetExProp_Str'], [_buff, 'EQUIP_ITEM_ID', _itemGUID_8634]);
        if (lua_eq(_handType, 'LH')) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Warrior_LH_VisibleObject']);
        } else if (lua_eq(_handType, 'RH')) {
          lua_call(G.str['AddBuff'], [_self, _self, 'Warrior_RH_VisibleObject']);
        }
      }
      return [];
    })
    G.str['SCR_THROWITEM_DEBUFF_UPDATE'] = (function (_self, _buff, _handType) {
      var tmp;
      var _equipObj_8637 = lua_call(G.str['GetExArgObject'], [_self, lua_concat("THROW_ITEM_OBJ_", _handType)])[0];
      if (lua_eq(_equipObj_8637, null)) {
        lua_call(G.str['RemoveBuff'], [_self, lua_concat('Warrior_ThrowItem_Debuff_', _handType)]);
        return [];
      }
      var _isDethroneSkl_8637 = lua_call(G.str['GetExProp'], [_buff, 'IS_DETHRONE_SKIL'])[0];
      if (!lua_eq(_isDethroneSkl_8637, 0)) {
        var _checkTime_8639 = lua_call(G.str['GetExProp'], [_buff, "DETHRONE_SKIL_CHECkTIME"])[0];
        if (lua_lt(lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0], _checkTime_8639)) {
          return [];
        }
      }
      tmp = lua_call(G.str['SelectObject'], [_self, 50, 'ALL']); var _list_8637 = tmp[0]; var _Cnt_8637 = tmp[1]; tmp = null;
      var var_8641 = 1, stop_8641 = lua_assertfloat(_Cnt_8637);
      for (; var_8641 <= stop_8641; var_8641++) {
        var _i_8641 = var_8641;
        if (lua_eq(1, lua_call(G.str['IsSameObject'], [lua_tableget(_list_8637, _i_8641), _equipObj_8637])[0])) {
          lua_call(G.str['Kill'], [_equipObj_8637]);
          if (lua_eq(_handType, 'LH')) {
            lua_call(G.str['RemoveBuff'], [_self, 'Warrior_LH_VisibleObject']);
          } else if (lua_eq(_handType, 'RH')) {
            lua_call(G.str['RemoveBuff'], [_self, 'Warrior_RH_VisibleObject']);
          }
          lua_call(G.str['RemoveBuff'], [_self, lua_concat('Warrior_ThrowItem_Debuff_', _handType)]);
          return [];
        }
      }
      return [];
    })
    G.str['SCR_THROWITEM_DEBUFF_LEAVE'] = (function (_self, _buff, _handType) {
      var tmp;
      var _equipObj_8646 = lua_call(G.str['GetExArgObject'], [_self, lua_concat("THROW_ITEM_OBJ_", _handType)])[0];
      if (!lua_eq(_equipObj_8646, null)) {
        lua_call(G.str['Kill'], [_equipObj_8646]);
      }
      lua_call(G.str['ClearExArgObject'], [_self, lua_concat("THROW_ITEM_OBJ_", _handType)]);
      if (lua_eq(_handType, 'LH')) {
        lua_call(G.str['RemoveBuff'], [_self, 'Warrior_LH_VisibleObject']);
      } else if (lua_eq(_handType, 'RH')) {
        lua_call(G.str['RemoveBuff'], [_self, 'Warrior_RH_VisibleObject']);
      }
      return [];
    })
    G.str['SCR_THROWITEM_DELETE'] = (function (_self, _handType) {
      var tmp;
      var _equipItem_8650 = lua_call(G.str['GetEquipItem'], [_self, _handType])[0];
      if (lua_eq(_equipItem_8650, null)) {
        return [];
      }
      var _tx_8650 = lua_call(G.str['TxBegin'], [_self])[0];
      lua_call(G.str['TxTakeItemByObject'], [_tx_8650, _equipItem_8650, 1]);
      var _ret_8650 = lua_call(G.str['TxCommit'], [_tx_8650])[0];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Impaler_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddLimitationSkillList'], [_self, 'Cataphract_Impaler']);
      lua_call(G.str['AddIgnoreSkillCoolTime'], [_self, 'Cataphract_Impaler']);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Impaler_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      lua_call(G.str['ClearIgnoreSkillCoolTime'], [_self]);
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Impaler_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillCancel'], [_self]);
      var _caster_8654 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_8654 = lua_call(G.str['GetSkill'], [_caster_8654, "Cataphract_Impaler"])[0];
      var _buffTime_8654 = lua_add(8000, lua_multiply(lua_tableget(_skill_8654, 'Level'), 1000));
      var _zone_8654 = lua_call(G.str['GetZoneName'], [_self])[0];
      if ((lua_eq(lua_call(G.str['IsPVPServer'], [_caster_8654])[0], 1) || lua_eq(_zone_8654, 'pvp_Mine'))) {
        _buffTime_8654 = 6000;
      }
      lua_call(G.str['AddBuff'], [_caster_8654, _caster_8654, 'Impaler_Buff', _arg1, _arg2, _buffTime_8654, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Impaler_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8656 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8656, null)) {
        lua_call(G.str['DetachFromObject'], [_self, _caster_8656]);
        lua_call(G.str['RemoveBuff'], [_caster_8656, 'Impaler_Buff']);
        tmp = lua_call(G.str['GetFrontPos'], [_caster_8656, 10]); var _x_8657 = tmp[0]; var _y_8657 = tmp[1]; var _z_8657 = tmp[2]; tmp = null;
        lua_call(G.str['SetPos'], [_self, _x_8657, _y_8657, _z_8657]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Stabbing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['AddLimitationSkillList'], [_self, 'Hoplite_Stabbing']);
      lua_call(G.str['AddIgnoreSkillCoolTime'], [_self, 'Hoplite_Stabbing']);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Stabbing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      lua_call(G.str['ClearIgnoreSkillCoolTime'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_Kneelingshot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ranadd_8660 = 0;
      var _atkadd_8660 = 0;
      var _criadd_8660 = 0;
      var _atkspdadd_8660 = 0;
      var _abil_8660 = lua_call(G.str['GetAbility'], [_self, 'Focusing'])[0];
      if (!lua_eq(_abil_8660, null)) {
        _criadd_8660 = lua_multiply(lua_tableget(_abil_8660, 'Level'), 40);
      }
      var _skill_8660 = lua_call(G.str['GetSkill'], [_self, 'Archer_Kneelingshot'])[0];
      if (!lua_eq(_skill_8660, null)) {
        _ranadd_8660 = lua_add(lua_multiply(lua_tableget(_skill_8660, 'Level'), 2.5), 10);
        _atkadd_8660 = lua_add(15.4, lua_multiply((lua_subtract(lua_tableget(_skill_8660, 'Level'), 1)), 4.1));
        _atkspdadd_8660 = lua_multiply(lua_tableget(_skill_8660, 'Level'), 30);
        var _Archer21_abil_8662 = lua_call(G.str['GetAbility'], [_self, "Archer21"])[0];
        var _Archer22_abil_8662 = lua_call(G.str['GetAbility'], [_self, "Archer22"])[0];
        if (!lua_eq(_Archer22_abil_8662, null)) {
          _atkadd_8660 = lua_multiply(_atkadd_8660, 1.44);
        } else if ((lua_eq(_Archer22_abil_8662, null) && !lua_eq(_Archer21_abil_8662, null))) {
          _atkadd_8660 = lua_multiply(_atkadd_8660, 1.38);
        }
        var _DEX_8662 = lua_call(G.str['TryGetProp'], [_self, "DEX"])[0];
        var _atkrate_8662 = lua_multiply(_DEX_8662, (lua_multiply(lua_tableget(_skill_8660, 'Level'), 0.2)));
        _atkadd_8660 = lua_add(_atkadd_8660, _atkrate_8662);
        var _Archer14_abil_8662 = lua_call(G.str['GetAbility'], [_self, 'Archer14'])[0];
        if ((!lua_eq(_Archer14_abil_8662, null) && lua_lte(3, lua_tableget(_skill_8660, 'Level')))) {
          _atkadd_8660 = lua_multiply(_atkadd_8660, (lua_add(1, lua_multiply(lua_tableget(_Archer14_abil_8662, 'Level'), 0.01))));
        }
      }
      _ranadd_8660 = lua_tablegetcall(G.str['math'], 'floor', [_ranadd_8660])[0];
      _atkadd_8660 = lua_tablegetcall(G.str['math'], 'floor', [_atkadd_8660])[0];
      _criadd_8660 = lua_tablegetcall(G.str['math'], 'floor', [_criadd_8660])[0];
      _atkspdadd_8660 = lua_tablegetcall(G.str['math'], 'floor', [_atkspdadd_8660])[0];
      lua_tableset(_self, 'MaxR_BM', lua_add(lua_tableget(_self, 'MaxR_BM'), _ranadd_8660));
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _atkadd_8660));
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _criadd_8660));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_atkspdadd_8660)]);
      lua_call(G.str['SetExProp'], [_buff, "Kneelingshot_ADDRANGE", _ranadd_8660]);
      lua_call(G.str['SetExProp'], [_buff, "Kneelingshot_ADDATK", _atkadd_8660]);
      lua_call(G.str['SetExProp'], [_buff, "Kneelingshot_ADDCRI", _criadd_8660]);
      lua_call(G.str['SetExProp'], [_buff, "Kneelingshot_ATKSPD", _atkspdadd_8660]);
      var _skl_8660 = lua_call(G.str['GetSkill'], [_self, "Archer_Kneelingshot"])[0];
      lua_call(G.str['InvalidateObjectProp'], [_skl_8660, "MaxR"]);
      lua_call(G.str['SendSkillProperty'], [_self, _skl_8660]);
      var _normalAttackList_8660 = lua_newtable();
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Archer_Kneelingshot");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Bow_Attack");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Bow_Attack2");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "CrossBow_Attack");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Musket_Attack");
      if (!lua_eq(null, lua_call(G.str['GetAbility'], [_self, 'Musketeer17'])[0])) {
        lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Musketeer_PenetrationShot");
      }
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_ShootDown");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_SiegeBurst");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_CannonBlast");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_CannonBarrage");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_CannonShot");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_SmokeGrenade");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Musketeer_SnipersSerenity");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "Cannoneer_SweepingCannon");
      lua_tableset(_normalAttackList_8660, lua_add(lua_len(_normalAttackList_8660), 1), "DoubleGun_Attack");
      var var_8667 = 1, stop_8667 = lua_assertfloat(lua_len(_normalAttackList_8660));
      for (; var_8667 <= stop_8667; var_8667++) {
        var _i_8667 = var_8667;
        var _norm_8668 = lua_tableget(_normalAttackList_8660, _i_8667);
        var _normalSkl_8668 = lua_call(G.str['GetSkill'], [_self, _norm_8668])[0];
        if (!lua_eq(_normalSkl_8668, null)) {
          lua_call(G.str['InvalidateObjectProp'], [_normalSkl_8668, "MaxR"]);
          lua_call(G.str['SendSkillProperty'], [_self, _normalSkl_8668]);
          lua_call(G.str['AddLimitationSkillList'], [_self, _norm_8668]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_Kneelingshot'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ranadd_8670 = lua_call(G.str['GetExProp'], [_buff, "Kneelingshot_ADDRANGE"])[0];
      var _atkadd_8670 = lua_call(G.str['GetExProp'], [_buff, "Kneelingshot_ADDATK"])[0];
      var _criadd_8670 = lua_call(G.str['GetExProp'], [_buff, "Kneelingshot_ADDCRI"])[0];
      var _atkspdadd_8670 = lua_call(G.str['GetExProp'], [_buff, "Kneelingshot_ATKSPD"])[0];
      lua_tableset(_self, 'MaxR_BM', lua_subtract(lua_tableget(_self, 'MaxR_BM'), _ranadd_8670));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _atkadd_8670));
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _criadd_8670));
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _atkspdadd_8670]);
      var _skl_8670 = lua_call(G.str['GetSkill'], [_self, "Archer_Kneelingshot"])[0];
      lua_call(G.str['InvalidateObjectProp'], [_skl_8670, "MaxR"]);
      lua_call(G.str['SendProperty'], [_self, _skl_8670]);
      var _normalAttackList_8670 = lua_newtable();
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "Archer_Kneelingshot");
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "Bow_Attack");
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "Bow_Attack2");
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "CrossBow_Attack");
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "Musket_Attack");
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "Musketeer_PenetrationShot");
      lua_tableset(_normalAttackList_8670, lua_add(lua_len(_normalAttackList_8670), 1), "Musketeer_SnipersSerenity");
      var var_8671 = 1, stop_8671 = lua_assertfloat(lua_len(_normalAttackList_8670));
      for (; var_8671 <= stop_8671; var_8671++) {
        var _i_8671 = var_8671;
        var _norm_8672 = lua_tableget(_normalAttackList_8670, _i_8671);
        var _normalSkl_8672 = lua_call(G.str['GetSkill'], [_self, _norm_8672])[0];
        if (!lua_eq(_normalSkl_8672, null)) {
          lua_call(G.str['InvalidateObjectProp'], [_normalSkl_8672, "MaxR"]);
          lua_call(G.str['SendSkillProperty'], [_self, _normalSkl_8672]);
        }
      }
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Bazooka_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAttackSpeed_8674 = 0;
      var _minRangeLimit_8674 = 50;
      var _abil_Cannoneer16_8674 = lua_call(G.str['GetAbility'], [_self, "Cannoneer16"])[0];
      if ((!lua_eq(_abil_Cannoneer16_8674, null) && lua_eq(lua_tableget(_abil_Cannoneer16_8674, 'ActiveState'), 1))) {
        _addAttackSpeed_8674 = 250;
        _minRangeLimit_8674 = 0;
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_ATKSPD", _addAttackSpeed_8674]);
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_addAttackSpeed_8674)]);
      lua_call(G.str['SetLimitMinTargetRange'], [_self, _minRangeLimit_8674, "Cannon_Attack"]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['ChangeNormalAttack'], [_self, "Cannon_Attack"]);
      var _normalAttackList_8674 = lua_newtable();
      lua_tableset(_normalAttackList_8674, lua_add(lua_len(_normalAttackList_8674), 1), "Cannoneer_Bazooka");
      lua_tableset(_normalAttackList_8674, lua_add(lua_len(_normalAttackList_8674), 1), "Cannon_Attack");
      var _skill_8674 = lua_call(G.str['GetSkill'], [_self, "Cannon_Attack"])[0];
      var _ranadd_8674 = lua_multiply(_arg1, 8);
      lua_tableset(_self, 'MaxR_BM', lua_add(lua_tableget(_self, 'MaxR_BM'), _ranadd_8674));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MAXR", _ranadd_8674]);
      lua_call(G.str['InvalidateObjectProp'], [_skill_8674, "MaxR"]);
      lua_call(G.str['SendSkillProperty'], [_self, _skill_8674]);
      var var_8676 = 1, stop_8676 = lua_assertfloat(lua_len(_normalAttackList_8674));
      for (; var_8676 <= stop_8676; var_8676++) {
        var _i_8676 = var_8676;
        var _norm_8677 = lua_tableget(_normalAttackList_8674, _i_8676);
        var _normalSkl_8677 = lua_call(G.str['GetSkill'], [_self, _norm_8677])[0];
        if (!lua_eq(_normalSkl_8677, null)) {
          lua_call(G.str['AddLimitationSkillList'], [_self, _norm_8677]);
        }
      }
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_CannonShot"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_ShootDown"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_SiegeBurst"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_CannonBlast"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_CannonBarrage"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_SmokeGrenade"]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Cannoneer_SweepingCannon"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Bazooka_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addAttackSpeed_8679 = lua_call(G.str['GetExProp'], [_buff, "ADD_ATKSPD"])[0];
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _addAttackSpeed_8679]);
      lua_call(G.str['SetLimitMinTargetRange'], [_self, 0, "Cannon_Attack"]);
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      lua_call(G.str['ChangeNormalAttack'], [_self, "None"]);
      var _ranadd_8679 = lua_call(G.str['GetExProp'], [_buff, "ADD_MAXR"])[0];
      lua_tableset(_self, 'MaxR_BM', lua_subtract(lua_tableget(_self, 'MaxR_BM'), _ranadd_8679));
      var _skill_8679 = lua_call(G.str['GetSkill'], [_self, "Cannon_Attack"])[0];
      lua_call(G.str['InvalidateObjectProp'], [_skill_8679, "MaxR"]);
      lua_call(G.str['SendSkillProperty'], [_self, _skill_8679]);
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_LightningHands_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeNormalAttack'], [_self, "LightningHands_Attack"]);
      var _normalAttackList_8680 = lua_newtable();
      lua_tableset(_normalAttackList_8680, lua_add(lua_len(_normalAttackList_8680), 1), "Enchanter_LightningHands");
      lua_tableset(_normalAttackList_8680, lua_add(lua_len(_normalAttackList_8680), 1), "LightningHands_Attack");
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LightningHands_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeNormalAttack'], [_self, "None"]);
      lua_call(G.str['ChangeSkillAniNameImmediately'], [_self, 'Magic_Attack', 'None']);
      lua_call(G.str['ChangeSkillAniNameImmediately'], [_self, 'Magic_Attack_TH', 'None']);
      return [];
    })
    G.str['SCR_BUFF_ENTER_FireBall_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeScale'], [_self, 1.3]);
      lua_call(G.str['SetExProp'], [_self, 'FIREBALL_HIT_COUNT', 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FireBall_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8683 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8683, null)) {
        lua_call(G.str['Kill'], [_self]);
        return [1];
      }
      var _hitCount_8683 = lua_call(G.str['GetExProp'], [_self, 'FIREBALL_HIT_COUNT'])[0];
      var _curTime_8683 = lua_tablegetcall(G.str['imcTime'], 'GetAppTime', [])[0];
      var _isAttack_8683 = false;
      tmp = lua_call(G.str['SelectObject'], [_self, 25, 'ALL']); var _objList_8683 = tmp[0]; var _objCount_8683 = tmp[1]; tmp = null;
      var var_8685 = 1, stop_8685 = lua_assertfloat(_objCount_8683);
      for (; var_8685 <= stop_8685; var_8685++) {
        var _i_8685 = var_8685;
        var _obj_8686 = lua_tableget(_objList_8683, _i_8685);
        if (((!lua_eq(_obj_8686, null) && lua_eq(lua_call(G.str['GetRelation'], [_caster_8683, _obj_8686])[0], "ENEMY")) && lua_eq(lua_call(G.str['IsSameActor'], [_obj_8686, _self])[0], "NO"))) {
          if ((!lua_eq(lua_tableget(_obj_8686, 'ClassName'), "hidden_monster2") && lua_lt(0, _hitCount_8683))) {
            var _time_8688 = lua_call(G.str['GetExProp'], [_obj_8686, 'FIREBALL_HIT_TIME'])[0];
            if (lua_lt(lua_add(_time_8688, 1), _curTime_8683)) {
              var _splashRange_8689 = 70;
              var _dmgRage_8689 = 1;
              var _sr_8689 = 15;
              _isAttack_8683 = lua_call(G.str['FIREBALL_SPLASH_DAMAGE'], [_self, _caster_8683, 'Pyromancer_FireBall', _splashRange_8689, _sr_8689])[0];
              if (lua_eq(_isAttack_8683, true)) {
                lua_call(G.str['PlayEffect'], [_self, "F_wizard_fireball_hit_full_explosion", 2.0]);
                _hitCount_8683 = lua_subtract(_hitCount_8683, 1);
                lua_call(G.str['SetExProp'], [_self, 'FIREBALL_HIT_COUNT', _hitCount_8683]);
                break;
              }
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FireBall_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['FIREBALL_SPLASH_DAMAGE'] = (function (_fireMon, _caster, _skillName, _range, _sr) {
      var tmp;
      var _isAttack_8692 = false;
      var _skill_8692 = lua_call(G.str['GET_MON_SKILL'], [_caster, 'Pyromancer_FireBall'])[0];
      if (!lua_eq(_skill_8692, null)) {
        tmp = lua_call(G.str['SelectObjectNear'], [_caster, _fireMon, _range, 'ENEMY']); var _objList_8693 = tmp[0]; var _objCount_8693 = tmp[1]; tmp = null;
        var var_8694 = 1, stop_8694 = lua_assertfloat(_objCount_8693);
        for (; var_8694 <= stop_8694; var_8694++) {
          var _i_8694 = var_8694;
          var _obj_8695 = lua_tableget(_objList_8693, _i_8694);
          if (lua_eq(_obj_8695, _fireMon)) {
            return [];
          }
          if ((lua_eq(lua_call(G.str['IsSameActor'], [_obj_8695, _caster])[0], "NO") && lua_eq(lua_call(G.str['IsSameActor'], [_obj_8695, _fireMon])[0], "NO"))) {
            var _damage_8697 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster, _obj_8695, 'Pyromancer_FireBall'])[0];
            lua_call(G.str['TakeDamage'], [_caster, _obj_8695, _skillName, _damage_8697, "Fire", "Magic", "Magic", G.str['HIT_FIRE'], G.str['HITRESULT_BLOW']]);
            _sr = lua_subtract(_sr, lua_tableget(_obj_8695, 'SDR'));
            _isAttack_8692 = true;
            lua_call(G.str['SetExProp'], [_obj_8695, 'FIREBALL_HIT_TIME', G.str['curTime']]);
            var _pyromancer1_abil_8697 = lua_call(G.str['GetAbility'], [_caster, 'Pyromancer1'])[0];
            if (!lua_eq(_pyromancer1_abil_8697, null)) {
              var _rand_8698 = lua_multiply(lua_tableget(_pyromancer1_abil_8697, 'Level'), 1000);
              if (lua_lt(lua_call(G.str['IMCRandom'], [1, 10000])[0], _rand_8698)) {
                var _dot_8699 = lua_multiply(lua_tableget(_caster, 'MINMATK'), 0.5);
                lua_call(G.str['AddBuff'], [_caster, _obj_8695, "Fire", _dot_8699, 0, 5000, 1]);
              }
            }
          }
          if (lua_lte(_sr, 0)) {
            return [_isAttack_8692];
          }
        }
      }
      return [_isAttack_8692];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_EnableMovingShot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMovingShootSpd_8701 = lua_multiply(_arg1, 1.5);
      lua_tableset(_self, 'MovingShot_BM', lua_add(lua_tableget(_self, 'MovingShot_BM'), _addMovingShootSpd_8701));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_MOVINGSHOT_BM', _addMovingShootSpd_8701]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_EnableMovingShot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMovingShotSpeed_8702 = lua_call(G.str['GetExProp'], [_buff, 'ADD_MOVINGSHOT_BM'])[0];
      lua_tableset(_self, 'MovingShot_BM', lua_subtract(lua_tableget(_self, 'MovingShot_BM'), _addMovingShotSpeed_8702));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ResistElements_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefrate_8703 = 0.08;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefrate_8703));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_MDEF_BM2', _mdefrate_8703]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ResistElements_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefrate_8704 = lua_call(G.str['GetExProp'], [_buff, 'ADD_MDEF_BM2'])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefrate_8704));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Subzero_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Subzero_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Conversion_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _curHpPercent_8707 = lua_multiply(lua_call(G.str['GetHpPercent'], [_self])[0], 100);
      lua_call(G.str['SetExProp'], [_buff, 'CUR_HP_PERCENT', _curHpPercent_8707]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Conversion_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Conversion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Conversion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8710 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8710, null)) {
        lua_call(G.str['Kill'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Conversion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Avoid'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _adddr_8713 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 50)])[0];
      var _addmdef_8713 = lua_multiply(_arg1, 0.05);
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _adddr_8713));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _addmdef_8713));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _adddr_8713]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _addmdef_8713]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Avoid'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _adddr_8714 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      var _addmdef_8714 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _adddr_8714));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _addmdef_8714));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShieldPush_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defrate_8715 = lua_multiply(0.01, _arg1);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_8715));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_DEF_RATE', _defrate_8715]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShieldPush_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defrate_8716 = lua_call(G.str['GetExProp'], [_buff, 'ADD_DEF_RATE'])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_8716));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Warrior_GuardImpact_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCrtATK_8717 = lua_multiply(lua_multiply(lua_tableget(_self, 'CRTATK'), _arg1), 0.05);
      lua_tableset(_self, 'CRTATK_BM', lua_add(lua_tableget(_self, 'CRTATK_BM'), _addCrtATK_8717));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_CRT_ABIL', _addCrtATK_8717]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Warrior_GuardImpact_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCrtAtk_8718 = lua_call(G.str['GetExProp'], [_buff, 'ADD_CRT_ABIL'])[0];
      lua_tableset(_self, 'CRTATK_BM', lua_subtract(lua_tableget(_self, 'CRTATK_BM'), _addCrtAtk_8718));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Bwakaylman_ZombieDef'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDef_8719 = lua_multiply(_arg1, 3);
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _addDef_8719));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_DEF_ABIL', _addDef_8719]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Bwakaylman_ZombieDef'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDef_8720 = lua_call(G.str['GetExProp'], [_buff, 'ADD_DEF_ABIL'])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addDef_8720));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DelayDamage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8721 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8721, null)) {
        lua_call(G.str['TakeDamage'], [_caster_8721, _self, "Linker_HangmansKnot", _arg1, "Melee", "Magic", "TrueDamage", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_HangmansKnot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HangmansKnot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HangmansKnot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hangmansknot_SDR_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FixedMinSDR_BM', lua_add(lua_tableget(_self, 'FixedMinSDR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hangmansknot_SDR_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'FixedMinSDR_BM', lua_subtract(lua_tableget(_self, 'FixedMinSDR_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Wizard_SklCasting_Avoid'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDR_8729 = lua_multiply(_arg2, 50);
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _addDR_8729));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_DR_ABIL', _addDR_8729]);
      lua_call(G.str['Invalidate'], [_self, "DR"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Wizard_SklCasting_Avoid'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDR_8730 = lua_call(G.str['GetExProp'], [_buff, 'ADD_DR_ABIL'])[0];
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _addDR_8730));
      lua_call(G.str['Invalidate'], [_self, "DR"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GravityPole_Def_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDef_8731 = lua_multiply(_arg2, 0.04);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _addDef_8731));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _addDef_8731));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_DEF_ABIL', _addDef_8731]);
      lua_call(G.str['SetExProp'], [_buff, 'ADD_MDEF_ABIL', _addDef_8731]);
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      lua_call(G.str['Invalidate'], [_self, "MDEF"]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GravityPole_Def_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDef_8732 = lua_call(G.str['GetExProp'], [_buff, 'ADD_DEF_ABIL'])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _addDef_8732));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _addDef_8732));
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      lua_call(G.str['Invalidate'], [_self, "MDEF"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GravityPolePVP_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addmspd_8733 = 20;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addmspd_8733));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _addmspd_8733]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GravityPolePVP_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addmspd_8734 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addmspd_8734));
      return [];
    })
    G.str['SCR_BUFF_ENTER_murmillo_helmet'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 10001, 'HELMET', 0]);
      var _addmaspd_8735 = 5;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addmaspd_8735));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _addmaspd_8735]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_murmillo_helmet'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'HELMET', 0]);
      lua_call(G.str['ChangeSkillAniName'], [_self, 'Normal_Attack', 'None']);
      var _addmaspd_8736 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addmaspd_8736));
      return [];
    })
    G.str['SCR_MURMILLO_HELMET_EQUIP'] = (function (_self) {
      var tmp;
      var _tx_8737 = lua_call(G.str['TxBegin'], [_self])[0];
      var _equipItem_8737 = lua_call(G.str['GetEquipItem'], [_self, 'HELMET'])[0];
      if (!lua_eq(_equipItem_8737, null)) {
        if (lua_eq(lua_tableget(_equipItem_8737, 'ClassName'), 'murmillo_helmet')) {
          lua_call(G.str['TxTakeItemByObject'], [_tx_8737, _equipItem_8737, 1]);
        }
      }
      lua_call(G.str['TxGiveEquipItem'], [_tx_8737, 'HELMET', 'murmillo_helmet', 0]);
      var _ret_8737 = lua_call(G.str['TxCommit'], [_tx_8737])[0];
      return [];
    })
    G.str['SCR_MURMILLO_HELMET_UNEQUIP'] = (function (_self) {
      var tmp;
      var _equipItem_8740 = lua_call(G.str['GetEquipItem'], [_self, 'HELMET'])[0];
      if (lua_eq(_equipItem_8740, null)) {
        return [];
      }
      if (lua_eq(lua_tableget(_equipItem_8740, 'ClassName'), 'NoHelmet')) {
        return [];
      }
      var _tx_8740 = lua_call(G.str['TxBegin'], [_self])[0];
      lua_call(G.str['TxTakeItemByObject'], [_tx_8740, _equipItem_8740, 1]);
      var _ret_8740 = lua_call(G.str['TxCommit'], [_tx_8740])[0];
      return [];
    })
    G.str['SCR_BUFF_ENTER_BeakMask_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 10002, 'HELMET', 0]);
      var _resposadd_8743 = 0;
      var _abil_8743 = lua_call(G.str['GetAbility'], [_self, "PlagueDoctor8"])[0];
      if (!lua_eq(_abil_8743, null)) {
        _resposadd_8743 = lua_add(_resposadd_8743, lua_multiply(lua_tableget(_abil_8743, 'Level'), 5));
      }
      lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8743));
      lua_call(G.str['SetExProp'], [_buff, "ADD_POS", _resposadd_8743]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BeakMask_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'HELMET', 0]);
      var _resposadd_8745 = lua_call(G.str['GetExProp'], [_buff, "ADD_POS"])[0];
      lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8745));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BigHeadMode'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Thurisaz_Buff'])[0], 'NO')) {
        lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 1]);
      }
      var _caster_8746 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _intAdd_8746 = lua_add(25, lua_multiply((lua_subtract(_arg1, 1)), 5));
      var _addValue_8746 = lua_add(lua_add(60, lua_multiply((lua_subtract(_arg1, 1)), 10)), lua_multiply((lua_divide(_arg1, 3)), lua_power((lua_multiply(lua_tableget(_caster_8746, 'MNA'), 0.7)), 0.9)));
      var _skill_8746 = lua_call(G.str['GetSkill'], [_caster_8746, "Thaumaturge_SwellBrain"])[0];
      if (lua_eq(_skill_8746, null)) {
        return [];
      }
      var _Thaumaturge15_abil_8746 = lua_call(G.str['GetAbility'], [_caster_8746, "Thaumaturge15"])[0];
      if ((!lua_eq(_Thaumaturge15_abil_8746, null) && lua_lte(3, lua_tableget(_skill_8746, 'Level')))) {
        _addValue_8746 = lua_multiply(_addValue_8746, (lua_add(1, lua_multiply(lua_tableget(_Thaumaturge15_abil_8746, 'Level'), 0.01))));
      }
      _intAdd_8746 = lua_tablegetcall(G.str['math'], 'floor', [_intAdd_8746])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intAdd_8746));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _addValue_8746));
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intAdd_8746]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _addValue_8746]);
      var _abilThaumaturge16_8746 = lua_call(G.str['GetAbility'], [_caster_8746, "Thaumaturge16"])[0];
      if ((!lua_eq(_abilThaumaturge16_8746, null) && lua_eq(lua_tableget(_abilThaumaturge16_8746, 'ActiveState'), 1))) {
        lua_call(G.str['AddBuff'], [_caster_8746, _caster_8746, "QuickCast_Buff", lua_tableget(_skill_8746, 'Level'), 0, lua_multiply(lua_tableget(_abilThaumaturge16_8746, 'Level'), 3000), 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BigHeadMode'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetRenderOption'], [_self, "bigheadmode", 0]);
      var _intAdd_8751 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _addValue_8751 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intAdd_8751));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _addValue_8751));
      return [];
    })
    G.str['SCR_BUFF_ENTER_R1MovieCharHide'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 0, 1, 1]);
      lua_call(G.str['SetShadowRender'], [_self, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_R1MovieCharHide'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255.0, 255.0, 255.0, 255.0, 1, 1]);
      lua_call(G.str['SetShadowRender'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ArcaneEnergy_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _buffArg1_8754 = tmp[0]; var _buffArg2_8754 = tmp[1]; tmp = null;
      var _selfMSP_8754 = lua_subtract(lua_call(G.str['TryGetProp'], [_self, "MSP"])[0], lua_call(G.str['TryGetProp'], [_self, "MSP_BM"])[0]);
      var _addsp_8754 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_selfMSP_8754, (lua_multiply(0.03, _buffArg1_8754)))])[0];
      var _addsta_8754 = lua_add(5, lua_multiply(_buffArg1_8754, 4));
      lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _addsp_8754));
      lua_tableset(_self, 'MaxSta_BM', lua_add(lua_tableget(_self, 'MaxSta_BM'), _addsta_8754));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_SP', _addsp_8754]);
      lua_call(G.str['SetExProp'], [_buff, 'ADD_STA', _addsta_8754]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ArcaneEnergy_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addsp_8755 = lua_call(G.str['GetExProp'], [_buff, 'ADD_SP'])[0];
      var _addsta_8755 = lua_call(G.str['GetExProp'], [_buff, 'ADD_STA'])[0];
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _addsp_8755));
      lua_tableset(_self, 'MaxSta_BM', lua_subtract(lua_tableget(_self, 'MaxSta_BM'), _addsta_8755));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ArcaneEnergy_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8756 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Oracle1_abil_8756 = lua_call(G.str['GetAbility'], [_caster_8756, "Oracle1"])[0];
      if (!lua_eq(_Oracle1_abil_8756, null)) {
        lua_call(G.str['TakeDamage'], [_caster_8756, _self, "None", lua_tableget(_Oracle1_abil_8756, 'Level'), "Holy", "None", "TrueDamage", G.str['HIT_HOLY'], G.str['HITRESULT_BLOW']]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ArcaneEnergy_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CounterSpell_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CounterSpell_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HealingFactor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "HP", lua_tableget(_self, 'HP')]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HealingFactor_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _nowHP_8762 = lua_tableget(_self, 'HP');
      var _addHP_8762 = lua_multiply(_arg1, 10);
      if (lua_lt(_nowHP_8762, lua_call(G.str['GetExProp'], [_buff, 'HP'])[0])) {
        lua_call(G.str['AddHP'], [_self, lua_add(50, _addHP_8762)]);
        return [1];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HealingFactor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_StereaTrofh_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8765 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_8765]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8765));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_StereaTrofh_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_8766 = tmp[0]; var _y_8766 = tmp[1]; var _z_8766 = tmp[2]; tmp = null;
      var _isGrassArea_8766 = lua_call(G.str['IsGrassSurface'], [_self, _x_8766, _y_8766, _z_8766])[0];
      if (lua_eq(_isGrassArea_8766, 1)) {
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_StereaTrofh_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_8768 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_8768));
      return [];
    })
    G.str['SCR_BUFF_ENTER_PlantGround_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false) && lua_eq(lua_tableget(_self, 'GroupName'), "Monster"))) {
        lua_call(G.str['SetExProp_Str'], [_self, 'CHANGE_RACETYPE', lua_tableget(_self, 'RaceType')]);
        lua_tableset(_self, 'RaceType', "Forester");
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PlantGround_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false) && lua_eq(lua_tableget(_self, 'GroupName'), "Monster"))) {
        var _racetype_8772 = lua_call(G.str['GetExProp_Str'], [_self, 'CHANGE_RACETYPE'])[0];
        lua_tableset(_self, 'RaceType', _racetype_8772);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_1InchPunch_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8773 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _Monk6_abil_8773 = lua_call(G.str['GetAbility'], [_caster_8773, "Monk6"])[0];
      if (!lua_eq(_Monk6_abil_8773, null)) {
        lua_call(G.str['AddBuff'], [_caster_8773, _self, "UC_silence", lua_tableget(_Monk6_abil_8773, 'Level'), 0, 5000, 1]);
      }
      var _damage_8773 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8773, _self, 'Monk_1InchPunch'])[0];
      var _skill_8773 = lua_call(G.str['GET_MON_SKILL'], [_caster_8773, 'Monk_1InchPunch'])[0];
      lua_call(G.str['SetBuffArgs'], [_buff, _damage_8773, lua_tableget(_skill_8773, 'SkillAtkAdd'), 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_1InchPunch_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['AddSP'], [_self, lua_unm((lua_multiply(lua_multiply(lua_tableget(_self, 'MSP'), 0.1), _arg1)))]);
      }
      tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _damage_8775 = tmp[0]; var _skillAtkAdd_8775 = tmp[1]; tmp = null;
      if (lua_lt(0, _damage_8775)) {
        if (lua_lt(0, _skillAtkAdd_8775)) {
          _damage_8775 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(_damage_8775, _skillAtkAdd_8775)), 2.3)])[0];
        }
        var _from_8777 = _self;
        var _caster_8777 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_8777, null)) {
          _from_8777 = _caster_8777;
        }
        lua_call(G.str['TakeDamage'], [_from_8777, _self, 'None', _damage_8775, "Melee", "Melee", "Melee", G.str['HIT_BASIC'], G.str['HITRESULT_NONE'], 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_1InchPunch_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Indulgentia_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8781 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8781, null)) {
        _caster_8781 = _buff;
      }
      if (!lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        if ((lua_eq(lua_tableget(_self, 'GroupName'), "Monster") && lua_eq(lua_tableget(_self, 'Faction'), "Neutral"))) {
          return [];
        }
      }
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL'], [_self, "Debuff", 3]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Indulgentia_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Catacom_DEF_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8786 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8786));
      lua_call(G.str['SetExProp'], [_buff, "DEF_ADD", _defadd_8786]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Catacom_DEF_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8787 = lua_call(G.str['GetExProp'], [_buff, "DEF_ADD"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8787));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Catacom_MDEF_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_8788 = 0.5;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8788));
      lua_call(G.str['SetExProp'], [_buff, "MDEF_ADD", _mdefadd_8788]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Catacom_MDEF_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_8789 = lua_call(G.str['GetExProp'], [_buff, "MDEF_ADD"])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8789));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Catacom_ATK_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8790 = 0.5;
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_8790));
      lua_call(G.str['SetExProp'], [_buff, "PATK_ADD", _atkadd_8790]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Catacom_ATK_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_8791 = lua_call(G.str['GetExProp'], [_buff, "PATK_ADD"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_8791));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Catacom_MATK_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _matkadd_8792 = 0.5;
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8792));
      lua_call(G.str['SetExProp'], [_buff, "MATK_ADD", _matkadd_8792]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Catacom_MATK_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _matkadd_8793 = lua_call(G.str['GetExProp'], [_buff, "MATK_ADD"])[0];
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8793));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Catacom_MSPD_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8794 = 7;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8794));
      lua_call(G.str['SetExProp'], [_buff, "MSPD_ADD", _mspdadd_8794]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Catacom_MSPD_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8795 = lua_call(G.str['GetExProp'], [_buff, "MSPD_ADD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8795));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemEquip_DummyRH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, _arg1, 'RH', 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemEquip_DummyRH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'RH', 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemEquip_DummyLH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, _arg1, 'LH', 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemEquip_DummyLH'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'LH', 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fumigate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL'], [_self, "Debuff", 4]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fumigate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Disenchant_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL_AND_RANDOM'], [_self, "Buff", 4, lua_multiply(_arg1, 10), 1]);
      lua_call(G.str['PlaySound'], [_self, 'skl_eff_debuff_disenchant']);
      var _caster_8802 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8802, null)) {
        var _PlagueDoctor11_abil_8803 = lua_call(G.str['GetAbility'], [_caster_8802, "PlagueDoctor11"])[0];
        if (!lua_eq(_PlagueDoctor11_abil_8803, null)) {
          tmp = lua_call(G.str['GetBuffListByStringProp'], [_self, "Group1", 'Debuff']); var _buffList_8804 = tmp[0]; var _listCnt_8804 = tmp[1]; tmp = null;
          var var_8805 = 1, stop_8805 = lua_assertfloat(_listCnt_8804);
          for (; var_8805 <= stop_8805; var_8805++) {
            var _i_8805 = var_8805;
            var _buff_8806 = lua_tableget(_buffList_8804, _i_8805);
            var _prop_8806 = lua_call(G.str['GetExProp'], [_buff_8806, "Disenchant_Debuff"])[0];
            if ((lua_lt(lua_tableget(_buff_8806, 'Lv'), 3) && lua_eq(_prop_8806, 0))) {
              lua_tableset(_buff_8806, 'Lv', lua_add(lua_tableget(_buff_8806, 'Lv'), 1));
              lua_call(G.str['SetExProp'], [_buff_8806, "Disenchant_Debuff", 1]);
            }
          }
        }
        var _PlagueDoctor12_abil_8803 = lua_call(G.str['GetAbility'], [_caster_8802, "PlagueDoctor12"])[0];
        if ((!lua_eq(_caster_8802, null) && !lua_eq(_PlagueDoctor12_abil_8803, null))) {
          lua_call(G.str['AddBuff'], [_caster_8802, _self, 'Disenchant_Debuff_Abil', 1, 0, lua_multiply(lua_tableget(_PlagueDoctor12_abil_8803, 'Level'), 5000), 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Disenchant_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fumigate_Buff_ImmuneAbil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "ADD_DEBUFF_IMMUNE", lua_multiply(_arg1, 500)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fumigate_Buff_ImmuneAbil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ADD_DEBUFF_IMMUNE"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fumigate_Buff_ResAbil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resposadd_8812 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'ResPoison'), _arg1), 0.1)])[0];
      lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8812));
      lua_call(G.str['SetExProp'], [_buff, "ADD_POS", _resposadd_8812]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fumigate_Buff_ResAbil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resposadd_8813 = lua_call(G.str['GetExProp'], [_buff, "ADD_POS"])[0];
      lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8813));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cyclone_Buff_ImmuneAbil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skill_8814 = lua_call(G.str['GetSkill'], [_self, "Doppelsoeldner_Cyclone"])[0];
      if (lua_eq(_skill_8814, null)) {
        return [];
      }
      if (lua_lte(3, lua_tableget(_skill_8814, 'Level'))) {
        lua_call(G.str['SetExProp'], [_self, "ADD_CYCLONE_IMMUNE", lua_multiply(_arg1, 1500)]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cyclone_Buff_ImmuneAbil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "ADD_CYCLONE_IMMUNE"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Looting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Looting_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DirtyWall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_DirtyWall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlaySound'], [_self, "skl_eff_debuff_rotten_s"]);
      var _addMHP_8821 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), 0.02)])[0];
      if (lua_lt(_addMHP_8821, 1)) {
        _addMHP_8821 = 1;
      }
      if ((lua_lt(10, lua_tableget(_self, 'MHP')) && lua_lt(_addMHP_8821, lua_tableget(_self, 'MHP')))) {
        if (lua_lt(lua_subtract(lua_tableget(_self, 'MHP'), _addMHP_8821), 10)) {
          _addMHP_8821 = lua_subtract(_addMHP_8821, (lua_subtract(lua_tableget(_self, 'MHP'), _addMHP_8821)));
        }
        lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _addMHP_8821));
        var _before_8823 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
        lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", lua_add(_before_8823, _addMHP_8821)]);
        lua_call(G.str['InvalidateStates'], [_self]);
        lua_call(G.str['AddHP'], [_self, -1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DirtyWall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _before_8825 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _before_8825));
      lua_call(G.str['InvalidateStates'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HigherRotten_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HigherRotten_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      lua_call(G.str['PlaySound'], [_self, "skl_eff_debuff_rotten_l"]);
      var _addMHP_8827 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), 0.025)])[0];
      if (lua_lt(_addMHP_8827, 1)) {
        _addMHP_8827 = 1;
      }
      if ((lua_lt(10, lua_tableget(_self, 'MHP')) && lua_lt(_addMHP_8827, lua_tableget(_self, 'MHP')))) {
        if (lua_lt(lua_subtract(lua_tableget(_self, 'MHP'), _addMHP_8827), 10)) {
          _addMHP_8827 = lua_subtract(_addMHP_8827, (lua_subtract(lua_tableget(_self, 'MHP'), _addMHP_8827)));
        }
        lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _addMHP_8827));
        var _before_8829 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
        lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", lua_add(_before_8829, _addMHP_8827)]);
        lua_call(G.str['InvalidateStates'], [_self]);
        lua_call(G.str['AddHP'], [_self, -1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HigherRotten_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _before_8831 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _before_8831));
      lua_call(G.str['Invalidate'], [_self, "MHP"]);
      var _tmp_8831 = lua_tableget(_self, 'MHP');
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ngadhundi_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", 0]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Ngadhundi_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _addMHP_8833 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), 0.02)])[0];
      if (lua_lt(_addMHP_8833, 1)) {
        _addMHP_8833 = 1;
      }
      if ((lua_lt(10, lua_tableget(_self, 'MHP')) && lua_lt(_addMHP_8833, lua_tableget(_self, 'MHP')))) {
        if (lua_lt(lua_subtract(lua_tableget(_self, 'MHP'), _addMHP_8833), 10)) {
          _addMHP_8833 = lua_subtract(_addMHP_8833, (lua_subtract(lua_tableget(_self, 'MHP'), _addMHP_8833)));
        }
        lua_tableset(_self, 'MHP_BM', lua_subtract(lua_tableget(_self, 'MHP_BM'), _addMHP_8833));
        var _before_8835 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
        lua_call(G.str['SetExProp'], [_buff, "REMOVE_MHP", lua_add(_before_8835, _addMHP_8833)]);
        lua_call(G.str['InvalidateStates'], [_self]);
        lua_call(G.str['AddHP'], [_self, -1]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ngadhundi_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _before_8837 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_MHP"])[0];
      lua_tableset(_self, 'MHP_BM', lua_add(lua_tableget(_self, 'MHP_BM'), _before_8837));
      lua_call(G.str['Invalidate'], [_self, "MHP"]);
      var _tmp_8837 = lua_tableget(_self, 'MHP');
      return [];
    })
    G.str['SCR_BUFF_ENTER_UnlockChest_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "UnlockChest_Buff", _arg1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UnlockChest_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, "UnlockChest_Buff", _arg1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ServantSP_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _lv_8840 = 1;
      var _caster_8840 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _owner_8840 = lua_call(G.str['GetOwner'], [_caster_8840])[0];
      if (!lua_eq(_owner_8840, null)) {
        _lv_8840 = lua_call(G.str['GetExProp'], [_owner_8840, "SORCERER_SERVANTSKILLLV"])[0];
      }
      var _addrsptime_8840 = lua_add(4000, lua_multiply(_lv_8840, 1000));
      lua_tableset(_self, 'RSPTIME_BM', lua_add(lua_tableget(_self, 'RSPTIME_BM'), _addrsptime_8840));
      lua_call(G.str['SetExProp'], [_buff, "ADD_RSPTIME", _addrsptime_8840]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ServantSP_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _addrsptime_8843 = lua_call(G.str['GetExProp'], [_buff, "ADD_RSPTIME"])[0];
      lua_tableset(_self, 'RSPTIME_BM', lua_subtract(lua_tableget(_self, 'RSPTIME_BM'), _addrsptime_8843));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ServantSR_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _lv_8845 = 1;
      var _caster_8845 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _owner_8845 = lua_call(G.str['GetOwner'], [_caster_8845])[0];
      if (!lua_eq(_owner_8845, null)) {
        _lv_8845 = lua_call(G.str['GetExProp'], [_owner_8845, "SORCERER_SERVANTSKILLLV"])[0];
      }
      var _addsr_8845 = _lv_8845;
      lua_tableset(_self, 'SR_BM', lua_add(lua_tableget(_self, 'SR_BM'), _addsr_8845));
      lua_call(G.str['SetExProp'], [_buff, "ADD_SR", _addsr_8845]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ServantSR_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _addsr_8848 = lua_call(G.str['GetExProp'], [_buff, "ADD_SR"])[0];
      lua_tableset(_self, 'SR_BM', lua_subtract(lua_tableget(_self, 'SR_BM'), _addsr_8848));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ServantSTA_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _lv_8850 = 1;
      var _caster_8850 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _owner_8850 = lua_call(G.str['GetOwner'], [_caster_8850])[0];
      if (!lua_eq(_owner_8850, null)) {
        _lv_8850 = lua_call(G.str['GetExProp'], [_owner_8850, "SORCERER_SERVANTSKILLLV"])[0];
      }
      lua_call(G.str['SetExProp'], [_buff, "SORCERER_SERVANTSKILLLV", _lv_8850]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ServantSTA_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [0];
      }
      var _lv_8853 = lua_call(G.str['GetExProp'], [_buff, "SORCERER_SERVANTSKILLLV"])[0];
      lua_call(G.str['AddStamina'], [_self, lua_multiply(_lv_8853, 100)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ServantSTA_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ServantMDEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _lv_8856 = 1;
      var _caster_8856 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _owner_8856 = lua_call(G.str['GetOwner'], [_caster_8856])[0];
      if (!lua_eq(_owner_8856, null)) {
        _lv_8856 = lua_call(G.str['GetExProp'], [_owner_8856, "SORCERER_SERVANTSKILLLV"])[0];
      }
      var _addmdef_8856 = lua_multiply(_lv_8856, 10);
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addmdef_8856));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _addmdef_8856]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ServantMDEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _addmdef_8859 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _addmdef_8859));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ServantDARKATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _lv_8861 = 1;
      var _caster_8861 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _owner_8861 = lua_call(G.str['GetOwner'], [_caster_8861])[0];
      if (!lua_eq(_owner_8861, null)) {
        _lv_8861 = lua_call(G.str['GetExProp'], [_owner_8861, "SORCERER_SERVANTSKILLLV"])[0];
      }
      var _adddarkatk_8861 = lua_multiply(_lv_8861, 10);
      lua_tableset(_self, 'Dark_Atk_BM', lua_add(lua_tableget(_self, 'Dark_Atk_BM'), _adddarkatk_8861));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DARKATK", _adddarkatk_8861]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ServantDARKATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _adddarkatk_8864 = lua_call(G.str['GetExProp'], [_buff, "ADD_DARKATK"])[0];
      lua_tableset(_self, 'Dark_Atk_BM', lua_subtract(lua_tableget(_self, 'Dark_Atk_BM'), _adddarkatk_8864));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_Regenerate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addrhp_8866 = 100;
      var _addrsp_8866 = 100;
      var _addtime_8866 = 5000;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'RHP_BM', lua_add(lua_tableget(_self, 'RHP_BM'), _addrhp_8866));
        lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), _addrsp_8866));
        lua_tableset(_self, 'RHPTIME_BM', lua_add(lua_tableget(_self, 'RHPTIME_BM'), _addtime_8866));
        lua_tableset(_self, 'RSPTIME_BM', lua_add(lua_tableget(_self, 'RSPTIME_BM'), _addtime_8866));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_RHP", _addrhp_8866]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_RSP", _addrhp_8866]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_RTIME", _addtime_8866]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_Regenerate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addrhp_8868 = lua_call(G.str['GetExProp'], [_buff, "ADD_RHP"])[0];
      var _addrsp_8868 = lua_call(G.str['GetExProp'], [_buff, "ADD_RSP"])[0];
      var _addtime_8868 = lua_call(G.str['GetExProp'], [_buff, "ADD_RTIME"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'RHP_BM', lua_subtract(lua_tableget(_self, 'RHP_BM'), _addrhp_8868));
        lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), _addrsp_8868));
        lua_tableset(_self, 'RHPTIME_BM', lua_subtract(lua_tableget(_self, 'RHPTIME_BM'), _addtime_8868));
        lua_tableset(_self, 'RSPTIME_BM', lua_subtract(lua_tableget(_self, 'RSPTIME_BM'), _addtime_8868));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_Stat_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_8870 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(5, lua_multiply(lua_tableget(_self, 'STR'), 0.1))])[0];
      var _conadd_8870 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(5, lua_multiply(lua_tableget(_self, 'CON'), 0.1))])[0];
      var _intadd_8870 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(5, lua_multiply(lua_tableget(_self, 'INT'), 0.1))])[0];
      var _mnaadd_8870 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(5, lua_multiply(lua_tableget(_self, 'MNA'), 0.1))])[0];
      var _dexadd_8870 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(5, lua_multiply(lua_tableget(_self, 'DEX'), 0.1))])[0];
      lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_8870));
      lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _conadd_8870));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_8870));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_8870));
      lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _dexadd_8870));
      lua_call(G.str['SetExProp'], [_buff, "ADD_STR", _stradd_8870]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_CON", _conadd_8870]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_8870]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_8870]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEX", _dexadd_8870]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_Stat_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_8871 = lua_call(G.str['GetExProp'], [_buff, "ADD_STR"])[0];
      var _conadd_8871 = lua_call(G.str['GetExProp'], [_buff, "ADD_CON"])[0];
      var _intadd_8871 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_8871 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      var _dexadd_8871 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEX"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_8871));
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _conadd_8871));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_8871));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_8871));
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _dexadd_8871));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_Cooldown_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_Cooldown_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['InvalidateSkillCoolDown'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_ATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8874 = 0.1;
      var _matkadd_8874 = 0.1;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8874));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8874));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_8874]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_8874]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_ATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8875 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_8875 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8875));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8875));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8876 = 0.1;
      var _mdefadd_8876 = 0.1;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8876));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8876));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8876]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_8876]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8877 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_8877 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8877));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8877));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GM_EXP_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GM_EXP_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ScullSwing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defrate_8880 = 0.12;
      var _jumpadd_8880 = 0;
      var _caster_8880 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_8880 = lua_call(G.str['GetAbility'], [_caster_8880, "Highlander27"])[0];
      if ((!lua_eq(_abil_8880, null) && lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true))) {
        _jumpadd_8880 = 1;
        lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), _jumpadd_8880));
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_8880));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF_RATE", _defrate_8880]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_JUMP", _jumpadd_8880]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ScullSwing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defrate_8882 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF_RATE"])[0];
      var _jumpadd_8882 = lua_call(G.str['GetExProp'], [_buff, "ADD_JUMP"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defrate_8882));
      lua_call(G.str['Invalidate'], [_self, "DEF"]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), _jumpadd_8882));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_giantswing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hraddrate_8884 = 0.8;
      var _hradd_8884 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'HR'), _hraddrate_8884)])[0];
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hradd_8884));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HR", _hradd_8884]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_giantswing_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hradd_8885 = lua_call(G.str['GetExProp'], [_buff, "ADD_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hradd_8885));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Arrest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8886 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_8886 = lua_call(G.str['GetAbility'], [_caster_8886, "Squire9"])[0];
      var _defadd_8886 = 0;
      if (!lua_eq(_abil_8886, null)) {
        _defadd_8886 = lua_multiply(lua_tableget(_abil_8886, 'Level'), 0.02);
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8886));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8886]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Arrest'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8888 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8888));
      var _caster_8888 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8888, null)) {
        lua_call(G.str['SkillCancel'], [_caster_8888]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DashRun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DashRun', _arg1);
      var _is_barbarian_8890 = lua_call(G.str['GetJobGradeByName'], [_self, 'Char1_6'])[0];
      if (lua_lte(2, _is_barbarian_8890)) {
        var _babaAbil_28_8891 = lua_call(G.str['GetAbility'], [_self, 'Barbarian28'])[0];
        if (!lua_eq(_babaAbil_28_8891, null)) {
          lua_call(G.str['RunScriptByOwnerProp'], [_self, 'DashRun', _arg1, 1000, 'ADD_BUFF', _self, _self, 'ScudInstinct_Buff', 1, 0, 0, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DashRun'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DashRun', 0);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Preparation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8894 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _PrepaSklLv_8894 = lua_call(G.str['GetSkill'], [_caster_8894, 'Fencer_Preparation'])[0];
      if (!lua_eq(_PrepaSklLv_8894, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_PrepaSklLv_8894, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Preparation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Preparation_Buff_End'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Preparation_Buff_End'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Flanconnade_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8899 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _FlanconnadeSklLv_8899 = lua_call(G.str['GetSkill'], [_caster_8899, 'Fencer_Flanconnade'])[0];
      if (!lua_eq(_FlanconnadeSklLv_8899, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_FlanconnadeSklLv_8899, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Flanconnade_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ItemAwakening_ATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8902 = lua_multiply(0.2, _arg1);
      var _matkadd_8902 = lua_multiply(0.2, _arg1);
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8902));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8902));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_8902]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_8902]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ItemAwakening_ATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8903 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_8903 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8903));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8903));
      return [];
    })
    G.str['SCR_BUFF_ENTER_CrossFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CrossFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8905 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_8905 = lua_call(G.str['GetSkill'], [_caster_8905, "Fletcher_CrossFire"])[0];
      var _damage_8905 = _arg1;
      if (!lua_eq(_caster_8905, null)) {
        lua_call(G.str['TakeDamage'], [_caster_8905, _self, "None", _damage_8905, "Fire", "None", "TrueDamage", G.str['HIT_FIRE'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CrossFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Cleric_Collision_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _adddef_8908 = 0.1;
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _adddef_8908));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _adddef_8908]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Cleric_Collision_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _adddef_8909 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _adddef_8909));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Web_FlyObject'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        return [0];
      }
      if (lua_eq(lua_tableget(_self, 'MoveType'), "Flying")) {
        lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
        var _caster_8912 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_8912, null)) {
          var _owner_8913 = lua_call(G.str['GetOwner'], [_caster_8912])[0];
          if (!lua_eq(_owner_8913, null)) {
            var _Hunter4_abil_8914 = lua_call(G.str['GetAbility'], [_owner_8913, "Hunter4"])[0];
            if (!lua_eq(_Hunter4_abil_8914, null)) {
              lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_Hunter4_abil_8914, 'Level'), 0, 0]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Web_FlyObject'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) || !lua_eq(lua_tableget(_self, 'MoveType'), "Flying"))) {
        return [0];
      }
      var _caster_8916 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8916, null)) {
        var _owner_8918 = lua_call(G.str['GetOwner'], [_caster_8916])[0];
        if (!lua_eq(_owner_8918, null)) {
          var _damage_8919 = lua_call(G.str['GET_SKL_DAMAGE'], [_owner_8918, _self, 'Hunter_Snatching'])[0];
          var _skill_8919 = lua_call(G.str['GET_MON_SKILL'], [_owner_8918, 'Hunter_Snatching'])[0];
          lua_call(G.str['TakeDamage'], [_owner_8918, _self, lua_tableget(_skill_8919, 'ClassName'), _damage_8919, "Melee", "Strike", "Melee", G.str['HIT_POISON'], G.str['HITRESULT_BLOW'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Web_FlyObject'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShootDown_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        if (lua_eq(lua_tableget(_self, 'MoveType'), "Flying")) {
          lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShootDown_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShieldShoving_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_8925 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if ((!lua_eq(_caster_8925, null) && !lua_eq(lua_tableget(_self, 'MonRank'), 'Boss'))) {
        lua_call(G.str['RunScript'], ['SCR_SHIELDSHOVING', _self, _caster_8925]);
      }
      return [];
    })
    G.str['SCR_SHIELDSHOVING'] = (function (_self, _caster) {
      var tmp;
      tmp = lua_call(G.str['GetDir'], [_caster]); var _casterx_8927 = tmp[0]; var _casterz_8927 = tmp[1]; tmp = null;
      var _casterDir_8927 = lua_call(G.str['DirToAngle'], [_casterx_8927, _casterz_8927])[0];
      lua_call(G.str['sleep'], [300]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['HoldMonScp'], [_self]);
      }
      lua_call(G.str['SetDirectionByAngle'], [_self, _casterDir_8927]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['sleep'], [1500]);
        lua_call(G.str['UnHoldMonScp'], [_self]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShieldShoving_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShieldBash_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _beforeInt_8931 = lua_tableget(_self, 'INT');
      var _beforeStr_8931 = lua_tableget(_self, 'STR');
      var _beforeMna_8931 = lua_tableget(_self, 'MNA');
      var _beforeDex_8931 = lua_tableget(_self, 'DEX');
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_INT', _beforeInt_8931]);
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_STR', _beforeStr_8931]);
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_MNA', _beforeMna_8931]);
      lua_call(G.str['SetExProp'], [_buff, 'BEFORE_DEX', _beforeDex_8931]);
      var _afterInt_8931 = lua_tableget(_self, 'STR');
      var _afterStr_8931 = lua_tableget(_self, 'DEX');
      var _afterMna_8931 = lua_tableget(_self, 'INT');
      var _afterDex_8931 = lua_tableget(_self, 'MNA');
      lua_tableset(_self, 'INT_BM', lua_add(lua_subtract(lua_tableget(_self, 'INT_BM'), _beforeInt_8931), _afterInt_8931));
      lua_tableset(_self, 'STR_BM', lua_add(lua_subtract(lua_tableget(_self, 'STR_BM'), _beforeStr_8931), _afterStr_8931));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_subtract(lua_tableget(_self, 'MNA_BM'), _beforeMna_8931), _afterMna_8931));
      lua_tableset(_self, 'DEX_BM', lua_add(lua_subtract(lua_tableget(_self, 'DEX_BM'), _beforeDex_8931), _afterDex_8931));
      lua_call(G.str['SetExProp'], [_buff, 'AFTER_INT', _afterInt_8931]);
      lua_call(G.str['SetExProp'], [_buff, 'AFTER_STR', _afterStr_8931]);
      lua_call(G.str['SetExProp'], [_buff, 'AFTER_MNA', _afterMna_8931]);
      lua_call(G.str['SetExProp'], [_buff, 'AFTER_DEX', _afterDex_8931]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShieldBash_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _beforeInt_8932 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_INT'])[0];
      var _beforeStr_8932 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_STR'])[0];
      var _beforeMna_8932 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_MNA'])[0];
      var _beforeDex_8932 = lua_call(G.str['GetExProp'], [_buff, 'BEFORE_DEX'])[0];
      var _afterInt_8932 = lua_call(G.str['GetExProp'], [_buff, 'AFTER_INT'])[0];
      var _afterStr_8932 = lua_call(G.str['GetExProp'], [_buff, 'AFTER_STR'])[0];
      var _afterMna_8932 = lua_call(G.str['GetExProp'], [_buff, 'AFTER_MNA'])[0];
      var _afterDex_8932 = lua_call(G.str['GetExProp'], [_buff, 'AFTER_DEX'])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_subtract(lua_tableget(_self, 'INT_BM'), _afterInt_8932), _beforeInt_8932));
      lua_tableset(_self, 'STR_BM', lua_add(lua_subtract(lua_tableget(_self, 'STR_BM'), _afterStr_8932), _beforeStr_8932));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_subtract(lua_tableget(_self, 'MNA_BM'), _afterMna_8932), _beforeMna_8932));
      lua_tableset(_self, 'DEX_BM', lua_add(lua_subtract(lua_tableget(_self, 'DEX_BM'), _afterDex_8932), _beforeDex_8932));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UmboBlow_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UmboBlow_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CrossCut_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_CrossCut_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_8936 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8936, null)) {
        var _damage_8937 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_8936, _self, 'Highlander_CrossCut'])[0];
        var _skill_8937 = lua_call(G.str['GET_MON_SKILL'], [_caster_8936, 'Highlander_CrossCut'])[0];
        _damage_8937 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide((lua_add(_damage_8937, lua_tableget(_skill_8937, 'SkillAtkAdd'))), 2.3)])[0];
        lua_call(G.str['TakeDamage'], [_caster_8936, _self, "None", _damage_8937, "None", "None", "TrueDamage", G.str['HIT_BLEEDING'], G.str['HITRESULT_BLOW'], 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CrossCut_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_VerticalSlash_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if ((!lua_eq(lua_tableget(_self, 'Size'), "M") && !lua_eq(lua_tableget(_self, 'Size'), "L"))) {
        return [];
      }
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_8939 = 0;
      if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
        _defadd_8939 = 0.8;
      } else if (lua_eq(lua_tableget(_self, 'Size'), 'L')) {
        _defadd_8939 = 1;
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8939]);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8939));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_VerticalSlash_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if ((!lua_eq(lua_tableget(_self, 'Size'), "M") && !lua_eq(lua_tableget(_self, 'Size'), "L"))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VerticalSlash_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8945 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8945));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HighKick_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HighKick_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Slithering_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8948 = _arg1;
      var _addMSPD_8948 = lua_multiply(_lv_8948, 4);
      var _addDR_8948 = lua_multiply(_lv_8948, 15);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _addMSPD_8948));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _addDR_8948));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _addMSPD_8948]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DR", _addDR_8948]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Slithering_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMPSD_8949 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      var _addDR_8949 = lua_call(G.str['GetExProp'], [_buff, "ADD_DR"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _addMPSD_8949));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _addDR_8949));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Conviction_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _resiceadd_8950 = 0;
      var _resfireadd_8950 = 0;
      var _reslightadd_8950 = 0;
      var _resposadd_8950 = 0;
      var _researthadd_8950 = 0;
      var _caster_8950 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8950, null)) {
        _resiceadd_8950 = lua_multiply(_arg1, 20);
        _resfireadd_8950 = lua_multiply(_arg1, 20);
        _reslightadd_8950 = lua_multiply(_arg1, 20);
        _resposadd_8950 = lua_multiply(_arg1, 20);
        _researthadd_8950 = lua_multiply(_arg1, 20);
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), _resiceadd_8950));
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _resfireadd_8950));
        lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_8950));
        lua_tableset(_self, 'ResPoison_BM', lua_subtract(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8950));
        lua_tableset(_self, 'ResEarth_BM', lua_subtract(lua_tableget(_self, 'ResEarth_BM'), _researthadd_8950));
      } else {
        lua_tableset(_self, 'Ice_Def_BM', lua_subtract(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_8950));
        lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_8950));
        lua_tableset(_self, 'Lightning_Def_BM', lua_subtract(lua_tableget(_self, 'Lightning_Def_BM'), _reslightadd_8950));
        lua_tableset(_self, 'Poison_Def_BM', lua_subtract(lua_tableget(_self, 'Poison_Def_BM'), _resposadd_8950));
        lua_tableset(_self, 'Earth_Def_BM', lua_subtract(lua_tableget(_self, 'Earth_Def_BM'), _researthadd_8950));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_ICE", _resiceadd_8950]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIRE", _resfireadd_8950]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_LIGHT", _reslightadd_8950]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_POS", _resposadd_8950]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_EARTH", _researthadd_8950]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Conviction_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_8954 = lua_call(G.str['GetExProp'], [_buff, "ADD_ICE"])[0];
      var _resfireadd_8954 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIRE"])[0];
      var _reslightadd_8954 = lua_call(G.str['GetExProp'], [_buff, "ADD_LIGHT"])[0];
      var _resposadd_8954 = lua_call(G.str['GetExProp'], [_buff, "ADD_POS"])[0];
      var _researthadd_8954 = lua_call(G.str['GetExProp'], [_buff, "ADD_EARTH"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), _resiceadd_8954));
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _resfireadd_8954));
        lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_8954));
        lua_tableset(_self, 'ResPoison_BM', lua_add(lua_tableget(_self, 'ResPoison_BM'), _resposadd_8954));
        lua_tableset(_self, 'ResEarth_BM', lua_add(lua_tableget(_self, 'ResEarth_BM'), _researthadd_8954));
      } else {
        lua_tableset(_self, 'Ice_Def_BM', lua_add(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_8954));
        lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_8954));
        lua_tableset(_self, 'Lightning_Def_BM', lua_add(lua_tableget(_self, 'Lightning_Def_BM'), _reslightadd_8954));
        lua_tableset(_self, 'Poison_Def_BM', lua_add(lua_tableget(_self, 'Poison_Def_BM'), _resposadd_8954));
        lua_tableset(_self, 'Earth_Def_BM', lua_add(lua_tableget(_self, 'Earth_Def_BM'), _researthadd_8954));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_MassHeal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _healrate_8957 = lua_add(0.1, lua_multiply((lua_subtract(_arg1, 1)), 0.02));
      var _addvalue_8957 = 0;
      var _caster_8957 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8957, null)) {
        _addvalue_8957 = lua_add(lua_add(lua_add(100, lua_tableget(_caster_8957, 'INT')), lua_tableget(_caster_8957, 'MNA')), lua_multiply((lua_subtract(_arg1, 1)), 35));
      }
      var _skill_8957 = lua_call(G.str['GetSkill'], [_caster_8957, "Priest_MassHeal"])[0];
      var _healvalue_8957 = lua_add(lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), _healrate_8957)])[0], _addvalue_8957);
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Restoration_Buff'])[0], 'YES')) {
        _healvalue_8957 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healvalue_8957, 1.1)])[0];
      }
      if (!lua_eq(lua_tableget(_self, 'ClassName'), "GuildTower_PVP")) {
        var _Ayin_sof_buff_8960 = lua_call(G.str['GetBuffByName'], [_self, 'Ayin_sof_Buff'])[0];
        var _Ayin_sof_arg3_8960 = 0;
        if (!lua_eq(_Ayin_sof_buff_8960, null)) {
          _Ayin_sof_arg3_8960 = lua_call(G.str['GetBuffArgs'], [_Ayin_sof_buff_8960])[0];
        }
        if ((lua_eq(lua_call(G.str['IsSameActor'], [_self, _caster_8957])[0], "NO") || lua_eq(_Ayin_sof_arg3_8960, 0))) {
          _healvalue_8957 = lua_add(_healvalue_8957, (lua_multiply(_healvalue_8957, _arg2)));
        }
        _healvalue_8957 = lua_divide(lua_multiply(lua_call(G.str['TryGetProp'], [_caster_8957, "HEAL_PWR"])[0], lua_tableget(_skill_8957, 'SkillFactor')), 100);
        lua_call(G.str['Heal'], [_self, _healvalue_8957, 0, null, lua_tableget(_buff, 'ClassName')]);
        var _abilCleric22_8960 = lua_call(G.str['GetAbility'], [_caster_8957, "Cleric22"])[0];
        if ((!lua_eq(_abilCleric22_8960, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilCleric22_8960, "ActiveState"])[0], 1))) {
          var _abilLv_8963 = lua_tableget(_abilCleric22_8960, 'Level');
          var _addDotHeal_8963 = lua_multiply(lua_multiply(_healvalue_8957, _abilLv_8963), 0.05);
          lua_call(G.str['AddBuff'], [_caster_8957, _self, "MassHeal_Dot_Buff", 1, _addDotHeal_8963, 10000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MassHeal_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MassHeal_Dot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MassHeal_Dot_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _addHeal_8966 = lua_multiply(_arg2, 0.1);
      lua_call(G.str['Heal'], [_self, _addHeal_8966, 0, null, lua_tableget(_buff, 'ClassName')]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MassHeal_Dot_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_StoneSkin_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8968 = _arg1;
      var _caster_8968 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8968, null)) {
        var _skill_8969 = lua_call(G.str['GetSkill'], [_caster_8968, "Priest_StoneSkin"])[0];
        var _skillLv_8969 = lua_call(G.str['TryGetProp'], [_skill_8969, "Level"])[0];
        if (!lua_eq(_skillLv_8969, null)) {
          _lv_8968 = _skillLv_8969;
        }
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _lv_8968, 0, 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_StoneSkin_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_IncreaseMagicDEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_8972 = 0;
      var _caster_8972 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_8972, null)) {
        var _stat_8973 = lua_call(G.str['TryGetProp'], [_caster_8972, "MNA"])[0];
        if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
          var _stat_BM_8974 = lua_call(G.str['TryGetProp'], [_caster_8972, 'MNA_BM'])[0];
          var _stat_ITEM_BM_8974 = lua_call(G.str['TryGetProp'], [_caster_8972, 'MNA_ITEM_BM'])[0];
          _stat_8973 = lua_subtract(_stat_8973, (lua_add(_stat_BM_8974, _stat_ITEM_BM_8974)));
        }
        _mdefadd_8972 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(lua_add(240, (lua_multiply((lua_subtract(_arg1, 1)), 80))), (lua_multiply((lua_divide(_arg1, 3)), (lua_power(_stat_8973, 0.9)))))])[0];
        lua_call(G.str['SetBuffArgs'], [_buff, _mdefadd_8972]);
      } else {
        _mdefadd_8972 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      }
      if (lua_eq(lua_call(G.str['BuffFromWho'], [_buff])[0], G.str['BUFF_FROM_AUTO_SELLER'])) {
        _mdefadd_8972 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_mdefadd_8972, 0.7)])[0];
      }
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_8972));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_8972]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_IncreaseMagicDEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefadd_8977 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_8977));
      return [];
    })
    G.str['SCR_BUFF_ENTER_QuarrelShooter8_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_8978 = _arg1;
      var _shieldDEF_8978 = _arg2;
      var _patkadd_8978 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(_shieldDEF_8978, _lv_8978), 0.5)])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_8978));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_8978]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_QuarrelShooter8_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8979 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_8979));
      return [];
    })
    G.str['SCR_BUFF_ENTER_UnlockChest_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8980 = 4;
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8980));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_8980]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UnlockChest_After_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_8981 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_8981));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Gae_Bulg_ATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8982 = 0.08;
      var _matkadd_8982 = 0.08;
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8982));
      lua_tableset(_self, 'MATK_RATE_BM', lua_add(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8982));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_8982]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_8982]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Gae_Bulg_ATK_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_8983 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_8983 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _patkadd_8983));
      lua_tableset(_self, 'MATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MATK_RATE_BM'), _matkadd_8983));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Gae_Bulg_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8984 = 0.08;
      var _mdefadd_8984 = 0.08;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8984));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8984));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8984]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_8984]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Gae_Bulg_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8985 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_8985 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_8985));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefadd_8985));
      return [];
    })
    G.str['SCR_BUFF_ENTER_InvocationAbil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _adddarkatk_8986 = lua_multiply(lua_multiply(lua_tableget(_self, 'Dark_Atk'), _arg1), 0.05);
      var _owner_8986 = lua_call(G.str['GetOwner'], lua_call(G.str['GetBuffCaster'], [_buff]))[0];
      if (lua_eq(lua_call(G.str['IsSameObject'], [_self, _owner_8986])[0], 1)) {
        _adddarkatk_8986 = lua_multiply(_adddarkatk_8986, 2);
      }
      _adddarkatk_8986 = lua_tablegetcall(G.str['math'], 'floor', [_adddarkatk_8986])[0];
      lua_tableset(_self, 'Dark_Atk_BM', lua_add(lua_tableget(_self, 'Dark_Atk_BM'), _adddarkatk_8986));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DARKATK", _adddarkatk_8986]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_InvocationAbil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _adddarkatk_8988 = lua_call(G.str['GetExProp'], [_buff, "ADD_DARKATK"])[0];
      lua_tableset(_self, 'Dark_Atk_BM', lua_subtract(lua_tableget(_self, 'Dark_Atk_BM'), _adddarkatk_8988));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Archer_Def_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_8989 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_8989, null)) {
        _caster_8989 = _self;
      }
      var _buffover_8989 = _over;
      if (lua_lte(_buffover_8989, 0)) {
        _buffover_8989 = 1;
      }
      var _defadd_8989 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'DEF'), 0.1), _buffover_8989)])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_8989));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_8989]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Archer_Def_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Archer_Def_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_8993 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_8993));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HighAnchoring_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addcrtdr_8994 = lua_multiply(_arg1, 15);
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _addcrtdr_8994));
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRTDR", _addcrtdr_8994]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HighAnchoring_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addcrtdr_8995 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTDR"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _addcrtdr_8995));
      return [];
    })
    G.str['SCR_BUFF_ENTER_RapidFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addcrtdr_8996 = 150;
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _addcrtdr_8996));
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRTDR", _addcrtdr_8996]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RapidFire_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addcrtdr_8997 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTDR"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _addcrtdr_8997));
      return [];
    })
    var _toint_1 = (function (_n) {
      var tmp;
      var _s_8998 = lua_call(G.str['tostring'], [_n])[0];
      tmp = lua_mcall(_s_8998, 'find', ['%.']); var _i_8998 = tmp[0]; var _j_8998 = tmp[1]; tmp = null;
      if (lua_true(_i_8998)) {
        return lua_call(G.str['tonumber'], lua_mcall(_s_8998, 'sub', [1, lua_subtract(_i_8998, 1)]));
      } else {
        return [_n];
      }
      return [];
    });
    G.str['SCR_BUFF_ENTER_Raise_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        lua_tableset(_buff, 'Lv', 1);
      }
      lua_call(G.str['ActorVibrate'], [_self, 100, 1.5, 10, 0.1]);
      lua_call(G.str['FlyMath'], [_self, 70, 0.5, 10]);
      var _dr_9001 = lua_tableget(_self, 'DR');
      if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false) && lua_eq(lua_tableget(_self, 'GroupName'), "Monster"))) {
        lua_call(G.str['SetExProp_Str'], [_self, "RAISE_MOVETYPE", lua_tableget(_self, 'MoveType')]);
        lua_tableset(_self, 'MoveType', "Flying");
      }
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _dr_9001));
      lua_call(G.str['SetExProp'], [_buff, "DEL_DR", _dr_9001]);
      if (lua_true(lua_call(G.str['IS_PC'], [_self])[0])) {
        var _remainingTime_9004 = lua_call(G.str['GetExProp'], [_self, "Psychokino_Raise_remainingTime"])[0];
        _remainingTime_9004 = lua_call(G.str['GetDiminishingMSTime'], [_self, _self, _remainingTime_9004, lua_tableget(_buff, 'ClassID'), 0, 1])[0];
        lua_call(G.str['SetExProp'], [_self, "Psychokino_Raise_remainingTime", _remainingTime_9004]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Raise_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (((lua_eq(lua_tableget(_self, 'Size'), 'S') || lua_eq(lua_tableget(_self, 'Size'), 'M')) || lua_eq(lua_tableget(_self, 'Size'), 'L'))) {
        if (lua_true(lua_call(G.str['IS_PC'], [_self])[0])) {
          var _remainingTime_9007 = lua_call(G.str['GetExProp'], [_self, "Psychokino_Raise_remainingTime"])[0];
          var _startTime_9007 = lua_call(G.str['GetExProp'], [_self, "Psychokino_Raise_startTime"])[0];
          var _now_9007 = lua_call(_toint_1, lua_tablegetcall(G.str['imcTime'], 'GetAppTimeMS', []))[0];
          if (lua_lte(_remainingTime_9007, lua_subtract(_now_9007, _startTime_9007))) {
            if (lua_eq(_remainingTime_9007, 0)) {
              lua_call(G.str['PlayTextEffect'], [_self, "I_SYS_Text_Effect_Skill"].concat(lua_call(G.str['ScpArgMsg'], ["Raise_Immune"])));
            }
            return [0];
          }
        }
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Raise_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ActorVibrate'], [_self, 0.1, 0, 0, 0]);
      lua_call(G.str['FlyMath'], [_self, 0, 0.1, 0.5]);
      var _dr_9010 = lua_call(G.str['GetExProp'], [_buff, "DEL_DR"])[0];
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _dr_9010));
      if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false) && lua_eq(lua_tableget(_self, 'GroupName'), "Monster"))) {
        var _movetype_9011 = lua_call(G.str['GetExProp_Str'], [_self, 'RAISE_MOVETYPE'])[0];
        lua_tableset(_self, 'MoveType', _movetype_9011);
      }
      if (lua_true(lua_call(G.str['IS_PC'], [_self])[0])) {
        lua_call(G.str['SetExProp'], [G.str['target'], "Psychokino_Raise_remainingTime", 0]);
        lua_call(G.str['SetExProp'], [G.str['target'], "Psychokino_Raise_startTime", 0]);
        lua_call(G.str['GetDiminishingMSTime'], [_self, _self, 10000, lua_tableget(_buff, 'ClassID'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Blistering_Debuff_Abil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _atkadd_9013 = lua_multiply(0.02, _arg1);
      var _defadd_9013 = lua_multiply(0.02, _arg1);
      lua_tableset(_self, 'PATK_RATE_BM', lua_add(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_9013));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_9013));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _atkadd_9013]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_9013]);
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_MONSTERNPC'])) {
        return [];
      }
      var _curFaction_9013 = lua_call(G.str['GetCurrentFaction'], [_self])[0];
      lua_call(G.str['SetExProp_Str'], [_self, '_PREV_FACTION', _curFaction_9013]);
      lua_call(G.str['SetCurrentFaction'], [_self, 'CrazyMonster']);
      lua_call(G.str['SetTendency'], [_self, "Attack"]);
      tmp = lua_call(G.str['SelectObject'], [_self, 100, "ENEMY"]); var _list_9013 = tmp[0]; var _cnt_9013 = tmp[1]; tmp = null;
      var var_9015 = 1, stop_9015 = lua_assertfloat(_cnt_9013);
      for (; var_9015 <= stop_9015; var_9015++) {
        var _i_9015 = var_9015;
        var _obj_9016 = lua_tableget(_list_9013, _i_9015);
        if (lua_eq(lua_call(G.str['IS_PC'], [_obj_9016])[0], false)) {
          if ((!lua_eq(lua_tableget(_obj_9016, 'MonRank'), 'Boss') && !lua_eq(lua_tableget(_obj_9016, 'Faction'), "Neutral"))) {
            lua_call(G.str['ResetHateAndAttack'], [_obj_9016]);
            lua_call(G.str['InsertHate'], [_obj_9016, _self, 10000]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Blistering_Debuff_Abil'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_9019 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _defadd_9019 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'PATK_RATE_BM', lua_subtract(lua_tableget(_self, 'PATK_RATE_BM'), _atkadd_9019));
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_9019));
      var _prevFaction_9019 = lua_call(G.str['GetExProp_Str'], [_self, '_PREV_FACTION'])[0];
      lua_call(G.str['SetCurrentFaction'], [_self, _prevFaction_9019]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        tmp = lua_call(G.str['SelectObject'], [_self, 100, "FRIEND"]); var _list_9020 = tmp[0]; var _cnt_9020 = tmp[1]; tmp = null;
        var var_9021 = 1, stop_9021 = lua_assertfloat(_cnt_9020);
        for (; var_9021 <= stop_9021; var_9021++) {
          var _i_9021 = var_9021;
          var _obj_9022 = lua_tableget(_list_9020, _i_9021);
          if (lua_eq(lua_call(G.str['IS_PC'], [_obj_9022])[0], false)) {
            lua_call(G.str['RemoveHate'], [_obj_9022, _self]);
          }
        }
        lua_call(G.str['ResetHateAndAttack'], [_self]);
        lua_call(G.str['InsertHate'], [_self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Crush_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_9024 = 0;
      var _defadd_9024 = 0;
      var _mdefadd_9024 = 0;
      var _abil_9024 = null;
      var _factor_9024 = 1;
      var _caster_9024 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9024, null)) {
        _abil_9024 = lua_call(G.str['GetAbility'], [_caster_9024, "Lancer3"])[0];
        if (!lua_eq(_abil_9024, null)) {
          _factor_9024 = lua_add(_factor_9024, lua_multiply(lua_tableget(_abil_9024, 'Level'), 0.1));
        }
      }
      if (lua_eq(lua_call(G.str['IMCRandom'], [0, 1])[0], 0)) {
        _atkadd_9024 = lua_multiply((lua_multiply(30, _arg1)), _factor_9024);
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
          if ((lua_lte(lua_tableget(_self, 'MINPATK_SUB'), lua_tableget(_self, 'MINPATK')) && lua_lte(lua_tableget(_self, 'MINPATK_SUB'), _atkadd_9024))) {
            _atkadd_9024 = lua_tableget(_self, 'MINPATK_SUB');
          } else if ((lua_lte(lua_tableget(_self, 'MINPATK'), lua_tableget(_self, 'MINPATK_SUB')) && lua_lte(lua_tableget(_self, 'MINPATK'), _atkadd_9024))) {
            _atkadd_9024 = lua_tableget(_self, 'MINPATK');
          }
        } else if ((!lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_lte(lua_tableget(_self, 'MINPATK'), _atkadd_9024))) {
          _atkadd_9024 = lua_tableget(_self, 'MINPATK');
        }
      } else {
        _defadd_9024 = lua_multiply((lua_multiply(30, _arg1)), _factor_9024);
        if ((!lua_eq(_abil_9024, null) && lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true))) {
          var _EquipDef_9033 = lua_call(G.str['GetSumOfEquipItem'], [_self, 'DEF'])[0];
          var _EquipMdef_9033 = lua_call(G.str['GetSumOfEquipItem'], [_self, 'MDEF'])[0];
          _mdefadd_9024 = lua_multiply(_EquipMdef_9033, 0.5);
          _defadd_9024 = lua_add(_defadd_9024, lua_multiply(_EquipDef_9033, 0.5));
        }
      }
      if (lua_lte(lua_tableget(_self, 'DEF'), _defadd_9024)) {
        _defadd_9024 = lua_tableget(_self, 'DEF');
      }
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _atkadd_9024));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_9024));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefadd_9024));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _atkadd_9024]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_9024]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefadd_9024]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Crush_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkadd_9035 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _defadd_9035 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _mdefadd_9035 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _atkadd_9035));
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_9035));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefadd_9035));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Commence_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blk_break_9036 = lua_add(300, lua_multiply(_arg1, 50));
      lua_tableset(_self, 'BLK_BREAK_BM', lua_add(lua_tableget(_self, 'BLK_BREAK_BM'), _blk_break_9036));
      lua_call(G.str['SetExProp'], [_buff, "BLK_BREAK", _blk_break_9036]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Commence_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(1, lua_call(G.str['GetVehicleState'], [_self])[0])) {
        lua_call(G.str['RemoveBuff'], [_self, "Commence_Buff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Commence_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blk_break_9039 = lua_call(G.str['GetExProp'], [_buff, "BLK_BREAK"])[0];
      lua_tableset(_self, 'BLK_BREAK_BM', lua_subtract(lua_tableget(_self, 'BLK_BREAK_BM'), _blk_break_9039));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Commence_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blkadd_9040 = 300;
      if (lua_lte(lua_tableget(_self, 'BLK'), 300)) {
        _blkadd_9040 = lua_tableget(_self, 'BLK');
      }
      lua_tableset(_self, 'BLK_BM', lua_subtract(lua_tableget(_self, 'BLK_BM'), _blkadd_9040));
      lua_call(G.str['SetExProp'], [_buff, "ADD_BLK", _blkadd_9040]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Commence_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _blkadd_9042 = lua_call(G.str['GetExProp'], [_buff, "ADD_BLK"])[0];
      lua_tableset(_self, 'BLK_BM', lua_add(lua_tableget(_self, 'BLK_BM'), _blkadd_9042));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Joust_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intadd_9043 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'INT'), _arg1), 0.05)])[0];
      var _mnaadd_9043 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'MNA'), _arg1), 0.05)])[0];
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_9043));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_9043));
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _intadd_9043]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _mnaadd_9043]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Joust_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _intadd_9044 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      var _mnaadd_9044 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_9044));
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_9044));
      return [];
    })
    G.str['SCR_BUFF_ENTER_JoustSilence_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_JoustSilence_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [0];
      }
      var _jobObj_9046 = lua_call(G.str['GetJobObject'], [_self])[0];
      if (lua_eq(_jobObj_9046, null)) {
        return [0];
      }
      if ((lua_eq(lua_tableget(_jobObj_9046, 'CtrlType'), 'Archer') || lua_eq(lua_tableget(_jobObj_9046, 'CtrlType'), 'Warrior'))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_JoustSilence_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HackapellCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HackapellCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_IronMaiden_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 0, 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_IronMaiden_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9054 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9054, null)) {
        if (lua_eq(lua_tableget(_self, 'RaceType'), "Velnias")) {
          var _damage_9056 = lua_multiply(lua_tableget(_self, 'MHP'), 0.01);
          var _skill_9056 = lua_call(G.str['GetSkill'], [_caster_9054, 'Inquisitor_IronMaiden'])[0];
          lua_call(G.str['TakeDamage'], [_caster_9054, _self, lua_tableget(_skill_9056, 'ClassName'), _damage_9056, lua_tableget(_skill_9056, 'Attribute'), lua_tableget(_skill_9056, 'AttackType'), 'AbsoluteDamage']);
        }
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_IronMaiden_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HereticsFork_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9058 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      lua_call(G.str['SkillTextEffect'], [null, _self, _caster_9058, "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _damage_9058 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9058, _self, 'Inquisitor_HereticsFork'])[0];
      lua_call(G.str['SetExProp'], [_buff, "HERETICSFORK_DAMAGE", _damage_9058]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HereticsFork_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9059 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9059, null)) {
        var _damage_9060 = lua_call(G.str['GetExProp'], [_buff, "HERETICSFORK_DAMAGE"])[0];
        var _skill_9060 = lua_call(G.str['GET_MON_SKILL'], [_caster_9059, 'Inquisitor_HereticsFork'])[0];
        lua_call(G.str['TakeDamage'], [_caster_9059, _self, lua_tableget(_skill_9060, 'ClassName'), _damage_9060]);
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HereticsFork_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_IronBoots_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _mspdadd_9062 = lua_add(10, _arg1);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9062));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_9062]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_IronBoots_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9063 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9063, null)) {
        var _damage_9064 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9063, _self, 'Inquisitor_IronBoots'])[0];
        var _skill_9064 = lua_call(G.str['GET_MON_SKILL'], [_caster_9063, 'Inquisitor_IronBoots'])[0];
        lua_call(G.str['TakeDamage'], [_caster_9063, _self, lua_tableget(_skill_9064, 'ClassName'), _damage_9064]);
        return [1];
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_IronBoots_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9065 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9065));
      return [];
    })
    G.str['SCR_BUFF_ENTER_PearofAnguish_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PearofAnguish_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9067 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9067, null)) {
        var _damage_9068 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9067, _self, 'Inquisitor_PearofAnguish'])[0];
        var _skill_9068 = lua_call(G.str['GET_MON_SKILL'], [_caster_9067, 'Inquisitor_PearofAnguish'])[0];
        lua_call(G.str['TakeDamage'], [_caster_9067, _self, lua_tableget(_skill_9068, 'ClassName'), _damage_9068]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CatherineWheel_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CatherineWheel_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_DarkSight_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SKL_HATE_RESET'], [_self]);
      lua_call(G.str['RunScript'], ['SCR_DARKSIGH_COLORBLEND', _self]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DarkSight_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1]);
      return [];
    })
    G.str['SCR_DARKSIGH_COLORBLEND'] = (function (_self) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 150, 1]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Entrenchment_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Entrenchment_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_SHOW_HIDDENPOTENTIAL_TEXT'] = (function (_ret, _self, _buff, _patkadd, _matkadd) {
      var tmp;
      lua_call(G.str['sleep'], [400]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_BONUS', lua_tablegetcall(G.str['math'], 'floor', [_patkadd])[0], null, "Melee_Atk"]);
      lua_call(G.str['sleep'], [400]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], 'SHOW_SKILL_BONUS', lua_tablegetcall(G.str['math'], 'floor', [_matkadd])[0], null, "Magic_Atk"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HiddenPotential_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addmin_9077 = 0;
      var _caster_9077 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_9077 = lua_call(G.str['GetAbility'], [_caster_9077, "Daoshi5"])[0];
      if (!lua_eq(_abil_9077, null)) {
        _addmin_9077 = lua_tableget(_abil_9077, 'Level');
      }
      var _patkadd_9077 = lua_call(G.str['IMCRandom'], [lua_add((lua_multiply(10, _arg1)), _addmin_9077), lua_multiply(50, _arg1)])[0];
      var _matkadd_9077 = lua_call(G.str['IMCRandom'], [lua_add((lua_multiply(10, _arg1)), _addmin_9077), lua_multiply(50, _arg1)])[0];
      lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_9077));
      lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_9077));
      lua_call(G.str['SetExProp'], [_buff, "ADD_PATK", _patkadd_9077]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MATK", _matkadd_9077]);
      lua_call(G.str['RunScript'], ['SCR_SHOW_HIDDENPOTENTIAL_TEXT', G.str['ret'], _self, _buff, _patkadd_9077, _matkadd_9077]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HiddenPotential_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _patkadd_9079 = lua_call(G.str['GetExProp'], [_buff, "ADD_PATK"])[0];
      var _matkadd_9079 = lua_call(G.str['GetExProp'], [_buff, "ADD_MATK"])[0];
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_9079));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_9079));
      return [];
    })
    G.str['SCR_BUFF_ENTER_StormCalling_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9080 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_9080 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9080, _self, 'Daoshi_StormCalling'])[0];
      var _skill_9080 = lua_call(G.str['GET_MON_SKILL'], [_caster_9080, 'Daoshi_StormCalling'])[0];
      var _divineAtkAdd_9080 = lua_tableget(_skill_9080, 'SkillAtkAdd');
      var _addValue_9080 = 0;
      var _pad_9080 = lua_call(G.str['GetPadByBuff'], [_caster_9080, _buff])[0];
      if (!lua_eq(_pad_9080, null)) {
        _addValue_9080 = lua_call(G.str['GetPadArgNumber'], [_pad_9080, 2])[0];
      }
      _divineAtkAdd_9080 = lua_subtract(_addValue_9080, _divineAtkAdd_9080);
      if (lua_lt(_divineAtkAdd_9080, 0)) {
        _divineAtkAdd_9080 = 0;
      }
      lua_call(G.str['TakeDamage'], [_caster_9080, _self, lua_tableget(_skill_9080, 'ClassName'), lua_add(_damage_9080, _divineAtkAdd_9080)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_StormCalling_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_StormCalling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9084 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _healValueBuff_9084 = 50;
      var _sklLevel_9084 = _arg1;
      if (!lua_eq(_caster_9084, null)) {
        var _pad_9085 = lua_call(G.str['GetPadByBuff'], [_caster_9084, _buff])[0];
        if (!lua_eq(_pad_9085, null)) {
          _sklLevel_9084 = lua_call(G.str['GetPadArgNumber'], [_pad_9085, 1])[0];
        }
      }
      _healValueBuff_9084 = lua_add(_healValueBuff_9084, lua_multiply(_sklLevel_9084, 100));
      var _healMin_9084 = lua_subtract(_healValueBuff_9084, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healValueBuff_9084, 0.05)])[0]);
      var _healMax_9084 = lua_add(_healValueBuff_9084, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_healValueBuff_9084, 0.05)])[0]);
      lua_call(G.str['Heal'], [_self, lua_call(G.str['IMCRandom'], [_healMin_9084, _healMax_9084])[0], 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_StormCalling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_EvasiveAction_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EvasiveAction_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(1, lua_call(G.str['GetVehicleState'], [_self])[0])) {
        lua_call(G.str['RemoveBuff'], [_self, "EvasiveAction_Buff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EvasiveAction_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Savior_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _shieldValue_9092 = lua_add(800, lua_multiply(100, _arg1));
      lua_call(G.str['GIVE_BUFF_SHIELD'], [_self, _buff, _shieldValue_9092]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Savior_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['TAKE_BUFF_SHIELD'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Foretell_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Foretell_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PlagueVapours_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9096 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9096, null)) {
        var _abilPlagueDoctor16_9097 = lua_call(G.str['GetAbility'], [_caster_9096, 'PlagueDoctor16'])[0];
        if ((!lua_eq(_abilPlagueDoctor16_9097, null) && lua_eq(lua_tableget(_abilPlagueDoctor16_9097, 'ActiveState'), 1))) {
          lua_call(G.str['SetBuffUpdateTime'], [_buff, 400]);
        }
      }
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_PlagueVapours_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9099 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9099, null)) {
        var _damage_9100 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9099, _self, 'PlagueDoctor_PlagueVapours'])[0];
        var _skill_9100 = lua_call(G.str['GET_MON_SKILL'], [_caster_9099, 'PlagueDoctor_PlagueVapours'])[0];
        lua_call(G.str['TakeDamage'], [_caster_9099, _self, lua_tableget(_skill_9100, 'ClassName'), _damage_9100, lua_tableget(_skill_9100, 'Attribute'), lua_tableget(_skill_9100, 'AttackType'), lua_tableget(_skill_9100, 'ClassType'), G.str['HIT_POISON_GREEN'], G.str['HITRESULT_BLOW']]);
        var _faction_9100 = lua_call(G.str['GetCurrentFaction'], [_self])[0];
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_9099, _self, 60, 'ENEMY']); var _objList_9100 = tmp[0]; var _objCount_9100 = tmp[1]; tmp = null;
        if ((lua_lt(0, _objCount_9100) && lua_lt(lua_call(G.str['IMCRandom'], [1, 10000])[0], 1000))) {
          var _rand_9101 = lua_call(G.str['IMCRandom'], [1, _objCount_9100])[0];
          lua_call(G.str['AddBuff'], [_caster_9099, lua_tableget(_objList_9100, _rand_9101), 'PlagueVapours_Debuff', _arg1, _arg2, _RemainTime, _over]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PlagueVapours_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LegShot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _rate_9103 = 0.5;
      var _caster_9103 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_9103 = lua_call(G.str['GetAbility'], [_caster_9103, "Hackapell5"])[0];
      if (!lua_eq(_abil_9103, null)) {
        _rate_9103 = lua_add(_rate_9103, lua_multiply(lua_tableget(_abil_9103, 'Level'), 0.01));
      }
      var _mspdadd_9103 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MSPD'), _rate_9103)])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9103));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_9103]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LegShot_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9105 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9105));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Enchantment_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _equipItem_9106 = lua_call(G.str['GetEquipItem'], [_self, "RH"])[0];
      if (lua_eq(lua_tableget(_equipItem_9106, 'ClassName'), "NoWeapon")) {
        return [];
      }
      lua_call(G.str['SetExProp'], [_equipItem_9106, "Enchantment_Buff", 1]);
      lua_call(G.str['REFRESH_ITEM'], [_self, _equipItem_9106]);
      lua_call(G.str['InvalidateItem'], [_equipItem_9106]);
      lua_call(G.str['SetExProp_Str'], [_buff, "Enchantment_Buff"].concat(lua_call(G.str['GetItemGuid'], [_equipItem_9106])));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Enchantment_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _equipItem_9108 = lua_call(G.str['GetEquipItem'], [_self, "RH"])[0];
      if (lua_eq(lua_tableget(_equipItem_9108, 'ClassName'), "NoWeapon")) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetExProp_Str'], [_buff, 'Enchantment_Buff'])[0], lua_call(G.str['GetItemGuid'], [_equipItem_9108])[0])) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Enchantment_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _bufIemGUID_9111 = lua_call(G.str['GetExProp_Str'], [_buff, 'Enchantment_Buff'])[0];
      tmp = lua_call(G.str['GetInvItemByGuid'], [_self, _bufIemGUID_9111]); var _item_9111 = tmp[0]; var _cnt_9111 = tmp[1]; tmp = null;
      if (lua_eq(_item_9111, null)) {
        return [];
      }
      lua_call(G.str['DelExProp'], [_item_9111, 'Enchantment_Buff']);
      lua_call(G.str['REFRESH_ITEM'], [_self, _item_9111]);
      lua_call(G.str['InvalidateItem'], [_item_9111]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rewards_RH_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _equipItem_9113 = lua_call(G.str['GetEquipItem'], [_self, "RH"])[0];
      if (lua_eq(lua_tableget(_equipItem_9113, 'ClassName'), "NoWeapon")) {
        return [];
      }
      lua_call(G.str['SetExProp'], [_equipItem_9113, "Rewards_BuffValue", lua_multiply(_arg1, 10)]);
      lua_call(G.str['REFRESH_ITEM'], [_self, _equipItem_9113]);
      lua_call(G.str['SetExProp_Str'], [_buff, "Rewards_Buff"].concat(lua_call(G.str['GetItemGuid'], [_equipItem_9113])));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Rewards_RH_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _equipItem_9115 = lua_call(G.str['GetEquipItem'], [_self, "RH"])[0];
      if (lua_eq(lua_tableget(_equipItem_9115, 'ClassName'), "NoWeapon")) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetExProp_Str'], [_buff, 'Rewards_Buff'])[0], lua_call(G.str['GetItemGuid'], [_equipItem_9115])[0])) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rewards_RH_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _buffItem_9118 = lua_call(G.str['GetExProp_Str'], [_buff, 'Rewards_Buff'])[0];
      tmp = lua_call(G.str['GetEquipItemByGuid'], [_self, _buffItem_9118]); var _item_9118 = tmp[0]; var _cnt_9118 = tmp[1]; tmp = null;
      if (lua_eq(_item_9118, null)) {
        return [];
      }
      lua_call(G.str['DelExProp'], [_item_9118, 'Rewards_BuffValue']);
      lua_call(G.str['REFRESH_ITEM'], [_self, _item_9118]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rewards_SHIRT_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _shirtEquip_9120 = lua_call(G.str['GetEquipItem'], [_self, "SHIRT"])[0];
      if (lua_eq(lua_tableget(_shirtEquip_9120, 'ClassName'), "NoWeapon")) {
        return [];
      }
      lua_call(G.str['SetExProp'], [_shirtEquip_9120, "Rewards_BuffValue", lua_multiply(_arg1, 10)]);
      lua_call(G.str['REFRESH_ITEM'], [_self, _shirtEquip_9120]);
      lua_call(G.str['SetExProp_Str'], [_buff, "Rewards_Buff2"].concat(lua_call(G.str['GetItemGuid'], [_shirtEquip_9120])));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Rewards_SHIRT_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _shirtEquip_9122 = lua_call(G.str['GetEquipItem'], [_self, "SHIRT"])[0];
      if (lua_eq(lua_tableget(_shirtEquip_9122, 'ClassName'), "NoWeapon")) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetExProp_Str'], [_buff, 'Rewards_Buff2'])[0], lua_call(G.str['GetItemGuid'], [_shirtEquip_9122])[0])) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rewards_SHIRT_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _bufIemGUID_9125 = lua_call(G.str['GetExProp_Str'], [_buff, 'Rewards_Buff2'])[0];
      tmp = lua_call(G.str['GetInvItemByGuid'], [_self, _bufIemGUID_9125]); var _item_9125 = tmp[0]; var _cnt_9125 = tmp[1]; tmp = null;
      if (lua_eq(_item_9125, null)) {
        return [];
      }
      lua_call(G.str['DelExProp'], [_item_9125, 'Rewards_BuffValue']);
      lua_call(G.str['REFRESH_ITEM'], [_self, _item_9125]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Agility_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _equipItem_9127 = lua_call(G.str['GetEquipItem'], [_self, "BOOTS"])[0];
      if (lua_eq(lua_tableget(_equipItem_9127, 'ClassName'), "NoBoots")) {
        return [];
      }
      lua_call(G.str['SetExProp'], [_equipItem_9127, "Agility_Buff", 1]);
      lua_call(G.str['REFRESH_ITEM'], [_self, _equipItem_9127]);
      lua_call(G.str['SetExProp_Str'], [_buff, "Agility_Buff"].concat(lua_call(G.str['GetItemGuid'], [_equipItem_9127])));
      var _addsta_9127 = lua_multiply(5, _arg1);
      lua_tableset(_self, 'MaxSta_BM', lua_add(lua_tableget(_self, 'MaxSta_BM'), _addsta_9127));
      lua_call(G.str['SetExProp'], [_buff, 'ADD_STA', _addsta_9127]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Agility_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _equipItem_9129 = lua_call(G.str['GetEquipItem'], [_self, "BOOTS"])[0];
      if (lua_eq(lua_tableget(_equipItem_9129, 'ClassName'), "NoBoots")) {
        return [0];
      }
      if (!lua_eq(lua_call(G.str['GetExProp_Str'], [_buff, 'Agility_Buff'])[0], lua_call(G.str['GetItemGuid'], [_equipItem_9129])[0])) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Agility_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLastEnd) {
      var tmp;
      var _addsta_9132 = lua_call(G.str['GetExProp'], [_buff, 'ADD_STA'])[0];
      if (lua_lt(0, _addsta_9132)) {
        lua_tableset(_self, 'MaxSta_BM', lua_subtract(lua_tableget(_self, 'MaxSta_BM'), _addsta_9132));
      }
      var _bufIemGUID_9132 = lua_call(G.str['GetExProp_Str'], [_buff, 'Agility_Buff'])[0];
      tmp = lua_call(G.str['GetInvItemByGuid'], [_self, _bufIemGUID_9132]); var _item_9132 = tmp[0]; var _cnt_9132 = tmp[1]; tmp = null;
      if (lua_eq(_item_9132, null)) {
        return [];
      }
      lua_call(G.str['DelExProp'], [_item_9132, 'Agility_Buff']);
      lua_call(G.str['REFRESH_ITEM'], [_self, _item_9132]);
      lua_call(G.str['InvalidateItem'], [_item_9132]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Blink_ColorBlned'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 180, 255, 150, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Blink_ColorBlned'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 0, 1, 0.7]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_EnchantedPowder_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9137 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(2, lua_multiply(_arg1, 0.1))])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9137));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_9137]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EnchantedPowder_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9138 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9138));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hamaya_TakeDamage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9139 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_9139 = lua_call(G.str['GET_MON_SKILL'], [_caster_9139, 'Miko_Hamaya'])[0];
      var _damage_9139 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9139, _self, 'Miko_Hamaya'])[0];
      var _divineAtkAdd_9139 = lua_tableget(_skill_9139, 'SkillAtkAdd');
      var _addValue_9139 = 0;
      var _pad_9139 = lua_call(G.str['GetPadByBuff'], [_caster_9139, _buff])[0];
      if (!lua_eq(_pad_9139, null)) {
        _addValue_9139 = lua_call(G.str['GetPadArgNumber'], [_pad_9139, 1])[0];
      }
      _divineAtkAdd_9139 = lua_subtract(_addValue_9139, _divineAtkAdd_9139);
      if (lua_lt(_divineAtkAdd_9139, 0)) {
        _divineAtkAdd_9139 = 0;
      }
      var _addHolyDamage_9139 = 0;
      if (lua_eq(lua_tableget(_self, 'RaceType'), "Velnias")) {
        _addHolyDamage_9139 = lua_multiply(lua_tableget(_skill_9139, 'SkillAtkAdd'), 3);
      }
      lua_call(G.str['TakeDamage'], [_caster_9139, _self, lua_tableget(_skill_9139, 'ClassName'), lua_add(lua_add(_damage_9139, _divineAtkAdd_9139), _addHolyDamage_9139)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hamaya_TakeDamage'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Levitation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['FlyMath'], [_self, 35, 0.3, 1, 1, 0]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['AddLockSkillList'], [_self, 'Cryomancer_SnowRolling']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Psychokino_PsychicPressure']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Psychokino_Swap']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_Combustion']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_Dig']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_ItemAwakening']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_Briquetting']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_Tincturing']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_MagnumOpus']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Featherfoot_Kurdaitcha']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Linker_SpiritualChain']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Necromancer_Disinter']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Alchemist_Roasting']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Sage_Portal']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Sage_Blink']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Enchanter_EnchantArmor']);
      lua_call(G.str['AddLockSkillList'], [_self, 'Enchanter_CraftMagicScrolls']);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Levitation_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _hight_9145 = lua_call(G.str['GetFlyHeight'], [_self])[0];
      var _maxHight_9145 = 35;
      if (lua_eq(lua_call(G.str['IsUsingSkill'], [_self])[0], 1)) {
        var _lowHight_9146 = 34;
        if (!lua_eq(_lowHight_9146, _hight_9145)) {
          lua_call(G.str['FlyMath'], [_self, _lowHight_9146, 1, 0.5, 1, 0]);
        } else if (!lua_eq(_maxHight_9145, _hight_9145)) {
          lua_call(G.str['FlyMath'], [_self, _maxHight_9145, 1, 0.5, 1, 0]);
        }
      } else {
        if (!lua_eq(G.str['buffHight'], _hight_9145)) {
          lua_call(G.str['FlyMath'], [_self, _maxHight_9145, 0.3, 1, 1, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Levitation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayAnim'], [_self, "SKL_LEVITATION_DOWN"]);
      lua_call(G.str['FlyMath'], [_self, 0, 0.2, 1]);
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HoukiBroom_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9152 = 15;
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9152));
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_9152]);
      lua_call(G.str['SetExProp'], [_self, 'ImmuneBuff', 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HoukiBroom_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_self, 'ImmuneBuff']);
      var _mspdadd_9153 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9153));
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BloodCurse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        var _rspadd_9155 = lua_tableget(_self, 'RSP');
        lua_tableset(_self, 'RSP_BM', lua_subtract(lua_tableget(_self, 'RSP_BM'), _rspadd_9155));
        lua_call(G.str['SetExProp'], [_buff, "ADD_RSP", _rspadd_9155]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BloodCurse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (((lua_eq(lua_tableget(_self, 'MonRank'), "Material") || lua_eq(lua_tableget(_self, 'MonRank'), "MISC")) || lua_eq(lua_tableget(_self, 'MonRank'), "None"))) {
        return [];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BloodCurse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        var _rspadd_9159 = lua_call(G.str['GetExProp'], [_buff, "ADD_RSP"])[0];
        lua_tableset(_self, 'RSP_BM', lua_add(lua_tableget(_self, 'RSP_BM'), _rspadd_9159));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DethroneBoss_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9160 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MSPD'), 0.5)])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9160));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_9160]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DethroneBoss_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9161 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9161));
      return [];
    })
    G.str['SCR_BUFF_ENTER_BalestraFente_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addcrtdr_9162 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_arg1, 40)])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _addcrtdr_9162));
      lua_call(G.str['SetExProp'], [_buff, "ADD_CRTDR", _addcrtdr_9162]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BalestraFente_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addcrtdr_9163 = lua_call(G.str['GetExProp'], [_buff, "ADD_CRTDR"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _addcrtdr_9163));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Aiming_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EnablePreviewHitRadius'], [_self, 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Aiming_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLast) {
      var tmp;
      if (lua_eq(_isLast, 1)) {
        lua_call(G.str['EnablePreviewHitRadius'], [_self, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_TriDisaster_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_9167 = _arg1;
      var _resice_9167 = 0;
      var _resfire_9167 = 0;
      var _reslight_9167 = 0;
      var _addres_9167 = lua_add(200, lua_multiply(_lv_9167, 10));
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        _resice_9167 = lua_tableget(_self, 'ResIce');
        _resfire_9167 = lua_tableget(_self, 'ResFire');
        _reslight_9167 = lua_tableget(_self, 'ResLightning');
      } else {
        _resice_9167 = lua_tableget(_self, 'Ice_Def');
        _resfire_9167 = lua_tableget(_self, 'Fire_Def');
        _reslight_9167 = lua_tableget(_self, 'Lightning_Def');
      }
      var _resiceadd_9167 = lua_add(0, _addres_9167);
      var _resfireadd_9167 = lua_add(0, _addres_9167);
      var _reslightadd_9167 = lua_add(0, _addres_9167);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_add(lua_tableget(_self, 'ResIce_BM'), _resiceadd_9167));
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _resfireadd_9167));
        lua_tableset(_self, 'ResLightning_BM', lua_add(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_9167));
      } else {
        lua_tableset(_self, 'Ice_Def_BM', lua_add(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_9167));
        lua_tableset(_self, 'Fire_Def_BM', lua_add(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_9167));
        lua_tableset(_self, 'Lightning_Def_BM', lua_add(lua_tableget(_self, 'Lightning_Def_BM'), _reslightadd_9167));
      }
      lua_call(G.str['SetExProp'], [_buff, "ADD_ICE", _resiceadd_9167]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_FIRE", _resfireadd_9167]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_LIGHT", _reslightadd_9167]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TriDisaster_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _resiceadd_9172 = lua_call(G.str['GetExProp'], [_buff, "ADD_ICE"])[0];
      var _resfireadd_9172 = lua_call(G.str['GetExProp'], [_buff, "ADD_FIRE"])[0];
      var _reslightadd_9172 = lua_call(G.str['GetExProp'], [_buff, "ADD_LIGHT"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResIce_BM', lua_subtract(lua_tableget(_self, 'ResIce_BM'), _resiceadd_9172));
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _resfireadd_9172));
        lua_tableset(_self, 'ResLightning_BM', lua_subtract(lua_tableget(_self, 'ResLightning_BM'), _reslightadd_9172));
      } else {
        lua_tableset(_self, 'Ice_Def_BM', lua_subtract(lua_tableget(_self, 'Ice_Def_BM'), _resiceadd_9172));
        lua_tableset(_self, 'Fire_Def_BM', lua_subtract(lua_tableget(_self, 'Fire_Def_BM'), _resfireadd_9172));
        lua_tableset(_self, 'Lightning_Def_BM', lua_subtract(lua_tableget(_self, 'Lightning_Def_BM'), _reslightadd_9172));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_MalleusMaleficarum_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addmna_9175 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'MNA'), 2)])[0];
      var _addint_9175 = lua_tablegetcall(G.str['math'], 'floor', [lua_divide(lua_tableget(_self, 'INT'), 2)])[0];
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _addmna_9175));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _addint_9175));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MNA", _addmna_9175]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_INT", _addint_9175]);
      var _caster_9175 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9175, null)) {
        _caster_9175 = _self;
      }
      var _abil_9175 = lua_call(G.str['GetAbility'], [_caster_9175, 'Inquisitor11'])[0];
      if (!lua_eq(_abil_9175, null)) {
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
          lua_call(G.str['AddSP'], [_self, lua_unm(lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_multiply(lua_tableget(_self, 'SP'), lua_tableget(_abil_9175, 'Level')), 0.05)])[0])]);
        } else {
          lua_call(G.str['AddBuff'], [_caster_9175, _self, 'UC_silence', 1, 0, 5000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MalleusMaleficarum_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addmna_9180 = lua_call(G.str['GetExProp'], [_buff, "ADD_MNA"])[0];
      var _addint_9180 = lua_call(G.str['GetExProp'], [_buff, "ADD_INT"])[0];
      lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _addmna_9180));
      lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _addint_9180));
      return [];
    })
    G.str['SCR_BUFF_ENTER_HengeStone_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _jobObj_9181 = lua_call(G.str['GetJobObject'], [_self])[0];
      if (lua_eq(_jobObj_9181, null)) {
        return [];
      }
      if (!lua_eq(lua_tableget(_jobObj_9181, 'CtrlType'), 'Cleric')) {
        return [];
      }
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _list_9181 = tmp[0]; var _cnt_9181 = tmp[1]; tmp = null;
      var var_9185 = 1, stop_9185 = lua_assertfloat(_cnt_9181);
      for (; var_9185 <= stop_9185; var_9185++) {
        var _i_9185 = var_9185;
        if ((lua_lt(10000, lua_tableget(lua_tableget(_list_9181, _i_9185), 'ClassID')) && lua_eq(lua_tableget(lua_tableget(_list_9181, _i_9185), 'HitType'), "Pad"))) {
          lua_tableset(lua_tableget(_list_9181, _i_9185), 'Level_BM', lua_add(lua_tableget(lua_tableget(_list_9181, _i_9185), 'Level_BM'), 1));
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9181, _i_9185), "Level"]);
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9181, _i_9185), "SkillAtkAdd"]);
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9181, _i_9185), "SkillFactor"]);
          lua_call(G.str['SendSkillProperty'], [_self, lua_tableget(_list_9181, _i_9185)]);
        }
      }
      var _value_9181 = lua_call(G.str['GetExProp'], [_self, 'HENGE_STONE_SATE'])[0];
      lua_call(G.str['SetExProp'], [_self, 'HENGE_STONE_SATE', lua_add(_value_9181, 1)]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HengeStone_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        return [];
      }
      var _jobObj_9188 = lua_call(G.str['GetJobObject'], [_self])[0];
      if (lua_eq(_jobObj_9188, null)) {
        return [];
      }
      if (!lua_eq(lua_tableget(_jobObj_9188, 'CtrlType'), 'Cleric')) {
        return [];
      }
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _list_9188 = tmp[0]; var _cnt_9188 = tmp[1]; tmp = null;
      var var_9192 = 1, stop_9192 = lua_assertfloat(_cnt_9188);
      for (; var_9192 <= stop_9192; var_9192++) {
        var _i_9192 = var_9192;
        if ((lua_lt(10000, lua_tableget(lua_tableget(_list_9188, _i_9192), 'ClassID')) && lua_eq(lua_tableget(lua_tableget(_list_9188, _i_9192), 'HitType'), "Pad"))) {
          lua_tableset(lua_tableget(_list_9188, _i_9192), 'Level_BM', lua_subtract(lua_tableget(lua_tableget(_list_9188, _i_9192), 'Level_BM'), 1));
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9188, _i_9192), "Level"]);
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9188, _i_9192), "SkillAtkAdd"]);
          lua_call(G.str['SendSkillProperty'], [_self, lua_tableget(_list_9188, _i_9192)]);
        }
      }
      var _value_9188 = lua_call(G.str['GetExProp'], [_self, 'HENGE_STONE_SATE'])[0];
      lua_call(G.str['SetExProp'], [_self, 'HENGE_STONE_SATE', lua_subtract(_value_9188, 1)]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_HoukiBroomSkllvup_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _list_9195 = tmp[0]; var _cnt_9195 = tmp[1]; tmp = null;
      var var_9196 = 1, stop_9196 = lua_assertfloat(_cnt_9195);
      for (; var_9196 <= stop_9196; var_9196++) {
        var _i_9196 = var_9196;
        if ((lua_lt(10000, lua_tableget(lua_tableget(_list_9195, _i_9196), 'ClassID')) && lua_eq(lua_tableget(lua_tableget(_list_9195, _i_9196), 'HitType'), "Pad"))) {
          lua_tableset(lua_tableget(_list_9195, _i_9196), 'Level_BM', lua_add(lua_tableget(lua_tableget(_list_9195, _i_9196), 'Level_BM'), 1));
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9195, _i_9196), "Level"]);
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9195, _i_9196), "SkillFactor"]);
          lua_call(G.str['SendSkillProperty'], [_self, lua_tableget(_list_9195, _i_9196)]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HoukiBroomSkllvup_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _list_9199 = tmp[0]; var _cnt_9199 = tmp[1]; tmp = null;
      var var_9200 = 1, stop_9200 = lua_assertfloat(_cnt_9199);
      for (; var_9200 <= stop_9200; var_9200++) {
        var _i_9200 = var_9200;
        if ((lua_lt(10000, lua_tableget(lua_tableget(_list_9199, _i_9200), 'ClassID')) && lua_eq(lua_tableget(lua_tableget(_list_9199, _i_9200), 'HitType'), "Pad"))) {
          lua_tableset(lua_tableget(_list_9199, _i_9200), 'Level_BM', lua_subtract(lua_tableget(lua_tableget(_list_9199, _i_9200), 'Level_BM'), 1));
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9199, _i_9200), "Level"]);
          lua_call(G.str['InvalidateObjectProp'], [lua_tableget(_list_9199, _i_9200), "SkillAtkAdd"]);
          lua_call(G.str['SendSkillProperty'], [_self, lua_tableget(_list_9199, _i_9200)]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_TwistOfFate_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TwistOfFate_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9204 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _healValue_9204 = 1;
      _healValue_9204 = lua_call(G.str['GetExProp'], [_self, "TwistOfFate_DamageRate"])[0];
      lua_call(G.str['Heal'], [_self, lua_divide(_healValue_9204, 30)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TwistOfFate_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Merkabah_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefRate_9206 = 0.1;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefRate_9206));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _mdefRate_9206]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Merkabah_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mdefRate_9207 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _mdefRate_9207));
      return [];
    })
    G.str['SCR_BUFF_ENTER_indunTheEndSafe'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_9208 = 1;
      lua_call(G.str['SetExProp'], [_buff, 'DEFENCED_BM', _addDefenced_BM_9208]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_9208));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_indunTheEndSafe'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefenced_BM_9209 = lua_call(G.str['GetExProp'], [_buff, 'DEFENCED_BM'])[0];
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), _addDefenced_BM_9209));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ScudInstinct_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _timelimit_9210 = 50;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        var _Barbarian29_abil_9211 = lua_call(G.str['GetAbility'], [_self, "Barbarian29"])[0];
        if (!lua_eq(_Barbarian29_abil_9211, null)) {
          _timelimit_9210 = lua_add(_timelimit_9210, 50);
        }
      }
      lua_call(G.str['SetBuffArgs'], [_buff, 0, 0, _timelimit_9210]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ScudInstinct_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (lua_eq(lua_tableget(_self, 'ClassName'), 'PC')) {
        var _is_barbarian_9214 = lua_call(G.str['GetJobGradeByName'], [_self, 'Char1_6'])[0];
        if (lua_lte(2, _is_barbarian_9214)) {
          tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _stoptime_9215 = tmp[0]; var _dashtime_9215 = tmp[1]; var _timelimit_9215 = tmp[2]; tmp = null;
          if (lua_eq(lua_tableget(_self, 'DashRun'), 0)) {
            _stoptime_9215 = lua_add(_stoptime_9215, 1);
            if (lua_lte(_timelimit_9215, _stoptime_9215)) {
              if (lua_lte(_over, 1)) {
                return [0];
              }
              _stoptime_9215 = 0;
              lua_call(G.str['AddBuff'], [_self, _self, 'ScudInstinct_Buff', 1, 0, 0, -1]);
            }
            lua_call(G.str['SetBuffArgs'], [_buff, _stoptime_9215, 0, _timelimit_9215]);
          } else {
            if (lua_lt(_over, 5)) {
              _dashtime_9215 = lua_add(_dashtime_9215, 1);
              if (lua_lte(10, _dashtime_9215)) {
                _dashtime_9215 = 0;
                lua_call(G.str['AddBuff'], [_self, _self, 'ScudInstinct_Buff', 1, 0, 0, 1]);
              }
            }
            if (lua_lt(0, _stoptime_9215)) {
              _stoptime_9215 = lua_subtract(_stoptime_9215, 1);
            }
            lua_call(G.str['SetBuffArgs'], [_buff, _stoptime_9215, _dashtime_9215, _timelimit_9215]);
          }
          if (lua_lte(5, _over)) {
            var _healTimeCount_9223 = lua_call(G.str['GetExProp'], [_buff, "HEAL_TIME_COUNT"])[0];
            if (lua_eq(_healTimeCount_9223, null)) {
              _healTimeCount_9223 = 0;
            }
            if (lua_lte(20, _healTimeCount_9223)) {
              var _healValue_9225 = 0;
              if (lua_eq(_is_barbarian_9214, 2)) {
                _healValue_9225 = 50;
              } else if (lua_eq(_is_barbarian_9214, 3)) {
                _healValue_9225 = 100;
              }
              lua_call(G.str['Heal'], [_self, _healValue_9225]);
              _healTimeCount_9223 = 0;
            } else {
              _healTimeCount_9223 = lua_add(_healTimeCount_9223, 1);
            }
            lua_call(G.str['SetExProp'], [_buff, "HEAL_TIME_COUNT", _healTimeCount_9223]);
          }
        } else {
          return [0];
        }
      } else {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ScudInstinct_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FrostPillar_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FrostPillar_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9233 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9233, null)) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['IsDead'], [_caster_9233])[0], 1)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FrostPillar_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sorcerer_Obey_Status_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9237 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9237, null)) {
        lua_call(G.str['SendAddOnMsg'], [_caster_9237, "SORCERER_OBEY_BUFF", "None", G.str['add_value']]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Sorcerer_Obey_Status_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9239 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9239, null)) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['IsDead'], [_caster_9239])[0], 1)) {
        return [0];
      }
      if (!lua_eq(lua_tableget(_caster_9239, 'ClassName'), 'PC')) {
        return [0];
      }
      var _ctrlTarget_9239 = lua_call(G.str['GetControlTarget'], [_caster_9239])[0];
      if ((lua_eq(_ctrlTarget_9239, null) || lua_eq(lua_call(G.str['IsSameObject'], [_ctrlTarget_9239, _self])[0], 0))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sorcerer_Obey_Status_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9244 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9244, null)) {
        lua_call(G.str['SendAddOnMsg'], [_caster_9244, "SORCERER_OBEY_BUFF", "None", 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sorcerer_Obey_PC_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _ctrlTarget_9246 = lua_call(G.str['GetControlTarget'], [_self])[0];
      if (!lua_eq(_ctrlTarget_9246, null)) {
        lua_call(G.str['SetExArgObject'], [_self, "Sorcerer_Obey_PC_DEF_Buff_Mon", _ctrlTarget_9246]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Sorcerer_Obey_PC_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _ctrlTarget_9248 = lua_call(G.str['GetControlTarget'], [_self])[0];
      var _ObeyMon_9248 = lua_call(G.str['GetExArgObject'], [_self, "Sorcerer_Obey_PC_DEF_Buff_Mon"])[0];
      if ((lua_eq(_ctrlTarget_9248, null) || lua_eq(_ObeyMon_9248, null))) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['IsSameObject'], [_ctrlTarget_9248, _ObeyMon_9248])[0], 0)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sorcerer_Obey_PC_DEF_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ClearExArgObject'], [_self, "Sorcerer_Obey_PC_DEF_Buff_Mon"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_CannonBlast_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _defadd_9252 = 0.5;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_9252));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _defadd_9252]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CannonBlast_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _defadd_9253 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _defadd_9253));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SnowRollingAttach'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SnowRollingAttach'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9255 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9255, null)) {
        if (lua_eq(lua_call(G.str['GetExProp'], [_self, "diminishing_snowRolling"])[0], 1)) {
          lua_call(G.str['SetExProp'], [_self, "diminishing_snowRolling", 0]);
          lua_call(G.str['DetachFromObject'], [_self, _caster_9255]);
          var _remainingTime_9257 = lua_call(G.str['GetExProp'], [_self, "diminishing_snowRolling_remainingTime"])[0];
          if (!lua_eq(_remainingTime_9257, 0)) {
            lua_call(G.str['AddBuff'], [_self, _self, "SnowRollingTemporaryImmune", 1, 1, _remainingTime_9257, 1]);
          }
          var _knockType_9257 = 4;
          var _isInverseAngle_9257 = 3;
          var _power_9257 = 150;
          var _vAngle_9257 = 40;
          var _hAngle_9257 = 0;
          var _bound_9257 = 1;
          var _kdRank_9257 = 2;
          lua_call(G.str['SKL_TOOL_KD'], [_caster_9255, _self, _knockType_9257, _isInverseAngle_9257, _power_9257, _vAngle_9257, _hAngle_9257, _bound_9257, _kdRank_9257]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Firstblow_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        lua_call(G.str['PlayEffect'], [_self, "F_pc_FirstBlow", 1.3, 'TOP']);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Firstblow_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetObjType'], [_self])[0], G.str['OT_PC'])) {
        var _fistBlowMonID_9262 = lua_call(G.str['GetExProp'], [_self, "FirstBlowMonID"])[0];
        var _fistBlowMonName_9262 = lua_call(G.str['GetExProp'], [_self, "FirstBlowMonName"])[0];
        lua_call(G.str['print'], ["Try BuffRemoveFirstblow Lob"]);
        lua_call(G.str['CustomMongoLog'], [_self, "FieldBoss", "Type", "BuffRemoveFirstblow", "MonClsID", _fistBlowMonID_9262, "MonClsName", _fistBlowMonName_9262]);
      } else {
        lua_call(G.str['CustomMongoLog'], [_self, "FieldBoss", "Type", "BuffRemoveFirstblow"]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_GatherCorpse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9264 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9264, null)) {
        var _skill_9265 = lua_call(G.str['GetSkill'], [_caster_9264, "Necromancer_GatherCorpse"])[0];
        if (!lua_eq(_skill_9265, null)) {
          _arg1 = lua_tableget(_skill_9265, 'Level');
        }
        lua_call(G.str['SetBuffArg'], [_caster_9264, _buff, _arg1]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GatherCorpse_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeamBattle_GoldRanker'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_WORLDPVP_REWARD_ACHIEVE'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TeamBattle_GoldRanker'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_WORLDPVP_REWARD_ACHIEVE'], [_self]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeamBattle_SilverRanker'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_WORLDPVP_REWARD_ACHIEVE'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TeamBattle_SilverRanker'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_WORLDPVP_REWARD_ACHIEVE'], [_self]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeamBattle_BronzeRanker'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_WORLDPVP_REWARD_ACHIEVE'], [_self]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TeamBattle_BronzeRanker'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_WORLDPVP_REWARD_ACHIEVE'], [_self]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_ENTER_Journal_AP1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Journal_AP1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Journal_AP1'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        lua_call(G.str['RunScript'], ["REMOVE_ADVENTURE_REWARD_ACHIEVE", _self]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Journal_AP6'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Journal_AP6'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Journal_AP6'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_lte(lua_call(G.str['GetBuffRemainTime'], [_buff])[0], 0)) {
        lua_call(G.str['RunScript'], ["REMOVE_ADVENTURE_REWARD_ITEM_ACHIEVE", _self]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_CavalryChargeAbil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _AbilityDefence_9282 = 0;
      var _abil_9282 = lua_call(G.str['GetAbility'], [_self, "Hackapell8"])[0];
      var _abilLevel_9282 = lua_call(G.str['TryGetProp'], [_abil_9282, "Level"])[0];
      var _ActiveState_9282 = lua_call(G.str['TryGetProp'], [_abil_9282, "ActiveState"])[0];
      if ((!lua_eq(_abil_9282, null) && lua_eq(_ActiveState_9282, 1))) {
        _AbilityDefence_9282 = lua_multiply(_abilLevel_9282, 0.1);
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _AbilityDefence_9282));
      lua_call(G.str['SetExProp'], [_buff, "ABIL_DEF", _AbilityDefence_9282]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CavalryChargeAbil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _AbilityDefence_9284 = lua_call(G.str['GetExProp'], [_buff, "ABIL_DEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _AbilityDefence_9284));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sanctuary_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skillLv_9285 = _arg1;
      var _addDEF_9285 = 0;
      var _addMDEF_9285 = 0;
      var _caster_9285 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9285, null)) {
        var _casterBasicDEF_9286 = lua_call(G.str['SCR_CALC_BASIC_DEF'], [_caster_9285])[0];
        var _casterBasicMDEF_9286 = lua_call(G.str['SCR_CALC_BASIC_MDEF'], [_caster_9285])[0];
        var _casterSkill_9286 = lua_call(G.str['GetSkill'], [_caster_9285, "Paladin_Sanctuary"])[0];
        if (!lua_eq(_casterSkill_9286, null)) {
          _skillLv_9285 = lua_call(G.str['TryGetProp'], [_casterSkill_9286, "Level"])[0];
          if (lua_eq(_skillLv_9285, null)) {
            _skillLv_9285 = _arg1;
          }
        }
        _addDEF_9285 = lua_multiply(_casterBasicDEF_9286, (lua_multiply(_arg1, 0.1)));
        _addMDEF_9285 = lua_multiply(_casterBasicMDEF_9286, (lua_multiply(_arg1, 0.1)));
      }
      lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _addDEF_9285));
      lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _addMDEF_9285));
      lua_call(G.str['SetExProp'], [_buff, "ADD_DEF", _addDEF_9285]);
      lua_call(G.str['SetExProp'], [_buff, "ADD_MDEF", _addMDEF_9285]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sanctuary_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDEF_9289 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
      var _addMDEF_9289 = lua_call(G.str['GetExProp'], [_buff, "ADD_MDEF"])[0];
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _addDEF_9289));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _addMDEF_9289));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Guild_ShieldCharger_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _shieldOwner_9290 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_shieldOwner_9290, null)) {
        return [];
      }
      lua_call(G.str['AddBuff'], [_self, _self, "ShieldCharger_Check_Buff", 1, 0, 90000]);
      var _shieldOwnerMHP_9290 = lua_subtract(lua_call(G.str['TryGetProp'], [_shieldOwner_9290, "MHP"])[0], lua_call(G.str['TryGetProp'], [_shieldOwner_9290, "MHP_BM"])[0]);
      var _shieldValue_9290 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((_shieldOwnerMHP_9290), (lua_add(0.3, (lua_multiply(0.07, _arg1)))))])[0];
      if (lua_lte((lua_multiply(lua_tableget(_self, 'MHP'), 2)), _shieldValue_9290)) {
        _shieldValue_9290 = (lua_multiply(lua_tableget(_self, 'MHP'), 2));
      }
      lua_call(G.str['SetBuffArgs'], [_buff, _shieldValue_9290]);
      lua_call(G.str['AddShield'], [_self, _shieldValue_9290]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Guild_ShieldCharger_buff'] = (function (_self, _buff, _arg1, _arg2) {
      var tmp;
      var _shiedlValue_9293 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _currentShield_9293 = lua_call(G.str['GetShield'], [_self])[0];
      var _updateShiedlValue_9293 = lua_multiply(_shiedlValue_9293, 0.03);
      if (lua_lte((lua_add(_currentShield_9293, _updateShiedlValue_9293)), (lua_divide(_shiedlValue_9293, 2)))) {
        lua_call(G.str['AddShield'], [_self, _updateShiedlValue_9293]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Guild_ShieldCharger_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _currentShield_9295 = lua_call(G.str['GetShield'], [_self])[0];
      lua_call(G.str['AddShield'], [_self, lua_unm(_currentShield_9295)]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShieldCharger_Check_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShieldCharger_Check_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BattleOrders_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _lv_9298 = _arg1;
      var _caster_9298 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9298, null)) {
        var _pad_9299 = lua_call(G.str['GetPadByBuff'], [_caster_9298, _buff])[0];
        if (!lua_eq(_pad_9299, null)) {
          _lv_9298 = lua_call(G.str['GetPadArgNumber'], [_pad_9299, 1])[0];
        }
      }
      var _mspdadd_9298 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(7, lua_multiply(_arg1, 1.5))])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9298));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_9298]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BattleOrders_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdadd_9301 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdadd_9301));
      var _decreaseCRT_9301 = lua_call(G.str['GetExProp'], [_buff, 'DECREASE_CRT_ABIL'])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _decreaseCRT_9301));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Judgment_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp_Str'], [_self, 'CHANGE_RACETYPE', lua_tableget(_self, 'RaceType')]);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_tableset(_self, 'RaceType', "Velnias");
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Judgment_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _raceType_9304 = lua_call(G.str['GetExProp_Str'], [_self, 'CHANGE_RACETYPE'])[0];
      lua_tableset(_self, 'RaceType', _raceType_9304);
      return [];
    })
    G.str['SCR_BUFF_ENTER_SilverBullet_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _sklList_9305 = tmp[0]; var _cnt_9305 = tmp[1]; tmp = null;
      var var_9306 = 1, stop_9306 = lua_assertfloat(_cnt_9305);
      for (; var_9306 <= stop_9306; var_9306++) {
        var _i_9306 = var_9306;
        if (lua_eq(lua_tableget(lua_tableget(_sklList_9305, _i_9306), 'AttackType'), 'Gun')) {
          lua_call(G.str['SetExProp_Str'], [_buff, lua_concat("GUN_ATTRIBUTE", _i_9306), lua_tableget(lua_tableget(_sklList_9305, _i_9306), 'Attribute')]);
          lua_tableset(lua_tableget(_sklList_9305, _i_9306), 'Attribute', 'Holy');
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SilverBullet_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPCSkillList'], [_self]); var _sklList_9309 = tmp[0]; var _cnt_9309 = tmp[1]; tmp = null;
      var var_9310 = 1, stop_9310 = lua_assertfloat(_cnt_9309);
      for (; var_9310 <= stop_9310; var_9310++) {
        var _i_9310 = var_9310;
        if (lua_eq(lua_tableget(lua_tableget(_sklList_9309, _i_9310), 'AttackType'), 'Gun')) {
          lua_tableset(lua_tableget(_sklList_9309, _i_9310), 'Attribute', lua_call(G.str['GetExProp_Str'], [_buff, lua_concat("GUN_ATTRIBUTE", _i_9310)])[0]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DoubleGunStance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      lua_call(G.str['RunScript'], ['SCR_DoubleGunStance_TEMP', _self]);
      lua_call(G.str['ChangeNormalAttack'], [_self, "DoubleGun_Attack"]);
      return [];
    })
    G.str['SCR_DoubleGunStance_TEMP'] = (function (_self) {
      var tmp;
      lua_call(G.str['sleep'], [400]);
      lua_call(G.str['PlayAnim'], [_self, "SKL_DOUBLEGUN_ASTD", 1]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_DoubleGunStance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _ridingCompanion_9315 = lua_call(G.str['GetRidingCompanion'], [_self])[0];
      if (!lua_eq(_ridingCompanion_9315, null)) {
        return [0];
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "HangingShot"])[0], "YES")) {
        return [0];
      }
      var _weaponType_9315 = lua_call(G.str['GetEquipItem'], [_self, "LH"])[0];
      if (!lua_eq(lua_tableget(_weaponType_9315, 'ClassType'), "Pistol")) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DoubleGunStance_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeNormalAttack'], [_self, "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Immolation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _abil_Zealot1_9320 = lua_call(G.str['GetAbility'], [_self, "Zealot1"])[0];
      var _abil_Zealot4_9320 = lua_call(G.str['GetAbility'], [_self, "Zealot4"])[0];
      var _fireATK_9320 = 0;
      var _fireRES_9320 = 0;
      if ((!lua_eq(_abil_Zealot1_9320, null) && lua_eq(lua_tableget(_abil_Zealot1_9320, 'ActiveState'), 1))) {
        _fireATK_9320 = lua_multiply(lua_tableget(_abil_Zealot1_9320, 'Level'), 100);
      }
      if ((!lua_eq(_abil_Zealot4_9320, null) && lua_eq(lua_tableget(_abil_Zealot4_9320, 'ActiveState'), 1))) {
        _fireRES_9320 = lua_multiply(lua_tableget(_abil_Zealot4_9320, 'Level'), 300);
      }
      lua_tableset(_self, 'Fire_Atk_BM', lua_add(lua_tableget(_self, 'Fire_Atk_BM'), _fireATK_9320));
      lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _fireRES_9320));
      lua_call(G.str['SetExProp'], [_buff, "IMMOLATION_FIREATK", _fireATK_9320]);
      lua_call(G.str['SetExProp'], [_buff, "IMMOLATION_FIRERES", _fireRES_9320]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Immolation_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireATK_9323 = lua_call(G.str['GetExProp'], [_buff, "IMMOLATION_FIREATK"])[0];
      var _fireRES_9323 = lua_call(G.str['GetExProp'], [_buff, "IMMOLATION_FIRERES"])[0];
      lua_tableset(_self, 'Fire_Atk_BM', lua_subtract(lua_tableget(_self, 'Fire_Atk_BM'), _fireATK_9323));
      lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _fireRES_9323));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Immolation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Immolation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9325 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9325, null)) {
        return [0];
      }
      var _damage_9325 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9325, _self, 'Zealot_Immolation'])[0];
      lua_call(G.str['TakeDamage'], [_caster_9325, _self, "Zealot_Immolation", _damage_9325, "Fire", "Melee", "Melee", G.str['HIT_BASIC_NOT_CANCEL_CAST'], G.str['HITRESULT_NONE'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Immolation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Immolation_Self_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Immolation_Self_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _MHP_9329 = lua_call(G.str['TryGetProp'], [_self, "MHP"])[0];
      var _HP_9329 = lua_call(G.str['TryGetProp'], [_self, "HP"])[0];
      var _ImmolationHP_9329 = lua_multiply(_MHP_9329, 0.01);
      if (lua_lte(_HP_9329, _ImmolationHP_9329)) {
        return [0];
      }
      lua_call(G.str['AddHP'], [_self, lua_unm(_ImmolationHP_9329)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Immolation_Self_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Fanaticism_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _caster_9332 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _FanaticismSklLv_9332 = lua_call(G.str['GetSkill'], [_caster_9332, 'Zealot_Fanaticism'])[0];
      if (!lua_eq(_FanaticismSklLv_9332, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_FanaticismSklLv_9332, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Fanaticism_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HealingFactor_Buff'])[0], "YES")) {
        lua_call(G.str['RemoveBuff'], [_self, 'HealingFactor_Buff']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Fanaticism_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sprint_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _moveSpeed_9337 = 10;
      tmp = lua_call(G.str['SelectObject'], [_self, 200, 'ENEMY']); var _list_9337 = tmp[0]; var _cnt_9337 = tmp[1]; tmp = null;
      if (lua_eq(_cnt_9337, null)) {
        return [];
      }
      if (lua_lte(5, _cnt_9337)) {
        _cnt_9337 = 5;
      }
      _moveSpeed_9337 = lua_tablegetcall(G.str['math'], 'floor', [lua_add(_moveSpeed_9337, (lua_multiply(_moveSpeed_9337, (lua_multiply(_cnt_9337, 0.1)))))])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9337));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _moveSpeed_9337]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sprint_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9340 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9340));
      return [];
    })
    G.str['SCR_BUFF_ENTER_DragoonHelmet_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 10008, 'HELMET', 0]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DragoonHelmet_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['EquipDummyItemSpot'], [_self, _self, 0, 'HELMET', 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Prevent_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Prevent_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['REMOVE_BUFF_BY_LEVEL'], [_self, "Debuff", 99]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Prevent_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_EnchantEarth_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _caster_9346 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _EnchantEarthSklLv_9346 = lua_call(G.str['GetSkill'], [_caster_9346, 'Enchanter_EnchantEarth'])[0];
      if (!lua_eq(_EnchantEarthSklLv_9346, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_EnchantEarthSklLv_9346, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EnchantEarth_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FanaticIllusion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _skl_9349 = lua_call(G.str['GetSkill'], [_self, "Zealot_FanaticIllusion"])[0];
      if (lua_eq(_skl_9349, null)) {
        return [];
      }
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_9349 = tmp[0]; var _y_9349 = tmp[1]; var _z_9349 = tmp[2]; tmp = null;
      lua_call(G.str['RunPad'], [_self, "FanaticIllusion_pad", _skl_9349, _x_9349, _y_9349, _z_9349, 0, 1]);
      var _abilHR_9349 = 0;
      var _abil_9349 = lua_call(G.str['GetAbility'], [_self, "Zealot6"])[0];
      if ((!lua_eq(_abil_9349, null) && lua_eq(lua_tableget(_abil_9349, 'ActiveState'), 1))) {
        _abilHR_9349 = lua_multiply(lua_tableget(_abil_9349, 'Level'), 100);
      }
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _abilHR_9349));
      lua_call(G.str['SetExProp'], [_buff, "ABIL_FANATIC_HR", _abilHR_9349]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FanaticIllusion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skill_9352 = lua_call(G.str['GetSkill'], [_self, 'Zealot_FanaticIllusion'])[0];
      if (lua_eq(_skill_9352, null)) {
        return [0];
      }
      var _spendSP_9352 = lua_call(G.str['SCR_Get_SpendSP_FanaticIllusion'], [_skill_9352])[0];
      var _mySP_9352 = lua_call(G.str['TryGetProp'], [_self, 'SP'])[0];
      if (lua_eq(_mySP_9352, null)) {
        _mySP_9352 = 0;
      }
      if (lua_lt(_mySP_9352, _spendSP_9352)) {
        return [0];
      }
      lua_call(G.str['AddSP'], [_self, lua_unm(_spendSP_9352)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FanaticIllusion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilHR_9356 = lua_call(G.str['GetExProp'], [_buff, "ABIL_FANATIC_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _abilHR_9356));
      lua_call(G.str['RemovePad'], [_self, "FanaticIllusion_pad"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Methadone_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Methadone_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_TracerBullet_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _hrValue_9359 = lua_add(50, (lua_multiply(_arg1, 5)));
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hrValue_9359));
      lua_call(G.str['SetExProp'], [_buff, "TRACER_HR", _hrValue_9359]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TracerBullet_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hrValue_9360 = lua_call(G.str['GetExProp'], [_buff, "TRACER_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hrValue_9360));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShadowPool_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      lua_call(G.str['SetShadowRender'], [_self, 0]);
      lua_call(G.str['AddLimitationSkillList'], [_self, "Shadowmancer_ShadowPool"]);
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ShadowPool_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_9362 = tmp[0]; var _y_9362 = tmp[1]; var _z_9362 = tmp[2]; tmp = null;
      lua_call(G.str['PlayEffectToGround'], [_self, "F_wizard_ShadowPool_shot", _x_9362, _y_9362, _z_9362, 1, 1]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShadowPool_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['StartCoolTimeAndSpendSP'], [_self, "Shadowmancer_ShadowPool"]);
      lua_call(G.str['ClearLimitationSkillList'], [_self]);
      tmp = lua_call(G.str['GetPos'], [_self]); var _x_9363 = tmp[0]; var _y_9363 = tmp[1]; var _z_9363 = tmp[2]; tmp = null;
      lua_call(G.str['PlayEffectToGround'], [_self, "F_wizard_ShadowPool_end", _x_9363, _y_9363, _z_9363, 1, 1]);
      lua_call(G.str['SetShadowRender'], [_self, 1]);
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Ole_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _skillLevel_9364 = _arg1;
      lua_call(G.str['SetExProp'], [_buff, "OLE_LEVEL", _skillLevel_9364]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Ole_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Capote_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      tmp = lua_call(G.str['SelectObject'], [_self, 300, 'ENEMY']); var _objList_9366 = tmp[0]; var _objCount_9366 = tmp[1]; tmp = null;
      if (lua_lte(1, _objCount_9366)) {
        var _monList_9367 = lua_newtable();
        var _normalMonList_9367 = lua_newtable();
        var var_9368 = 1, stop_9368 = lua_assertfloat(_objCount_9366);
        for (; var_9368 <= stop_9368; var_9368++) {
          var _i_9368 = var_9368;
          var _mon_9369 = lua_tableget(_objList_9366, _i_9368);
          if (lua_eq(lua_call(G.str['TryGetProp'], [_mon_9369, 'MonRank'])[0], 'Boss')) {
            lua_tableset(_monList_9367, lua_add(lua_len(_monList_9367), 1), _mon_9369);
          } else {
            lua_tableset(_normalMonList_9367, lua_add(lua_len(_normalMonList_9367), 1), _mon_9369);
          }
        }
        var var_9372 = 1, stop_9372 = lua_assertfloat(lua_len(_normalMonList_9367));
        for (; var_9372 <= stop_9372; var_9372++) {
          var _i_9372 = var_9372;
          lua_tableset(_monList_9367, lua_add(lua_len(_monList_9367), 1), lua_tableget(_normalMonList_9367, _i_9372));
        }
        var _tauntCount_9367 = 5;
        var _abilMatador13_9367 = lua_call(G.str['GetAbility'], [_self, "Matador13"])[0];
        if ((!lua_eq(_abilMatador13_9367, null) && lua_eq(lua_tableget(_abilMatador13_9367, 'ActiveState'), 1))) {
          _tauntCount_9367 = lua_add(_tauntCount_9367, lua_tableget(_abilMatador13_9367, 'Level'));
        }
        if (lua_lt(lua_len(_monList_9367), _tauntCount_9367)) {
          _tauntCount_9367 = lua_len(_monList_9367);
        }
        var var_9376 = 1, stop_9376 = lua_assertfloat(_tauntCount_9367);
        for (; var_9376 <= stop_9376; var_9376++) {
          var _i_9376 = var_9376;
          var _obj_9377 = lua_tableget(_monList_9367, _i_9376);
          if (!lua_eq(_obj_9377, null)) {
            var _skill_9378 = lua_call(G.str['GetSkill'], [_self, "Matador_Capote"])[0];
            lua_call(G.str['AddBuff'], [_self, _obj_9377, 'Capote_Debuff', _arg1, 0, lua_add(10000, (lua_multiply(lua_tableget(_skill_9378, 'Level'), 1000))), 1]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Capote_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Capote_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 160, 150, 255, 1, 1.5]);
      var _buffCaster_9380 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _spdAdd_9380 = 10;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        if (!lua_eq(lua_tableget(_self, 'MonRank'), "BOSS")) {
          lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _spdAdd_9380));
          lua_call(G.str['SetExProp'], [_self, "CAPOTE_SPD", _spdAdd_9380]);
        }
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "ProvocationImmunity_Debuff"])[0], "NO")) {
          lua_call(G.str['SetFociblyHater'], [_self, _buffCaster_9380]);
          lua_call(G.str['AddBuff'], [_buffCaster_9380, _self, "ProvocationImmunity_Debuff", 0, 0, 30000, 1]);
        }
      }
      var _HR_9380 = lua_call(G.str['TryGetProp'], [_self, "HR"])[0];
      var _DR_9380 = lua_call(G.str['TryGetProp'], [_self, "DR"])[0];
      var _hrRate_9380 = lua_multiply(_HR_9380, 0.2);
      var _drRate_9380 = lua_multiply(_DR_9380, 0.2);
      var _caster_9380 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _CrtDR_9380 = lua_call(G.str['TryGetProp'], [_self, "CRTDR"])[0];
      var _CrtDRvalue_9380 = 0;
      if (!lua_eq(_caster_9380, null)) {
        var _abil_9384 = lua_call(G.str['GetAbility'], [_caster_9380, "Matador6"])[0];
        if (!lua_eq(_abil_9384, null)) {
          _CrtDRvalue_9380 = 50;
        }
      }
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hrRate_9380));
      lua_tableset(_self, 'DR_BM', lua_subtract(lua_tableget(_self, 'DR_BM'), _drRate_9380));
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _CrtDRvalue_9380));
      lua_call(G.str['SetExProp'], [_buff, "CAPOTE_HR", _hrRate_9380]);
      lua_call(G.str['SetExProp'], [_buff, "CAPOTE_DR", _drRate_9380]);
      lua_call(G.str['SetExProp'], [_buff, "CAPOTE_CRTDR", _CrtDRvalue_9380]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Capote_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ObjectColorBlend'], [_self, 255, 255, 255, 255, 1, 1]);
      var _buffCaster_9386 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        if (!lua_eq(lua_tableget(_self, 'MonRank'), "BOSS")) {
          lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), lua_call(G.str['GetExProp'], [_self, "CAPOTE_SPD"])[0]));
        }
        var _currentTarget_9387 = lua_call(G.str['GetFociblyHater'], [_self])[0];
        if (lua_eq(lua_call(G.str['IsSameActor'], [_currentTarget_9387, _buffCaster_9386])[0], "YES")) {
          lua_call(G.str['RemoveFociblyHater'], [_self]);
        }
      }
      var _hrRate_9386 = lua_call(G.str['GetExProp'], [_buff, "CAPOTE_HR"])[0];
      var _drRate_9386 = lua_call(G.str['GetExProp'], [_buff, "CAPOTE_DR"])[0];
      var _CrtDRvalue_9386 = lua_call(G.str['GetExProp'], [_buff, "CAPOTE_CRTDR"])[0];
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hrRate_9386));
      lua_tableset(_self, 'DR_BM', lua_add(lua_tableget(_self, 'DR_BM'), _drRate_9386));
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _CrtDRvalue_9386));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Tase_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _atkCount_9390 = 10;
      var _caster_9390 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_9390 = lua_call(G.str['GetAbility'], [_caster_9390, "Bulletmarker7"])[0];
      if (!lua_eq(_abil_9390, null)) {
        _atkCount_9390 = lua_add(_atkCount_9390, lua_tableget(_abil_9390, 'Level'));
      }
      lua_call(G.str['SetExProp'], [_buff, "TaseAttackCount", _atkCount_9390]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Tase_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SmashBullet_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SmashBullet_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9394 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _skill_9394 = lua_call(G.str['GetSkill'], [_caster_9394, "Bulletmarker_SmashBullet"])[0];
      var _atk_9394 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9394, _self, 'Bulletmarker_SmashBullet'])[0];
      lua_call(G.str['TakeDamage'], [_caster_9394, _self, lua_tableget(_skill_9394, 'ClassName'), _atk_9394, lua_tableget(_skill_9394, 'Attribute'), lua_tableget(_skill_9394, 'AttackType'), "AbsoluteDamage", G.str['HIT_BLEEDING'], G.str['HITRESULT_NO_HITSCP']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SmashBullet_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HakkaPalle_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      var _atkspdadd_9396 = lua_add(10, _arg1);
      lua_call(G.str['SetExProp'], [_buff, "HakkaPalle_AtkSpeedAdd", G.str['atkspadadd']]);
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, lua_unm(_atkspdadd_9396)]);
      var _caster_9396 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _HakkaPalleSklLv_9396 = lua_call(G.str['GetSkill'], [_caster_9396, 'Hackapell_HakkaPalle'])[0];
      if (!lua_eq(_HakkaPalleSklLv_9396, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_HakkaPalleSklLv_9396, 'Level'), 0, 0]);
      }
      var _addMoveSTA_9396 = -0.3;
      lua_tableset(_self, 'MOVESTA_RATE_BM', lua_add(lua_tableget(_self, 'MOVESTA_RATE_BM'), _addMoveSTA_9396));
      lua_call(G.str['SetExProp'], [_buff, 'MOVE_STA_RATE', _addMoveSTA_9396]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HakkaPalle_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      if (!lua_eq(1, lua_call(G.str['GetVehicleState'], [_self])[0])) {
        lua_call(G.str['RemoveBuff'], [_self, "HakkaPalle_Buff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HakkaPalle_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkspdadd_9400 = lua_call(G.str['GetExProp'], [_buff, "HakkaPalle_AtkSpeedAdd"])[0];
      lua_call(G.str['SET_NORMAL_ATK_SPEED'], [_self, _atkspdadd_9400]);
      var _addMoveSTA_9400 = lua_call(G.str['GetExProp'], [_buff, 'MOVE_STA_RATE'])[0];
      lua_tableset(_self, 'MOVESTA_RATE_BM', lua_subtract(lua_tableget(_self, 'MOVESTA_RATE_BM'), _addMoveSTA_9400));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SnipersSerenity_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetDynamicCastingSkill'], [_self]); var _castTime_9401 = tmp[0]; var _skillID_9401 = tmp[1]; var _maxCastingTime_9401 = tmp[2]; var _isLoopingCharge_9401 = tmp[3]; tmp = null;
      var _chargingRate_9401 = lua_divide(_castTime_9401, _maxCastingTime_9401);
      lua_call(G.str['SetExProp'], [_buff, "SNIPERS_CHARGE", _chargingRate_9401]);
      var _maxATK_9401 = lua_call(G.str['TryGetProp'], [_self, "MAXPATK"])[0];
      if (lua_eq(_maxATK_9401, null)) {
        _maxATK_9401 = 0;
      }
      var _minATK_9401 = lua_call(G.str['TryGetProp'], [_self, "MINPATK"])[0];
      if (lua_eq(_minATK_9401, null)) {
        _minATK_9401 = 0;
      }
      var _addATK_9401 = lua_multiply((lua_subtract(_maxATK_9401, _minATK_9401)), _chargingRate_9401);
      _addATK_9401 = lua_tablegetcall(G.str['math'], 'floor', [_addATK_9401])[0];
      lua_tableset(_self, 'MINPATK_BM', lua_add(lua_tableget(_self, 'MINPATK_BM'), _addATK_9401));
      lua_call(G.str['SetExProp'], [_buff, 'SNIPERS_SERENITY_MINATK', _addATK_9401]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SnipersSerenity_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _rItem_9404 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if ((lua_eq(_rItem_9404, null) || !lua_eq(lua_tableget(_rItem_9404, 'AttachType'), "Musket"))) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SnipersSerenity_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _isLast) {
      var tmp;
      var _addATK_9406 = lua_call(G.str['GetExProp'], [_buff, 'SNIPERS_SERENITY_MINATK'])[0];
      lua_tableset(_self, 'MINPATK_BM', lua_subtract(lua_tableget(_self, 'MINPATK_BM'), _addATK_9406));
      if (lua_eq(_isLast, 1)) {
        lua_call(G.str['AddCoolDown'], [_self, 'SnipersSerenity', 1000]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Enervation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atkCount_9408 = 10;
      lua_call(G.str['SetExProp'], [_buff, "EnervationAttackCount", _atkCount_9408]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Enervation_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SeeRed_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9410 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _topAttacker_9410 = lua_call(G.str['GetTopHatePointChar'], [_self])[0];
      var _hatePoint_9410 = lua_call(G.str['GetHate'], [_self, _topAttacker_9410])[0];
      _hatePoint_9410 = lua_multiply(_hatePoint_9410, 2);
      lua_call(G.str['InsertHate'], [_self, _caster_9410, _hatePoint_9410]);
      var _minPATK_9410 = 0.5;
      var _maxPATK_9410 = 0.1;
      lua_tableset(_self, 'MINPATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MINPATK_RATE_BM'), _minPATK_9410));
      lua_tableset(_self, 'MAXPATK_RATE_BM', lua_add(lua_tableget(_self, 'MAXPATK_RATE_BM'), _maxPATK_9410));
      lua_call(G.str['SetExProp'], [_buff, "SEERED_MINPATK", _minPATK_9410]);
      lua_call(G.str['SetExProp'], [_buff, "SEERED_MAXPATK", _maxPATK_9410]);
      lua_call(G.str['SetExProp'], [_buff, "SEERED_HATE", _hatePoint_9410]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SeeRed_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hatePoint_9411 = lua_call(G.str['GetExProp'], [_buff, "SEERED_HATE"])[0];
      var _minPATK_9411 = lua_call(G.str['GetExProp'], [_buff, "SEERED_MINPATK"])[0];
      var _maxPATK_9411 = lua_call(G.str['GetExProp'], [_buff, "SEERED_MAXPATK"])[0];
      var _caster_9411 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9411, null)) {
        lua_call(G.str['InsertHate'], [_self, _caster_9411, lua_unm(_hatePoint_9411)]);
      }
      lua_tableset(_self, 'MINPATK_RATE_BM', lua_add(lua_tableget(_self, 'MINPATK_RATE_BM'), _minPATK_9411));
      lua_tableset(_self, 'MAXPATK_RATE_BM', lua_subtract(lua_tableget(_self, 'MAXPATK_RATE_BM'), _maxPATK_9411));
      return [];
    })
    G.str['SCR_BUFF_ENTER_DownFall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_DownFall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffCaster_9414 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_buffCaster_9414, null)) {
        return [];
      }
      var _skill_9414 = lua_call(G.str['GetSkill'], [_buffCaster_9414, "Mergen_DownFall"])[0];
      if (lua_eq(_skill_9414, null)) {
        return [];
      }
      var _damage_9414 = lua_call(G.str['GET_SKL_DAMAGE'], [_buffCaster_9414, _self, "Mergen_DownFall"])[0];
      var _range_9414 = lua_call(G.str['GetDistance'], [_buffCaster_9414, _self])[0];
      var _limitRange_9414 = lua_tableget(_skill_9414, 'MaxRValue');
      if (lua_lte(_range_9414, _limitRange_9414)) {
        lua_call(G.str['AttachEffect'], [_self, "I_archer_ArrowRain_hit_mash", 1, "BOT"]);
        lua_call(G.str['TakeDamage'], [_buffCaster_9414, _self, lua_tableget(_skill_9414, 'ClassName'), _damage_9414, lua_tableget(_skill_9414, 'Attribute'), lua_tableget(_skill_9414, 'AttackType'), lua_tableget(_skill_9414, 'ClassType'), G.str['hitType'], G.str['resultType'], G.str['attackerHitdelay'], G.str['fixHitdelay']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DownFall_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hallucination_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hallucination_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['CLEAR_DUMMYPC_FOR_EXPROP'], [_self, "EXPROP_SHADOW_DUMMYPC"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_NonInvasiveArea_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_NonInvasiveArea_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BlindFaith_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _SP_9423 = lua_call(G.str['TryGetProp'], [_self, "SP"])[0];
      var _blindFaithSP_9423 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_SP_9423, 0.5)])[0];
      var _atkCount_9423 = 40;
      lua_call(G.str['SetExProp'], [_buff, "BlindFaith_Count", _atkCount_9423]);
      lua_call(G.str['AddSP'], [_self, lua_unm(_blindFaithSP_9423)]);
      lua_call(G.str['SetExProp'], [_buff, "BLINDFAITH_REMAINSP", _blindFaithSP_9423]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_BlindFaith_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['PlayEffectNode'], [_self, "F_cleric_blindfaith_buff", 1.0, "Dummy_L_HAND"]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BlindFaith_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_CantTakeExperience'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_CantTakeExperience'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BeadyEyed_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abil_9428 = lua_call(G.str['GetAbility'], [_self, "Zealot5"])[0];
      if ((!lua_eq(_abil_9428, null) && lua_eq(lua_tableget(_abil_9428, 'ActiveState'), 1))) {
        var _abilCRTHR_9429 = lua_multiply(lua_tableget(_abil_9428, 'Level'), 20);
        lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _abilCRTHR_9429));
        lua_call(G.str['SetExProp'], [_buff, "BEADTEYED_ABIL_CRTHR", _abilCRTHR_9429]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BeadyEyed_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilCRTHR_9430 = lua_call(G.str['GetExProp'], [_buff, "BEADTEYED_ABIL_CRTHR"])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _abilCRTHR_9430));
      return [];
    })
    G.str['SCR_BUFF_ENTER_ShadowConjuration_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ShadowConjuration_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9432 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9432, null)) {
        return [];
      }
      var _skill_9432 = lua_call(G.str['GetSkill'], [_caster_9432, "Shadowmancer_ShadowConjuration"])[0];
      if (lua_eq(_skill_9432, null)) {
        return [];
      }
      var _damage_9432 = lua_call(G.str['GetExProp'], [_self, "ConjurationDamage"])[0];
      _damage_9432 = lua_multiply(_damage_9432, 0.1);
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        if (lua_eq(lua_tableget(_self, 'MoveType'), "Flying")) {
          return [];
        }
        if ((lua_eq(lua_tableget(_self, 'MoveType'), "Normal") || lua_eq(lua_tableget(_self, 'MoveType'), "Holding"))) {
          lua_call(G.str['TakeDamage'], [_caster_9432, _self, lua_tableget(_skill_9432, 'ClassName'), _damage_9432, lua_tableget(_skill_9432, 'Attribute'), lua_tableget(_skill_9432, 'AttackType'), "AbsoluteDamage", G.str['HIT_DARK'], G.str['HITRESULT_NO_HITSCP']]);
        }
      } else {
        lua_call(G.str['TakeDamage'], [_caster_9432, _self, lua_tableget(_skill_9432, 'ClassName'), _damage_9432, lua_tableget(_skill_9432, 'Attribute'), lua_tableget(_skill_9432, 'AttackType'), "AbsoluteDamage", G.str['HIT_DARK'], G.str['HITRESULT_NO_HITSCP']]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ShadowConjuration_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BackSlide_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BackSlide_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_MicroDimension_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MicroDimension_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _buffCaster_9443 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_buffCaster_9443, null)) {
        return [];
      }
      var _dimensionSkill_9443 = lua_call(G.str['GetSkill'], [_buffCaster_9443, "Sage_MicroDimension"])[0];
      if (lua_eq(_dimensionSkill_9443, null)) {
        return [];
      }
      tmp = lua_call(G.str['SelectObjectNear'], [_buffCaster_9443, _self, 80, "ENEMY"]); var _list_9443 = tmp[0]; var _cnt_9443 = tmp[1]; tmp = null;
      if (lua_lte(_cnt_9443, 0)) {
        return [];
      }
      if (lua_lte(10, _cnt_9443)) {
        _cnt_9443 = 10;
      }
      var _atk_9443 = 0;
      var _nextTime_9443 = lua_call(G.str['GetAddDataFromCurrent'], [1])[0];
      var var_9448 = 1, stop_9448 = lua_assertfloat(_cnt_9443);
      for (; var_9448 <= stop_9448; var_9448++) {
        var _i_9448 = var_9448;
        var _saveTime_9449 = lua_call(G.str['GetExProp_Str'], [lua_tableget(_list_9443, _i_9448), 'ABIL_SAGE11_COOLTIME'])[0];
        var _coolTime_9449 = 1;
        if ((!lua_eq(_saveTime_9449, 'None') && !lua_eq(_saveTime_9449, null))) {
          _coolTime_9449 = lua_call(G.str['GetTimeDiff'], [_saveTime_9449])[0];
        }
        if (lua_lt(0, _coolTime_9449)) {
          _atk_9443 = lua_call(G.str['GET_SKL_DAMAGE'], [_buffCaster_9443, lua_tableget(_list_9443, _i_9448), 'Sage_MicroDimension'])[0];
          lua_call(G.str['TakeDamage'], [_buffCaster_9443, lua_tableget(_list_9443, _i_9448), lua_tableget(_dimensionSkill_9443, 'ClassName'), _atk_9443, lua_tableget(_dimensionSkill_9443, 'Attribute'), lua_tableget(_dimensionSkill_9443, 'AttackType'), lua_tableget(_dimensionSkill_9443, 'ClassType'), G.str['HIT_DARK'], G.str['HITRESULT_NO_HITSCP']]);
          lua_call(G.str['SetExProp_Str'], [lua_tableget(_list_9443, _i_9448), "ABIL_SAGE11_COOLTIME", _nextTime_9443]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_UltimateDimension_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_UltimateDimension_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _buffCaster_9453 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_buffCaster_9453, null)) {
        return [0];
      }
      var _ultimateSkill_9453 = lua_call(G.str['GetSkill'], [_buffCaster_9453, "Sage_UltimateDimension"])[0];
      if (lua_eq(_ultimateSkill_9453, null)) {
        return [0];
      }
      G.str['atk'] = lua_call(G.str['GET_SKL_DAMAGE'], [_buffCaster_9453, _self, 'Sage_UltimateDimension'])[0];
      lua_call(G.str['TakeDamage'], [_buffCaster_9453, _self, lua_tableget(_ultimateSkill_9453, 'ClassName'), G.str['atk'], "None", lua_tableget(_ultimateSkill_9453, 'AttackType'), lua_tableget(_ultimateSkill_9453, 'ClassType'), G.str['HIT_BASIC'], G.str['HITRESULT_NO_HITSCP']]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_UltimateDimension_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LightningHands_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LightningHands_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SteedCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SteedCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetVehicleState'], [_self])[0], 0)) {
        lua_call(G.str['RemoveBuff'], [_self, "SteedCharge_Buff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SteedCharge_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skill_9462 = lua_call(G.str['GetSkill'], [_self, 'Cataphract_SteedCharge'])[0];
      if (lua_eq(lua_call(G.str['IsCoolTime'], [_skill_9462])[0], 0)) {
        lua_call(G.str['AddCoolDown'], [_self, 'SteedCharge', 8000]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DoomSpike_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _crtDR_9464 = lua_multiply(10, _arg1);
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _crtDR_9464));
      lua_call(G.str['SetExProp'], [_buff, "DOOMSPIKE_CRTDR", _crtDR_9464]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DoomSpike_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _crtDR_9465 = lua_call(G.str['GetExProp'], [_buff, "DOOMSPIKE_CRTDR"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _crtDR_9465));
      return [];
    })
    G.str['SCR_BUFF_ENTER_AcrobaticMount_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9466 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _AcrobaticMountSklLv_9466 = lua_call(G.str['GetSkill'], [_caster_9466, 'Cataphract_AcrobaticMount'])[0];
      if (!lua_eq(_AcrobaticMountSklLv_9466, null)) {
        lua_call(G.str['SetBuffArgs'], [_buff, lua_tableget(_AcrobaticMountSklLv_9466, 'Level'), 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AcrobaticMount_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['GetVehicleState'], [_self])[0], 0)) {
        lua_call(G.str['RemoveBuff'], [_self, "AcrobaticMount_Buff"]);
      }
      var _remainSP_9468 = lua_call(G.str['TryGetProp'], [_self, "SP"])[0];
      var _AcrobaticMountSP_9468 = lua_call(G.str['GetExProp'], [_buff, "ACROBATICMOUNT_SPENDSP"])[0];
      if (lua_lt(_remainSP_9468, _AcrobaticMountSP_9468)) {
        lua_call(G.str['RemoveBuff'], [_self, "AcrobaticMount_Buff"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AcrobaticMount_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_BuildRoost_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_BuildRoost_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_RamMuay_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_RamMuay_Buff'] = (function (_self, _buff, _arg1, _arg2, _over, _skill) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_REAL_PC'], [_self])[0], "YES")) {
        if (lua_eq(lua_call(G.str['GetExProp'], [_self, "BUNSIN"])[0], 0)) {
          var _ridingCompanion_9477 = lua_call(G.str['GetRidingCompanion'], [_self])[0];
          if (!lua_eq(_ridingCompanion_9477, null)) {
            return [0];
          }
          var _rammuaySkill_9477 = lua_call(G.str['GetSkill'], [_self, "NakMuay_RamMuay"])[0];
          if (lua_eq(_rammuaySkill_9477, null)) {
            return [0];
          }
          var _equipByLhand_9477 = lua_call(G.str['GetEquipItem'], [_self, "LH"])[0];
          if (lua_eq(lua_tableget(_equipByLhand_9477, 'ClassName'), "NoWeapon")) {
            lua_call(G.str['ChangeLHandAttack'], [_self, "None"]);
          } else {
            lua_call(G.str['ChangeLHandAttack'], [_self, "NakMuay_Attack"]);
          }
        }
      }
      lua_call(G.str['ChangeNormalAttack'], [_self, "NakMuay_Attack"]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_RamMuay_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ChangeNormalAttack'], [_self, "None"]);
      lua_call(G.str['ChangeLHandAttack'], [_self, "None"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_TeKha_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _mspdAdd_9483 = lua_multiply(lua_call(G.str['TryGetProp'], [_self, "MSPD"])[0], 0.5);
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _mspdAdd_9483));
      lua_call(G.str['SetExProp'], [_buff, "TEKHA_ADD_MSPD", _mspdAdd_9483]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TeKha_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _mspdAdd_9484 = lua_call(G.str['GetExProp'], [_buff, "TEKHA_ADD_MSPD"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _mspdAdd_9484));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SokChiang_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9485 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _dmg_9485 = lua_divide((lua_add(lua_tableget(_caster_9485, 'MINPATK'), lua_tableget(_caster_9485, 'MINPATK'))), 10);
      lua_call(G.str['SetExProp'], [_self, 'CriticalWound_Damage', _dmg_9485]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SokChiang_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9486 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9486, null)) {
        _caster_9486 = _self;
      }
      var _dmg_9486 = lua_call(G.str['GetExProp'], [_self, 'CriticalWound_Damage'])[0];
      lua_call(G.str['TakeDamage'], [_caster_9486, _self, "None", _dmg_9486, "None", "None", "TrueDamage", G.str['HIT_BLEEDING'], G.str['HITRESULT_BLOW'], 0, 0]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SokChiang_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Muleta_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skillLevel_9489 = _arg1;
      var _skill_9489 = lua_call(G.str['GetSkill'], [_self, 'Matador_Muleta'])[0];
      if (!lua_eq(_skill_9489, null)) {
        var _muletaLevel_9490 = lua_call(G.str['TryGetProp'], [_skill_9489, 'Level'])[0];
        if (!lua_eq(_muletaLevel_9490, null)) {
          _skillLevel_9489 = _muletaLevel_9490;
        }
      }
      var _addCRTHR_9489 = lua_multiply(_skillLevel_9489, 10);
      lua_call(G.str['SetExProp'], [_buff, 'ADD_CRTHR', _addCRTHR_9489]);
      lua_tableset(_self, 'CRTHR_BM', lua_add(lua_tableget(_self, 'CRTHR_BM'), _addCRTHR_9489));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Muleta_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCRTHR_9492 = lua_call(G.str['GetExProp'], [_buff, 'ADD_CRTHR'])[0];
      lua_tableset(_self, 'CRTHR_BM', lua_subtract(lua_tableget(_self, 'CRTHR_BM'), _addCRTHR_9492));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Muleta_Cast_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Muleta_Cast_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Skill_NoDamage_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Skill_NoDamage_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Skill_SuperArmor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Skill_SuperArmor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Skill_MomentaryEvasion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Skill_MomentaryEvasion_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GroovingMuzzle_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addHR_9501 = 100;
      lua_call(G.str['SetExProp'], [_buff, 'ADD_HR', _addHR_9501]);
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _addHR_9501));
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GroovingMuzzle_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _rItem_9502 = lua_call(G.str['GetEquipItem'], [_self, 'RH'])[0];
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_rItem_9502, "ClassType"])[0], "Musket")) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GroovingMuzzle_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addHR_9504 = lua_call(G.str['GetExProp'], [_buff, 'ADD_HR'])[0];
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _addHR_9504));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MusketAttack_CoolDown_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MusketAttack_CoolDown_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_EquipDesrption_Debeff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _equipAddDefRate_9507 = 0.25;
      lua_call(G.str['SetExProp'], [_buff, "EQUIPDESRPTION_ADDDEF_RATE", _equipAddDefRate_9507]);
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _equipAddDefRate_9507));
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        var _caster_9508 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_9508, null)) {
          var _abilRetiarii7_9509 = lua_call(G.str['GetAbility'], [_caster_9508, "Retiarii7"])[0];
          if ((!lua_eq(_abilRetiarii7_9509, null) && lua_eq(lua_tableget(_abilRetiarii7_9509, 'ActiveState'), 1))) {
            var _buffList_9510 = lua_call(G.str['GetBuffList'], [_self])[0];
            var var_9511 = 1, stop_9511 = lua_assertfloat(lua_len(_buffList_9510));
            for (; var_9511 <= stop_9511; var_9511++) {
              var _i_9511 = var_9511;
              var _buffKeyword_9512 = lua_call(G.str['TryGetProp'], [lua_tableget(_buffList_9510, _i_9511), "Keyword"])[0];
              if (lua_eq(_buffKeyword_9512, "Helmet")) {
                lua_call(G.str['RemoveBuff'], [_self, lua_tableget(lua_tableget(_buffList_9510, _i_9511), 'ClassName')]);
              }
            }
          }
          var _DesrptionItem_9509 = lua_call(G.str['GetEquipItem'], [_self, "LH"])[0];
          if (lua_eq(lua_tableget(_DesrptionItem_9509, 'ClassType'), "Shield")) {
            lua_call(G.str['UnEquipItemSpot'], [_self, "LH"]);
            lua_call(G.str['EnableEquipItemBySlot'], [_self, "LH", 0]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_EquipDesrption_Debeff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        var _DesrptionItem_9516 = lua_call(G.str['GetEquipItem'], [_self, "LH"])[0];
        if (lua_eq(lua_tableget(_DesrptionItem_9516, 'ClassType'), "Shield")) {
          lua_call(G.str['UnEquipItemSpot'], [_self, "LH"]);
          lua_call(G.str['EnableEquipItemBySlot'], [_self, "LH", 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_EquipDesrption_Debeff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "EQUIPDESRPTION_ADDDEF_RATE"])[0]));
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_call(G.str['EnableEquipItemBySlot'], [_self, "LH", 1]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_DaggerGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_self, "DAGGERGUARD_COUNT", 15]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_DaggerGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _equipLH_9521 = lua_call(G.str['GetEquipItem'], [_self, "LH"])[0];
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_equipLH_9521, "GroupName"])[0], "SubWeapon")) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_DaggerGuard_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FlameGround_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9524 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9524, null)) {
        return [];
      }
      var _fireResist_9524 = 0;
      var _abilPyromancer27_9524 = lua_call(G.str['GetAbility'], [_caster_9524, "Pyromancer27"])[0];
      if ((!lua_eq(_abilPyromancer27_9524, null) && lua_eq(lua_tableget(_abilPyromancer27_9524, 'ActiveState'), 1))) {
        _fireResist_9524 = lua_multiply(lua_tableget(_abilPyromancer27_9524, 'Level'), 50);
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_subtract(lua_tableget(_self, 'ResFire_BM'), _fireResist_9524));
      }
      lua_call(G.str['SetExProp'], [_buff, "PYROMANCER27_FIRERESIST", _fireResist_9524]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FlameGround_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _fireResist_9528 = lua_call(G.str['GetExProp'], [_buff, "PYROMANCER27_FIRERESIST"])[0];
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'ResFire_BM', lua_add(lua_tableget(_self, 'ResFire_BM'), _fireResist_9528));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_HeavyGravity_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        lua_call(G.str['SetExProp_Str'], [_self, 'HEAVYGRAVITY_CHANGE_MOVETYPE', lua_tableget(_self, 'MoveType')]);
        lua_tableset(_self, 'MoveType', "Normal");
      }
      var _abilMoveSpeed_9530 = 0;
      var _caster_9530 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9530, null)) {
        var _abilPsychokino22_9532 = lua_call(G.str['GetAbility'], [_caster_9530, "Psychokino22"])[0];
        if ((!lua_eq(_abilPsychokino22_9532, null) && lua_eq(lua_tableget(_abilPsychokino22_9532, 'ActiveState'), 1))) {
          if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
            _abilMoveSpeed_9530 = lua_multiply(lua_tableget(_abilPsychokino22_9532, 'Level'), 2);
          } else if (((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false) && lua_eq(lua_tableget(_self, 'Size'), "S")) || lua_eq(lua_tableget(_self, 'Size'), "M"))) {
            _abilMoveSpeed_9530 = lua_multiply(lua_tableget(_abilPsychokino22_9532, 'Level'), 2);
          }
        }
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _abilMoveSpeed_9530));
      lua_call(G.str['SetExProp'], [_buff, "HEAVYGRAVITY_MOVESPEED", _abilMoveSpeed_9530]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HeavyGravity_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], false)) {
        var _moveType_9537 = lua_call(G.str['GetExProp_Str'], [_self, 'HEAVYGRAVITY_CHANGE_MOVETYPE'])[0];
        lua_tableset(_self, 'MoveType', _moveType_9537);
      }
      var _abilMoveSpeed_9536 = lua_call(G.str['GetExProp'], [_buff, "HEAVYGRAVITY_MOVESPEED"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _abilMoveSpeed_9536));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Hagalaz_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMdef_9538 = 0;
      var _buffCaster_9538 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_buffCaster_9538, null)) {
        var _abil_9539 = lua_call(G.str['GetAbility'], [_buffCaster_9538, "RuneCaster8"])[0];
        if ((!lua_eq(_abil_9539, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abil_9539, "ActiveState"])[0], 1))) {
          _addMdef_9538 = lua_multiply(lua_call(G.str['TryGetProp'], [_abil_9539, "Level"])[0], 0.03);
          lua_call(G.str['SetExProp'], [_buff, "ABIL_RUNECASTER8_ADDMEDF", _addMdef_9538]);
        }
        lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _addMdef_9538));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Hagalaz_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "ABIL_RUNECASTER8_ADDMEDF"])[0]));
      return [];
    })
    G.str['SCR_BUFF_ENTER_StormDust_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilMoveSpeed_9542 = 0;
      var _caster_9542 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9542, null)) {
        var _atk_9543 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9542, _self, "Elementalist_StormDust"])[0];
        var _abilElementalist28_9543 = lua_call(G.str['GetAbility'], [_caster_9542, "Elementalist28"])[0];
        if ((!lua_eq(_abilElementalist28_9543, null) && lua_eq(lua_tableget(_abilElementalist28_9543, 'ActiveState'), 1))) {
          _abilMoveSpeed_9542 = lua_multiply(lua_tableget(_abilElementalist28_9543, 'Level'), 2);
        }
        lua_call(G.str['SetBuffArgs'], [_buff, _atk_9543, 0, 0]);
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _abilMoveSpeed_9542));
      lua_call(G.str['SetExProp'], [_buff, "STORMDUST_MOVESPEED", _abilMoveSpeed_9542]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_StormDust_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atk_9545 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lte(_atk_9545, 0)) {
        return [0];
      }
      var _from_9545 = _self;
      var _caster_9545 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _pad_9545 = lua_call(G.str['GetPadByBuff'], [_caster_9545, _buff])[0];
      if (lua_eq(_pad_9545, null)) {
        return [0];
      }
      if (!lua_eq(_caster_9545, null)) {
        _from_9545 = _caster_9545;
      }
      var _skill_9545 = lua_call(G.str['GetSkill'], [_caster_9545, 'Elementalist_StormDust'])[0];
      if (!lua_eq(_skill_9545, null)) {
        lua_call(G.str['TakeDamage'], [_caster_9545, _self, lua_tableget(_skill_9545, 'ClassName'), _atk_9545, "Earth", "Magic", "Magic"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_StormDust_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilMoveSpeed_9550 = lua_call(G.str['GetExProp'], [_buff, "STORMDUST_MOVESPEED"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _abilMoveSpeed_9550));
      return [];
    })
    G.str['SCR_BUFF_ENTER_StormDust_Abil_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilMoveSpeed_9551 = 0;
      var _caster_9551 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9551, null)) {
        var _atk_9552 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9551, _self, "Elementalist_StormDust"])[0];
        var _abilElementalist28_9552 = lua_call(G.str['GetAbility'], [_caster_9551, "Elementalist28"])[0];
        if ((!lua_eq(_abilElementalist28_9552, null) && lua_eq(lua_tableget(_abilElementalist28_9552, 'ActiveState'), 1))) {
          _abilMoveSpeed_9551 = lua_multiply(lua_tableget(_abilElementalist28_9552, 'Level'), 2);
        }
        lua_call(G.str['SetBuffArgs'], [_buff, _atk_9552, 0, 0]);
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _abilMoveSpeed_9551));
      lua_call(G.str['SetExProp'], [_buff, "STORMDUST_MOVESPEED", _abilMoveSpeed_9551]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_StormDust_Abil_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atk_9554 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lte(_atk_9554, 0)) {
        return [0];
      }
      var _from_9554 = _self;
      var _caster_9554 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9554, null)) {
        _from_9554 = _caster_9554;
      }
      var _skill_9554 = lua_call(G.str['GetSkill'], [_caster_9554, 'Elementalist_StormDust'])[0];
      if (!lua_eq(_skill_9554, null)) {
        lua_call(G.str['TakeDamage'], [_caster_9554, _self, lua_tableget(_skill_9554, 'ClassName'), _atk_9554, "Earth", "Magic", "Magic"]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_StormDust_Abil_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilMoveSpeed_9558 = lua_call(G.str['GetExProp'], [_buff, "STORMDUST_MOVESPEED"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _abilMoveSpeed_9558));
      return [];
    })
    G.str['SCR_BUFF_ENTER_SpiritShock_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilMdef_9559 = 0;
      var _caster_9559 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9559, null)) {
        var _atk_9560 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9559, _self, "Linker_SpiritShock"])[0];
        lua_call(G.str['SetBuffArgs'], [_buff, _atk_9560, 0, 0]);
        var _abilLinker14_9560 = lua_call(G.str['GetAbility'], [_caster_9559, "Linker14"])[0];
        if (((!lua_eq(_abilLinker14_9560, null) && lua_eq(lua_call(G.str['IsSameActor'], [_self, _caster_9559])[0], "NO")) && lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], (lua_multiply(lua_tableget(_abilLinker14_9560, 'Level'), 5))))) {
          lua_call(G.str['AddBuff'], [_caster_9559, _self, "Confuse", 1, 0, 10000, 1]);
        }
        var _abilLinker15_9560 = lua_call(G.str['GetAbility'], [_caster_9559, "Linker15"])[0];
        if (((!lua_eq(_abilLinker15_9560, null) && lua_eq(lua_tableget(_abilLinker15_9560, 'ActiveState'), 1)) && lua_eq(lua_call(G.str['IsSameActor'], [_self, _caster_9559])[0], "NO"))) {
          _abilMdef_9559 = 0.25;
        }
      }
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _abilMdef_9559));
      lua_call(G.str['SetExProp'], [_buff, "SPIRITSHOCK_MDEF", _abilMdef_9559]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SpiritShock_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _atk_9563 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lte(_atk_9563, 0)) {
        return [0];
      }
      var _caster_9563 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9563, null)) {
        var _skill_9565 = lua_call(G.str['GetSkill'], [_caster_9563, 'Linker_SpiritShock'])[0];
        if ((!lua_eq(_skill_9565, null) && lua_eq(lua_call(G.str['IsSameActor'], [_self, _caster_9563])[0], "NO"))) {
          lua_call(G.str['TakeDamage'], [_caster_9563, _self, lua_tableget(_skill_9565, 'ClassName'), _atk_9563, "Soul", "Magic", "Magic", G.str['HIT_BASIC'], G.str['HITRESULT_BLOW']]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SpiritShock_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilMdef_9567 = lua_call(G.str['GetExProp'], [_buff, "SPIRITSHOCK_MDEF"])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _abilMdef_9567));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Achieve_Possession_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetClassList'], ["AchieveStatReward"]); var _achieve_grade_9568 = tmp[0]; var _cnt_9568 = tmp[1]; tmp = null;
      var _AchieveStatReward_Grade_Value_9568 = 0;
      var _grade_cnt_9568 = 0;
      var var_9569 = 1, stop_9569 = lua_assertfloat(lua_subtract(_cnt_9568, 1));
      for (; var_9569 <= stop_9569; var_9569++) {
        var _i_9569 = var_9569;
        var _cls_9570 = lua_call(G.str['GetClassByIndexFromList'], [_achieve_grade_9568, _i_9569])[0];
        if (lua_lte(lua_tableget(_cls_9570, 'AchieveCount'), lua_call(G.str['GetAchieveCount'], [_self])[0])) {
          _grade_cnt_9568 = lua_add(_grade_cnt_9568, 1);
        } else {
          break;
        }
      }
      if (lua_lte(1, _grade_cnt_9568)) {
        var _cls_9573 = lua_call(G.str['GetClassByIndexFromList'], [_achieve_grade_9568, _grade_cnt_9568])[0];
        _AchieveStatReward_Grade_Value_9568 = _grade_cnt_9568;
        var _stradd_9573 = lua_tableget(_cls_9573, 'STR_BM');
        var _conadd_9573 = lua_tableget(_cls_9573, 'CON_BM');
        var _intadd_9573 = lua_tableget(_cls_9573, 'INT_BM');
        var _mnaadd_9573 = lua_tableget(_cls_9573, 'MNA_BM');
        var _dexadd_9573 = lua_tableget(_cls_9573, 'DEX_BM');
        var _patkadd_9573 = lua_tableget(_cls_9573, 'PATK_BM');
        var _matkadd_9573 = lua_tableget(_cls_9573, 'MATK_BM');
        var _defadd_9573 = lua_tableget(_cls_9573, 'DEF_BM');
        var _mdefkadd_9573 = lua_tableget(_cls_9573, 'MDEF_BM');
        var _mspadd_9573 = lua_tableget(_cls_9573, 'MSP_BM');
        lua_tableset(_self, 'STR_BM', lua_add(lua_tableget(_self, 'STR_BM'), _stradd_9573));
        lua_tableset(_self, 'CON_BM', lua_add(lua_tableget(_self, 'CON_BM'), _conadd_9573));
        lua_tableset(_self, 'INT_BM', lua_add(lua_tableget(_self, 'INT_BM'), _intadd_9573));
        lua_tableset(_self, 'MNA_BM', lua_add(lua_tableget(_self, 'MNA_BM'), _mnaadd_9573));
        lua_tableset(_self, 'DEX_BM', lua_add(lua_tableget(_self, 'DEX_BM'), _dexadd_9573));
        lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), _patkadd_9573));
        lua_tableset(_self, 'MATK_BM', lua_add(lua_tableget(_self, 'MATK_BM'), _matkadd_9573));
        lua_tableset(_self, 'DEF_BM', lua_add(lua_tableget(_self, 'DEF_BM'), _defadd_9573));
        lua_tableset(_self, 'MDEF_BM', lua_add(lua_tableget(_self, 'MDEF_BM'), _mdefkadd_9573));
        lua_tableset(_self, 'MSP_BM', lua_add(lua_tableget(_self, 'MSP_BM'), _mspadd_9573));
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_STR", _stradd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_CON", _conadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_INT", _intadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_MNA", _mnaadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_DEX", _dexadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_PATK", _patkadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_MATK", _matkadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_DEF", _defadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_MDEF", _mdefkadd_9573]);
        lua_call(G.str['SetExProp'], [_buff, "ACHIEVE_ADD_MSP", _mspadd_9573]);
        lua_call(G.str['print'], [lua_concat("SUM VALUE : ", _stradd_9573), _conadd_9573, _intadd_9573, _mnaadd_9573, _dexadd_9573, _patkadd_9573, _matkadd_9573, _defadd_9573, _mdefkadd_9573, _mspadd_9573]);
        lua_call(G.str['RunScript'], ["ACHIEVE_POSSESSION_REWARD_FUNC", _self, _buff, _AchieveStatReward_Grade_Value_9568]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Achieve_Possession_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _stradd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_STR"])[0];
      var _conadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_CON"])[0];
      var _intadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_INT"])[0];
      var _mnaadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_MNA"])[0];
      var _dexadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_DEX"])[0];
      var _patkadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_PATK"])[0];
      var _matkadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_MATK"])[0];
      var _defadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_DEF"])[0];
      var _mdefkadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_MDEF"])[0];
      var _mspadd_9574 = lua_call(G.str['GetExProp'], [_buff, "ACHIEVE_ADD_MSP"])[0];
      lua_tableset(_self, 'STR_BM', lua_subtract(lua_tableget(_self, 'STR_BM'), _stradd_9574));
      lua_tableset(_self, 'CON_BM', lua_subtract(lua_tableget(_self, 'CON_BM'), _conadd_9574));
      lua_tableset(_self, 'INT_BM', lua_subtract(lua_tableget(_self, 'INT_BM'), _intadd_9574));
      lua_tableset(_self, 'MNA_BM', lua_subtract(lua_tableget(_self, 'MNA_BM'), _mnaadd_9574));
      lua_tableset(_self, 'DEX_BM', lua_subtract(lua_tableget(_self, 'DEX_BM'), _dexadd_9574));
      lua_tableset(_self, 'PATK_BM', lua_subtract(lua_tableget(_self, 'PATK_BM'), _patkadd_9574));
      lua_tableset(_self, 'MATK_BM', lua_subtract(lua_tableget(_self, 'MATK_BM'), _matkadd_9574));
      lua_tableset(_self, 'DEF_BM', lua_subtract(lua_tableget(_self, 'DEF_BM'), _defadd_9574));
      lua_tableset(_self, 'MDEF_BM', lua_subtract(lua_tableget(_self, 'MDEF_BM'), _mdefkadd_9574));
      lua_tableset(_self, 'MSP_BM', lua_subtract(lua_tableget(_self, 'MSP_BM'), _mspadd_9574));
      return [];
    })
    G.str['ACHIEVE_POSSESSION_REWARD_FUNC'] = (function (_self, _buff, _AchieveStatReward_Grade_Value) {
      var tmp;
      var _etc_9575 = lua_call(G.str['GetETCObject'], [_self])[0];
      if (!lua_eq(_etc_9575, null)) {
        if (lua_lt(lua_tableget(_etc_9575, "AchieveStatReward_Grade"), _AchieveStatReward_Grade_Value)) {
          var _tx_9577 = lua_call(G.str['TxBegin'], [_self])[0];
          lua_call(G.str['TxSetIESProp'], [_tx_9577, _etc_9575, "AchieveStatReward_Grade", _AchieveStatReward_Grade_Value]);
          var _ret_9577 = lua_call(G.str['TxCommit'], [_tx_9577])[0];
          if (lua_eq(_ret_9577, "SUCCESS")) {
            lua_call(G.str['SetExProp'], [_self, "Achieve_Grade", _AchieveStatReward_Grade_Value]);
          } else {
            lua_call(G.str['print'], ["tx FAIL!"]);
          }
        }
        lua_call(G.str['SetBuffArg'], [_self, _buff, _AchieveStatReward_Grade_Value, 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_ProvocationImmunity_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ProvocationImmunity_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ProvocationImmunity_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwashBucklingReduceDamage_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_SwashBucklingReduceDamage_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwashBucklingReduceDamage_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwellLeftArm_Abil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwellLeftArm_Abil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_SwellRightArm_Abil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilDefValue_9588 = 0;
      var _abilMdefValue_9588 = 0;
      var _caster_9588 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9588, null)) {
        var _abilThaumaturge18_9589 = lua_call(G.str['GetAbility'], [_caster_9588, "Thaumaturge18"])[0];
        if (!lua_eq(_abilThaumaturge18_9589, null)) {
          _abilDefValue_9588 = lua_multiply(lua_tableget(_abilThaumaturge18_9589, 'Level'), 0.05);
          _abilMdefValue_9588 = lua_multiply(lua_tableget(_abilThaumaturge18_9589, 'Level'), 0.05);
        }
      }
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _abilDefValue_9588));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _abilMdefValue_9588));
      lua_call(G.str['SetExProp'], [_buff, "RIGHTARM_ABIL_DEF", _abilDefValue_9588]);
      lua_call(G.str['SetExProp'], [_buff, "RIGHTARM_ABIL_MDEF", _abilMdefValue_9588]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_SwellRightArm_Abil_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _abilDefValue_9591 = lua_call(G.str['GetExProp'], [_buff, "RIGHTARM_ABIL_DEF"])[0];
      var _abilMdefValue_9591 = lua_call(G.str['GetExProp'], [_buff, "RIGHTARM_ABIL_MDEF"])[0];
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _abilDefValue_9591));
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _abilMdefValue_9591));
      return [];
    })
    G.str['SCR_BUFF_ENTER_sabath_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_sabath_buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ElevateMagicSquare_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ElevateMagicSquare_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_GreenwoodShikigami_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9596 = 0;
      var _caster_9596 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9596, null)) {
        _moveSpeed_9596 = 10;
        var _abilOnmyoji5_9597 = lua_call(G.str['GetAbility'], [_caster_9596, "Onmyoji5"])[0];
        if ((!lua_eq(_abilOnmyoji5_9597, null) && lua_eq(lua_tableget(_abilOnmyoji5_9597, 'ActiveState'), 1))) {
          var _abilBuffUpdateTime_9598 = lua_subtract(1000, (lua_multiply(lua_tableget(_abilOnmyoji5_9597, 'Level'), 100)));
          lua_call(G.str['SetBuffUpdateTime'], [_buff, _abilBuffUpdateTime_9598]);
        }
      }
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9596));
      lua_call(G.str['SetExProp'], [_buff, "GREENWOOD_MOVESPEED", _moveSpeed_9596]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GreenwoodShikigami_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9599 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9599, null)) {
        var _abilOnmyoji5_9600 = lua_call(G.str['GetAbility'], [_caster_9599, "Onmyoji5"])[0];
        if ((!lua_eq(_abilOnmyoji5_9600, null) && lua_eq(lua_tableget(_abilOnmyoji5_9600, 'ActiveState'), 1))) {
          var _damage_9601 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9599, _self, "Onmyoji_GreenwoodShikigami"])[0];
          var _skill_9601 = lua_call(G.str['GetSkill'], [_caster_9599, "Onmyoji_GreenwoodShikigami"])[0];
          if (!lua_eq(_skill_9601, null)) {
            lua_call(G.str['TakeDamage'], [_caster_9599, _self, lua_tableget(_skill_9601, 'ClassName'), _damage_9601, "Earth", "Magic", "Magic"]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GreenwoodShikigami_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9603 = lua_call(G.str['GetExProp'], [_buff, "GREENWOOD_MOVESPEED"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9603));
      return [];
    })
    G.str['SCR_BUFF_ENTER_GenbuArmor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_GenbuArmor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _selfSP_9605 = lua_call(G.str['TryGetProp'], [_self, "SP"])[0];
      if (lua_lte(_selfSP_9605, 0)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_GenbuArmor_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WhiteTigerHowling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9608 = 0;
      var _caster_9608 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9608, null)) {
        var _abilOnmyoji8_9609 = lua_call(G.str['GetAbility'], [_caster_9608, "Onmyoji8"])[0];
        if ((!lua_eq(_abilOnmyoji8_9609, null) && lua_eq(lua_tableget(_abilOnmyoji8_9609, 'ActiveState'), 1))) {
          _moveSpeed_9608 = 10;
        }
      }
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9608));
      lua_call(G.str['SetExProp'], [_buff, "WHITETIGER_MOVESPEED", _moveSpeed_9608]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WhiteTigerHowling_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9611 = lua_call(G.str['GetExProp'], [_buff, "WHITETIGER_MOVESPEED"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9611));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Toyou_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Toyou_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_VitalProtection_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCrtDr_9614 = 0;
      var _skill_9614 = lua_call(G.str['GetSkill'], [_self, "Retiarii_VitalPointProtection"])[0];
      if (!lua_eq(_skill_9614, null)) {
        _addCrtDr_9614 = lua_add(50, lua_multiply(lua_call(G.str['TryGetProp'], [_skill_9614, "Level"])[0], 20));
        lua_tableset(_self, 'CRTDR_BM', lua_add(lua_tableget(_self, 'CRTDR_BM'), _addCrtDr_9614));
        lua_call(G.str['SetExProp'], [_buff, "VitalProtection_addCrtDr", _addCrtDr_9614]);
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VitalProtection_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addCrtDr_9616 = lua_call(G.str['GetExProp'], [_buff, "VitalProtection_addCrtDr"])[0];
      lua_tableset(_self, 'CRTDR_BM', lua_subtract(lua_tableget(_self, 'CRTDR_BM'), _addCrtDr_9616));
      return [];
    })
    G.str['SCR_BUFF_ENTER_FishingNetsDraw_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FishingNetsDraw_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ThrowingFishingNet_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ThrowingFishingNet_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_FireFoxShikigami_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skillPsychicPressure_9621 = lua_call(G.str['GetSkill'], [_self, "Psychokino_PsychicPressure"])[0];
      if (!lua_eq(_skillPsychicPressure_9621, null)) {
        lua_tableset(_skillPsychicPressure_9621, 'Attribute', "Fire");
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_FireFoxShikigami_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      tmp = lua_call(G.str['GetFollowerList'], [_self]); var _fireFoxList_9623 = tmp[0]; var _fireFoxCnt_9623 = tmp[1]; tmp = null;
      var var_9624 = 1, stop_9624 = lua_assertfloat(_fireFoxCnt_9623);
      for (; var_9624 <= stop_9624; var_9624++) {
        var _i_9624 = var_9624;
        if (lua_eq(lua_tableget(lua_tableget(_fireFoxList_9623, _i_9624), 'ClassName'), "pcskill_FireFoxShikigami")) {
          if (lua_eq(lua_tableget(_fireFoxList_9623, _i_9624), null)) {
            return [0];
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_FireFoxShikigami_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _skillPsychicPressure_9628 = lua_call(G.str['GetSkill'], [_self, "Psychokino_PsychicPressure"])[0];
      if (!lua_eq(_skillPsychicPressure_9628, null)) {
        lua_tableset(_skillPsychicPressure_9628, 'Attribute', "Soul");
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_VitalProtection_Leave_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, "VitalProtection_Buff"]);
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_VitalProtection_Leave_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Sumazinti_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addMdefRate_9632 = 0.15;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _addMdefRate_9632));
      lua_call(G.str['SetExProp'], [_buff, "SUMAZINTI_REDUCE_MDEF", _addMdefRate_9632]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Sumazinti_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "SUMAZINTI_REDUCE_MDEF"])[0]));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Tiksline_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Tiksline_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _buffCaster_9635 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _damage_9635 = lua_call(G.str['GetExProp'], [_buff, "Tiksline_accumulatedDamage"])[0];
      if (!lua_eq(_buffCaster_9635, null)) {
        if (lua_lt(1, _damage_9635)) {
          lua_call(G.str['TakeDamage'], [_buffCaster_9635, _self, "Velcoffer_Tiksline", _damage_9635, "Melee", "Magic", "AbsoluteDamage"]);
        }
      }
      lua_call(G.str['SetExProp'], [_buff, "Tiksline_accumulatedDamage", 0]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mergaite_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefRate_9638 = 0;
      var _itemStack_9638 = lua_call(G.str['GetPrefixSetItemStack'], [_self, "Set_Mergaite"])[0];
      if (!lua_eq(_itemStack_9638, null)) {
        if (lua_eq(_itemStack_9638, 4)) {
          _addDefRate_9638 = 0.4;
        } else if (lua_eq(_itemStack_9638, 5)) {
          _addDefRate_9638 = 1;
        }
      }
      lua_tableset(_self, 'MDEF_RATE_BM', lua_add(lua_tableget(_self, 'MDEF_RATE_BM'), _addDefRate_9638));
      lua_tableset(_self, 'DEF_RATE_BM', lua_add(lua_tableget(_self, 'DEF_RATE_BM'), _addDefRate_9638));
      lua_call(G.str['SetExProp'], [_buff, "MERGAITE_ADDDEF_RATE", _addDefRate_9638]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mergaite_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addDefRate_9642 = lua_call(G.str['GetExProp'], [_buff, "MERGAITE_ADDDEF_RATE"])[0];
      lua_tableset(_self, 'MDEF_RATE_BM', lua_subtract(lua_tableget(_self, 'MDEF_RATE_BM'), _addDefRate_9642));
      lua_tableset(_self, 'DEF_RATE_BM', lua_subtract(lua_tableget(_self, 'DEF_RATE_BM'), _addDefRate_9642));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Kraujas_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Kraujas_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Gyvenimas_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _shieldOwner_9645 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_shieldOwner_9645, null)) {
        return [];
      }
      var _shieldOwnerMHP_9645 = lua_call(G.str['TryGetProp'], [_shieldOwner_9645, "MHP"])[0];
      var _shieldValue_9645 = lua_multiply(_shieldOwnerMHP_9645, 0.5);
      lua_call(G.str['SetBuffArgs'], [_buff, _shieldValue_9645]);
      lua_call(G.str['AddShield'], [_self, _shieldValue_9645]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Gyvenimas_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _shiedlValue_9647 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      var _currentShield_9647 = lua_call(G.str['GetShield'], [_self])[0];
      if (lua_eq(_currentShield_9647, 0)) {
        return [0];
      }
      var _updateShiedlValue_9647 = lua_multiply(_shiedlValue_9647, 0.05);
      if (lua_lte((lua_add(_currentShield_9647, _updateShiedlValue_9647)), (lua_divide(_shiedlValue_9647, 2)))) {
        lua_call(G.str['AddShield'], [_self, _updateShiedlValue_9647]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Gyvenimas_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _currentShield_9650 = lua_call(G.str['GetShield'], [_self])[0];
      lua_call(G.str['AddShield'], [_self, lua_unm(_currentShield_9650)]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Mergaite_Enter_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MaxDefenced_BM', lua_add(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Mergaite_Enter_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'MaxDefenced_BM', lua_subtract(lua_tableget(_self, 'MaxDefenced_BM'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Chortasmata_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_9653 = _arg1;
      var _addHP_9653 = 0;
      var _caster_9653 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9653, null)) {
        var _skill_9654 = lua_call(G.str['GetSkill'], [_caster_9653, "Druid_Chortasmata"])[0];
        if (!lua_eq(_skill_9654, null)) {
          _lv_9653 = lua_tableget(_skill_9654, 'Level');
          _addHP_9653 = lua_add(600, (lua_multiply(30, (lua_subtract(_lv_9653, 1)))));
        }
      }
      _addHP_9653 = lua_tablegetcall(G.str['math'], 'floor', [_addHP_9653])[0];
      lua_call(G.str['SetExProp'], [_buff, "CHORTASMATA_HP_VALUE", _addHP_9653]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Chortasmata_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _addHP_9656 = lua_call(G.str['GetExProp'], [_buff, "CHORTASMATA_HP_VALUE"])[0];
      if ((!lua_eq(_addHP_9656, null) && !lua_eq(_addHP_9656, 0))) {
        lua_call(G.str['Heal'], [_self, _addHP_9656, 0, null, 'Druid_Chortasmata']);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Chortasmata_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Chortasmata_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Chortasmata_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9660 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9660, null)) {
        var _skill_9661 = lua_call(G.str['GetSkill'], [_caster_9660, "Druid_Chortasmata"])[0];
        if (!lua_eq(_skill_9661, null)) {
          var _damage_9662 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9660, _self, 'Druid_Chortasmata'])[0];
          lua_call(G.str['TakeDamage'], [_caster_9660, _self, lua_tableget(_skill_9661, 'ClassName'), _damage_9662, "Poison", "Magic", "Magic", G.str['HIT_POISON']]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Chortasmata_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_ThornVine_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (((!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss") && lua_eq(lua_call(G.str['TryGetProp'], [_self, "MoveType"])[0], "Normal")) || lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true))) {
        lua_call(G.str['AddBuff'], [G.str['caster'], _self, "Hold", 1, 0, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_ThornVine_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9666 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9666, null)) {
        var _skill_9667 = lua_call(G.str['GetSkill'], [_caster_9666, "Druid_ThornVine"])[0];
        if (!lua_eq(_skill_9667, null)) {
          var _damage_9668 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9666, _self, 'Druid_ThornVine'])[0];
          lua_call(G.str['TakeDamage'], [_caster_9666, _self, lua_tableget(_skill_9667, 'ClassName'), _damage_9668, "Poison", "Magic", "Magic", G.str['HIT_POISON']]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_ThornVine_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['RemoveBuff'], [_self, "Hold"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Seedbomb_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SetExProp'], [_buff, "SEEDBOMB_COUNT", 1]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Seedbomb_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9671 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9671, null)) {
        var _damage_9672 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9671, _self, "Druid_Seedbomb"])[0];
        var _key_9672 = lua_call(G.str['GenerateSyncKey'], [_self])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_9672]);
        tmp = lua_call(G.str['SelectObjectNear'], [_caster_9671, _self, 60, "ENEMY", 0, 0]); var _list_9672 = tmp[0]; var _cnt_9672 = tmp[1]; tmp = null;
        if (lua_lte(1, _cnt_9672)) {
          if (lua_lte(5, _cnt_9672)) {
            _cnt_9672 = 5;
          }
          var var_9675 = 1, stop_9675 = lua_assertfloat(_cnt_9672);
          for (; var_9675 <= stop_9675; var_9675++) {
            var _i_9675 = var_9675;
            var _obj_9676 = lua_tableget(_list_9672, _i_9675);
            if (lua_eq(lua_call(G.str['IsSameObject'], [_obj_9676, _self])[0], 0)) {
              lua_call(G.str['PlayEffect'], [_obj_9676, 'F_cleric_ground_seedboom', 1]);
              lua_call(G.str['TakeDamage'], [_caster_9671, _obj_9676, "Druid_Seedbomb", _damage_9672, "Poison", "Magic", "Magic", G.str['HIT_POISON']]);
            }
          }
        }
        lua_call(G.str['EndSyncPacket'], [_self, _key_9672, 0]);
        lua_call(G.str['ExecSyncPacket'], [_self, _key_9672]);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Dissonanz_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Dissonanz_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9679 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9679, null)) {
        var _skill_9680 = lua_call(G.str['GetSkill'], [_caster_9679, "PiedPiper_Dissonanz"])[0];
        if (!lua_eq(_skill_9680, null)) {
          var _damage_9681 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9679, _self, 'PiedPiper_Dissonanz'])[0];
          lua_call(G.str['TakeDamage'], [_caster_9679, _self, lua_tableget(_skill_9680, 'ClassName'), _damage_9681]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Dissonanz_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Lullaby_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _count_9683 = 1;
      lua_call(G.str['SetExProp'], [_buff, "TAKEDMG_LULLABY_COUNT", _count_9683]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Lullaby_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _buffRemainTime_9684 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
      if (lua_lt(_buffRemainTime_9684, 0)) {
        var _caster_9685 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_9685, null)) {
          var _abilPiedPiper3_9686 = lua_call(G.str['GetAbility'], [_caster_9685, "PiedPiper3"])[0];
          if ((!lua_eq(_abilPiedPiper3_9686, null) && lua_eq(lua_tableget(_abilPiedPiper3_9686, 'ActiveState'), 1))) {
            var _wiegenlied_9687 = lua_call(G.str['GetSkill'], [_caster_9685, "PiedPiper_Wiegenlied"])[0];
            var _buffTime_9687 = lua_add(5000, (lua_multiply(lua_tableget(_wiegenlied_9687, 'Level'), 1000)));
            lua_call(G.str['AddBuff'], [_caster_9685, _self, "Wiegenlied_Debuff", 1, 0, _buffTime_9687, 1]);
          }
        }
      }
      lua_call(G.str['DelExProp'], [_buff, "TAKEDMG_LULLABY_COUNT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Wiegenlied_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _hrValue_9688 = 0;
      var _caster_9688 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9688, null)) {
        var _skill_9689 = lua_call(G.str['GetSkill'], [_caster_9688, "PiedPiper_Wiegenlied"])[0];
        if (!lua_eq(_skill_9689, null)) {
          _hrValue_9688 = lua_add(50, (lua_multiply(lua_tableget(_skill_9689, 'Level'), 10)));
        }
      }
      lua_tableset(_self, 'HR_BM', lua_subtract(lua_tableget(_self, 'HR_BM'), _hrValue_9688));
      lua_call(G.str['SetExProp'], [_buff, "WIEGENLIED_HR", _hrValue_9688]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Wiegenlied_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _hrValue_9691 = lua_call(G.str['GetExProp'], [_buff, "WIEGENLIED_HR"])[0];
      lua_tableset(_self, 'HR_BM', lua_add(lua_tableget(_self, 'HR_BM'), _hrValue_9691));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Friedenslied_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9692 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9692, null)) {
        if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_eq(lua_call(G.str['IsSameActor'], [_caster_9692, _self])[0], "NO"))) {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Camouflage_Buff'])[0], 'NO')) {
            lua_call(G.str['PlayAnim'], [_self, "friedenslied_dance", 0, 0, 0, 1]);
          }
        }
      }
      lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Friedenslied_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Camouflage_Buff'])[0], 'NO')) {
          lua_call(G.str['PlayAnim'], [_self, "STD"]);
        }
      }
      lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      return [];
    })
    G.str['SCR_BUFF_ENTER_Friedenslied_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9699 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9699, null)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Lullaby_Debuff"])[0], "YES")) {
          lua_call(G.str['RemoveBuff'], [_self, "Lullaby_Debuff"]);
          var _skill_9701 = lua_call(G.str['GetSkill'], [_caster_9699, "PiedPiper_Wiegenlied"])[0];
          if (!lua_eq(_skill_9701, null)) {
            var _buffTime_9702 = lua_add(5000, (lua_multiply(lua_tableget(_skill_9701, 'Level'), 1000)));
            if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
              _buffTime_9702 = lua_divide(_buffTime_9702, 2);
            }
            lua_call(G.str['AddBuff'], [_caster_9699, _self, "Wiegenlied_Debuff", 1, 0, _buffTime_9702, 1]);
          }
        }
        if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_eq(lua_call(G.str['IsSameActor'], [_caster_9699, _self])[0], "NO"))) {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Camouflage_Buff'])[0], 'NO')) {
            lua_call(G.str['PlayAnim'], [_self, "friedenslied_dance", 0, 0, 0, 1]);
          }
        } else {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Normal")) {
            lua_call(G.str['HoldMonScp'], [_self]);
            lua_call(G.str['SetVerticalMotion'], [_self, 1, 4, 5]);
          }
        }
        var _abilPiedPiper9_9700 = lua_call(G.str['GetAbility'], [_caster_9699, "PiedPiper9"])[0];
        if ((!lua_eq(_abilPiedPiper9_9700, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilPiedPiper9_9700, "ActiveState"])[0], 1))) {
          var _removeBuffList_9708 = lua_newtable();
          tmp = lua_call(G.str['GetBuffList'], [_self]); var _buffList_9708 = tmp[0]; var _buffCnt_9708 = tmp[1]; tmp = null;
          var var_9709 = 1, stop_9709 = lua_assertfloat(_buffCnt_9708);
          for (; var_9709 <= stop_9709; var_9709++) {
            var _i_9709 = var_9709;
            var _buffRemoveList_9710 = lua_tableget(_buffList_9708, _i_9709);
            if (!lua_eq(_buffRemoveList_9710, null)) {
              if (!lua_eq(lua_call(G.str['TryGetProp'], [_buffRemoveList_9710, "Premium"])[0], "PC")) {
                if ((lua_eq(lua_call(G.str['TryGetProp'], [_buffRemoveList_9710, "Group1"])[0], "Buff") && !lua_eq(lua_call(G.str['TryGetProp'], [_buffRemoveList_9710, "Keyword"])[0], "IgnoreImmune"))) {
                  var _buffLevel_9713 = lua_call(G.str['TryGetProp'], [_buffRemoveList_9710, "Lv"])[0];
                  if (((lua_lte(1, _buffLevel_9713) && lua_lte(_buffLevel_9713, 3)) && lua_lt(lua_call(G.str['IMCRandom'], [1, 100])[0], lua_multiply(lua_tableget(_abilPiedPiper9_9700, 'Level'), 10)))) {
                    lua_tableset(_removeBuffList_9708, lua_add(lua_len(_removeBuffList_9708), 1), _buffRemoveList_9710);
                  }
                }
              }
            }
          }
          var _random_9708 = lua_call(G.str['IMCRandom'], [1, lua_len(_removeBuffList_9708)])[0];
          if (!lua_eq(lua_tableget(_removeBuffList_9708, _random_9708), null)) {
            lua_call(G.str['RemoveBuff'], [_self, lua_tableget(lua_tableget(_removeBuffList_9708, _random_9708), 'ClassName')]);
          }
        }
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_subtract(lua_tableget(_self, 'Jumpable'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Friedenslied_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Camouflage_Buff'])[0], 'NO')) {
          lua_call(G.str['PlayAnim'], [_self, "STD"]);
        }
      } else {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Normal")) {
          lua_call(G.str['UnHoldMonScp'], [_self]);
          lua_call(G.str['SetVerticalMotion'], [_self, 0]);
        }
      }
      if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
        lua_tableset(_self, 'Jumpable', lua_add(lua_tableget(_self, 'Jumpable'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Engkrateia_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Engkrateia_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Gregorate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      var _caster_9725 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9725, null)) {
        tmp = lua_call(G.str['GetBuffListByStringProp'], [_self, "Group1", "Debuff"]); var _buffList_9726 = tmp[0]; var _listCnt_9726 = tmp[1]; tmp = null;
        var _removeBuffCount_9726 = 0;
        var _underLv_9726 = 2;
        var _abilExorcist12_9726 = lua_call(G.str['GetAbility'], [_caster_9725, "Exorcist12"])[0];
        if ((!lua_eq(_abilExorcist12_9726, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilExorcist12_9726, "ActiveState"])[0], 1))) {
          _underLv_9726 = lua_add(_underLv_9726, 1);
        }
        var var_9728 = 1, stop_9728 = lua_assertfloat(lua_len(_buffList_9726));
        for (; var_9728 <= stop_9728; var_9728++) {
          var _i_9728 = var_9728;
          if (lua_lt(_removeBuffCount_9726, _arg2)) {
            var _buff_9730 = lua_tableget(_buffList_9726, _i_9728);
            if (lua_eq(lua_call(G.str['_CHECK_BUFF_LEVEL'], [_buff_9730, _underLv_9726])[0], 1)) {
              var _removeBySkill_9731 = lua_call(G.str['TryGetProp'], [_buff_9730, "RemoveBySkill"])[0];
              if ((lua_eq(_removeBySkill_9731, null) || lua_eq(_removeBySkill_9731, "YES"))) {
                if (!lua_eq(lua_tableget(_buff_9730, 'TooltipType'), "Premium")) {
                  lua_call(G.str['RemoveBuff'], [_self, lua_tableget(_buff_9730, 'ClassName')]);
                  _removeBuffCount_9726 = lua_add(_removeBuffCount_9726, 1);
                }
              }
            }
          }
        }
        lua_call(G.str['SetExProp'], [_buff, "REMOVE_BUFF_COUNT_BY_GREGORATE", _removeBuffCount_9726]);
        var _targetList_9726 = lua_call(G.str['SelectObject'], [_self, 60, "ENEMY"])[0];
        var _skill_9726 = lua_call(G.str['GetSkill'], [_caster_9725, 'Exorcist_Gregorate'])[0];
        var _targetMaxCount_9726 = 8;
        if (lua_lte(lua_len(_targetList_9726), _targetMaxCount_9726)) {
          _targetMaxCount_9726 = lua_len(_targetList_9726);
        }
        var var_9735 = 1, stop_9735 = lua_assertfloat(_targetMaxCount_9726);
        for (; var_9735 <= stop_9735; var_9735++) {
          var _j_9735 = var_9735;
          var _target_9736 = lua_tableget(_targetList_9726, _j_9735);
          var _damage_9736 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9725, _target_9736, 'Exorcist_Gregorate'])[0];
          lua_call(G.str['TakeDamage'], [_caster_9725, _target_9736, lua_tableget(_skill_9726, 'ClassName'), _damage_9736, lua_tableget(_skill_9726, 'Attribute'), lua_tableget(_skill_9726, 'AttackType'), lua_tableget(_skill_9726, 'ClassType')]);
          var _isZombie_9736 = lua_call(G.str['GetExProp'], [_self, "ZOMBIE_TARGET_MONID"])[0];
          if ((!lua_eq(_isZombie_9736, 0) && !lua_eq(_isZombie_9736, null))) {
            lua_call(G.str['Kill'], [_self]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Gregorate_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_LatentVenom_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['ShowEmoticon'], [_self, 'I_emo_poison', 0]);
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_LatentVenom_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9740 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9740, null)) {
        var _skill_9741 = lua_call(G.str['GetSkill'], [_caster_9740, "Wugushi_LatentVenom"])[0];
        if (!lua_eq(_skill_9741, null)) {
          var _atk_9742 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9740, _self, lua_tableget(_skill_9741, 'ClassName')])[0];
          lua_call(G.str['TakeDamage'], [_caster_9740, _self, lua_tableget(_skill_9741, 'ClassName'), _atk_9742, "Poison", "None", "Melee", G.str['HIT_POISON_GREEN'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_LatentVenom_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['HideEmoticon'], [_self, 'I_emo_poison']);
      var _cnt_9743 = lua_call(G.str['GetExProp'], [_buff, "LatentVenom_Debuff_OVER"])[0];
      _cnt_9743 = 0;
      lua_call(G.str['SetExProp'], [_buff, "LatentVenom_Debuff_OVER", _cnt_9743]);
      lua_call(G.str['SetBuffUpdateTime'], [_buff, 1000]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Marschierendeslied_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _lv_9744 = lua_add(_arg1, 10);
      lua_call(G.str['SetExProp'], [_buff, "MARSCHIERN_COUNT", _lv_9744]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Marschierendeslied_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['DelExProp'], [_buff, "MARSCHIERN_COUNT"]);
      return [];
    })
    G.str['SCR_BUFF_ENTER_Allegro_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9746 = 0;
      var _caster_9746 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9746, null)) {
        _moveSpeed_9746 = 15;
      }
      lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9746));
      lua_call(G.str['SetExProp'], [_buff, "ALLEGRO_MOVESPEED", _moveSpeed_9746]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Allegro_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9748 = lua_call(G.str['GetExProp'], [_buff, "ALLEGRO_MOVESPEED"])[0];
      lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9748));
      return [];
    })
    G.str['SCR_BUFF_ENTER_MagicArrow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_MagicArrow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9750 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9750, null)) {
        var _damage_9751 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9750, _self, 'Fletcher_MagicArrow'])[0];
        var _skill_9751 = lua_call(G.str['GET_MON_SKILL'], [_caster_9750, 'Fletcher_MagicArrow'])[0];
        if (!lua_eq(_skill_9751, null)) {
          lua_call(G.str['TakeDamage'], [_caster_9750, _self, lua_tableget(_skill_9751, 'ClassName'), _damage_9751, lua_tableget(_skill_9751, 'Attribute'), lua_tableget(_skill_9751, 'AttackType'), lua_tableget(_skill_9751, 'ClassType'), G.str['HIT_MOTION'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_MagicArrow_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_WideMiasma_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_WideMiasma_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9755 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9755, null)) {
        var _damage_9756 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9755, _self, 'Wugushi_WideMiasma'])[0];
        var _skill_9756 = lua_call(G.str['GET_MON_SKILL'], [_caster_9755, 'Wugushi_WideMiasma'])[0];
        if (!lua_eq(_skill_9756, null)) {
          lua_call(G.str['TakeDamage'], [_caster_9755, _self, lua_tableget(_skill_9756, 'ClassName'), _damage_9756, lua_tableget(_skill_9756, 'Attribute'), lua_tableget(_skill_9756, 'AttackType'), lua_tableget(_skill_9756, 'ClassType'), G.str['HIT_POISON_GREEN'], G.str['HITRESULT_NO_HITSCP'], 0, 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_WideMiasma_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_HamelnNagetier_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _caster_9759 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _owner_9759 = lua_call(G.str['GetOwner'], [_caster_9759])[0];
      var _handle_9759 = lua_call(G.str['GetHandle'], [_owner_9759])[0];
      lua_call(G.str['SetExProp'], [_buff, "HAMELN_OWNER", _handle_9759]);
      if (!lua_eq(_owner_9759, null)) {
        var _damage_9760 = lua_call(G.str['GET_SKL_DAMAGE'], [_owner_9759, _self, 'PiedPiper_HamelnNagetier'])[0];
        var _skill_9760 = lua_call(G.str['GET_MON_SKILL'], [_owner_9759, 'PiedPiper_HamelnNagetier'])[0];
        lua_call(G.str['TakeDamage'], [_owner_9759, _self, lua_tableget(_skill_9760, 'ClassName'), _damage_9760, lua_tableget(_skill_9760, 'Attribute'), lua_tableget(_skill_9760, 'AttackType'), lua_tableget(_skill_9760, 'ClassType')]);
      }
      return [];
    })
    G.str['SCR_BUFF_UPDATE_HamelnNagetier_Debuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _handle_9761 = lua_call(G.str['GetExProp'], [_buff, "HAMELN_OWNER"])[0];
      var _piedPiper_9761 = lua_call(G.str['GetByHandle'], [_self, _handle_9761])[0];
      if (!lua_eq(_piedPiper_9761, null)) {
        var _damage_9762 = lua_call(G.str['GET_SKL_DAMAGE'], [_piedPiper_9761, _self, 'PiedPiper_HamelnNagetier'])[0];
        var _skill_9762 = lua_call(G.str['GET_MON_SKILL'], [_piedPiper_9761, 'PiedPiper_HamelnNagetier'])[0];
        lua_call(G.str['TakeDamage'], [_piedPiper_9761, _self, lua_tableget(_skill_9762, 'ClassName'), _damage_9762, lua_tableget(_skill_9762, 'Attribute'), lua_tableget(_skill_9762, 'AttackType'), lua_tableget(_skill_9762, 'ClassType')]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_HamelnNagetier_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Rubric_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _moveSpeed_9764 = 0;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MoveType"])[0], "Holding")) {
        if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Velnias")) {
            _moveSpeed_9764 = 10;
          } else {
            _moveSpeed_9764 = 15;
          }
        }
      }
      lua_call(G.str['SetExProp'], [_buff, "moveSpeed", _moveSpeed_9764]);
      lua_tableset(_self, 'FIXMSPD_BM', _moveSpeed_9764);
      return [];
    })
    G.str['SCR_BUFF_UPDATE_Rubric_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9769 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9769, null)) {
        var _damage_9770 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9769, _self, 'Exorcist_Rubric'])[0];
        var _skill_9770 = lua_call(G.str['GET_MON_SKILL'], [_caster_9769, 'Exorcist_Rubric'])[0];
        if (!lua_eq(_skill_9770, null)) {
          lua_call(G.str['TakeDamage'], [_caster_9769, _self, lua_tableget(_skill_9770, 'ClassName'), _damage_9770, lua_tableget(_skill_9770, 'Attribute'), lua_tableget(_skill_9770, 'AttackType'), lua_tableget(_skill_9770, 'ClassType')]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Rubric_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MoveType"])[0], "Holding")) {
        lua_tableset(_self, 'FIXMSPD_BM', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_Frostbite_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MoveType"])[0], "Holding")) {
        if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          var _moveSpeed_9776 = lua_multiply(lua_tableget(_self, 'MSPD'), 0.5);
          lua_tableset(_self, 'MSPD_BM', lua_subtract(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9776));
          lua_call(G.str['SetExProp'], [_buff, "FROSTBITE_SPEED", _moveSpeed_9776]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Frostbite_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MoveType"])[0], "Holding")) {
        if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          var _moveSpeed_9779 = lua_call(G.str['GetExProp'], [_buff, "FROSTBITE_SPEED"])[0];
          lua_tableset(_self, 'MSPD_BM', lua_add(lua_tableget(_self, 'MSPD_BM'), _moveSpeed_9779));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_ENTER_TheTreeOfSepiroth_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_TheTreeOfSepiroth_Buff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9781 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_9781, null)) {
        return [0];
      }
      var _pad_9781 = lua_call(G.str['GetPadByBuff'], [_caster_9781, _buff])[0];
      var _padOwner_9781 = lua_call(G.str['GetPadOwner'], [_pad_9781])[0];
      if (lua_eq(lua_call(G.str['IsSameActor'], [_caster_9781, _padOwner_9781])[0], "NO")) {
        return [0];
      }
      var _abilKabbalist25_9781 = lua_call(G.str['GetAbility'], [_caster_9781, "Kabbalist25"])[0];
      var _addRate_9781 = lua_multiply(0.01, _arg1);
      if ((!lua_eq(_abilKabbalist25_9781, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilKabbalist25_9781, "ActiveState"])[0], 1))) {
        _addRate_9781 = lua_add(_addRate_9781, (lua_multiply(lua_tableget(_abilKabbalist25_9781, 'Level'), 0.003)));
      }
      var _healValue_9781 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(lua_tableget(_self, 'MHP'), _addRate_9781)])[0];
      lua_call(G.str['Heal'], [_self, _healValue_9781, 0, null, lua_tableget(_buff, 'ClassName')]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_TheTreeOfSepiroth_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_PatronSaint_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _addHealPWR_9786 = lua_multiply(_arg1, 0.05);
      lua_tableset(_self, 'HEAL_PWR_RATE_BM', lua_add(lua_tableget(_self, 'HEAL_PWR_RATE_BM'), _addHealPWR_9786));
      lua_call(G.str['SetExProp'], [_buff, "ADD_HEAL_PWR", _addHealPWR_9786]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_PatronSaint_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_tableset(_self, 'HEAL_PWR_RATE_BM', lua_subtract(lua_tableget(_self, 'HEAL_PWR_RATE_BM'), lua_call(G.str['GetExProp'], [_buff, "ADD_HEAL_PWR"])[0]));
      return [];
    })
    G.str['SCR_BUFF_ENTER_AquaBenedicta_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_UPDATE_AquaBenedicta_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _RemainTime, _ret, _over) {
      var tmp;
      var _caster_9789 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_9789, null)) {
        var _damage_9790 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_9789, _self, 'Exorcist_AquaBenedicta'])[0];
        var _skill_9790 = lua_call(G.str['GET_MON_SKILL'], [_caster_9789, 'Exorcist_AquaBenedicta'])[0];
        if (!lua_eq(_skill_9790, null)) {
          lua_call(G.str['TakeDamage'], [_caster_9789, _self, lua_tableget(_skill_9790, 'ClassName'), _damage_9790, lua_tableget(_skill_9790, 'Attribute'), lua_tableget(_skill_9790, 'AttackType'), lua_tableget(_skill_9790, 'ClassType')]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_LEAVE_AquaBenedicta_DeBuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Dissonanz_Stun_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      lua_call(G.str['SkillTextEffect'], [null, _self, lua_call(G.str['GetBuffCaster'], [_buff])[0], "SHOW_BUFF_TEXT", lua_tableget(_buff, 'ClassID'), null]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Dissonanz_Stun_Debuff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      
      return [];
    })
    G.str['SCR_BUFF_ENTER_Crescendo_Bane_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _value_9795 = 0;
      var _current_9795 = lua_tableget(_self, 'Poison_Atk_BM');
      lua_tableset(_self, 'Poison_Atk_BM', lua_add(lua_tableget(_self, 'Poison_Atk_BM'), _current_9795));
      lua_call(G.str['SetExProp'], [_buff, "add_Poison", _current_9795]);
      return [];
    })
    G.str['SCR_BUFF_LEAVE_Crescendo_Bane_Buff'] = (function (_self, _buff, _arg1, _arg2, _over) {
      var tmp;
      var _current_9796 = lua_call(G.str['GetExProp'], [_buff, "add_Poison"])[0];
      lua_tableset(_self, 'Poison_Atk_BM', lua_subtract(lua_tableget(_self, 'Poison_Atk_BM'), _current_9796));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Feint_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Feint_Debuff'])[0], 'YES')) {
        var _feintSklLv_9798 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _feintSklLv_9798)) {
          var _feintRatio_9799 = lua_multiply(300, _feintSklLv_9798);
          lua_tableset(_rateTable, 'dodgeDefRatio', lua_subtract(lua_tableget(_rateTable, 'dodgeDefRatio'), _feintRatio_9799));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_PadImmune_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (!lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'PadImmune_Buff'])[0], 'YES')) {
        return [];
      }
      lua_tableset(_rateTable, 'NoneDamage', 1);
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Evasion_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Evasion_Buff'])[0], 'YES')) {
        var _evasionSklLv_9803 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _evasionSklLv_9803)) {
          var _evasionRatio_9804 = lua_multiply(_evasionSklLv_9803, 500);
          lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), _evasionRatio_9804));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Conviction_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Conviction_Debuff'])[0], 'YES')) {
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_eq(lua_tableget(_skill, 'ClassName'), "Paladin_Smite"))) {
          var _hitCount_9807 = 3;
          lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 0.8));
          lua_call(G.str['SetMultipleHitCount'], [_ret, _hitCount_9807]);
        }
        if (lua_eq(lua_tableget(_skill, 'ClassName'), "Inquisitor_GodSmash")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.6));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Cleave_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Cleave_Debuff'])[0], 'YES')) {
        var _attackType_9810 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9811 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9810 = lua_tableget(_rightHand_9811, 'AttackType');
        }
        if (lua_eq(_attackType_9810, 'Slash')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_SlashDEF'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_SlashDEF'])[0], 'YES')) {
        var _attackType_9814 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9815 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9814 = lua_tableget(_rightHand_9815, 'AttackType');
        }
        if (lua_eq(_attackType_9814, 'Slash')) {
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.7]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Burrow_Rogue'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Burrow_Rogue'])[0], 'YES')) {
        var _BurrowSklLv_9818 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _BurrowSklLv_9818)) {
          var _BurrowRatio_9819 = lua_multiply(500, _BurrowSklLv_9818);
          lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), _BurrowRatio_9819));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Hamaya_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Hamaya_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Attribute'), "Holy")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_EsquiveToucher_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'EsquiveToucher_Buff'])[0], 'YES')) {
        var _EsquiveSklLv_9824 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        if (lua_lt(0, _EsquiveSklLv_9824)) {
          var _EsquiveRatio_9825 = lua_multiply(1000, _EsquiveSklLv_9824);
          lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), _EsquiveRatio_9825));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Preparation_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Preparation_Buff'])[0], 'YES')) {
        var _PrepaSklLv_9827 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _PrepaSklLv_9827)) {
          var _PrepaRatio_9828 = lua_add(5000, lua_multiply(_PrepaSklLv_9827, 500));
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _PrepaRatio_9828));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Flanconnade_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Flanconnade_Buff'])[0], 'YES')) {
        var _FlanconnadeSklLv_9830 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _FlanconnadeSklLv_9830)) {
          var _FlanconnadeRatio_9831 = 8000;
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _FlanconnadeRatio_9831));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Stun'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Stun'])[0], 'YES')) {
        var _attackType_9833 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9834 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9833 = lua_tableget(_rightHand_9834, 'AttackType');
        }
        if (lua_eq(_attackType_9833, 'Aries')) {
          lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), 3000));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_UC_stun'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'UC_stun'])[0], 'YES')) {
        var _attackType_9837 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9838 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9837 = lua_tableget(_rightHand_9838, 'AttackType');
        }
        if (lua_eq(_attackType_9837, 'Aries')) {
          lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), 3000));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_RunningShot_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'RunningShot_Buff'])[0], 'YES')) {
        if (((((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_from, lua_tableget(_skill, 'ClassID')])[0], 1)) || lua_eq(lua_tableget(_skill, 'ClassName'), "Bow_Hanging_Attack")) || lua_eq(lua_tableget(_skill, 'ClassName'), "Cannon_Attack")) || lua_eq(lua_tableget(_skill, 'ClassName'), "DoubleGun_Attack"))) {
          var _addFactor_9842 = 0;
          var _RunningShot_9842 = lua_call(G.str['GetSkill'], [_from, "QuarrelShooter_RunningShot"])[0];
          if (!lua_eq(_RunningShot_9842, null)) {
            _addFactor_9842 = lua_call(G.str['TryGetProp'], [_RunningShot_9842, 'SkillFactor'])[0];
          }
          lua_tableset(_rateTable, 'AddSkillFator', lua_add(lua_tableget(_rateTable, 'AddSkillFator'), _addFactor_9842));
          var _hitCount_9842 = 2;
          lua_call(G.str['AddMultipleHitCount'], [_ret, _hitCount_9842]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Limacon_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Limacon_Buff'])[0], 'YES')) {
        if (((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_from, lua_tableget(_skill, 'ClassID')])[0], 57)) || lua_eq(lua_tableget(_skill, 'ClassName'), "Pistol_Attack2"))) {
          var _addRate_9846 = lua_add(0.5, lua_multiply((lua_subtract(lua_tableget(_skill, 'Level'), 1)), 0.1));
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addRate_9846));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Slithering_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Slithering_Buff'])[0], 'YES')) {
        var _SlitheringsklLv_9848 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _SlitheringsklLv_9848)) {
          var _SlitheringRatio_9849 = lua_multiply(500, _SlitheringsklLv_9848);
          lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), _SlitheringRatio_9849));
          if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "NotRet"])[0], 1)) {
            var _blk_9850 = lua_add(3500, lua_multiply(100, _SlitheringsklLv_9848));
            lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _blk_9850));
          }
          if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
            var _missAdd_9851 = 1;
            lua_tableset(_rateTable, 'missResult', lua_add(lua_tableget(_rateTable, 'missResult'), _missAdd_9851));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_ShieldCharge_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ShieldCharge_Buff'])[0], 'YES')) {
        var _sklLv_9853 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if ((lua_lt(0, _sklLv_9853) && lua_eq(lua_tableget(_skill, 'ClassType'), "Missile"))) {
          var _blk_9854 = lua_add(2500, lua_multiply(200, _sklLv_9853));
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _blk_9854));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SoulDuel_DEF'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SoulDuel_DEF'])[0], 'YES') && lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'SoulDuel_ATK'])[0], 'NO'))) {
        lua_tableset(_rateTable, 'missResult', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_UmboBlow_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "NotRet"])[0], 1)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'UmboBlow_Buff'])[0], 'YES')) {
          var _blk_9859 = 4000;
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _blk_9859));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ability_buff_Shield'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (!lua_eq(lua_call(G.str['GetExProp'], [_self, "NotRet"])[0], 1)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ability_buff_Shield'])[0], 'YES')) {
          if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')) {
            var _ratio_9863 = lua_call(G.str['IMCRandom'], [1, 2])[0];
            if (lua_eq(_ratio_9863, 1)) {
              lua_tableset(_rateTable, 'abilityBuffShield', 1);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Savagery_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Savagery_Buff'])[0], 'YES')) {
        var _attackType_9866 = lua_tableget(_skill, 'AttackType');
        if (((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000)) && lua_eq(_attackType_9866, 'None'))) {
          var _rightHand_9867 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9866 = lua_tableget(_rightHand_9867, 'AttackType');
        }
        if (lua_eq(_attackType_9866, 'Aries')) {
          var _hitCount_9868 = 2;
          var _addRate_9868 = 0;
          var _savagery_9868 = lua_call(G.str['GetSkill'], [_from, "Barbarian_Savagery"])[0];
          if (!lua_eq(_savagery_9868, null)) {
            _addRate_9868 = lua_add(_addRate_9868, lua_multiply(0.1, lua_tableget(_savagery_9868, 'Level')));
          }
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addRate_9868));
          lua_call(G.str['SetMultipleHitCount'], [_ret, _hitCount_9868]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_CrossGuard_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _caster_9870 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'CrossGuard_Debuff'])[0], 'YES')) {
        var _attackType_9871 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9872 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9871 = lua_tableget(_rightHand_9872, 'AttackType');
        }
        if ((lua_eq(_attackType_9871, 'Aries') && lua_eq(lua_call(G.str['IsSameObject'], [_caster_9870, _from])[0], 1))) {
          var _crossGuardSklLv_9873 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
          if (lua_lt(0, _crossGuardSklLv_9873)) {
            lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), (lua_add(0.95, lua_multiply(_crossGuardSklLv_9873, 0.05)))));
          }
          var _hitCount_9873 = 2;
          lua_call(G.str['SetMultipleHitCount'], [_ret, _hitCount_9873]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_HighKick_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HighKick_Debuff'])[0], 'YES')) {
        var _attackType_9876 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9877 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9876 = lua_tableget(_rightHand_9877, 'AttackType');
        }
        if (lua_eq(_attackType_9876, 'Strike')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.3));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DoublePunch_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DoublePunch_Debuff'])[0], 'YES')) {
        var _attackType_9880 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9881 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9880 = lua_tableget(_rightHand_9881, 'AttackType');
        }
        if (lua_eq(_attackType_9880, 'Strike')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.2));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_God_Finger_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'God_Finger_Debuff'])[0], 'YES')) {
        var _attackType_9884 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9885 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9884 = lua_tableget(_rightHand_9885, 'AttackType');
        }
        if (lua_eq(_attackType_9884, 'Strike')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ngadhundi_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Ngadhundi_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), "Missile")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DirtyWall_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DirtyWall_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), "Missile")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_HigherRotten_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HigherRotten_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), "Missile")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HigherRotten_Debuff'])[0], 'YES') && lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true))) {
        if ((lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee') || lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile'))) {
          lua_tableset(_rateTable, 'AddDefence', lua_unm((lua_add(lua_call(G.str['GetSumOfEquipItem'], [_self, 'DEF'])[0], lua_call(G.str['GetSumOfEquipItem'], [_self, 'ADD_DEF'])[0]))));
        } else if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          lua_tableset(_rateTable, 'AddDefence', lua_unm((lua_add(lua_call(G.str['GetSumOfEquipItem'], [_self, 'MDEF'])[0], lua_call(G.str['GetSumOfEquipItem'], [_self, 'ADD_MDEF'])[0]))));
        }
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'HigherRotten_Debuff'])[0], 'YES') && lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true))) {
        if ((lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee') || lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile'))) {
          lua_tableset(_rateTable, 'AddAtkDamage', lua_unm((lua_add(lua_add(lua_call(G.str['GetSumOfEquipItem'], [_from, 'MINATK'])[0], lua_call(G.str['GetSumOfEquipItem'], [_from, 'PATK'])[0]), lua_call(G.str['GetSumOfEquipItem'], [_from, 'ADD_MINATK'])[0]))));
        } else if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          lua_tableset(_rateTable, 'AddAtkDamage', lua_unm((lua_add(lua_add(lua_call(G.str['GetSumOfEquipItem'], [_from, 'MATK'])[0], lua_call(G.str['GetSumOfEquipItem'], [_from, 'ADD_MATK'])[0]), lua_call(G.str['GetSumOfEquipItem'], [_from, 'ADD_MINATK'])[0]))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Disenchant_Debuff_Abil'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _caster_9902 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _abil_9902 = lua_call(G.str['GetAbility'], [_caster_9902, "PlagueDoctor12"])[0];
      if (lua_eq(_abil_9902, null)) {
        return [];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Disenchant_Debuff_Abil'])[0], 'YES') && lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true))) {
        if ((lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee') || lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile'))) {
          lua_tableset(_rateTable, 'AddDefence', lua_unm((lua_add(lua_call(G.str['GetSumOfEquipItem'], [_self, 'DEF'])[0], lua_call(G.str['GetSumOfEquipItem'], [_self, 'ADD_DEF'])[0]))));
        } else if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          lua_tableset(_rateTable, 'AddDefence', lua_unm((lua_add(lua_call(G.str['GetSumOfEquipItem'], [_self, 'MDEF'])[0], lua_call(G.str['GetSumOfEquipItem'], [_self, 'ADD_MDEF'])[0]))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_UC_rotten'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'UC_rotten'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), "Missile")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Isa_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Isa_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Attribute'), 'Ice')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_from, lua_tableget(_skill, 'ClassID')])[0], 1))) {
          var _caster_9913 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
          if (!lua_eq(_caster_9913, null)) {
            var _abil_9914 = lua_call(G.str['GetAbility'], [_caster_9913, "RuneCaster2"])[0];
            if ((!lua_eq(_abil_9914, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 9999])[0], lua_multiply(lua_tableget(_abil_9914, 'Level'), 500)))) {
              lua_call(G.str['AddBuff'], [_from, _self, 'UC_slowdown', 1, 0, 4000, 1]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SteadyAim_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'SteadyAim_Buff'])[0], 'YES')) {
        var _SteadyAim_9917 = lua_call(G.str['GetSkill'], [_from, "Ranger_SteadyAim"])[0];
        if (!lua_eq(_SteadyAim_9917, null)) {
          G.str['addrate'] = lua_multiply(0.01, lua_tableget(_SteadyAim_9917, 'Level'));
        }
        var _addDamage_9917 = 0;
        var _addDamageByLevel_9917 = lua_multiply(lua_tableget(_SteadyAim_9917, 'Level'), 10);
        var _Ranger14_abil_9917 = lua_call(G.str['GetAbility'], [_from, "Ranger14"])[0];
        if ((!lua_eq(_Ranger14_abil_9917, null) && lua_lte(3, lua_tableget(_SteadyAim_9917, 'Level')))) {
          _addDamage_9917 = lua_add(_addDamage_9917, lua_multiply(lua_tableget(_Ranger14_abil_9917, 'Level'), 2));
        }
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')) {
          var _abilRanger32_9920 = lua_call(G.str['GetAbility'], [_from, "Ranger32"])[0];
          var _RHEquipItem_9920 = lua_call(G.str['GetEquipItem'], [_from, "RH"])[0];
          if (((lua_eq(lua_call(G.str['TryGetProp'], [_RHEquipItem_9920, "ClassType"])[0], "THBow") && !lua_eq(_abilRanger32_9920, null)) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRanger32_9920, "ActiveState"])[0], 1))) {
            G.str['addrate'] = lua_multiply(G.str['addrate'], 1.5);
          }
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), G.str['addrate']));
          lua_tableset(_rateTable, 'AddTrueDamage', lua_add(lua_tableget(_rateTable, 'AddTrueDamage'), (lua_add(_addDamage_9917, _addDamageByLevel_9917))));
        }
        var _abilRanger33_9917 = lua_call(G.str['GetAbility'], [_from, "Ranger33"])[0];
        if (((lua_eq(lua_call(G.str['TryGetProp'], [_skill, "Job"])[0], "Ranger") && !lua_eq(_abilRanger33_9917, null)) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRanger33_9917, "ActiveState"])[0], 1))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SpearLunge_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SpearLunge_Debuff'])[0], 'YES')) {
        var _attackType_9924 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9925 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9924 = lua_tableget(_rightHand_9925, 'AttackType');
        }
        if (lua_eq(_attackType_9924, 'Aries')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Preparation_Buff_End'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Preparation_Buff_End'])[0], 'YES')) {
        var _attackType_9928 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9929 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9928 = lua_tableget(_rightHand_9929, 'AttackType');
        }
        if (lua_eq(_attackType_9928, 'Aries')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
          lua_call(G.str['SkillEndRemoveBuff'], [_from, "Preparation_Buff_End"]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Lunge_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Lunge_Debuff'])[0], 'YES')) {
        var _attackType_9932 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9933 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9932 = lua_tableget(_rightHand_9933, 'AttackType');
        }
        if (lua_eq(_attackType_9932, 'Slash')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.3));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Mon_Golden_Bell_Shield_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Mon_Golden_Bell_Shield_Buff'])[0], 'YES')) {
        var _key_9936 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_9936]);
        lua_call(G.str['PlayEffect'], [_self, 'F_sys_IronSkinblock', 0.4, 0, 0]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_9936]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Golden_Bell_Shield_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Golden_Bell_Shield_Buff'])[0], 'YES') && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Monk_Golden_Bell_Shield'))) {
        var _key_9938 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_9938]);
        lua_call(G.str['PlayEffect'], [_self, 'F_sys_IronSkinblock', 0.4, 0, 0]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_9938]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Golden_Bell_Shield_Safety'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Golden_Bell_Shield_Safety'])[0], 'YES')) {
        var _key_9940 = lua_call(G.str['GetSkillSyncKey'], [_self, _ret])[0];
        lua_call(G.str['StartSyncPacket'], [_self, _key_9940]);
        lua_call(G.str['PlayEffect'], [_self, 'F_sys_IronSkinblock', 0.4, 0, 0]);
        lua_call(G.str['EndSyncPacket'], [_self, _key_9940]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Rain_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Rain_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Attribute'), "Lightning")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.35));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Mastema_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Mastema_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Attribute'), "Holy")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_AttaqueCoquille_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'AttaqueCoquille_Debuff'])[0], 'YES')) {
        var _attackType_9948 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9949 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9948 = lua_tableget(_rightHand_9949, 'AttackType');
        }
        if (lua_eq(_attackType_9948, "Aries")) {
          lua_tableset(_rateTable, 'AddIgnoreDefensesRate', lua_add(lua_tableget(_rateTable, 'AddIgnoreDefensesRate'), 0.1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Petrification'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Petrification'])[0], 'YES')) {
        if ((lua_eq(lua_tableget(_skill, 'Attribute'), 'Fire') || lua_eq(lua_tableget(_skill, 'Attribute'), 'Soul'))) {
          var _hitCount_9953 = 2;
          lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 0.5));
          lua_call(G.str['SetMultipleHitCount'], [_ret, _hitCount_9953]);
        } else if ((lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile') || lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic'))) {
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.9]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Camouflage_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Camouflage_Buff'])[0], 'YES')) {
        var _count_9956 = lua_call(G.str['GetExProp'], [_self, 'IGNORE_MELEE_ATK'])[0];
        if ((lua_lt(0, _count_9956) && !lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic'))) {
          lua_tableset(_rateTable, 'IgnoreDamage', 1);
          lua_call(G.str['SetExProp'], [_self, "IGNORE_MELEE_ATK", lua_subtract(_count_9956, 1)]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_UC_bound'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'UC_bound'])[0], 'YES')) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.1));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_enchanted_poison'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'enchanted_poison'])[0], 'YES')) {
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(99, lua_tableget(_skill, 'ClassID')))) {
          return [];
        }
        var _over_9961 = lua_call(G.str['GetOver'], [_buff])[0];
        var _ratio_9961 = lua_add(2500, (lua_multiply(_over_9961, 200)));
        if (lua_lt(lua_call(G.str['IMCRandom'], [0, 10000])[0], _ratio_9961)) {
          lua_call(G.str['AddBuff'], [_from, _self, 'UC_poison', lua_tableget(_self, 'Lv'), 0, 10000, 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Web_FlyObject'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Web_FlyObject'])[0], 'YES') && lua_eq(lua_tableget(_self, 'MoveType'), "Flying"))) {
        var _Hunter4_abilLv_9965 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        var _attackType_9965 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9966 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9965 = lua_tableget(_rightHand_9966, 'AttackType');
        }
        if ((lua_lt(0, _Hunter4_abilLv_9965) && (lua_eq(_attackType_9965, 'Slash') || lua_eq(_attackType_9965, 'Strike')))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.2, _Hunter4_abilLv_9965))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Cloaking_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Cloaking_Buff'])[0], 'YES')) {
        var _Scout1_abil_9969 = lua_call(G.str['GetAbility'], [_from, 'Scout1'])[0];
        if (!lua_eq(_Scout1_abil_9969, null)) {
          var _MINPATK_9970 = lua_call(G.str['TryGetProp'], [_from, "MINPATK"])[0];
          var _MAXPATK_9970 = lua_call(G.str['TryGetProp'], [_from, "MAXPATK"])[0];
          var _addDamage_9970 = lua_multiply((lua_divide((lua_add(_MINPATK_9970, _MAXPATK_9970)), 2)), 0.5);
          lua_tableset(_rateTable, 'AddTrueDamage', lua_add(lua_tableget(_rateTable, 'AddTrueDamage'), _addDamage_9970));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_QuickCast_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'QuickCast_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic'))) {
        var _abil_9972 = lua_call(G.str['GetAbility'], [_from, "Wizard8"])[0];
        if (!lua_eq(_abil_9972, null)) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.1, lua_tableget(_abil_9972, 'Level')))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Link_Enemy'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Link_Enemy'])[0], 'YES')) {
        tmp = lua_call(G.str['GetBuffArgs'], [_buff]); var _Linker8_abilLv_9975 = tmp[0]; var _Linker9_abilLv_9975 = tmp[1]; var _Linker10_abilLv_9975 = tmp[2]; tmp = null;
        if ((lua_lt(0, _Linker8_abilLv_9975) && lua_eq(lua_tableget(_skill, 'Attribute'), 'Lightning'))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.1, _Linker8_abilLv_9975))));
        }
        if ((lua_lt(0, _Linker9_abilLv_9975) && lua_eq(lua_tableget(_skill, 'Attribute'), 'Poison'))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.1, _Linker9_abilLv_9975))));
        }
        if ((lua_lt(0, _Linker10_abilLv_9975) && lua_eq(lua_tableget(_skill, 'Attribute'), 'Earth'))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.1, _Linker10_abilLv_9975))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SwellLeftArm_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'SwellLeftArm_Buff'])[0], 'YES')) {
        var _caster_9980 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _Thaumaturge6_9980 = lua_call(G.str['GetAbility'], [_caster_9980, "Thaumaturge6"])[0];
        var _Thaumaturge7_9980 = lua_call(G.str['GetAbility'], [_caster_9980, "Thaumaturge7"])[0];
        if ((!lua_eq(_Thaumaturge6_9980, null) && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ShrinkBody_Debuff'])[0], 'YES'))) {
          var _MINMATK_9981 = lua_call(G.str['TryGetProp'], [_caster_9980, "MINMATK"])[0];
          var _addDamage_9981 = lua_multiply(_MINMATK_9981, (lua_multiply(lua_tableget(_Thaumaturge6_9980, 'Level'), 0.3)));
          lua_tableset(_rateTable, 'AddAtkDamage', lua_add(lua_tableget(_rateTable, 'AddAtkDamage'), _addDamage_9981));
        }
        if ((!lua_eq(_Thaumaturge7_9980, null) && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'SwellBody_Debuff'])[0], 'YES'))) {
          lua_call(G.str['AddBuff'], [_from, _self, 'UC_debrave', 1, 0, lua_multiply(8000, lua_tableget(_Thaumaturge7_9980, 'Level')), 1]);
        }
        if (lua_eq(lua_tableget(_skill, 'ClassName'), "Wizard_MagicMissile")) {
          var _hitCount_9983 = 2;
          lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 1));
          lua_call(G.str['AddMultipleHitCount'], [_ret, _hitCount_9983]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DeprotectedZone_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DeprotectedZone_Debuff'])[0], 'YES')) {
        var _Cleric7_abilLv_9985 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        var _rItem_9985 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
        if (((lua_lt(0, _Cleric7_abilLv_9985) && lua_lt(lua_tableget(_skill, 'ClassID'), 100)) && lua_eq(lua_tableget(_rItem_9985, 'ClassType2'), "Sword"))) {
          lua_call(G.str['AddBuff'], [_from, _self, 'UC_deprotect', 1, 0, lua_multiply(_Cleric7_abilLv_9985, 1000), 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Lethargy_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Lethargy_Debuff'])[0], 'YES')) {
        var _attackType_9988 = lua_tableget(_skill, 'AttackType');
        if (((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && !lua_eq(lua_tableget(lua_call(G.str['GetJobObject'], [_from])[0], 'CtrlType'), 'Wizard')) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_9989 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_9988 = lua_tableget(_rightHand_9989, 'AttackType');
        }
        var _Wizard7_abilLv_9988 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if ((lua_lt(0, _Wizard7_abilLv_9988) && lua_eq(_attackType_9988, 'Strike'))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.1, _Wizard7_abilLv_9988))));
        }
        if (lua_eq(lua_tableget(_skill, 'HitType'), "Pad")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.2));
        }
        var _abilWizard24_9988 = lua_call(G.str['GetAbility'], [_from, "Wizard24"])[0];
        if (((!lua_eq(_abilWizard24_9988, null) && lua_eq(lua_tableget(_abilWizard24_9988, 'ActiveState'), 1)) && lua_eq(lua_tableget(_skill, 'HitType'), "Pad"))) {
          var _abilDamageRate_9992 = lua_multiply(0.03, lua_tableget(_abilWizard24_9988, 'Level'));
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _abilDamageRate_9992));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_ScullSwing_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_tableget(_self, 'Size'), "M") && lua_eq(lua_tableget(_self, 'Size'), "L"))) {
        if (lua_eq(lua_tableget(_skill, 'ClassName'), 'Highlander_VerticalSlash')) {
          var _defadd_9995 = lua_call(G.str['GetExProp'], [_buff, "ADD_DEF"])[0];
          lua_tableset(_rateTable, 'blkAdd', lua_subtract(lua_tableget(_rateTable, 'blkAdd'), 10000));
          lua_tableset(_rateTable, 'dodgeDefRatio', lua_subtract(lua_tableget(_rateTable, 'dodgeDefRatio'), 10000));
          if (lua_eq(lua_tableget(_self, 'Size'), 'M')) {
            _defadd_9995 = lua_multiply(_defadd_9995, 0.8);
          }
          lua_call(G.str['SkillTextEffect'], [null, _self, _from, 'SHOW_SKILL_EFFECT', 0, null, 'skill_verticalslash']);
          lua_tableset(_rateTable, 'AddAtkDamage', lua_add(lua_tableget(_rateTable, 'AddAtkDamage'), _defadd_9995));
        }
      } else {
        return [];
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_ResistElements_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ResistElements_Buff'])[0], 'YES')) {
        var _missAdd_9999 = 0;
        var _damageRate_9999 = 0;
        var _caster_9999 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_9999, null)) {
          var _resistSkl_10000 = lua_call(G.str['GetSkill'], [_caster_9999, "Paladin_ResistElements"])[0];
          if ((!lua_eq(_resistSkl_10000, null) && ((((lua_eq(lua_tableget(_skill, 'Attribute'), "Fire") || lua_eq(lua_tableget(_skill, 'Attribute'), "Ice")) || lua_eq(lua_tableget(_skill, 'Attribute'), "Lightning")) || lua_eq(lua_tableget(_skill, 'Attribute'), "Poison")) || lua_eq(lua_tableget(_skill, 'Attribute'), "Earth")))) {
            _missAdd_9999 = lua_add(_missAdd_9999, lua_multiply(100, lua_tableget(_resistSkl_10000, 'Level')));
            var _abil_10001 = lua_call(G.str['GetAbility'], [_caster_9999, "Paladin1"])[0];
            if (!lua_eq(_abil_10001, null)) {
              _missAdd_9999 = lua_add(_missAdd_9999, lua_multiply(80, lua_tableget(_abil_10001, 'Level')));
            }
            _damageRate_9999 = lua_multiply(0.025, lua_tableget(_resistSkl_10000, 'Level'));
          }
        }
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, _damageRate_9999]);
        lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _missAdd_9999));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_JollyRoger_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'JollyRoger_Buff'])[0], 'YES')) {
        var _missAdd_10004 = 0;
        var _caster_10004 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10004, null)) {
          var _partyMemberCount_10005 = 0;
          var _party_10005 = lua_call(G.str['GetPartyObj'], [_caster_10004, 0])[0];
          if (!lua_eq(_party_10005, null)) {
            _partyMemberCount_10005 = lua_subtract(lua_call(G.str['GetPartyAliveMemberCount'], [_party_10005])[0], 1);
          }
          var _JollyRogerSkill_10005 = lua_call(G.str['GetSkill'], [_self, "Corsair_JollyRoger"])[0];
          if (lua_eq(_JollyRogerSkill_10005, null)) {
            return [];
          }
          var _abil_10005 = lua_call(G.str['GetAbility'], [_caster_10004, "Corsair14"])[0];
          if ((!lua_eq(_abil_10005, null) && lua_lte(2, lua_tableget(_JollyRogerSkill_10005, 'Level')))) {
            _missAdd_10004 = lua_add(_missAdd_10004, lua_multiply(50, lua_tableget(_abil_10005, 'Level')));
          }
          _missAdd_10004 = lua_multiply(_missAdd_10004, _partyMemberCount_10005);
        }
        lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _missAdd_10004));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Slow_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Slow_Debuff'])[0], 'YES')) {
        var _missDiscount_10010 = 0;
        var _caster_10010 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10010, null)) {
          var _abil_10011 = lua_call(G.str['GetAbility'], [_caster_10010, "Chronomancer6"])[0];
          if (!lua_eq(_abil_10011, null)) {
            _missDiscount_10010 = lua_add(_missDiscount_10010, lua_multiply(600, lua_tableget(_abil_10011, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'missRating', lua_subtract(lua_tableget(_rateTable, 'missRating'), _missDiscount_10010));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_JincanGu_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'JincanGu_Debuff'])[0], 'YES')) {
        var _dodgeRatio_10014 = 0;
        var _caster_10014 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10014, null)) {
          var _abil_10015 = lua_call(G.str['GetAbility'], [_caster_10014, "Wugushi6"])[0];
          if (!lua_eq(_abil_10015, null)) {
            _dodgeRatio_10014 = lua_add(_dodgeRatio_10014, lua_multiply(500, lua_tableget(_abil_10015, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'dodgeDefRatio', lua_subtract(lua_tableget(_rateTable, 'dodgeDefRatio'), _dodgeRatio_10014));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Forecast_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Forecast_Buff'])[0], 'YES')) {
        var _missAdd_10018 = 0;
        var _caster_10018 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10018, null)) {
          var _abil_10019 = lua_call(G.str['GetAbility'], [_caster_10018, "Oracle6"])[0];
          if (!lua_eq(_abil_10019, null)) {
            _missAdd_10018 = lua_add(_missAdd_10018, lua_multiply(100, lua_tableget(_abil_10019, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _missAdd_10018));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_RetreatShot'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'RetreatShot'])[0], 'YES')) {
        var _missAdd_10022 = 0;
        var _caster_10022 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10022, null)) {
          var _abil_10023 = lua_call(G.str['GetAbility'], [_caster_10022, "Schwarzereiter3"])[0];
          if (!lua_eq(_abil_10023, null)) {
            _missAdd_10022 = lua_add(_missAdd_10022, lua_multiply(50, lua_tableget(_abil_10023, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _missAdd_10022));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Link_Sacrifice'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Link_Sacrifice'])[0], 'YES')) {
        var _missAdd_10026 = 0;
        var _caster_10026 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10026, null)) {
          var _abil_10027 = lua_call(G.str['GetAbility'], [_caster_10026, "Linker3"])[0];
          if (!lua_eq(_abil_10027, null)) {
            _missAdd_10026 = lua_add(_missAdd_10026, lua_multiply(200, lua_tableget(_abil_10027, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _missAdd_10026));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Linker_Sacrifice'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Linker_Sacrifice'])[0], 'YES')) {
        var _missAdd_10030 = 0;
        var _caster_10030 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10030, null)) {
          var _abil_10031 = lua_call(G.str['GetAbility'], [_caster_10030, "Linker3"])[0];
          if (!lua_eq(_abil_10031, null)) {
            _missAdd_10030 = lua_add(_missAdd_10030, lua_multiply(200, lua_tableget(_abil_10031, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _missAdd_10030));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Circling_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Circling_Buff'])[0], 'YES') && (lua_eq(lua_tableget(_skill, 'ClassName'), 'Hoplite_ThrouwingSpear') || lua_eq(lua_tableget(_skill, 'ClassName'), 'Peltasta_ShieldLob')))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 2));
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Circling_Buff'])[0], 'YES')) {
        var _missDiscount_10035 = 0;
        var _caster_10035 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10035, null)) {
          var _abil_10036 = lua_call(G.str['GetAbility'], [_caster_10035, "Falconer7"])[0];
          if (!lua_eq(_abil_10036, null)) {
            _missDiscount_10035 = lua_add(_missDiscount_10035, lua_multiply(500, lua_tableget(_abil_10036, 'Level')));
          }
        }
        lua_tableset(_rateTable, 'missRating', lua_subtract(lua_tableget(_rateTable, 'missRating'), _missDiscount_10035));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_LastRites_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'LastRites_Buff'])[0], 'YES') && (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Cleric_Revival_Buff'])[0], 'YES') || lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Cleric_Revival_Leave_Buff'])[0], 'YES')))) {
        var _caster_10039 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _abil_10039 = lua_call(G.str['GetAbility'], [_caster_10039, "Chaplain5"])[0];
        if (!lua_eq(_abil_10039, null)) {
          lua_tableset(_rateTable, 'blkAdd', lua_subtract(lua_tableget(_rateTable, 'blkAdd'), lua_multiply(lua_tableget(_abil_10039, 'Level'), 1500)));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Gae_Bulg_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Gae_Bulg_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee')) {
          var _hitCount_10043 = 2;
          lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 0.15));
          lua_call(G.str['SetMultipleHitCount'], [_ret, _hitCount_10043]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Langort_BlkAbil'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Langort_BlkAbil'])[0], 'YES')) {
        var _abil_10045 = lua_call(G.str['GetAbility'], [_self, "Peltasta28"])[0];
        if (!lua_eq(_abil_10045, null)) {
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), lua_multiply(lua_tableget(_abil_10045, 'Level'), 500)));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Safe'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Safe'])[0], 'YES')) {
        lua_tableset(_rateTable, 'IgnoreDamage', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SneakHit_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'SneakHit_Buff'])[0], 'YES')) {
        var _angle_10050 = 120;
        var _skillLevel_10050 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        tmp = lua_call(G.str['GetDir'], [_from]); var _selfx_10050 = tmp[0]; var _selfz_10050 = tmp[1]; tmp = null;
        tmp = lua_call(G.str['GetDir'], [_self]); var _targetx_10050 = tmp[0]; var _targetz_10050 = tmp[1]; tmp = null;
        var _selfDir_10050 = lua_call(G.str['GetAngleTo'], [_from, _self])[0];
        var _monDir_10050 = lua_call(G.str['DirToAngle'], [_targetx_10050, _targetz_10050])[0];
        var _relativeAngle_10050 = lua_subtract(_selfDir_10050, _monDir_10050);
        var _revAngle_10050 = lua_multiply(_angle_10050, -1);
        _relativeAngle_10050 = lua_tablegetcall(G.str['math'], 'floor', [_relativeAngle_10050])[0];
        if (((lua_eq(lua_call(G.str['GetExProp'], [_from, "IS_BACKATTACK"])[0], 1) || (lua_lte(_relativeAngle_10050, lua_divide(_angle_10050, 2)) && lua_lte(0, _relativeAngle_10050))) || (lua_lte(lua_divide(_revAngle_10050, 2), _relativeAngle_10050) && lua_lte(_relativeAngle_10050, 0)))) {
          var _addCriRatio_10051 = lua_add(3000, lua_multiply(_skillLevel_10050, 200));
          lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), _addCriRatio_10051));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_HellBreath_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HellBreath_Debuff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'Attribute'), "Fire"))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Blistering_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Blistering_Debuff'])[0], 'YES')) {
        var _caster_10055 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10055, null)) {
          var _abil_10056 = lua_call(G.str['GetAbility'], [_caster_10055, "Falconer10"])[0];
          if ((!lua_eq(_abil_10056, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 10000])[0], 1500))) {
            lua_call(G.str['AddBuff'], [_caster_10055, _self, 'Blistering_Debuff_Abil', lua_tableget(_abil_10056, 'Level'), 0, 3000, 1]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Commence_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Commence_Buff'])[0], 'YES') && lua_lt(5000, lua_call(G.str['IMCRandom'], [1, 10000])[0]))) {
        lua_call(G.str['AddBuff'], [_from, _self, 'Commence_Debuff', G.str['sklLv'], 0, 10000, 1]);
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Commence_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassName'), 'Cataphract_Rush'))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.3));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Maze_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Maze_Debuff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassName'), 'Sage_Maze')) && lua_eq(lua_tableget(lua_call(G.str['GetSkillOwner'], [_skill])[0], 'Name'), lua_tableget(lua_call(G.str['GetBuffCaster'], [_buff])[0], 'Name')))) {
        
      } else {
        lua_tableset(_rateTable, 'IgnoreDamage', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_EvasiveAction_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'EvasiveAction_Buff'])[0], 'YES')) {
        var _skillLevel_10065 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), lua_multiply(_skillLevel_10065, 200)));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Enchantment_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Enchantment_Buff'])[0], 'YES')) {
        var _skillLevel_10067 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        if (lua_lt(lua_call(G.str['IMCRandom'], [1, 10000])[0], lua_multiply(400, _skillLevel_10067))) {
          lua_call(G.str['AddBuff'], [_from, _self, 'UC_confuse', 1, 0, lua_add(6000, lua_multiply(_skillLevel_10067, 100)), 1]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Agility_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Agility_Buff'])[0], 'YES')) {
        var _skillLevel_10070 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _addDodge_10070 = lua_multiply(lua_call(G.str['GetStamina'], [_self])[0], (lua_multiply(0.001, _skillLevel_10070)));
        lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), _addDodge_10070));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DarkSight_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DarkSight_Buff'])[0], 'YES')) {
        var _skillLevel_10072 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _addDodge_10072 = lua_add(1000, lua_multiply(_skillLevel_10072, 300));
        lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), _addDodge_10072));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_murmillo_helmet'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'murmillo_helmet'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee')) {
          var _addDodge_10075 = 3000;
          lua_tableset(_rateTable, 'dodgeDefRatio', lua_subtract(lua_tableget(_rateTable, 'dodgeDefRatio'), _addDodge_10075));
        } else if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')) {
          var _addBlk_10076 = 4900;
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _addBlk_10076));
        } else if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          var _addMiss_10077 = 4900;
          lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), _addMiss_10077));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_EvadeThrust_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'EvadeThrust_Buff'])[0], 'YES')) {
        var _skillLevel_10079 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _addBlk_10079 = 4000;
        lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _addBlk_10079));
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'EvadeThrust_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic'))) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.3]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_HeadButtAbil_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HeadButtAbil_Debuff'])[0], 'YES')) {
        var _attackType_10082 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_10083 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_10082 = lua_tableget(_rightHand_10083, 'AttackType');
        }
        var _abilLv_10082 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        if (lua_eq(_attackType_10082, 'Strike')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(_abilLv_10082, 0.06))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Zwerchhau_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Zwerchhau_Debuff'])[0], 'YES')) {
        var _attackType_10086 = lua_tableget(_skill, 'AttackType');
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
          var _rightHand_10087 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
          _attackType_10086 = lua_tableget(_rightHand_10087, 'AttackType');
        }
        if ((lua_eq(_attackType_10086, 'Slash') && !lua_eq(lua_tableget(_self, 'ArmorMaterial'), 'Iron'))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.8));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Serpentine_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Serpentine_Debuff'])[0], 'YES')) {
        if ((lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee') && (lua_eq(lua_tableget(_skill, 'UseType'), 'MELEE_GROUND') || lua_eq(lua_tableget(_skill, 'UseType'), 'TARGET_GROUND')))) {
          var _value_10091 = 0.5;
          if (lua_eq(lua_tableget(_skill, 'ClassName'), "Hoplite_Pierce")) {
            _value_10091 = 0.7;
          }
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _value_10091));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_BloodCurse_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'BloodCurse_Debuff'])[0], 'YES')) {
        var _healValue_10094 = lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_atk, (lua_add(0.1, lua_multiply(lua_tableget(_skill, 'Level'), 0.02))))])[0];
        lua_call(G.str['Heal'], [_from, _healValue_10094, 0]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_CavalryCharge_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'CavalryCharge_Debuff'])[0], 'YES')) {
        lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), 3500));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Merkabah_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Merkabah_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          lua_tableset(_rateTable, 'missRating', lua_add(lua_tableget(_rateTable, 'missRating'), 3000));
        } else {
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), 1500));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Levitation_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Levitation_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee')) {
          lua_tableset(_rateTable, 'missResult', 1);
        }
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Levitation_Buff'])[0], 'YES')) {
        var _abilFeatherfoot18_10105 = lua_call(G.str['GetAbility'], [_from, 'Featherfoot18'])[0];
        if ((!lua_eq(_abilFeatherfoot18_10105, null) && lua_eq(lua_tableget(_abilFeatherfoot18_10105, 'ActiveState'), 1))) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, 'Job'])[0], "Featherfoot")) {
            var _addDamageRate_10107 = lua_multiply(lua_tableget(_abilFeatherfoot18_10105, 'Level'), 0.1);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10107));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_HangingShot'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HangingShot'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee'))) {
        lua_tableset(_rateTable, 'missResult', 1);
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'HangingShot'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile'))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_StormCalling_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'StormCalling_Debuff'])[0], 'YES') && lua_lt(10000, lua_tableget(_skill, 'ClassID'))) && lua_eq(lua_tableget(_skill, 'Attribute'), "Lightning"))) {
        if (lua_eq(lua_tableget(_skill, 'ClassName'), 'Kriwi_Zaibas')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1.5));
        } else if (lua_eq(lua_tableget(_skill, 'ClassName'), 'Elementalist_Electrocute')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        } else {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1.3));
        }
      }
      var _caster_10111 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (!lua_eq(_caster_10111, null)) {
        var _abil_10116 = lua_call(G.str['GetAbility'], [_caster_10111, "Daoshi10"])[0];
        if (((!lua_eq(_abil_10116, null) && lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'StormCalling_Debuff'])[0], 'YES')) && lua_eq(lua_tableget(_skill, 'ClassType'), "Melee"))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Bazooka_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Bazooka_Buff'])[0], 'YES')) {
        var _skillLevel_10119 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(_skillLevel_10119, 0.1))));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Gohei_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Gohei_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile'))) {
        lua_tableset(_rateTable, 'blkResult', 1);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_ButtStroke_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ButtStroke_Debuff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'AttackType'), "Gun"))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.3));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Crown_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Crown_Buff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassName'), "Highlander_Moulinet"))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_FeverTime'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'FeverTime'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Missile')) {
          var _addRate_10128 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
          if (lua_eq(_addRate_10128, null)) {
            _addRate_10128 = 1;
          }
          _addRate_10128 = lua_add(0.15, (lua_multiply((lua_subtract(_addRate_10128, 1)), 0.03)));
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addRate_10128));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Archer_Kneelingshot'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _abil_10130 = lua_call(G.str['GetAbility'], [_from, "Cannoneer14"])[0];
      if (!lua_eq(_abil_10130, null)) {
        if ((((((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Archer_Kneelingshot'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassName'), 'Cannoneer_CannonBlast')) || lua_eq(lua_tableget(_skill, 'ClassName'), 'Cannoneer_CannonShot')) || lua_eq(lua_tableget(_skill, 'ClassName'), 'Cannoneer_ShootDown')) || lua_eq(lua_tableget(_skill, 'ClassName'), 'Cannoneer_SiegeBurst')) || lua_eq(lua_tableget(_skill, 'ClassName'), 'Cannoneer_CannonBarrage'))) {
          lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), (lua_multiply(lua_tableget(_abil_10130, 'Level'), 100))));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DeedsOfValor'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'DeedsOfValor'])[0], 'YES')) {
        var _skillLv_10134 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _addValue_10134 = lua_add(0.05, (lua_multiply((lua_subtract(_skillLv_10134, 1)), 0.02)));
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addValue_10134));
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DeedsOfValor'])[0], 'YES')) {
        var _skillLv_10135 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _addValue_10135 = lua_add(0.05, (lua_multiply((lua_subtract(_skillLv_10135, 1)), 0.01)));
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addValue_10135));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Sorcerer_Obey_PC_DEF_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Sorcerer_Obey_PC_DEF_Buff'])[0], 'YES')) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.2]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Sorcerer_Obey_Status_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Sorcerer_Obey_Status_Buff'])[0], 'YES')) {
        var _caster_10139 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10139, null)) {
          var _Sorcerer15_abil_10140 = lua_call(G.str['GetAbility'], [_caster_10139, "Sorcerer15"])[0];
          var _abil_ratio_10140 = 0;
          if (!lua_eq(_Sorcerer15_abil_10140, null)) {
            _abil_ratio_10140 = lua_multiply(lua_tableget(_Sorcerer15_abil_10140, 'Level'), 0.005);
          }
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _abil_ratio_10140));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Blessing_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Blessing_Buff'])[0], 'YES')) {
        if (lua_eq(lua_call(G.str['GetRelation'], [_self, _from])[0], "ENEMY")) {
          var _addTrueDamage_10144 = lua_call(G.str['GetExProp'], [_buff, "BlessingValue"])[0];
          lua_tableset(_rateTable, 'AddTrueDamage', lua_add(lua_tableget(_rateTable, 'AddTrueDamage'), lua_tablegetcall(G.str['math'], 'floor', [_addTrueDamage_10144])[0]));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_StoneSkin_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'StoneSkin_Buff'])[0], 'YES')) {
        var _attackType_10146 = lua_call(G.str['GET_SKILL_ATTACKTYPE'], [_skill])[0];
        if (((((lua_eq(_attackType_10146, 'Slash') || lua_eq(_attackType_10146, 'Aries')) || lua_eq(_attackType_10146, 'Arrow')) || lua_eq(_attackType_10146, 'Gun')) || lua_eq(_attackType_10146, 'Magic'))) {
          var _skillLv_10147 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
          var _buffValue_10147 = lua_divide((lua_add(10, lua_tablegetcall(G.str['math'], 'floor', [lua_multiply((lua_subtract(_skillLv_10147, 1)), 2.5)])[0])), 100);
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, _buffValue_10147]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_TransmitPrana_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'TransmitPrana_Debuff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'Attribute'), 'Soul'))) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'TransmitPrana_Debuff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassType'), "Magic"))) {
        var _skillLv_10150 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _fromMATK_10150 = lua_call(G.str['TryGetProp'], [_from, "MINMATK"])[0];
        if (lua_eq(_fromMATK_10150, null)) {
          _fromMATK_10150 = 0;
        }
        var _addSoulAtk_10150 = lua_multiply(_fromMATK_10150, (lua_add(0.5, lua_multiply(_skillLv_10150, 0.03))));
        if (lua_eq(lua_tableget(_skill, 'Attribute'), 'Soul')) {
          _addSoulAtk_10150 = lua_multiply(_addSoulAtk_10150, 1.5);
        }
        _addSoulAtk_10150 = lua_tablegetcall(G.str['math'], 'floor', [_addSoulAtk_10150])[0];
        lua_tableset(_rateTable, 'AddAttributeDamageSoul', lua_add(lua_tableget(_rateTable, 'AddAttributeDamageSoul'), _addSoulAtk_10150));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Hexing_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Hexing_Debuff'])[0], 'YES') && lua_eq(lua_tableget(_skill, 'ClassName'), "Bokor_Effigy"))) {
        var _bonusHitCount_10154 = 3;
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "item_EffigyBonus1_buff"])[0], 'YES')) {
          _bonusHitCount_10154 = 2;
        }
        var _propName_10154 = lua_concat(lua_tableget(_buff, 'ClassName'), lua_concat('_', lua_call(G.str['tostring'], lua_call(G.str['GetHandle'], [_from]))[0]));
        var _hitCount_10154 = lua_call(G.str['GetExProp'], [_buff, _propName_10154])[0];
        if (lua_lte(_bonusHitCount_10154, lua_add(_hitCount_10154, 1))) {
          var _minRate_10156 = lua_subtract(lua_call(G.str['SCR_GET_Effigy_Ratio'], [_skill])[0], 1);
          var _maxRate_10156 = lua_subtract(lua_call(G.str['SCR_GET_Effigy_Ratio2'], [_skill])[0], 1);
          var _addRate_10156 = lua_call(G.str['IMCRandomFloat'], [_minRate_10156, _maxRate_10156])[0];
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addRate_10156));
          lua_call(G.str['SetExProp'], [_buff, _propName_10154, 0]);
        } else {
          lua_call(G.str['SetExProp'], [_buff, _propName_10154, lua_add(_hitCount_10154, 1)]);
        }
        var _abilBokor2_10154 = lua_call(G.str['GetAbility'], [_from, "Bokor2"])[0];
        if ((!lua_eq(_abilBokor2_10154, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 9999])[0], lua_multiply(lua_tableget(_abilBokor2_10154, 'Level'), 500)))) {
          lua_call(G.str['AddBuff'], [_from, _self, 'Blind', 1, 0, 5000, 1]);
        }
      }
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Hexing_Debuff'])[0], 'YES')) {
        var _caster_10159 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (lua_eq(_caster_10159, null)) {
          _caster_10159 = _from;
        }
        var _abil_10159 = lua_call(G.str['GetAbility'], [_caster_10159, "Bokor9"])[0];
        var _Bokor9_abilLv_10159 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (!lua_eq(_abil_10159, null)) {
          if (((lua_lt(0, _Bokor9_abilLv_10159) && lua_eq(lua_tableget(_skill, 'Attribute'), 'Dark')) && lua_eq(lua_tableget(_abil_10159, 'ActiveState'), 1))) {
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(0.1, _Bokor9_abilLv_10159))));
          }
        }
        var _Featherfoot8_abil_10159 = lua_call(G.str['GetAbility'], [_caster_10159, "Featherfoot8"])[0];
        if ((!lua_eq(_Featherfoot8_abil_10159, null) && lua_lt(lua_call(G.str['IMCRandom'], [1, 9999])[0], lua_multiply(lua_tableget(_Featherfoot8_abil_10159, 'Level'), 100)))) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Sanctuary_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Sanctuary_Buff'])[0], 'YES')) {
        var _attackerBuff_10165 = lua_call(G.str['GetBuffByName'], [_from, 'Sanctuary_Buff'])[0];
        if (!lua_eq(_attackerBuff_10165, null)) {
          var _addHolyDamage_10166 = 0;
          if ((lua_eq(lua_tableget(_skill, 'ClassType'), "Melee") || lua_eq(lua_tableget(_skill, 'ClassType'), "Missile"))) {
            var _addDEF_10167 = lua_call(G.str['GetExProp'], [_attackerBuff_10165, "ADD_DEF"])[0];
            if (lua_eq(_addDEF_10167, null)) {
              _addDEF_10167 = 0;
            }
            _addHolyDamage_10166 = _addDEF_10167;
          } else if (lua_eq(lua_tableget(_skill, 'ClassType'), "Magic")) {
            var _addMDEF_10169 = lua_call(G.str['GetExProp'], [_attackerBuff_10165, "ADD_MDEF"])[0];
            if (lua_eq(_addMDEF_10169, null)) {
              _addMDEF_10169 = 0;
            }
            _addHolyDamage_10166 = _addMDEF_10169;
          }
          lua_tableset(_rateTable, 'AddAttributeDamageHoly', lua_add(lua_tableget(_rateTable, 'AddAttributeDamageHoly'), _addHolyDamage_10166));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_OgouVeve_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'OgouVeve_Buff'])[0], 'YES')) {
        tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _lv_10172 = tmp[0]; var _arg2_10172 = tmp[1]; tmp = null;
        var _caster_10172 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10172, null)) {
          var _pad_10173 = lua_call(G.str['GetPadByBuff'], [_caster_10172, _buff])[0];
          if (!lua_eq(_pad_10173, null)) {
            _lv_10172 = lua_call(G.str['GetPadArgNumber'], [_pad_10173, 1])[0];
          }
        }
        var _addDamageRate_10172 = lua_multiply(_lv_10172, 0.1);
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10172));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Judgment_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Judgment_Debuff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Velnias")) {
          if (lua_eq(lua_tableget(_skill, 'Attribute'), "Holy")) {
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.1));
          }
        }
        if (lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true)) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_EnchantEarth_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'EnchantEarth_Buff'])[0], 'YES')) {
        var _EnchantEarthSklLv_10181 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        if (lua_lt(0, _EnchantEarthSklLv_10181)) {
          var _EnchantEarthRatio_10182 = lua_add(500, lua_multiply(_EnchantEarthSklLv_10181, 200));
          lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _EnchantEarthRatio_10182));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Ole_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Ole_Buff'])[0], 'YES')) {
        var _addCritical_10184 = 0;
        var _skillLevel_10184 = lua_call(G.str['GetExProp'], [_buff, "OLE_LEVEL"])[0];
        var _topAttacker_10184 = lua_call(G.str['GetTopHatePointChar'], [_self])[0];
        if ((!lua_eq(_topAttacker_10184, null) && lua_eq(lua_call(G.str['IsSameActor'], [_topAttacker_10184, _from])[0], "YES"))) {
          _addCritical_10184 = lua_add(1000, (lua_multiply(_skillLevel_10184, 200)));
        } else {
          _addCritical_10184 = lua_add(500, (lua_multiply(_skillLevel_10184, 100)));
        }
        lua_tableset(_rateTable, 'crtRatingAdd', lua_add(lua_tableget(_rateTable, 'crtRatingAdd'), _addCritical_10184));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_HakkaPalle_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _attackType_10187 = lua_tableget(_skill, 'AttackType');
      var _dodgeRatio_10187 = 1000;
      var _HakkaPalleSklLv_10187 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
      if (lua_lt(0, _HakkaPalleSklLv_10187)) {
        _dodgeRatio_10187 = lua_add(_dodgeRatio_10187, lua_multiply(_HakkaPalleSklLv_10187, 200));
      }
      if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_from, lua_tableget(_skill, 'ClassID')])[0], 1))) {
        var _weaponHand_10189 = 'RH';
        var _useSubWeapon_10189 = lua_call(G.str['TryGetProp'], [_skill, 'UseSubweaponDamage'])[0];
        if (lua_eq(_useSubWeapon_10189, 'YES')) {
          _weaponHand_10189 = 'LH';
        }
        var _weapon_10189 = lua_call(G.str['GetEquipItem'], [_from, _weaponHand_10189])[0];
        _attackType_10187 = lua_call(G.str['TryGetProp'], [_weapon_10189, 'AttackType'])[0];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "HakkaPalle_Buff"])[0], "YES") && ((lua_eq(_attackType_10187, "Slash") || lua_eq(_attackType_10187, "Aries")) || lua_eq(_attackType_10187, "Strike")))) {
        lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), _dodgeRatio_10187));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Daino_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Daino_Buff'])[0], 'YES')) {
        if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_from, lua_tableget(_skill, 'ClassID')])[0], 1))) {
          if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Melee')) {
            lua_tableset(_rateTable, 'NotCalculated', 1);
            var _damage_10195 = lua_call(G.str['SCR_GET_PC_ATK'], [_from, 'Magic'])[0];
            var _key_10195 = lua_call(G.str['GetSkillSyncKey'], [_from, _ret])[0];
            lua_call(G.str['StartSyncPacket'], [_from, _key_10195]);
            lua_call(G.str['TakeDamage'], [_from, _self, lua_tableget(_skill, 'ClassName'), _damage_10195, lua_tableget(_skill, 'Attribute'), lua_tableget(_skill, 'AttackType'), "Magic", lua_tableget(_skill, 'HitType'), G.str['HITRESULT_NO_HITSCP']]);
            lua_call(G.str['EndSyncPacket'], [_from, _key_10195]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DivineStigma_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DivineStigma_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassName'), 'Kriwi_Zaibas')) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Aukuras_Kriwi18_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Aukuras_Kriwi18_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          var _addFireDamage_10201 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
          lua_tableset(_rateTable, 'AddAttributeDamageFire', lua_add(lua_tableget(_rateTable, 'AddAttributeDamageFire'), _addFireDamage_10201));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_CounterSpell_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'CounterSpell_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), 'Magic')) {
          lua_tableset(_rateTable, 'NoneDamage', 1);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DragoonHelmet_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'DragoonHelmet_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Job'), "Dragoon")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_DeathVerdict_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'DeathVerdict_Buff'])[0], 'YES')) {
        var _addDamageRate_10209 = lua_call(G.str['GetExProp'], [_buff, 'ADD_DAMAGE_RATE'])[0];
        _addDamageRate_10209 = lua_divide(_addDamageRate_10209, 100);
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10209));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Foretell_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Foretell_Buff'])[0], 'YES')) {
        lua_tableset(_rateTable, 'EnableDodge', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Fanaticism_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Fanaticism_Buff'])[0], 'YES')) {
        var _FanaticismSklLv_10213 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        var _addDamageRate_10213 = lua_add(0.05, (lua_multiply(_FanaticismSklLv_10213, 0.05)));
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10213));
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_NonInvasiveArea_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'NonInvasiveArea_Buff'])[0], 'YES')) {
        var _caster_10215 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10215, null)) {
          var _Skl_10216 = lua_call(G.str['GetSkill'], [_caster_10215, "Templer_NonInvasiveArea"])[0];
          if (!lua_eq(_Skl_10216, null)) {
            lua_tableset(_rateTable, 'EnableMagicBlock', 1);
            var _blkRate_10217 = lua_add(1500, lua_multiply(lua_tableget(_Skl_10216, 'Level'), 300));
            lua_tableset(_rateTable, 'blkAdd', lua_add(lua_tableget(_rateTable, 'blkAdd'), _blkRate_10217));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SnipersSerenity_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'SnipersSerenity_Buff'])[0], 'YES')) {
        var _abil_Musketeer22_10219 = lua_call(G.str['GetAbility'], [_from, "Musketeer22"])[0];
        var _attackType_10219 = lua_call(G.str['GET_SKILL_ATTACKTYPE'], [_skill])[0];
        if (((!lua_eq(_abil_Musketeer22_10219, null) && lua_eq(lua_tableget(_abil_Musketeer22_10219, 'ActiveState'), 1)) && lua_eq(_attackType_10219, "Gun"))) {
          lua_tableset(_rateTable, 'EnableBlock', 0);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Methadone_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Methadone_Buff'])[0], 'YES')) {
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.2));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_BackSlide_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'BackSlide_Buff'])[0], 'YES')) {
        lua_tableset(_rateTable, 'dodgeDefRatio', lua_add(lua_tableget(_rateTable, 'dodgeDefRatio'), 5000));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_LightningHands_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'LightningHands_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ClassType"])[0], "Magic")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.2));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_AcrobaticMount_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'AcrobaticMount_Buff'])[0], 'YES')) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, "EnableCompanion"])[0], "YES")) {
          var _AcrobaticMountSklLv_10230 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
          var _skillDamage_10230 = 0;
          if (lua_lt(0, _AcrobaticMountSklLv_10230)) {
            _skillDamage_10230 = lua_multiply(_AcrobaticMountSklLv_10230, 0.05);
          }
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _skillDamage_10230));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Hangmansknot_SDR_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Hangmansknot_SDR_Debuff'])[0], 'YES')) {
        var _abil_Linker6_10233 = lua_call(G.str['GetAbility'], [_from, "Linker6"])[0];
        if ((!lua_eq(_abil_Linker6_10233, null) && lua_eq(lua_tableget(_abil_Linker6_10233, 'ActiveState'), 1))) {
          var _damageRate_10234 = lua_multiply(lua_tableget(_abil_Linker6_10233, 'Level'), 0.05);
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _damageRate_10234));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_BuildRoost_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'BuildRoost_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Job'), "Falconer")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Stabbing_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Stabbing_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassName'), 'Hoplite_Stabbing')) {
          var _over_10240 = lua_call(G.str['GetBuffOver'], [_from, 'Stabbing_Buff'])[0];
          var _addDamageRate_10240 = lua_multiply(_over_10240, 0.1);
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10240));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Concentrate_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'Concentrate_Buff'])[0], 'YES')) {
        if (((lua_eq(lua_call(G.str['GetRelation'], [_self, _from])[0], "ENEMY") && !lua_eq(lua_tableget(_skill, 'ClassName'), "Default")) && (lua_eq(lua_tableget(_skill, 'ClassType'), "Melee") || lua_eq(lua_tableget(_skill, 'ClassType'), "Missile")))) {
          if (lua_lt(0, lua_call(G.str['GetExProp'], [_buff, "ConcentrateCount"])[0])) {
            var _addTrueDamage_10244 = lua_call(G.str['GetExProp'], [_buff, "ConcentrateValue"])[0];
            lua_tableset(_rateTable, 'AddTrueDamage', lua_add(lua_tableget(_rateTable, 'AddTrueDamage'), lua_tablegetcall(G.str['math'], 'floor', [_addTrueDamage_10244])[0]));
            lua_tableset(_ret, 'HitType', G.str['HIT_CONCENTRATE']);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_GroovingMuzzle_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, 'GroovingMuzzle_Buff'])[0], 'YES')) {
        var _rItem_10246 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
        if ((!lua_eq(_rItem_10246, null) && lua_eq(lua_tableget(_rItem_10246, 'ClassType'), "Musket"))) {
          var _addIgnoreDefensesRate_10247 = 0.15;
          lua_tableset(_rateTable, 'AddIgnoreDefensesRate', lua_add(lua_tableget(_rateTable, 'AddIgnoreDefensesRate'), _addIgnoreDefensesRate_10247));
          if ((lua_eq(lua_call(G.str['IsNormalSKillBySkillID'], [_from, lua_tableget(_skill, 'ClassID')])[0], 1) && !lua_eq(lua_tableget(_skill, 'ClassName'), 'Default'))) {
            var _rate_10248 = 3000;
            if (lua_lte(lua_call(G.str['IMCRandom'], [1, 10000])[0], _rate_10248)) {
              lua_call(G.str['SetExProp'], [_from, "IS_CRITICAL", 1]);
              var _hitCount_10249 = 3;
              lua_call(G.str['AddMultipleHitCount'], [_ret, _hitCount_10249]);
              lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 2));
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Skill_MomentaryEvasion_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Skill_MomentaryEvasion_Buff'])[0], 'YES')) {
        tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _buffLv_10251 = tmp[0]; var _buffRate_10251 = tmp[1]; tmp = null;
        if ((lua_lte(10000, _buffRate_10251) || lua_lte(lua_call(G.str['IMCRandom'], [1, 10000])[0], _buffRate_10251))) {
          var _addDodgeRate_10252 = 10000;
          lua_tableset(_rateTable, 'FixedDodgeRate', lua_add(lua_tableget(_rateTable, 'FixedDodgeRate'), _addDodgeRate_10252));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Muleta_Cast_End_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Muleta_Cast_End_Buff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'ClassType'), "Melee")) {
          lua_tableset(_rateTable, 'blkResult', 1);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Drain_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _darkTheurageCount_10256 = lua_call(G.str['GetExProp'], [_from, "DARKTHEURAGE_COUNT"])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Drain_Buff"])[0], "YES")) {
        if ((lua_eq(lua_call(G.str['TryGetProp'], [_skill, "Attribute"])[0], "Dark") && lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ClassType"])[0], "Magic"))) {
          var _addRate_10258 = lua_multiply(_darkTheurageCount_10256, 0.1);
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addRate_10258));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Sleep_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Sleep_Debuff'])[0], 'YES')) {
        var _caster_10260 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10260, null)) {
          var _abilWizard25_10261 = lua_call(G.str['GetAbility'], [_caster_10260, "Wizard25"])[0];
          if (!lua_eq(_abilWizard25_10261, null)) {
            if ((lua_eq(lua_tableget(_skill, 'Attribute'), "Melee") || lua_eq(lua_tableget(_skill, 'Attribute'), "Soul"))) {
              lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 1));
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Gust_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Gust_Debuff'])[0], 'YES')) {
        if (lua_eq(lua_tableget(_skill, 'Attribute'), "Ice")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.1));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Raise_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Raise_Debuff'])[0], 'YES')) {
        lua_tableset(_rateTable, 'EnableDodge', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Link_Party'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Link_Party"])[0], "YES")) {
        var _caster_10270 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10270, null)) {
          var _abilLinker12_10271 = lua_call(G.str['GetAbility'], [_caster_10270, "Linker12"])[0];
          if ((!lua_eq(_abilLinker12_10271, null) && lua_eq(lua_tableget(_skill, 'ClassType'), "Magic"))) {
            var _spiritualChainSkill_10272 = lua_call(G.str['GetSkill'], [_caster_10270, "Linker_SpiritualChain"])[0];
            var _abilAddDamage_10272 = lua_multiply(lua_tableget(_spiritualChainSkill_10272, 'Level'), 0.03);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _abilAddDamage_10272));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_FirePillar_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "FirePillar_Debuff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "StormDust_Debuff"])[0], "YES")) {
          var _hitCount_10275 = 2;
          lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 1));
          lua_call(G.str['AddMultipleHitCount'], [_ret, _hitCount_10275]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_FireWall_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _abilElementalist30_10276 = lua_call(G.str['GetAbility'], [_from, "Elementalist30"])[0];
      if ((!lua_eq(_abilElementalist30_10276, null) && lua_eq(lua_tableget(_abilElementalist30_10276, 'ActiveState'), 1))) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "FireWall_Debuff"])[0], "YES")) {
          if (lua_eq(lua_tableget(_skill, 'ClassName'), "Elementalist_Meteor")) {
            var _hitCount_10279 = 5;
            lua_tableset(_rateTable, 'MultipleHitDamageRate', lua_add(lua_tableget(_rateTable, 'MultipleHitDamageRate'), 0.5));
            lua_call(G.str['AddMultipleHitCount'], [_ret, _hitCount_10279]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SubWeaponCancel_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "SubWeaponCancel_Buff"])[0], "YES")) {
        if (((lua_eq(lua_tableget(_skill, 'ClassName'), "War_JustFramePistol") || lua_eq(lua_tableget(_skill, 'ClassName'), "War_JustFrameAttack")) || lua_eq(lua_tableget(_skill, 'ClassName'), "War_JustFrameDagger"))) {
          var _subWeaponCancelSkill_10282 = lua_call(G.str['GetSkill'], [_from, "Corsair_SubweaponCancel"])[0];
          if (!lua_eq(_subWeaponCancelSkill_10282, null)) {
            var _skillLevel_10283 = lua_call(G.str['TryGetProp'], [_subWeaponCancelSkill_10282, "Level"])[0];
            var _addRate_10283 = lua_add(lua_multiply(_skillLevel_10283, 0.05), 0.3);
            if (lua_lte(0, _addRate_10283)) {
              lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addRate_10283));
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SpiritShock_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "SpiritShock_Debuff"])[0], "YES")) {
        var _caster_10286 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10286, null)) {
          if ((lua_eq(lua_tableget(_skill, 'ClassName'), "Linker_SpiritShock") && lua_eq(lua_call(G.str['IsSameActor'], [_from, _caster_10286])[0], "YES"))) {
            var _abilLinker15_10288 = lua_call(G.str['GetAbility'], [_from, "Linker15"])[0];
            if ((!lua_eq(_abilLinker15_10288, null) && lua_eq(lua_tableget(_abilLinker15_10288, 'ActiveState'), 1))) {
              var _pcMNA_10289 = lua_call(G.str['TryGetProp'], [_from, "MNA"])[0];
              if (lua_lt(_pcMNA_10289, 1)) {
                _pcMNA_10289 = 1;
              }
              var _enemyMNA_10289 = lua_call(G.str['TryGetProp'], [_self, "MNA"])[0];
              if (lua_lt(_enemyMNA_10289, 1)) {
                _enemyMNA_10289 = 1;
              }
              var _abilDamageRate_10289 = (lua_add(1, (lua_divide((lua_add(_pcMNA_10289, 100)), (lua_multiply((lua_add(_enemyMNA_10289, 100)), 2))))));
              if (lua_lt(2, _abilDamageRate_10289)) {
                _abilDamageRate_10289 = 2;
              }
              lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _abilDamageRate_10289));
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SwashBucklingReduceDamage_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "SwashBucklingReduceDamage_Buff"])[0], "YES")) {
        var _abilPeltasta1_10294 = lua_call(G.str['GetAbility'], [_self, "Peltasta1"])[0];
        if ((!lua_eq(_abilPeltasta1_10294, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilPeltasta1_10294, "ActiveState"])[0], 1))) {
          var _abilLv_10295 = lua_call(G.str['TryGetProp'], [_abilPeltasta1_10294, "Level"])[0];
          if (!lua_eq(_abilLv_10295, null)) {
            G.str['reductionRate'] = lua_multiply(_abilLv_10295, 0.05);
            lua_call(G.str['AddDamageReductionRate'], [_rateTable, G.str['reductionRate']]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_SwellLeftArm_Abil_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "SwellLeftArm_Abil_Buff"])[0], "YES")) {
        var _caster_10298 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        if (!lua_eq(_caster_10298, null)) {
          var _abilThaumaturge17_10299 = lua_call(G.str['GetAbility'], [_caster_10298, "Thaumaturge17"])[0];
          if (!lua_eq(_abilThaumaturge17_10299, null)) {
            var _abilDamageRate_10300 = lua_multiply(lua_tableget(_abilThaumaturge17_10299, 'Level'), 0.01);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _abilDamageRate_10300));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Sabbath_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Sabbath_Buff"])[0], "YES")) {
        if ((lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ClassName"])[0], "Warlock_DarkTheurge") || lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ClassName"])[0], "Warlock_Invocation"))) {
          var _sabbath_10303 = lua_call(G.str['GetSkill'], [_from, "Warlock_Sabbath"])[0];
          var _sabbathLv_10303 = lua_call(G.str['TryGetProp'], [_sabbath_10303, "Level"])[0];
          var _sabbathAddDamage_10303 = lua_multiply(_sabbathLv_10303, 0.1);
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _sabbathAddDamage_10303));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_StormDust_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "StormDust_Debuff"])[0], "YES")) {
        if (!lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['GetBuffByProp'], [_self, "Keyword", "Position"])[0], null)) {
            if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MoveType"])[0], "Flying")) {
              var _reductionRate_10308 = 0.5;
              lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10308]);
            }
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_EnchantLightning_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "EnchantLightning_Buff"])[0], "YES")) {
        if ((lua_eq(lua_tableget(_skill, 'ClassType'), "Melee") || lua_eq(lua_tableget(_skill, 'ClassType'), "Missile"))) {
          lua_tableset(_skill, 'Attribute', 'Lightning');
        }
        var _buffCaster_10310 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _abilEnchanter4_10310 = lua_call(G.str['GetAbility'], [_buffCaster_10310, "Enchanter4"])[0];
        if ((!lua_eq(_abilEnchanter4_10310, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilEnchanter4_10310, "ActiveState"])[0], 1))) {
          if (lua_eq(lua_tableget(_skill, 'ClassName'), "Psychokino_PsychicPressure")) {
            lua_tableset(_skill, 'Attribute', 'Lightning');
          }
          if (lua_eq(lua_tableget(_skill, 'ClassName'), "Psychokino_GravityPole")) {
            lua_tableset(_skill, 'Attribute', 'Lightning');
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_FishingNetsDraw_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _addDamageRate_10315 = 0;
      var _abilRetiarii1_10315 = lua_call(G.str['GetAbility'], [_from, "Retiarii1"])[0];
      if ((!lua_eq(_abilRetiarii1_10315, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRetiarii1_10315, "ActiveState"])[0], 1))) {
        lua_tableset(_rateTable, 'EnableDodge', 0);
      }
      var _attackType_10315 = lua_call(G.str['TryGetProp'], [_skill, "AttackType"])[0];
      if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
        var _rightHand_10317 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
        _attackType_10315 = lua_tableget(_rightHand_10317, 'AttackType');
      }
      var _skillJob_10315 = lua_call(G.str['TryGetProp'], [_skill, "Job"])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "FishingNetsDraw_Debuff"])[0], "YES")) {
        if (!lua_eq(_skillJob_10315, "Retiarii")) {
          if (lua_eq(_attackType_10315, "Aries")) {
            var _weapon_10320 = lua_call(G.str['GetEquipItem'], [_from, "RH"])[0];
            if ((lua_eq(lua_call(G.str['TryGetProp'], [_weapon_10320, "ClassType"])[0], "Spear") && lua_eq(lua_call(G.str['TryGetProp'], [_skill, "UseSubweaponDamage"])[0], "NO"))) {
              _addDamageRate_10315 = 1;
            }
          }
        }
      }
      lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10315));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_ThrowingFishingNet_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _addDamageRate_10322 = 0;
      var _abilRetiarii2_10322 = lua_call(G.str['GetAbility'], [_from, "Retiarii2"])[0];
      if ((!lua_eq(_abilRetiarii2_10322, null) && lua_eq(lua_call(G.str['TryGetProp'], [_abilRetiarii2_10322, "ActiveState"])[0], 1))) {
        lua_tableset(_rateTable, 'EnableDodge', 0);
      }
      var _attackType_10322 = lua_call(G.str['TryGetProp'], [_skill, "AttackType"])[0];
      if ((lua_eq(lua_call(G.str['IS_PC'], [_from])[0], true) && lua_lt(lua_tableget(_skill, 'ClassID'), 10000))) {
        var _rightHand_10324 = lua_call(G.str['GetEquipItem'], [_from, 'RH'])[0];
        _attackType_10322 = lua_tableget(_rightHand_10324, 'AttackType');
      }
      var _skillJob_10322 = lua_call(G.str['TryGetProp'], [_skill, "Job"])[0];
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "ThrowingFishingNet_Debuff"])[0], "YES")) {
        if (!lua_eq(_skillJob_10322, "Retiarii")) {
          if (lua_eq(_attackType_10322, "Aries")) {
            var _weapon_10327 = lua_call(G.str['GetEquipItem'], [_from, "RH"])[0];
            if ((lua_eq(lua_call(G.str['TryGetProp'], [_weapon_10327, "ClassType"])[0], "Spear") && lua_eq(lua_call(G.str['TryGetProp'], [_skill, "UseSubweaponDamage"])[0], "NO"))) {
              _addDamageRate_10322 = 1;
            }
          }
        }
      }
      lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10322));
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Demon_DMG_DOWN_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Potion_Demon_DMG_DOWN_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "RaceType"])[0], "Velnias")) {
            var _buffarg1_10332 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10332]);
            var _reductionRate_10332 = lua_divide(_buffarg1_10332, 100);
            lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10332]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_MIX_DMG_DOWN_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Potion_MIX_DMG_DOWN_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "RaceType"])[0], "Paramune")) {
            var _buffarg1_10336 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10336]);
            var _reductionRate_10336 = lua_divide(_buffarg1_10336, 100);
            lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10336]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Bug_DMG_DOWN_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Potion_Bug_DMG_DOWN_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "RaceType"])[0], "Klaida")) {
            var _buffarg1_10340 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10340]);
            var _reductionRate_10340 = lua_divide(_buffarg1_10340, 100);
            lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10340]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Plant_DMG_DOWN_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Potion_Plant_DMG_DOWN_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "RaceType"])[0], "Forester")) {
            var _buffarg1_10344 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10344]);
            var _reductionRate_10344 = lua_divide(_buffarg1_10344, 100);
            lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10344]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Wild_DMG_DOWN_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Potion_Wild_DMG_DOWN_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_from, "RaceType"])[0], "Widling")) {
            var _buffarg1_10348 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10348]);
            var _reductionRate_10348 = lua_divide(_buffarg1_10348, 100);
            lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10348]);
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Demon_DMG_UP_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Potion_Demon_DMG_UP_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Velnias")) {
            var _buffarg1_10352 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10352]);
            var _addDamageRate_10352 = lua_divide(_buffarg1_10352, 100);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10352));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_MIX_DMG_UP_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Potion_MIX_DMG_UP_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Paramune")) {
            var _buffarg1_10356 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10356]);
            var _addDamageRate_10356 = lua_divide(_buffarg1_10356, 100);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10356));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Bug_DMG_UP_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Potion_Bug_DMG_UP_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Klaida")) {
            var _buffarg1_10360 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10360]);
            var _addDamageRate_10360 = lua_divide(_buffarg1_10360, 100);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10360));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Plant_DMG_UP_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Potion_Plant_DMG_UP_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Forester")) {
            var _buffarg1_10364 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10364]);
            var _addDamageRate_10364 = lua_divide(_buffarg1_10364, 100);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10364));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Potion_Wild_DMG_UP_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Potion_Wild_DMG_UP_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "MonRank"])[0], "Boss")) {
          if (lua_eq(lua_call(G.str['TryGetProp'], [_self, "RaceType"])[0], "Widling")) {
            var _buffarg1_10368 = lua_call(G.str['GetBuffArg'], [_buff])[0];
            lua_call(G.str['tonumber'], [_buffarg1_10368]);
            var _addDamageRate_10368 = lua_divide(_buffarg1_10368, 100);
            lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10368));
          }
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_CARD_MON_DMG_Rate_Down_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "CARD_MON_DMG_Rate_Down_Buff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['IS_PC'], [_from])[0], false)) {
          var _buffarg1_10371 = lua_call(G.str['GetBuffArg'], [_buff])[0];
          lua_call(G.str['tonumber'], [_buffarg1_10371]);
          var _reductionRate_10371 = lua_divide((lua_tablegetcall(G.str['math'], 'floor', [lua_multiply(_buffarg1_10371, 3)])[0]), 100);
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10371]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Tiksline_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      var _buffCaster_10372 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      var _topOwner_10372 = lua_call(G.str['GetTopOwner'], [_from])[0];
      if (lua_eq(lua_call(G.str['IsSameActor'], [_buffCaster_10372, _topOwner_10372])[0], "YES")) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Tiksline_Debuff"])[0], "YES")) {
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), 0.5));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Kraujas_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, lua_tableget(_buff, 'ClassName')])[0], "YES")) {
        var _buffOver_10376 = lua_call(G.str['GetBuffOver'], [_from, lua_tableget(_buff, 'ClassName')])[0];
        var _increaseRate_10376 = lua_multiply(_buffOver_10376, 0.1);
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _increaseRate_10376));
      } else if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, lua_tableget(_buff, 'ClassName')])[0], "YES")) {
        var _buffOver_10377 = lua_call(G.str['GetBuffOver'], [_self, lua_tableget(_buff, 'ClassName')])[0];
        var _increaseRate_10377 = lua_multiply(_buffOver_10377, 0.2);
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _increaseRate_10377));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_COSTUME_VELCOFFER_SET'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "COSTUME_VELCOFFER_SET"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], 'd_raidboss_velcoffer')) {
          var _reductionRate_10380 = 0.1;
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10380]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Guardian_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Guardian_Buff"])[0], "YES")) {
        var _abilPeltasta33_10382 = lua_call(G.str['GetAbility'], [_self, "Peltasta33"])[0];
        if ((!lua_eq(_abilPeltasta33_10382, null) && lua_eq(lua_tableget(_abilPeltasta33_10382, 'ActiveState'), 1))) {
          var _reductionRate_10383 = 0.2;
          lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10383]);
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Lullaby_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Lullaby_Debuff"])[0], "YES")) {
        lua_tableset(_rateTable, 'EnableDodge', 0);
        lua_tableset(_rateTable, 'EnableBlock', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Engkrateia_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Engkrateia_Buff'])[0], 'YES')) {
        var _skillLv_10387 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _reductionRate_10387 = lua_multiply(_skillLv_10387, 0.05);
        if ((lua_eq(lua_call(G.str['TryGetProp'], [_skill, "Attribute"])[0], "Dark") || lua_eq(lua_call(G.str['TryGetProp'], [_from, "RaceType"])[0], "Velnias"))) {
          _reductionRate_10387 = lua_multiply(_reductionRate_10387, 1.5);
        }
        if (lua_lte(1, _reductionRate_10387)) {
          _reductionRate_10387 = 0.99;
        }
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, _reductionRate_10387]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Fluting_DeBuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "Fluting_DeBuff"])[0], "YES")) {
        lua_tableset(_rateTable, 'EnableDodge', 0);
        lua_tableset(_rateTable, 'EnableBlock', 0);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_LatentVenom_Debuff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "LatentVenom_Debuff"])[0], "YES")) {
        if (lua_eq(lua_call(G.str['TryGetProp'], [_skill, "ClassName"])[0], "Wugushi_LatentVenom")) {
          var _cnt_10394 = lua_call(G.str['GetExProp'], [_buff, "LatentVenom_Debuff_OVER"])[0];
          var _addDamageRate_10394 = lua_multiply(_cnt_10394, 0.03);
          lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10394));
        }
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Gregorate_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Gregorate_Buff"])[0], "YES")) {
        var _addDamageRate_10396 = lua_call(G.str['GetExProp'], [_buff, "REMOVE_BUFF_COUNT_BY_GREGORATE"])[0];
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), (lua_multiply(_addDamageRate_10396, 0.5))));
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_TheTreeOfSepiroth_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "TheTreeOfSepiroth_Buff"])[0], "YES")) {
        lua_call(G.str['AddDamageReductionRate'], [_rateTable, 0.5]);
      }
      return [];
    })
    G.str['SCR_BUFF_RATETABLE_Lycanthropy_Half_Buff'] = (function (_self, _from, _skill, _atk, _ret, _rateTable, _buff) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_from, "Lycanthropy_Half_Buff"])[0], "YES")) {
        var _addDamageRate_10400 = 0;
        var _buffLv_10400 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        if (lua_eq(lua_tableget(_skill, 'ClassType'), "Magic")) {
          _addDamageRate_10400 = lua_multiply(_buffLv_10400, 0.06);
        } else if ((lua_eq(lua_tableget(_skill, 'ClassType'), "Melee") || lua_eq(lua_tableget(_skill, 'ClassType'), "Missile"))) {
          _addDamageRate_10400 = lua_multiply(_buffLv_10400, 0.04);
        }
        lua_tableset(_rateTable, 'DamageRate', lua_add(lua_tableget(_rateTable, 'DamageRate'), _addDamageRate_10400));
      }
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_UC_bound'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_UC_sleep'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _count_10404 = lua_call(G.str['GetExProp'], [_buff, "UC_sleep_COUNT"])[0];
      _count_10404 = lua_subtract(_count_10404, 1);
      if (lua_lte(_count_10404, 0)) {
        return [0];
      }
      lua_call(G.str['SetExProp'], [_buff, "UC_sleep_COUNT", _count_10404]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_UC_petrify'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(9000, lua_call(G.str['IMCRandom'], [1, 10000])[0])) {
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Ability_buff_Antimage'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _skill_10409 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(_skill_10409, null)) {
        if (lua_eq(lua_tableget(_skill_10409, 'ClassType'), 'Magic')) {
          var _healHP_10411 = lua_multiply(lua_tableget(_self, 'MHP'), 0.1);
          lua_call(G.str['Heal'], [_self, lua_tablegetcall(G.str['math'], 'floor', [_healHP_10411])[0], 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Ability_buff_Antiwarrior'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _skill_10412 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(_skill_10412, null)) {
        if ((lua_eq(lua_tableget(_skill_10412, 'ClassType'), 'Melee') || lua_eq(lua_tableget(_skill_10412, 'ClassType'), 'Missile'))) {
          var _healHP_10414 = lua_multiply(lua_tableget(_self, 'MHP'), 0.1);
          lua_call(G.str['Heal'], [_self, lua_tablegetcall(G.str['math'], 'floor', [_healHP_10414])[0], 0]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_UC_deprotect'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'UC_armorbreak'])[0], 'YES')) {
        return [0];
      } else {
        return [1];
      }
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_sorcerer_bat'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsDead'], [_attacker])[0], 0)) {
        lua_call(G.str['ATTACK_SORCERER_BAT'], [_self, _buff, _attacker]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_CHAPLE576_MQ_08'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(lua_call(G.str['GetHpPercent'], [_self])[0], 0.5)) {
        if (lua_lt(1, lua_call(G.str['IMCRandomFloat'], [1, 2])[0])) {
          lua_call(G.str['SetOwner'], [_self, _attacker, 1]);
          lua_call(G.str['SetCurrentFaction'], [_self].concat(lua_call(G.str['GetCurrentFaction'], [_attacker])));
          lua_call(G.str['AddBuff'], [_self, _self, 'COMMON_BUFF_DEAD', 1, 0, 15000, 1]);
          lua_call(G.str['RemoveBuff'], [_self, 'CHAPLE576_MQ_08']);
          lua_call(G.str['RunSimpleAIOnly'], [_self, 'CHAPLE576_MQ_08']);
          if (lua_eq(lua_tableget(_attacker, 'ClassName'), 'PC')) {
            var _result_10423 = lua_call(G.str['SCR_QUEST_CHECK'], [_attacker, 'CHAPLE576_MQ_08'])[0];
            if (lua_eq(_result_10423, 'PROGRESS')) {
              lua_call(G.str['SCR_PARTY_QUESTPROP_ADD'], [_attacker, 'SSN_CHAPLE576_MQ_08', 'QuestInfoValue1', 1]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Rest'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_SitRest'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_UnlockChest_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_GuardImpact'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_SelfHeal'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _damBuff_10429 = lua_call(G.str['GetExProp_Str'], [_buff, "BUFFWHENDAMAGE"])[0];
      if (!lua_eq(_damBuff_10429, "None")) {
        var _time_10430 = lua_call(G.str['GetExProp'], [_buff, "DAMBUFFTIME"])[0];
        lua_call(G.str['AddBuff'], [_self, _self, _damBuff_10429, 1, 0, _time_10430, 1]);
        lua_call(G.str['SetExProp_Str'], [_buff, "BUFFWHENDAMAGE", "None"]);
      }
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Cloaking_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(0, _damage)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_ShinobiCloaking_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(0, _damage)) {
        return [0];
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Sleep_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _count_10435 = lua_call(G.str['GetExProp'], [_self, "TAKEDMG_COUNT"])[0];
      if (lua_lt(_count_10435, 1)) {
        return [0];
      }
      lua_call(G.str['SetExProp'], [_self, "TAKEDMG_COUNT", lua_subtract(_count_10435, 1)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Conversion_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) || !lua_eq(lua_tableget(_self, 'MonRank'), 'Normal'))) {
        return [1];
      }
      if (lua_eq(lua_call(G.str['GetZoneName'], [_self])[0], "mission_groundtower_1")) {
        return [1];
      }
      var _caster_10437 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(lua_call(G.str['IsSameObject'], [_caster_10437, _attacker])[0], 1)) {
        var _mhp_10440 = lua_tableget(_self, 'MHP');
        G.str['rate'] = lua_multiply((lua_divide(_damage, _mhp_10440)), 100);
        var _casterLv_10440 = lua_tableget(_caster_10437, 'Lv');
        var _selfLv_10440 = lua_tableget(_self, 'Lv');
        var _sublv_10440 = lua_subtract(_casterLv_10440, _selfLv_10440);
        var _penalty_10440 = 0;
        if (lua_lt(_sublv_10440, 0)) {
          _penalty_10440 = lua_multiply(_sublv_10440, 0.1);
        }
        G.str['rate'] = lua_subtract(G.str['rate'], (lua_multiply(G.str['rate'], _penalty_10440)));
        tmp = lua_call(G.str['GetBuffArg'], [_buff]); var _bufflv_10440 = tmp[0]; var _arg2_10440 = tmp[1]; tmp = null;
        if (lua_lt(1, _bufflv_10440)) {
          var var_10443 = 2, stop_10443 = lua_assertfloat(_bufflv_10440);
          for (; var_10443 <= stop_10443; var_10443++) {
            var _i_10443 = var_10443;
            G.str['rate'] = lua_add(G.str['rate'], (lua_multiply(G.str['rate'], 0.1)));
          }
        }
        if ((lua_lt(lua_call(G.str['IMCRandomFloat'], [0, 100])[0], G.str['rate']) && !lua_eq(lua_tableget(_self, 'Size'), "XL"))) {
          if (lua_lt(0, lua_tableget(_self, 'HP'))) {
            tmp = lua_call(G.str['GetConversionList'], [_caster_10437]); var _list_10446 = tmp[0]; var _cnt_10446 = tmp[1]; tmp = null;
            var _skill_10446 = lua_call(G.str['GetSkill'], [_caster_10437, "Paladin_Conversion"])[0];
            if (!lua_eq(_skill_10446, null)) {
              if (lua_lte(_bufflv_10440, _cnt_10446)) {
                return [1];
              }
              lua_call(G.str['SetOwner'], [_self, _caster_10437, 1]);
              lua_call(G.str['RunSimpleAI'], [_self, 'follow_mon']);
              lua_tableset(_self, 'BTree', 'None');
              lua_call(G.str['SetHookMsgOwner'], [_self, _caster_10437]);
              lua_call(G.str['SetCurrentFaction'], [_self].concat(lua_call(G.str['GetCurrentFaction'], [_caster_10437])));
              lua_call(G.str['AddBuff'], [_caster_10437, _self, "Conversion_Buff", 1, 0, 600000]);
              lua_call(G.str['AddConversionList'], [_caster_10437, _self]);
              lua_call(G.str['RemoveHate'], [_self, _caster_10437]);
              lua_call(G.str['SkillCancel'], [_self]);
              var _abil_10447 = lua_call(G.str['GetAbility'], [_caster_10437, 'Paladin6'])[0];
              if (!lua_eq(_abil_10447, null)) {
                var _pcSTR_10449 = lua_tableget(_caster_10437, 'STR');
                lua_tableset(_self, 'PATK_BM', lua_add(lua_tableget(_self, 'PATK_BM'), (lua_multiply(_pcSTR_10449, 0.5))));
              }
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Burrow'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      lua_call(G.str['HOLD_MON_SCP'], [_self, 4000]);
      return [0];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_item_set_016pre_buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _skill_10451 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(_skill_10451, null)) {
        if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_eq(lua_tableget(_skill_10451, 'Attribute'), 'Dark'))) {
          var _result_10453 = lua_call(G.str['IMCRandom'], [1, 100])[0];
          if (lua_eq(_result_10453, 1)) {
            lua_call(G.str['AddBuff'], [_self, _self, 'item_set_016_buff', 1, 0, 5000, 1]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_item_set_038pre_buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _skill_10455 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(_skill_10455, null)) {
        if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_eq(lua_tableget(_attacker, 'RaceType'), 'Velnias'))) {
          var _result_10457 = lua_call(G.str['IMCRandom'], [1, 100])[0];
          if (lua_lte(_result_10457, 5)) {
            if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, "item_set_038_buff"])[0], "NO")) {
              lua_call(G.str['AddBuff'], [_self, _self, 'item_set_038_buff']);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_item_set_013pre_buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'item_set_013pre_buff'])[0], 'YES')) {
        var _skill_10461 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
        if (!lua_eq(_skill_10461, null)) {
          if ((lua_eq(lua_call(G.str['IS_PC'], [_self])[0], true) && lua_eq(lua_tableget(_skill_10461, 'Attribute'), 'Earth'))) {
            lua_call(G.str['AddBuff'], [_self, _self, 'item_set_013_buff', 1, 0, 10000, 1]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_ReflectShield_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _spendSP_10464 = lua_call(G.str['GetExProp'], [_self, "REFLECTSHIELD_SPENDSP"])[0];
      var _currentSP_10464 = lua_call(G.str['GetExProp'], [_self, "REFLECTSHIELD_CURRENTSP"])[0];
      if (lua_lte(_currentSP_10464, _spendSP_10464)) {
        return [1];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'ReflectShield_Buff'])[0], 'YES') && lua_eq(lua_call(G.str['IsSameActor'], [_self, _attacker])[0], "NO"))) {
        var _shieldLv_10467 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _count_10467 = _shieldLv_10467;
        var _attackedCount_10467 = lua_call(G.str['tonumber'], lua_call(G.str['GetExProp'], [_buff, "ATTACKED_COUNT"]))[0];
        lua_call(G.str['SetExProp'], [_buff, "ATTACKED_COUNT", lua_add(_attackedCount_10467, 1)]);
        lua_call(G.str['AddSP'], [_self, lua_unm(_spendSP_10464)]);
        if (lua_lte(_count_10467, lua_add(_attackedCount_10467, 1))) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_MissileHole_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lt(_damage, 0)) {
        return [1];
      }
      var _skill_10469 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'MissileHole_Buff'])[0], 'YES') && (lua_eq(lua_tableget(_skill_10469, 'HitType'), 'Force') || lua_eq(lua_tableget(_skill_10469, 'ClassType'), 'Missile')))) {
        var _skillLv_10471 = lua_call(G.str['GetBuffArg'], [_buff])[0];
        var _count_10471 = lua_add(4, lua_multiply((lua_subtract(_skillLv_10471, 1)), 3));
        var _attackedCount_10471 = lua_call(G.str['tonumber'], lua_call(G.str['GetExProp'], [_buff, "MISSILEHOLE_ATTACKED_COUNT"]))[0];
        if (lua_eq(lua_call(G.str['IS_PC'], [_attacker])[0], true)) {
          lua_call(G.str['SetExProp'], [_buff, "MISSILEHOLE_ATTACKED_COUNT", lua_add(_attackedCount_10471, 3)]);
        } else {
          lua_call(G.str['SetExProp'], [_buff, "MISSILEHOLE_ATTACKED_COUNT", lua_add(_attackedCount_10471, 1)]);
        }
        if (lua_lte(_count_10471, lua_add(_attackedCount_10471, 1))) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_HereticsFork_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _skill_10475 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(lua_tableget(_skill_10475, 'ClassName'), "Inquisitor_HereticsFork")) {
        var _damage_10476 = lua_call(G.str['GetExProp'], [_buff, "HERETICSFORK_DAMAGE"])[0];
        var _addDamage_10476 = lua_multiply(_damage_10476, 0.1);
        lua_call(G.str['SetExProp'], [_buff, "HERETICSFORK_DAMAGE", lua_add(_damage_10476, _addDamage_10476)]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_IronBoots_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _mspdadd_10477 = lua_call(G.str['GetExProp'], [_buff, "ADD_MSPD"])[0];
      _mspdadd_10477 = lua_add(_mspdadd_10477, lua_multiply(_mspdadd_10477, 0.01));
      lua_call(G.str['SetExProp'], [_buff, "ADD_MSPD", _mspdadd_10477]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_PearofAnguish_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _remainTime_10478 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
      lua_call(G.str['SetBuffRemainTime'], [_self, lua_tableget(_buff, 'ClassName'), lua_subtract(_remainTime_10478, 300)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Savior_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      return lua_call(G.str['UPDATE_SHIELD_BUFF_DAMAGE'], [_self, _buff, _sklID, _damage, _attacker, _ret]);
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_TSW03_111_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      return lua_call(G.str['UPDATE_SHIELD_BUFF_DAMAGE'], [_self, _buff, _sklID, _damage, _attacker, _ret]);
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Mon_Shield'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      return lua_call(G.str['UPDATE_SHIELD_BUFF_DAMAGE'], [_self, _buff, _sklID, _damage, _attacker, _ret]);
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Exchange'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      return lua_call(G.str['UPDATE_SHIELD_BUFF_DAMAGE'], [_self, _buff, _sklID, _damage, _attacker, _ret]);
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_spector_shield'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      return lua_call(G.str['UPDATE_SHIELD_BUFF_DAMAGE'], [_self, _buff, _sklID, _damage, _attacker, _ret]);
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_JincanGu_Debuff'] = (function (_self, _buff, _sklID, _damage, _target, _ret) {
      var tmp;
      var _sklCls_10484 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      var _caster_10484 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if ((!lua_eq(_sklCls_10484, null) && !lua_eq(lua_tableget(_sklCls_10484, 'ClassName'), "Wugushi_JincanGu"))) {
        var _skl_10485 = lua_call(G.str['GetSkill'], [_caster_10484, "Wugushi_JincanGu"])[0];
        if (!lua_eq(_skl_10485, null)) {
          if (lua_lte(lua_call(G.str['IMCRandom'], [1, 100])[0], 10)) {
            var _count_10487 = lua_call(G.str['GetExProp'], [_buff, "Wugushi_JincanGu_COUNT"])[0];
            if ((lua_lt(_count_10487, lua_tableget(_skl_10485, 'Level')) && lua_lt(_count_10487, 5))) {
              lua_call(G.str['SetExProp'], [_buff, "Wugushi_JincanGu_COUNT", lua_add(_count_10487, 1)]);
              lua_call(G.str['RunScript'], ["SCR_WUGUSHI_JINCANGU", _self, _sklID, _damage, _caster_10484, null, null, null]);
            }
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Tase_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _caster_10489 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_10489, null)) {
        return [0];
      }
      var _taseSkill_10489 = lua_call(G.str['GetSkill'], [_caster_10489, 'Bulletmarker_Tase'])[0];
      if (lua_eq(_taseSkill_10489, null)) {
        return [0];
      }
      var _attackerSkill_10489 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (lua_eq('Bulletmarker_Tase', lua_call(G.str['TryGetProp'], [_attackerSkill_10489, 'ClassName'])[0])) {
        return [1];
      }
      var _atk_10489 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_10489, _self, 'Bulletmarker_Tase'])[0];
      lua_call(G.str['TakeDadak'], [_caster_10489, _self, 'Bulletmarker_Tase', _atk_10489, 0.15, lua_tableget(_taseSkill_10489, 'Attribute'), lua_tableget(_taseSkill_10489, 'AttackType'), lua_tableget(_taseSkill_10489, 'ClassType'), G.str['HIT_LIGHTNING'], G.str['HITRESULT_NO_HITSCP']]);
      var _atkCount_10489 = lua_call(G.str['GetExProp'], [_buff, "TaseAttackCount"])[0];
      _atkCount_10489 = lua_subtract(_atkCount_10489, 1);
      if (lua_lte(_atkCount_10489, 0)) {
        return [0];
      }
      lua_call(G.str['SetExProp'], [_buff, "TaseAttackCount", _atkCount_10489]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_SnipersSerenity_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _remainTime_10495 = lua_call(G.str['GetBuffRemainTime'], [_buff])[0];
      lua_call(G.str['SetBuffRemainTime'], [_self, "SnipersSerenity_Buff", lua_subtract(_remainTime_10495, 1000)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_DeathVerdict_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lt(0, _damage)) {
        var _cumulativeDamage_10498 = lua_call(G.str['GetBuffArgs'], [_buff])[0];
        _cumulativeDamage_10498 = lua_add(_cumulativeDamage_10498, _damage);
        lua_call(G.str['SetBuffArgs'], [_buff, _cumulativeDamage_10498, 0, 0]);
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Enervation_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _caster_10499 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
      if (lua_eq(_caster_10499, null)) {
        return [0];
      }
      var _buffSkillName_10499 = 'Featherfoot_Enervation';
      var _buffSkill_10499 = lua_call(G.str['GetSkill'], [_caster_10499, _buffSkillName_10499])[0];
      if (lua_eq(_buffSkill_10499, null)) {
        return [0];
      }
      var _attackerSkill_10499 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (lua_eq(lua_tableget(_attackerSkill_10499, 'ClassName'), _buffSkillName_10499)) {
        return [1];
      }
      var _atk_10499 = lua_call(G.str['GET_SKL_DAMAGE'], [_caster_10499, _self, _buffSkillName_10499])[0];
      var _atkCount_10499 = lua_call(G.str['GetExProp'], [_buff, "EnervationAttackCount"])[0];
      lua_call(G.str['TakeDamage'], [_caster_10499, _self, _buffSkillName_10499, _atk_10499, lua_tableget(_buffSkill_10499, 'Attribute'), lua_tableget(_buffSkill_10499, 'AttackType'), lua_tableget(_buffSkill_10499, 'ClassType'), G.str['HIT_LIGHTNING'], G.str['HITRESULT_NO_HITSCP']]);
      _atkCount_10499 = lua_subtract(_atkCount_10499, 1);
      if (lua_lte(_atkCount_10499, 0)) {
        return [0];
      }
      lua_call(G.str['SetExProp'], [_buff, "EnervationAttackCount", _atkCount_10499]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Muleta_Cast_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lt(0, _damage)) {
        if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Muleta_Cast_Buff'])[0], 'YES')) {
          var _canCounter_10507 = 0;
          var _abilMatador8_10507 = lua_call(G.str['GetAbility'], [_self, 'Matador8'])[0];
          if ((!lua_eq(_abilMatador8_10507, null) && lua_eq(lua_tableget(_abilMatador8_10507, 'ActiveState'), 1))) {
            _canCounter_10507 = 1;
          } else {
            var _attackerSkill_10509 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
            var _classType_10509 = lua_call(G.str['TryGetProp'], [_attackerSkill_10509, 'ClassType'])[0];
            var _attackType_10509 = lua_call(G.str['TryGetProp'], [_attackerSkill_10509, 'AttackType'])[0];
            if ((lua_eq(_classType_10509, 'Melee') && (((lua_eq(_attackType_10509, 'None') || lua_eq(_attackType_10509, 'Slash')) || lua_eq(_attackType_10509, 'Aries')) || lua_eq(_attackType_10509, 'Strike')))) {
              _canCounter_10507 = 1;
            }
          }
          if (lua_eq(_canCounter_10507, 1)) {
            lua_tableset(_ret, 'HitType', G.str['HIT_REFLECT']);
            lua_tableset(_ret, 'Damage', 0);
            return [0];
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Tiksline_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker, _ret) {
      var tmp;
      if (lua_lt(0, _damage)) {
        var _buffCaster_10513 = lua_call(G.str['GetBuffCaster'], [_buff])[0];
        var _attackerTopOwner_10513 = lua_call(G.str['GetTopOwner'], [_attacker])[0];
        if (lua_eq(lua_call(G.str['IsSameActor'], [_buffCaster_10513, _attackerTopOwner_10513])[0], "YES")) {
          if (lua_eq(lua_call(G.str['IsBuffApplied'], [_self, lua_tableget(_buff, 'ClassName')])[0], "YES")) {
            var _accumulatedDamage_10515 = lua_add(_damage, lua_call(G.str['GetExProp'], [_buff, "Tiksline_accumulatedDamage"])[0]);
            lua_call(G.str['SetExProp'], [_buff, "Tiksline_accumulatedDamage", _accumulatedDamage_10515]);
          }
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Seedbomb_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      if ((lua_eq(lua_call(G.str['IsBuffApplied'], [_self, 'Seedbomb_Buff'])[0], 'YES') && lua_eq(lua_call(G.str['IsSameActor'], [_self, _attacker])[0], "NO"))) {
        var _attackedCount_10518 = lua_call(G.str['tonumber'], lua_call(G.str['GetExProp'], [_buff, "SEEDBOMB_COUNT"]))[0];
        if (lua_eq(_attackedCount_10518, 1)) {
          return [0];
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Lullaby_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _skill_10520 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      var _wiegenlied_10520 = lua_call(G.str['GetSkill'], [_attacker, "PiedPiper_Wiegenlied"])[0];
      var _buffTime_10520 = lua_add(5000, (lua_multiply(lua_tableget(_wiegenlied_10520, 'Level'), 1000)));
      if (lua_eq(lua_call(G.str['IsPVPServer'], [_self])[0], 1)) {
        _buffTime_10520 = lua_divide(_buffTime_10520, 2);
      }
      var _count_10520 = lua_call(G.str['GetExProp'], [_buff, "TAKEDMG_LULLABY_COUNT"])[0];
      if (lua_lt(_count_10520, 2)) {
        lua_call(G.str['AddBuff'], [_attacker, _self, "Wiegenlied_Debuff", 1, 0, _buffTime_10520, 1]);
        return [0];
      }
      lua_call(G.str['SetExProp'], [_buff, "TAKEDMG_LULLABY_COUNT", lua_subtract(_count_10520, 1)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_Marschierendeslied_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      var _count_10523 = lua_call(G.str['GetExProp'], [_buff, "MARSCHIERN_COUNT"])[0];
      if (lua_lt(_count_10523, 1)) {
        return [0];
      }
      lua_call(G.str['SetExProp'], [_buff, "MARSCHIERN_COUNT", lua_subtract(_count_10523, 1)]);
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_LatentVenom_Debuff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_lte(_damage, 0)) {
        return [1];
      }
      var _skill_10525 = lua_call(G.str['GetClassByType'], ["Skill", _sklID])[0];
      if (!lua_eq(_skill_10525, null)) {
        if (lua_eq(lua_tableget(_skill_10525, 'ClassName'), "Wugushi_LatentVenom")) {
          var _cnt_10528 = lua_call(G.str['GetExProp'], [_buff, "LatentVenom_Debuff_OVER"])[0];
          if (lua_lte(99, _cnt_10528)) {
            return [0];
          }
          lua_call(G.str['SetExProp'], [_buff, "LatentVenom_Debuff_OVER", lua_add(_cnt_10528, 1)]);
        }
      }
      return [1];
      return [];
    })
    G.str['SCR_BUFF_TAKEDMG_WideMiasma_Buff'] = (function (_self, _buff, _sklID, _damage, _attacker) {
      var tmp;
      if (lua_eq(_sklID, 30509)) {
        return [1];
      } else if (!lua_eq(_sklID, 30509)) {
        return [0];
      } else {
        return [0];
      }
      return [];
    })
    G.str['EXIT_BUFF'] = (function (_self, _buff) {
      var tmp;
      return [0];
      return [];
    })
    G.str['SCR_BUFF_USESKILL_Burrow'] = (function (_self, _buff, _sklID, _arg2) {
      var tmp;
      return lua_call(G.str['EXIT_BUFF'], [_self, _buff]);
      return [];
    })
    G.str['SCR_BUFF_USESKILL_QuickCast_After_Buff'] = (function (_self, _buff, _sklID, _arg2) {
      var tmp;
      return lua_call(G.str['EXIT_BUFF'], [_self, _buff]);
      return [];
    })
  };
  return [G];
})()[0];
